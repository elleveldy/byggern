
ATmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800200  00002054  000020e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002054  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  0080028e  0080028e  00002176  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002176  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000448  00000000  00000000  000021d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e88  00000000  00000000  0000261a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000148c  00000000  00000000  000054a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ecb  00000000  00000000  0000692e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009a4  00000000  00000000  000087fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a8a  00000000  00000000  000091a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000016d8  00000000  00000000  00009c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000348  00000000  00000000  0000b302  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	43 c1       	rjmp	.+646    	; 0x288 <__ctors_end>
       2:	00 00       	nop
       4:	61 c1       	rjmp	.+706    	; 0x2c8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c1       	rjmp	.+702    	; 0x2c8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c1       	rjmp	.+698    	; 0x2c8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c1       	rjmp	.+694    	; 0x2c8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c1       	rjmp	.+690    	; 0x2c8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c1       	rjmp	.+686    	; 0x2c8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c1       	rjmp	.+682    	; 0x2c8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c1       	rjmp	.+678    	; 0x2c8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c1       	rjmp	.+674    	; 0x2c8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c1       	rjmp	.+670    	; 0x2c8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c1       	rjmp	.+666    	; 0x2c8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c1       	rjmp	.+662    	; 0x2c8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c1       	rjmp	.+658    	; 0x2c8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c1       	rjmp	.+654    	; 0x2c8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c1       	rjmp	.+650    	; 0x2c8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c1       	rjmp	.+646    	; 0x2c8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c1       	rjmp	.+642    	; 0x2c8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c1       	rjmp	.+638    	; 0x2c8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c1       	rjmp	.+634    	; 0x2c8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c1       	rjmp	.+630    	; 0x2c8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c1       	rjmp	.+626    	; 0x2c8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c1       	rjmp	.+622    	; 0x2c8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c1       	rjmp	.+618    	; 0x2c8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c1       	rjmp	.+614    	; 0x2c8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c1       	rjmp	.+610    	; 0x2c8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c1       	rjmp	.+606    	; 0x2c8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c1       	rjmp	.+602    	; 0x2c8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c1       	rjmp	.+598    	; 0x2c8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c1       	rjmp	.+594    	; 0x2c8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c1       	rjmp	.+590    	; 0x2c8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c1       	rjmp	.+586    	; 0x2c8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c1       	rjmp	.+582    	; 0x2c8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c1       	rjmp	.+578    	; 0x2c8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c1       	rjmp	.+574    	; 0x2c8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1d c1       	rjmp	.+570    	; 0x2c8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1b c1       	rjmp	.+566    	; 0x2c8 <__bad_interrupt>
      92:	00 00       	nop
      94:	19 c1       	rjmp	.+562    	; 0x2c8 <__bad_interrupt>
      96:	00 00       	nop
      98:	17 c1       	rjmp	.+558    	; 0x2c8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6c c6       	rjmp	.+3288   	; 0xd76 <__vector_39>
      9e:	00 00       	nop
      a0:	13 c1       	rjmp	.+550    	; 0x2c8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	11 c1       	rjmp	.+546    	; 0x2c8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0f c1       	rjmp	.+542    	; 0x2c8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0d c1       	rjmp	.+538    	; 0x2c8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0b c1       	rjmp	.+534    	; 0x2c8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	09 c1       	rjmp	.+530    	; 0x2c8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	07 c1       	rjmp	.+526    	; 0x2c8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	05 c1       	rjmp	.+522    	; 0x2c8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	03 c1       	rjmp	.+518    	; 0x2c8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	01 c1       	rjmp	.+514    	; 0x2c8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ff c0       	rjmp	.+510    	; 0x2c8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fd c0       	rjmp	.+506    	; 0x2c8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fb c0       	rjmp	.+502    	; 0x2c8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f9 c0       	rjmp	.+498    	; 0x2c8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f7 c0       	rjmp	.+494    	; 0x2c8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f5 c0       	rjmp	.+490    	; 0x2c8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f3 c0       	rjmp	.+486    	; 0x2c8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d6 06       	cpc	r13, r22
      e6:	28 07       	cpc	r18, r24
      e8:	28 07       	cpc	r18, r24
      ea:	28 07       	cpc	r18, r24
      ec:	28 07       	cpc	r18, r24
      ee:	28 07       	cpc	r18, r24
      f0:	28 07       	cpc	r18, r24
      f2:	28 07       	cpc	r18, r24
      f4:	d6 06       	cpc	r13, r22
      f6:	28 07       	cpc	r18, r24
      f8:	28 07       	cpc	r18, r24
      fa:	28 07       	cpc	r18, r24
      fc:	28 07       	cpc	r18, r24
      fe:	28 07       	cpc	r18, r24
     100:	28 07       	cpc	r18, r24
     102:	28 07       	cpc	r18, r24
     104:	d8 06       	cpc	r13, r24
     106:	28 07       	cpc	r18, r24
     108:	28 07       	cpc	r18, r24
     10a:	28 07       	cpc	r18, r24
     10c:	28 07       	cpc	r18, r24
     10e:	28 07       	cpc	r18, r24
     110:	28 07       	cpc	r18, r24
     112:	28 07       	cpc	r18, r24
     114:	28 07       	cpc	r18, r24
     116:	28 07       	cpc	r18, r24
     118:	28 07       	cpc	r18, r24
     11a:	28 07       	cpc	r18, r24
     11c:	28 07       	cpc	r18, r24
     11e:	28 07       	cpc	r18, r24
     120:	28 07       	cpc	r18, r24
     122:	28 07       	cpc	r18, r24
     124:	d8 06       	cpc	r13, r24
     126:	28 07       	cpc	r18, r24
     128:	28 07       	cpc	r18, r24
     12a:	28 07       	cpc	r18, r24
     12c:	28 07       	cpc	r18, r24
     12e:	28 07       	cpc	r18, r24
     130:	28 07       	cpc	r18, r24
     132:	28 07       	cpc	r18, r24
     134:	28 07       	cpc	r18, r24
     136:	28 07       	cpc	r18, r24
     138:	28 07       	cpc	r18, r24
     13a:	28 07       	cpc	r18, r24
     13c:	28 07       	cpc	r18, r24
     13e:	28 07       	cpc	r18, r24
     140:	28 07       	cpc	r18, r24
     142:	28 07       	cpc	r18, r24
     144:	24 07       	cpc	r18, r20
     146:	28 07       	cpc	r18, r24
     148:	28 07       	cpc	r18, r24
     14a:	28 07       	cpc	r18, r24
     14c:	28 07       	cpc	r18, r24
     14e:	28 07       	cpc	r18, r24
     150:	28 07       	cpc	r18, r24
     152:	28 07       	cpc	r18, r24
     154:	01 07       	cpc	r16, r17
     156:	28 07       	cpc	r18, r24
     158:	28 07       	cpc	r18, r24
     15a:	28 07       	cpc	r18, r24
     15c:	28 07       	cpc	r18, r24
     15e:	28 07       	cpc	r18, r24
     160:	28 07       	cpc	r18, r24
     162:	28 07       	cpc	r18, r24
     164:	28 07       	cpc	r18, r24
     166:	28 07       	cpc	r18, r24
     168:	28 07       	cpc	r18, r24
     16a:	28 07       	cpc	r18, r24
     16c:	28 07       	cpc	r18, r24
     16e:	28 07       	cpc	r18, r24
     170:	28 07       	cpc	r18, r24
     172:	28 07       	cpc	r18, r24
     174:	f5 06       	cpc	r15, r21
     176:	28 07       	cpc	r18, r24
     178:	28 07       	cpc	r18, r24
     17a:	28 07       	cpc	r18, r24
     17c:	28 07       	cpc	r18, r24
     17e:	28 07       	cpc	r18, r24
     180:	28 07       	cpc	r18, r24
     182:	28 07       	cpc	r18, r24
     184:	13 07       	cpc	r17, r19

00000186 <__trampolines_end>:
     186:	6e 61       	ori	r22, 0x1E	; 30
     188:	6e 00       	.word	0x006e	; ????

0000018a <__c.2159>:
     18a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     19a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1aa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ba:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1ca:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1da:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1ea:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1fa:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     20a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     21a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     22a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     23a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     24a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     25a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     26a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     27a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000288 <__ctors_end>:
     288:	11 24       	eor	r1, r1
     28a:	1f be       	out	0x3f, r1	; 63
     28c:	cf ef       	ldi	r28, 0xFF	; 255
     28e:	d1 e2       	ldi	r29, 0x21	; 33
     290:	de bf       	out	0x3e, r29	; 62
     292:	cd bf       	out	0x3d, r28	; 61
     294:	00 e0       	ldi	r16, 0x00	; 0
     296:	0c bf       	out	0x3c, r16	; 60

00000298 <__do_copy_data>:
     298:	12 e0       	ldi	r17, 0x02	; 2
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b2 e0       	ldi	r27, 0x02	; 2
     29e:	e4 e5       	ldi	r30, 0x54	; 84
     2a0:	f0 e2       	ldi	r31, 0x20	; 32
     2a2:	00 e0       	ldi	r16, 0x00	; 0
     2a4:	0b bf       	out	0x3b, r16	; 59
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__do_copy_data+0x14>
     2a8:	07 90       	elpm	r0, Z+
     2aa:	0d 92       	st	X+, r0
     2ac:	ae 38       	cpi	r26, 0x8E	; 142
     2ae:	b1 07       	cpc	r27, r17
     2b0:	d9 f7       	brne	.-10     	; 0x2a8 <__do_copy_data+0x10>

000002b2 <__do_clear_bss>:
     2b2:	22 e0       	ldi	r18, 0x02	; 2
     2b4:	ae e8       	ldi	r26, 0x8E	; 142
     2b6:	b2 e0       	ldi	r27, 0x02	; 2
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	ad 3a       	cpi	r26, 0xAD	; 173
     2be:	b2 07       	cpc	r27, r18
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	24 d0       	rcall	.+72     	; 0x30c <main>
     2c4:	0c 94 28 10 	jmp	0x2050	; 0x2050 <_exit>

000002c8 <__bad_interrupt>:
     2c8:	9b ce       	rjmp	.-714    	; 0x0 <__vectors>

000002ca <adc_init>:
#include "adc.h"

void adc_init(){
	
	// Division factor 128
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     2ca:	ea e7       	ldi	r30, 0x7A	; 122
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	87 68       	ori	r24, 0x87	; 135
     2d2:	80 83       	st	Z, r24
	
	/*We find max voltage to be 1.1 V
	Internal 1.1 V Voltage Reference with external capacitor at AREF pin  ->  REFS1 = 1 REFS0 = 0 
	*/  
	ADMUX |= (1 << REFS0);
     2d4:	ec e7       	ldi	r30, 0x7C	; 124
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	80 81       	ld	r24, Z
     2da:	80 64       	ori	r24, 0x40	; 64
     2dc:	80 83       	st	Z, r24
	//ADMUX &= ~(1 << REFS1);
	ADMUX |= (1 << REFS1);
     2de:	80 81       	ld	r24, Z
     2e0:	80 68       	ori	r24, 0x80	; 128
     2e2:	80 83       	st	Z, r24
     2e4:	08 95       	ret

000002e6 <adc_read>:
	
	
}

uint16_t adc_read(uint8_t ch){ //IR set to ADC0 = PF0
	ADMUX |= (ch & 0x03);
     2e6:	ec e7       	ldi	r30, 0x7C	; 124
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	90 81       	ld	r25, Z
     2ec:	83 70       	andi	r24, 0x03	; 3
     2ee:	98 2b       	or	r25, r24
     2f0:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADSC);
     2f2:	ea e7       	ldi	r30, 0x7A	; 122
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
     2f8:	80 64       	ori	r24, 0x40	; 64
     2fa:	80 83       	st	Z, r24
	
	while((ADCSRA & (1 << ADSC))){}
     2fc:	80 81       	ld	r24, Z
     2fe:	86 fd       	sbrc	r24, 6
     300:	fd cf       	rjmp	.-6      	; 0x2fc <adc_read+0x16>

	return ADC; //sexy premade code
     302:	80 91 78 00 	lds	r24, 0x0078
     306:	90 91 79 00 	lds	r25, 0x0079
     30a:	08 95       	ret

0000030c <main>:

*/



int main(void){
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
     314:	66 97       	sbiw	r28, 0x16	; 22
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	cd bf       	out	0x3d, r28	; 61
	

	MCUCR |= (1 << SRE);
     320:	85 b7       	in	r24, 0x35	; 53
     322:	80 68       	ori	r24, 0x80	; 128
     324:	85 bf       	out	0x35, r24	; 53
	uart_Init(MYUBRR);
     326:	87 e6       	ldi	r24, 0x67	; 103
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	b8 d5       	rcall	.+2928   	; 0xe9c <uart_Init>
	//
	
	can_init(MODE_NORMAL);
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	9e d0       	rcall	.+316    	; 0x46e <can_init>
	/*adc_init();*/
	ir_init();
     332:	10 d2       	rcall	.+1056   	; 0x754 <ir_init>
	
	
	DDRE |= (1 << 3); //studass PWM bandaid that can be removed? 
     334:	6b 9a       	sbi	0x0d, 3	; 13



	timer_init();
     336:	96 d4       	rcall	.+2348   	; 0xc64 <timer_init>
	
	solenoid_init();
     338:	60 d4       	rcall	.+2240   	; 0xbfa <solenoid_init>
	motor_init();
     33a:	be d2       	rcall	.+1404   	; 0x8b8 <motor_init>
	pwm_init(SERVO_PERIOD, P_MID);
     33c:	67 e7       	ldi	r22, 0x77	; 119
     33e:	71 e0       	ldi	r23, 0x01	; 1
     340:	88 e8       	ldi	r24, 0x88	; 136
     342:	93 e1       	ldi	r25, 0x13	; 19
     344:	fe d3       	rcall	.+2044   	; 0xb42 <pwm_init>
	

	PI_controller* sliders = PI_controller_new(0.02, 0.05);
     346:	2d ec       	ldi	r18, 0xCD	; 205
     348:	3c ec       	ldi	r19, 0xCC	; 204
     34a:	4c e4       	ldi	r20, 0x4C	; 76
     34c:	5d e3       	ldi	r21, 0x3D	; 61
     34e:	6a e0       	ldi	r22, 0x0A	; 10
     350:	77 ed       	ldi	r23, 0xD7	; 215
     352:	83 ea       	ldi	r24, 0xA3	; 163
     354:	9c e3       	ldi	r25, 0x3C	; 60
     356:	6c d3       	rcall	.+1752   	; 0xa30 <PI_controller_new>
     358:	5c 01       	movw	r10, r24
	
	uint16_t position;
	uint16_t reference;
	float output;
	
	motor_controller_calibrate_by_reset();
     35a:	ef d2       	rcall	.+1502   	; 0x93a <motor_controller_calibrate_by_reset>
		
		/*switch(message_node1.id){
			case(GAME_ID):*/
				canjoy_update();
				
				printf("stuff: %u\n", canjoy_joystick_x());
     35c:	0f 2e       	mov	r0, r31
     35e:	f0 e1       	ldi	r31, 0x10	; 16
     360:	ef 2e       	mov	r14, r31
     362:	f2 e0       	ldi	r31, 0x02	; 2
     364:	ff 2e       	mov	r15, r31
     366:	f0 2d       	mov	r31, r0
					game_status.data[1] = game_score;
					can_transmit(&game_status, 0x30);
				}
				else{
					game_status.id = CAN_GAME_STATE;
					game_status.id = 2;
     368:	68 94       	set
     36a:	88 24       	eor	r8, r8
     36c:	81 f8       	bld	r8, 1
     36e:	91 2c       	mov	r9, r1
					game_status.data[0] = 1; // game running
     370:	33 24       	eor	r3, r3
     372:	33 94       	inc	r3
	can_message game_status;
	while(1){
		
		/*switch(message_node1.id){
			case(GAME_ID):*/
				canjoy_update();
     374:	ce 01       	movw	r24, r28
     376:	0c 96       	adiw	r24, 0x0c	; 12
     378:	ab d1       	rcall	.+854    	; 0x6d0 <canjoy_update>
				
				printf("stuff: %u\n", canjoy_joystick_x());
     37a:	e0 d1       	rcall	.+960    	; 0x73c <canjoy_joystick_x>
     37c:	9f 93       	push	r25
     37e:	8f 93       	push	r24
     380:	ff 92       	push	r15
     382:	ef 92       	push	r14
     384:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <printf>
				
				//inverts and multiplies 8 bit input to board game domain
				reference = abs(canjoy_joystick_x() - 255) * (float)(max_left) / 255.0;
     388:	d9 d1       	rcall	.+946    	; 0x73c <canjoy_joystick_x>
     38a:	8f 5f       	subi	r24, 0xFF	; 255
     38c:	91 09       	sbc	r25, r1
     38e:	bc 01       	movw	r22, r24
     390:	99 23       	and	r25, r25
     392:	24 f4       	brge	.+8      	; 0x39c <main+0x90>
     394:	66 27       	eor	r22, r22
     396:	77 27       	eor	r23, r23
     398:	68 1b       	sub	r22, r24
     39a:	79 0b       	sbc	r23, r25
     39c:	88 27       	eor	r24, r24
     39e:	77 fd       	sbrc	r23, 7
     3a0:	80 95       	com	r24
     3a2:	98 2f       	mov	r25, r24
     3a4:	8b d6       	rcall	.+3350   	; 0x10bc <__floatsisf>
     3a6:	2b 01       	movw	r4, r22
     3a8:	3c 01       	movw	r6, r24
     3aa:	60 91 96 02 	lds	r22, 0x0296
     3ae:	70 91 97 02 	lds	r23, 0x0297
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	80 d6       	rcall	.+3328   	; 0x10b8 <__floatunsisf>
     3b8:	9b 01       	movw	r18, r22
     3ba:	ac 01       	movw	r20, r24
     3bc:	c3 01       	movw	r24, r6
     3be:	b2 01       	movw	r22, r4
     3c0:	09 d7       	rcall	.+3602   	; 0x11d4 <__mulsf3>
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	4f e7       	ldi	r20, 0x7F	; 127
     3c8:	53 e4       	ldi	r21, 0x43	; 67
     3ca:	dd d5       	rcall	.+3002   	; 0xf86 <__divsf3>
     3cc:	49 d6       	rcall	.+3218   	; 0x1060 <__fixunssfsi>
     3ce:	2b 01       	movw	r4, r22
     3d0:	3c 01       	movw	r6, r24
				
				position = motor_encoder_read();
     3d2:	90 d2       	rcall	.+1312   	; 0x8f4 <motor_encoder_read>
     3d4:	8c 01       	movw	r16, r24
				output =  PI_controller_output(sliders, position, reference);
     3d6:	a2 01       	movw	r20, r4
     3d8:	bc 01       	movw	r22, r24
     3da:	c5 01       	movw	r24, r10
     3dc:	4f d3       	rcall	.+1694   	; 0xa7c <PI_controller_output>
				motor_speed_direction(output);
     3de:	4e d2       	rcall	.+1180   	; 0x87c <motor_speed_direction>
				
				
				//clockblock spinning at either wall
				if((position > max_left) && (reference < 127)){
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	80 91 96 02 	lds	r24, 0x0296
     3ec:	90 91 97 02 	lds	r25, 0x0297
     3f0:	80 17       	cp	r24, r16
     3f2:	91 07       	cpc	r25, r17
     3f4:	20 f4       	brcc	.+8      	; 0x3fe <main+0xf2>
     3f6:	2f e7       	ldi	r18, 0x7F	; 127
     3f8:	42 16       	cp	r4, r18
     3fa:	51 04       	cpc	r5, r1
     3fc:	20 f0       	brcs	.+8      	; 0x406 <main+0xfa>
					output = 0;
				}//if negative overflow
				else if(position > 60000){
     3fe:	01 36       	cpi	r16, 0x61	; 97
     400:	1a 4e       	sbci	r17, 0xEA	; 234
     402:	08 f0       	brcs	.+2      	; 0x406 <main+0xfa>
					motor_encoder_reset();
     404:	52 d2       	rcall	.+1188   	; 0x8aa <motor_encoder_reset>
				}
				
				//allows shooting solonoid, with 50ms pulse, without "burst mode"
				if(canjoy_button_right() && solenoid_is_shooting_allowed()){
     406:	a2 d1       	rcall	.+836    	; 0x74c <canjoy_button_right>
     408:	89 2b       	or	r24, r25
     40a:	31 f0       	breq	.+12     	; 0x418 <main+0x10c>
     40c:	1a d4       	rcall	.+2100   	; 0xc42 <solenoid_is_shooting_allowed>
     40e:	88 23       	and	r24, r24
     410:	19 f0       	breq	.+6      	; 0x418 <main+0x10c>
					solenoid_shoot();
     412:	fe d3       	rcall	.+2044   	; 0xc10 <solenoid_shoot>
					solenoid_disallow_shooting();
     414:	0f d4       	rcall	.+2078   	; 0xc34 <solenoid_disallow_shooting>
     416:	04 c0       	rjmp	.+8      	; 0x420 <main+0x114>
				}
				else if(canjoy_button_right()){}
     418:	99 d1       	rcall	.+818    	; 0x74c <canjoy_button_right>
     41a:	89 2b       	or	r24, r25
     41c:	09 f4       	brne	.+2      	; 0x420 <main+0x114>
				else{
					solenoid_allow_shooting();
     41e:	0d d4       	rcall	.+2074   	; 0xc3a <solenoid_allow_shooting>
				}
				
				//controll servo
				servo_set_pulse_by_input(canjoy_slider_right());
     420:	91 d1       	rcall	.+802    	; 0x744 <canjoy_slider_right>
     422:	cf d3       	rcall	.+1950   	; 0xbc2 <servo_set_pulse_by_input>
				
				if(timer5_read() > 16000){
     424:	56 d4       	rcall	.+2220   	; 0xcd2 <timer5_read>
     426:	81 38       	cpi	r24, 0x81	; 129
     428:	9e 43       	sbci	r25, 0x3E	; 62
     42a:	30 f0       	brcs	.+12     	; 0x438 <main+0x12c>
					game_score++;
     42c:	80 91 8e 02 	lds	r24, 0x028E
     430:	8f 5f       	subi	r24, 0xFF	; 255
     432:	80 93 8e 02 	sts	0x028E, r24
					timer5_reset();
     436:	6e d4       	rcall	.+2268   	; 0xd14 <timer5_reset>
				}
				
				//use timer for this, to avoid spamming?
				if(ir_blocked()){
     438:	8f d1       	rcall	.+798    	; 0x758 <ir_blocked>
     43a:	89 2b       	or	r24, r25
     43c:	61 f0       	breq	.+24     	; 0x456 <main+0x14a>
					game_status.id = CAN_GAME_STATE;
					game_status.id = 2;
     43e:	9a 82       	std	Y+2, r9	; 0x02
     440:	89 82       	std	Y+1, r8	; 0x01
					game_status.data[0] = 0; // game over
     442:	1c 82       	std	Y+4, r1	; 0x04
					game_status.data[1] = game_score;
     444:	80 91 8e 02 	lds	r24, 0x028E
     448:	8d 83       	std	Y+5, r24	; 0x05
					can_transmit(&game_status, 0x30);
     44a:	60 e3       	ldi	r22, 0x30	; 48
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	ce 01       	movw	r24, r28
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	29 d0       	rcall	.+82     	; 0x4a6 <can_transmit>
     454:	8f cf       	rjmp	.-226    	; 0x374 <main+0x68>
				}
				else{
					game_status.id = CAN_GAME_STATE;
					game_status.id = 2;
     456:	9a 82       	std	Y+2, r9	; 0x02
     458:	89 82       	std	Y+1, r8	; 0x01
					game_status.data[0] = 1; // game running
     45a:	3c 82       	std	Y+4, r3	; 0x04
					game_status.data[1] = game_score;
     45c:	80 91 8e 02 	lds	r24, 0x028E
     460:	8d 83       	std	Y+5, r24	; 0x05
					can_transmit(&game_status, 0x30);
     462:	60 e3       	ldi	r22, 0x30	; 48
     464:	70 e0       	ldi	r23, 0x00	; 0
     466:	ce 01       	movw	r24, r28
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	1d d0       	rcall	.+58     	; 0x4a6 <can_transmit>
     46c:	83 cf       	rjmp	.-250    	; 0x374 <main+0x68>

0000046e <can_init>:
#include <stdlib.h>
#include <string.h>
#include <util/delay.h>


void can_init(int mode){
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	ec 01       	movw	r28, r24

	mcp2515_init();
     474:	d2 d1       	rcall	.+932    	; 0x81a <mcp2515_init>
	mcp2515_bit_modify(MCP_RXB0CTRL, MCP_MASK_FILTER, 0xff);
     476:	4f ef       	ldi	r20, 0xFF	; 255
     478:	50 e0       	ldi	r21, 0x00	; 0
     47a:	60 e6       	ldi	r22, 0x60	; 96
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	80 e6       	ldi	r24, 0x60	; 96
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	b2 d1       	rcall	.+868    	; 0x7e8 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXB1CTRL, MCP_MASK_FILTER, 0xff);
     484:	4f ef       	ldi	r20, 0xFF	; 255
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	60 e6       	ldi	r22, 0x60	; 96
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	80 e7       	ldi	r24, 0x70	; 112
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	ab d1       	rcall	.+854    	; 0x7e8 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, mode);
     492:	ae 01       	movw	r20, r28
     494:	60 ee       	ldi	r22, 0xE0	; 224
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	8f e0       	ldi	r24, 0x0F	; 15
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	a5 d1       	rcall	.+842    	; 0x7e8 <mcp2515_bit_modify>
	DDRE &= ~(1 << PE1);
     49e:	69 98       	cbi	0x0d, 1	; 13
}
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <can_transmit>:

void can_transmit(can_message* msg, int buffer_select){
     4a6:	8f 92       	push	r8
     4a8:	9f 92       	push	r9
     4aa:	af 92       	push	r10
     4ac:	bf 92       	push	r11
     4ae:	cf 92       	push	r12
     4b0:	df 92       	push	r13
     4b2:	ef 92       	push	r14
     4b4:	ff 92       	push	r15
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	1f 92       	push	r1
     4c0:	1f 92       	push	r1
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	5c 01       	movw	r10, r24
     4c8:	7b 01       	movw	r14, r22
	
	mcp2515_bit_modify(buffer_select, 0x08, 0xff);
     4ca:	4f ef       	ldi	r20, 0xFF	; 255
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	68 e0       	ldi	r22, 0x08	; 8
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	c7 01       	movw	r24, r14
     4d4:	89 d1       	rcall	.+786    	; 0x7e8 <mcp2515_bit_modify>
	
	while(mcp2515_read(buffer_select) & (1 << MCP_TXREQ));
     4d6:	c7 01       	movw	r24, r14
     4d8:	68 d1       	rcall	.+720    	; 0x7aa <mcp2515_read>
     4da:	83 fd       	sbrc	r24, 3
     4dc:	fc cf       	rjmp	.-8      	; 0x4d6 <can_transmit+0x30>
	
	volatile uint8_t idl = MCP2515_MASK_IDL & (msg->id << 5);
     4de:	f5 01       	movw	r30, r10
     4e0:	80 81       	ld	r24, Z
     4e2:	91 81       	ldd	r25, Z+1	; 0x01
     4e4:	28 2f       	mov	r18, r24
     4e6:	22 95       	swap	r18
     4e8:	22 0f       	add	r18, r18
     4ea:	20 7e       	andi	r18, 0xE0	; 224
     4ec:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t idh = MCP2515_MASK_IDH & (msg->id >> 3);
     4ee:	96 95       	lsr	r25
     4f0:	87 95       	ror	r24
     4f2:	96 95       	lsr	r25
     4f4:	87 95       	ror	r24
     4f6:	96 95       	lsr	r25
     4f8:	87 95       	ror	r24
     4fa:	8a 83       	std	Y+2, r24	; 0x02
	
	mcp2515_write(buffer_select + MCP2515_IDL_OFFSET, idl); //3 LSB
     4fc:	69 81       	ldd	r22, Y+1	; 0x01
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	c7 01       	movw	r24, r14
     502:	02 96       	adiw	r24, 0x02	; 2
     504:	5e d1       	rcall	.+700    	; 0x7c2 <mcp2515_write>
	mcp2515_write(buffer_select + MCP2515_IDH_OFFSET, idh); //8 MSB
     506:	6a 81       	ldd	r22, Y+2	; 0x02
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	c7 01       	movw	r24, r14
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	59 d1       	rcall	.+690    	; 0x7c2 <mcp2515_write>
	
	mcp2515_write(buffer_select + MCP2515_DLC_OFFSET, MCP2515_MASK_DLC & (msg->length));
     510:	f5 01       	movw	r30, r10
     512:	62 81       	ldd	r22, Z+2	; 0x02
     514:	6f 70       	andi	r22, 0x0F	; 15
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	c7 01       	movw	r24, r14
     51a:	05 96       	adiw	r24, 0x05	; 5
     51c:	52 d1       	rcall	.+676    	; 0x7c2 <mcp2515_write>
	
	
	for(int i = 0; i < msg->length; i++){
     51e:	f5 01       	movw	r30, r10
     520:	82 81       	ldd	r24, Z+2	; 0x02
     522:	88 23       	and	r24, r24
     524:	d1 f0       	breq	.+52     	; 0x55a <can_transmit+0xb4>
     526:	65 01       	movw	r12, r10
     528:	f3 e0       	ldi	r31, 0x03	; 3
     52a:	cf 0e       	add	r12, r31
     52c:	d1 1c       	adc	r13, r1
     52e:	00 e0       	ldi	r16, 0x00	; 0
     530:	10 e0       	ldi	r17, 0x00	; 0
     532:	47 01       	movw	r8, r14
     534:	86 e0       	ldi	r24, 0x06	; 6
     536:	88 0e       	add	r8, r24
     538:	91 1c       	adc	r9, r1
		mcp2515_write(buffer_select + MCP2515_TXB_OFFSET + i, msg->data[i]);
     53a:	f6 01       	movw	r30, r12
     53c:	61 91       	ld	r22, Z+
     53e:	6f 01       	movw	r12, r30
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	c4 01       	movw	r24, r8
     544:	80 0f       	add	r24, r16
     546:	91 1f       	adc	r25, r17
     548:	3c d1       	rcall	.+632    	; 0x7c2 <mcp2515_write>
	mcp2515_write(buffer_select + MCP2515_IDH_OFFSET, idh); //8 MSB
	
	mcp2515_write(buffer_select + MCP2515_DLC_OFFSET, MCP2515_MASK_DLC & (msg->length));
	
	
	for(int i = 0; i < msg->length; i++){
     54a:	0f 5f       	subi	r16, 0xFF	; 255
     54c:	1f 4f       	sbci	r17, 0xFF	; 255
     54e:	f5 01       	movw	r30, r10
     550:	82 81       	ldd	r24, Z+2	; 0x02
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	08 17       	cp	r16, r24
     556:	19 07       	cpc	r17, r25
     558:	84 f3       	brlt	.-32     	; 0x53a <can_transmit+0x94>
		
	}
	
	int buffer_control;
	
	if (buffer_select == MCP_TXB0CTRL){
     55a:	f0 e3       	ldi	r31, 0x30	; 48
     55c:	ef 16       	cp	r14, r31
     55e:	f1 04       	cpc	r15, r1
     560:	59 f0       	breq	.+22     	; 0x578 <can_transmit+0xd2>
		buffer_control = MCP_RTS_TX0;
	}
	else if (buffer_select == MCP_TXB1CTRL){
     562:	80 e4       	ldi	r24, 0x40	; 64
     564:	e8 16       	cp	r14, r24
     566:	f1 04       	cpc	r15, r1
     568:	51 f0       	breq	.+20     	; 0x57e <can_transmit+0xd8>
		buffer_control = MCP_RTS_TX1;
	}
	else if (buffer_select == MCP_TXB2CTRL){
     56a:	e0 e5       	ldi	r30, 0x50	; 80
     56c:	ee 16       	cp	r14, r30
     56e:	f1 04       	cpc	r15, r1
     570:	49 f4       	brne	.+18     	; 0x584 <can_transmit+0xde>
		buffer_control=MCP_RTS_TX2;
     572:	84 e8       	ldi	r24, 0x84	; 132
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	05 c0       	rjmp	.+10     	; 0x582 <can_transmit+0xdc>
	}
	
	int buffer_control;
	
	if (buffer_select == MCP_TXB0CTRL){
		buffer_control = MCP_RTS_TX0;
     578:	81 e8       	ldi	r24, 0x81	; 129
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	02 c0       	rjmp	.+4      	; 0x582 <can_transmit+0xdc>
	}
	else if (buffer_select == MCP_TXB1CTRL){
		buffer_control = MCP_RTS_TX1;
     57e:	82 e8       	ldi	r24, 0x82	; 130
     580:	90 e0       	ldi	r25, 0x00	; 0
		return;
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
     582:	2e d1       	rcall	.+604    	; 0x7e0 <mcp2515_request_to_send>
}
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	ff 90       	pop	r15
     592:	ef 90       	pop	r14
     594:	df 90       	pop	r13
     596:	cf 90       	pop	r12
     598:	bf 90       	pop	r11
     59a:	af 90       	pop	r10
     59c:	9f 90       	pop	r9
     59e:	8f 90       	pop	r8
     5a0:	08 95       	ret

000005a2 <can_poll_interrupt>:
}


uint8_t can_poll_interrupt(){
	
	while(!(PINE & (1 << PE1))){}
     5a2:	61 9b       	sbis	0x0c, 1	; 12
     5a4:	fe cf       	rjmp	.-4      	; 0x5a2 <can_poll_interrupt>
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
     5a6:	8c e2       	ldi	r24, 0x2C	; 44
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	ff d0       	rcall	.+510    	; 0x7aa <mcp2515_read>
     5ac:	80 fd       	sbrc	r24, 0
     5ae:	07 c0       	rjmp	.+14     	; 0x5be <can_poll_interrupt+0x1c>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
	}
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
     5b0:	8c e2       	ldi	r24, 0x2C	; 44
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	fa d0       	rcall	.+500    	; 0x7aa <mcp2515_read>
     5b6:	81 ff       	sbrs	r24, 1
     5b8:	04 c0       	rjmp	.+8      	; 0x5c2 <can_poll_interrupt+0x20>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
     5ba:	80 e7       	ldi	r24, 0x70	; 112
     5bc:	08 95       	ret
	
	while(!(PINE & (1 << PE1))){}
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
     5be:	80 e6       	ldi	r24, 0x60	; 96
     5c0:	08 95       	ret
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
	}
	return -1;
     5c2:	8f ef       	ldi	r24, 0xFF	; 255
}
     5c4:	08 95       	ret

000005c6 <can_recieve>:
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
}

can_message can_recieve(can_message* msg){
     5c6:	7f 92       	push	r7
     5c8:	8f 92       	push	r8
     5ca:	9f 92       	push	r9
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	2b 97       	sbiw	r28, 0x0b	; 11
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
     5f0:	6c 01       	movw	r12, r24
	can_message m;
	
	uint8_t buffer_select = can_poll_interrupt();
     5f2:	d7 df       	rcall	.-82     	; 0x5a2 <can_poll_interrupt>
     5f4:	98 2e       	mov	r9, r24
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
     5f6:	08 2f       	mov	r16, r24
     5f8:	10 e0       	ldi	r17, 0x00	; 0
     5fa:	c8 01       	movw	r24, r16
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	d5 d0       	rcall	.+426    	; 0x7aa <mcp2515_read>
     600:	7c 01       	movw	r14, r24
     602:	c8 01       	movw	r24, r16
     604:	02 96       	adiw	r24, 0x02	; 2
     606:	d1 d0       	rcall	.+418    	; 0x7aa <mcp2515_read>
     608:	95 95       	asr	r25
     60a:	87 95       	ror	r24
     60c:	95 95       	asr	r25
     60e:	87 95       	ror	r24
     610:	95 95       	asr	r25
     612:	87 95       	ror	r24
     614:	95 95       	asr	r25
     616:	87 95       	ror	r24
     618:	95 95       	asr	r25
     61a:	87 95       	ror	r24
     61c:	ee 0c       	add	r14, r14
     61e:	ff 1c       	adc	r15, r15
     620:	ee 0c       	add	r14, r14
     622:	ff 1c       	adc	r15, r15
     624:	ee 0c       	add	r14, r14
     626:	ff 1c       	adc	r15, r15
     628:	5c 01       	movw	r10, r24
     62a:	ae 28       	or	r10, r14
     62c:	bf 28       	or	r11, r15
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
     62e:	c8 01       	movw	r24, r16
     630:	05 96       	adiw	r24, 0x05	; 5
     632:	bb d0       	rcall	.+374    	; 0x7aa <mcp2515_read>
     634:	8f 70       	andi	r24, 0x0F	; 15
     636:	78 2e       	mov	r7, r24
	
	for(uint8_t i = 0; i < m.length; i++){
     638:	a9 f0       	breq	.+42     	; 0x664 <can_recieve+0x9e>
     63a:	8e 01       	movw	r16, r28
     63c:	0c 5f       	subi	r16, 0xFC	; 252
     63e:	1f 4f       	sbci	r17, 0xFF	; 255
     640:	81 2c       	mov	r8, r1
     642:	ce 01       	movw	r24, r28
     644:	80 95       	com	r24
     646:	90 95       	com	r25
     648:	03 96       	adiw	r24, 0x03	; 3
     64a:	7c 01       	movw	r14, r24
     64c:	e9 0c       	add	r14, r9
     64e:	f1 1c       	adc	r15, r1
		m.data[i] = mcp2515_read(buffer_select + MCP2515_RXB_OFFSET + i);// + i, msg->data[i]);
     650:	c7 01       	movw	r24, r14
     652:	80 0f       	add	r24, r16
     654:	91 1f       	adc	r25, r17
     656:	a9 d0       	rcall	.+338    	; 0x7aa <mcp2515_read>
     658:	f8 01       	movw	r30, r16
     65a:	81 93       	st	Z+, r24
     65c:	8f 01       	movw	r16, r30
	uint8_t buffer_select = can_poll_interrupt();
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
	
	for(uint8_t i = 0; i < m.length; i++){
     65e:	83 94       	inc	r8
     660:	87 10       	cpse	r8, r7
     662:	f6 cf       	rjmp	.-20     	; 0x650 <can_recieve+0x8a>
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	
	switch(buffer_select){
     664:	f0 e6       	ldi	r31, 0x60	; 96
     666:	9f 16       	cp	r9, r31
     668:	21 f0       	breq	.+8      	; 0x672 <can_recieve+0xac>
     66a:	80 e7       	ldi	r24, 0x70	; 112
     66c:	98 16       	cp	r9, r24
     66e:	49 f0       	breq	.+18     	; 0x682 <can_recieve+0xbc>
     670:	0f c0       	rjmp	.+30     	; 0x690 <can_recieve+0xca>
		case MCP_RXB0CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
     672:	40 e0       	ldi	r20, 0x00	; 0
     674:	50 e0       	ldi	r21, 0x00	; 0
     676:	61 e0       	ldi	r22, 0x01	; 1
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	8c e2       	ldi	r24, 0x2C	; 44
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	b4 d0       	rcall	.+360    	; 0x7e8 <mcp2515_bit_modify>
		break;
     680:	07 c0       	rjmp	.+14     	; 0x690 <can_recieve+0xca>
		case MCP_RXB1CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	62 e0       	ldi	r22, 0x02	; 2
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	8c e2       	ldi	r24, 0x2C	; 44
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	ac d0       	rcall	.+344    	; 0x7e8 <mcp2515_bit_modify>
		break;
	}
	
	return m;
     690:	ba 82       	std	Y+2, r11	; 0x02
     692:	a9 82       	std	Y+1, r10	; 0x01
     694:	7b 82       	std	Y+3, r7	; 0x03
     696:	8b e0       	ldi	r24, 0x0B	; 11
     698:	fe 01       	movw	r30, r28
     69a:	31 96       	adiw	r30, 0x01	; 1
     69c:	d6 01       	movw	r26, r12
     69e:	01 90       	ld	r0, Z+
     6a0:	0d 92       	st	X+, r0
     6a2:	8a 95       	dec	r24
     6a4:	e1 f7       	brne	.-8      	; 0x69e <can_recieve+0xd8>
}
     6a6:	c6 01       	movw	r24, r12
     6a8:	2b 96       	adiw	r28, 0x0b	; 11
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	de bf       	out	0x3e, r29	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	cd bf       	out	0x3d, r28	; 61
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	ff 90       	pop	r15
     6be:	ef 90       	pop	r14
     6c0:	df 90       	pop	r13
     6c2:	cf 90       	pop	r12
     6c4:	bf 90       	pop	r11
     6c6:	af 90       	pop	r10
     6c8:	9f 90       	pop	r9
     6ca:	8f 90       	pop	r8
     6cc:	7f 90       	pop	r7
     6ce:	08 95       	ret

000006d0 <canjoy_update>:
int canjoy_slider_right(){
	return canjoy_msg.data[4];
}
int canjoy_button_left(){
	return canjoy_msg.data[5];
}
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	ec 01       	movw	r28, r24
     6da:	75 df       	rcall	.-278    	; 0x5c6 <can_recieve>
     6dc:	0a 81       	ldd	r16, Y+2	; 0x02
     6de:	1b 81       	ldd	r17, Y+3	; 0x03
     6e0:	7c 81       	ldd	r23, Y+4	; 0x04
     6e2:	6d 81       	ldd	r22, Y+5	; 0x05
     6e4:	5e 81       	ldd	r21, Y+6	; 0x06
     6e6:	4f 81       	ldd	r20, Y+7	; 0x07
     6e8:	38 85       	ldd	r19, Y+8	; 0x08
     6ea:	29 85       	ldd	r18, Y+9	; 0x09
     6ec:	88 81       	ld	r24, Y
     6ee:	99 81       	ldd	r25, Y+1	; 0x01
     6f0:	07 97       	sbiw	r24, 0x07	; 7
     6f2:	89 f4       	brne	.+34     	; 0x716 <canjoy_update+0x46>
     6f4:	8b e0       	ldi	r24, 0x0B	; 11
     6f6:	fe 01       	movw	r30, r28
     6f8:	a8 e9       	ldi	r26, 0x98	; 152
     6fa:	b2 e0       	ldi	r27, 0x02	; 2
     6fc:	01 90       	ld	r0, Z+
     6fe:	0d 92       	st	X+, r0
     700:	8a 95       	dec	r24
     702:	e1 f7       	brne	.-8      	; 0x6fc <canjoy_update+0x2c>
     704:	0a 83       	std	Y+2, r16	; 0x02
     706:	1b 83       	std	Y+3, r17	; 0x03
     708:	7c 83       	std	Y+4, r23	; 0x04
     70a:	6d 83       	std	Y+5, r22	; 0x05
     70c:	5e 83       	std	Y+6, r21	; 0x06
     70e:	4f 83       	std	Y+7, r20	; 0x07
     710:	38 87       	std	Y+8, r19	; 0x08
     712:	29 87       	std	Y+9, r18	; 0x09
     714:	0d c0       	rjmp	.+26     	; 0x730 <canjoy_update+0x60>
     716:	8b e1       	ldi	r24, 0x1B	; 27
     718:	92 e0       	ldi	r25, 0x02	; 2
     71a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <puts>
     71e:	87 e0       	ldi	r24, 0x07	; 7
     720:	8a 83       	std	Y+2, r24	; 0x02
     722:	8b 83       	std	Y+3, r24	; 0x03
     724:	1c 82       	std	Y+4, r1	; 0x04
     726:	1d 82       	std	Y+5, r1	; 0x05
     728:	1e 82       	std	Y+6, r1	; 0x06
     72a:	1f 82       	std	Y+7, r1	; 0x07
     72c:	18 86       	std	Y+8, r1	; 0x08
     72e:	19 86       	std	Y+9, r1	; 0x09
     730:	ce 01       	movw	r24, r28
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	08 95       	ret

0000073c <canjoy_joystick_x>:
     73c:	80 91 9b 02 	lds	r24, 0x029B
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	08 95       	ret

00000744 <canjoy_slider_right>:
     744:	80 91 9f 02 	lds	r24, 0x029F
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	08 95       	ret

0000074c <canjoy_button_right>:
int canjoy_button_right(){
	return canjoy_msg.data[6];
     74c:	80 91 a1 02 	lds	r24, 0x02A1
}
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	08 95       	ret

00000754 <ir_init>:
	}
	else
		return 0;
		
	
}
     754:	ba cd       	rjmp	.-1164   	; 0x2ca <adc_init>
     756:	08 95       	ret

00000758 <ir_blocked>:

int ir_blocked(){
	
	if(adc_read(ADC0D) > HIGH){
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	c5 dd       	rcall	.-1142   	; 0x2e6 <adc_read>
     75c:	85 3f       	cpi	r24, 0xF5	; 245
     75e:	91 40       	sbci	r25, 0x01	; 1
     760:	40 f4       	brcc	.+16     	; 0x772 <ir_blocked+0x1a>
		return 0;
	}
	if(adc_read(ADC0D) < LOW){
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	c0 dd       	rcall	.-1152   	; 0x2e6 <adc_read>
     766:	84 36       	cpi	r24, 0x64	; 100
     768:	91 05       	cpc	r25, r1
     76a:	30 f4       	brcc	.+12     	; 0x778 <ir_blocked+0x20>
		return 1;
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	08 95       	ret
}

int ir_blocked(){
	
	if(adc_read(ADC0D) > HIGH){
		return 0;
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	08 95       	ret
	}
	if(adc_read(ADC0D) < LOW){
		return 1;
	}
	return -1;
     778:	8f ef       	ldi	r24, 0xFF	; 255
     77a:	9f ef       	ldi	r25, 0xFF	; 255
}
     77c:	08 95       	ret

0000077e <max520_init>:
#define MAX520_TWI_ADDR 0b01011110



void max520_init(){
	TWI_Master_Initialise();
     77e:	cf d2       	rcall	.+1438   	; 0xd1e <TWI_Master_Initialise>
	sei();//interrupts on
     780:	78 94       	sei
     782:	08 95       	ret

00000784 <max520_send>:
}


void max520_send(uint8_t val)
{
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	00 d0       	rcall	.+0      	; 0x78a <max520_send+0x6>
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
	//printf("In max520_send\n");
	uint8_t message[3] = {MAX520_TWI_ADDR, 0, val};
     78e:	9e e5       	ldi	r25, 0x5E	; 94
     790:	99 83       	std	Y+1, r25	; 0x01
     792:	1a 82       	std	Y+2, r1	; 0x02
     794:	8b 83       	std	Y+3, r24	; 0x03
	
	TWI_Start_Transceiver_With_Data(message, 3);
     796:	63 e0       	ldi	r22, 0x03	; 3
     798:	ce 01       	movw	r24, r28
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	ca d2       	rcall	.+1428   	; 0xd32 <TWI_Start_Transceiver_With_Data>
	
}
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	08 95       	ret

000007aa <mcp2515_read>:
	}
	return 0;
}


int mcp2515_read(int address){
     7aa:	cf 93       	push	r28
     7ac:	c8 2f       	mov	r28, r24
	
	int result;
	
	PORTB &= ~(1 << MCP2515_CS);
     7ae:	28 98       	cbi	0x05, 0	; 5
	
	spi_write(MCP_READ);
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	51 d2       	rcall	.+1186   	; 0xc56 <spi_write>
	spi_write(address);
     7b4:	8c 2f       	mov	r24, r28
     7b6:	4f d2       	rcall	.+1182   	; 0xc56 <spi_write>
	
	result = spi_write(0x00);
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	4d d2       	rcall	.+1178   	; 0xc56 <spi_write>
	
	PORTB |= (1 << MCP2515_CS);
     7bc:	28 9a       	sbi	0x05, 0	; 5
	return result;
}
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <mcp2515_write>:

void mcp2515_write(int address, int data){
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	d8 2f       	mov	r29, r24
     7c8:	c6 2f       	mov	r28, r22
	
	PORTB &= ~(1 << MCP2515_CS);
     7ca:	28 98       	cbi	0x05, 0	; 5
	
	spi_write(MCP_WRITE);
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	43 d2       	rcall	.+1158   	; 0xc56 <spi_write>
	spi_write(address);
     7d0:	8d 2f       	mov	r24, r29
     7d2:	41 d2       	rcall	.+1154   	; 0xc56 <spi_write>
	spi_write(data);
     7d4:	8c 2f       	mov	r24, r28
     7d6:	3f d2       	rcall	.+1150   	; 0xc56 <spi_write>
	
	PORTB |= (1 << MCP2515_CS);	
     7d8:	28 9a       	sbi	0x05, 0	; 5
}
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <mcp2515_request_to_send>:

void mcp2515_request_to_send(int buffer_select){
	PORTB &= ~(1 << MCP2515_CS);
     7e0:	28 98       	cbi	0x05, 0	; 5
	spi_write(buffer_select);
     7e2:	39 d2       	rcall	.+1138   	; 0xc56 <spi_write>
	PORTB |= (1 << MCP2515_CS);
     7e4:	28 9a       	sbi	0x05, 0	; 5
     7e6:	08 95       	ret

000007e8 <mcp2515_bit_modify>:
}

void mcp2515_bit_modify(int address, int mask, int data){
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	18 2f       	mov	r17, r24
     7f0:	d6 2f       	mov	r29, r22
     7f2:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS);
     7f4:	28 98       	cbi	0x05, 0	; 5
	
	spi_write(MCP_BITMOD);
     7f6:	85 e0       	ldi	r24, 0x05	; 5
     7f8:	2e d2       	rcall	.+1116   	; 0xc56 <spi_write>
	spi_write(address);
     7fa:	81 2f       	mov	r24, r17
     7fc:	2c d2       	rcall	.+1112   	; 0xc56 <spi_write>
	spi_write(mask);
     7fe:	8d 2f       	mov	r24, r29
     800:	2a d2       	rcall	.+1108   	; 0xc56 <spi_write>
	spi_write(data);
     802:	8c 2f       	mov	r24, r28
     804:	28 d2       	rcall	.+1104   	; 0xc56 <spi_write>

	PORTB |= (1 << MCP2515_CS);
     806:	28 9a       	sbi	0x05, 0	; 5
	
}
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	08 95       	ret

00000810 <mcp2515_reset>:

void mcp2515_reset(){
	PORTB &= ~(1 << MCP2515_CS);
     810:	28 98       	cbi	0x05, 0	; 5
	spi_write(MCP_RESET);
     812:	80 ec       	ldi	r24, 0xC0	; 192
     814:	20 d2       	rcall	.+1088   	; 0xc56 <spi_write>
	PORTB |= (1 << MCP2515_CS);
     816:	28 9a       	sbi	0x05, 0	; 5
     818:	08 95       	ret

0000081a <mcp2515_init>:
#include "SPI.h"
#include "mcp2515_define.h"


int mcp2515_init(){
	spi_init();
     81a:	16 d2       	rcall	.+1068   	; 0xc48 <spi_init>
	mcp2515_reset();
     81c:	f9 df       	rcall	.-14     	; 0x810 <mcp2515_reset>
	
	uint8_t val = mcp2515_read(MCP_CANSTAT);
     81e:	8e e0       	ldi	r24, 0x0E	; 14
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	c3 df       	rcall	.-122    	; 0x7aa <mcp2515_read>
	if((val & MODE_MASK) != MODE_CONFIG){
     824:	80 7e       	andi	r24, 0xE0	; 224
     826:	99 27       	eor	r25, r25
     828:	80 38       	cpi	r24, 0x80	; 128
     82a:	91 05       	cpc	r25, r1
     82c:	39 f0       	breq	.+14     	; 0x83c <mcp2515_init+0x22>
		printf("ERROR: MCP2515 is NOT in config mode after reset!\n");
     82e:	84 e2       	ldi	r24, 0x24	; 36
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <puts>
		return 1;
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	08 95       	ret
	}
	return 0;
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	90 e0       	ldi	r25, 0x00	; 0
}
     840:	08 95       	ret

00000842 <motor_encoder_select_byte>:

uint8_t motor_encoder_byte_read(){
	uint8_t byte = PINK;
	return byte;

}
     842:	88 23       	and	r24, r24
     844:	11 f0       	breq	.+4      	; 0x84a <motor_encoder_select_byte+0x8>
     846:	8d 9a       	sbi	0x11, 5	; 17
     848:	08 95       	ret
     84a:	8d 98       	cbi	0x11, 5	; 17
     84c:	08 95       	ret

0000084e <motor_encoder_output_enable>:
     84e:	88 23       	and	r24, r24
     850:	11 f0       	breq	.+4      	; 0x856 <motor_encoder_output_enable+0x8>
     852:	8c 98       	cbi	0x11, 4	; 17
     854:	08 95       	ret
     856:	8c 9a       	sbi	0x11, 4	; 17
     858:	08 95       	ret

0000085a <motor_direction>:
     85a:	00 97       	sbiw	r24, 0x00	; 0
     85c:	11 f4       	brne	.+4      	; 0x862 <motor_direction+0x8>
     85e:	8b 9a       	sbi	0x11, 3	; 17
     860:	08 95       	ret
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	09 f4       	brne	.+2      	; 0x868 <motor_direction+0xe>
     866:	8b 98       	cbi	0x11, 3	; 17
     868:	08 95       	ret

0000086a <motor_speed>:
     86a:	8f 3f       	cpi	r24, 0xFF	; 255
     86c:	91 05       	cpc	r25, r1
     86e:	21 f0       	breq	.+8      	; 0x878 <motor_speed+0xe>
     870:	18 f0       	brcs	.+6      	; 0x878 <motor_speed+0xe>
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	87 cf       	rjmp	.-242    	; 0x784 <max520_send>
     876:	08 95       	ret
     878:	85 cf       	rjmp	.-246    	; 0x784 <max520_send>
     87a:	08 95       	ret

0000087c <motor_speed_direction>:
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	ec 01       	movw	r28, r24
     882:	99 23       	and	r25, r25
     884:	24 f4       	brge	.+8      	; 0x88e <motor_speed_direction+0x12>
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	e7 df       	rcall	.-50     	; 0x85a <motor_direction>
     88c:	03 c0       	rjmp	.+6      	; 0x894 <motor_speed_direction+0x18>
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	e3 df       	rcall	.-58     	; 0x85a <motor_direction>
     894:	ce 01       	movw	r24, r28
     896:	dd 23       	and	r29, r29
     898:	24 f4       	brge	.+8      	; 0x8a2 <motor_speed_direction+0x26>
     89a:	88 27       	eor	r24, r24
     89c:	99 27       	eor	r25, r25
     89e:	8c 1b       	sub	r24, r28
     8a0:	9d 0b       	sbc	r25, r29
     8a2:	e3 df       	rcall	.-58     	; 0x86a <motor_speed>
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <motor_encoder_reset>:
     8aa:	8e 98       	cbi	0x11, 6	; 17
     8ac:	8a e6       	ldi	r24, 0x6A	; 106
     8ae:	8a 95       	dec	r24
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <motor_encoder_reset+0x4>
     8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <motor_encoder_reset+0xa>
     8b4:	8e 9a       	sbi	0x11, 6	; 17
     8b6:	08 95       	ret

000008b8 <motor_init>:
     8b8:	62 df       	rcall	.-316    	; 0x77e <max520_init>
     8ba:	80 b3       	in	r24, 0x10	; 16
     8bc:	88 6f       	ori	r24, 0xF8	; 248
     8be:	80 bb       	out	0x10, r24	; 16
     8c0:	81 b3       	in	r24, 0x11	; 17
     8c2:	88 63       	ori	r24, 0x38	; 56
     8c4:	81 bb       	out	0x11, r24	; 17
     8c6:	8f 98       	cbi	0x11, 7	; 17
     8c8:	10 92 07 01 	sts	0x0107, r1
     8cc:	ee cf       	rjmp	.-36     	; 0x8aa <motor_encoder_reset>
     8ce:	08 95       	ret

000008d0 <reverse_bits>:
	
}


uint8_t reverse_bits(uint8_t byte){
	byte = ((byte & 0b01010101) << 1) | ((byte & 0b10101010) >> 1);
     8d0:	28 2f       	mov	r18, r24
     8d2:	2a 7a       	andi	r18, 0xAA	; 170
     8d4:	26 95       	lsr	r18
     8d6:	98 2f       	mov	r25, r24
     8d8:	95 75       	andi	r25, 0x55	; 85
     8da:	99 0f       	add	r25, r25
     8dc:	92 2b       	or	r25, r18
	byte = ((byte & 0b00110011) << 2) | ((byte & 0b11001100) >> 2);
     8de:	29 2f       	mov	r18, r25
     8e0:	2c 7c       	andi	r18, 0xCC	; 204
     8e2:	26 95       	lsr	r18
     8e4:	26 95       	lsr	r18
     8e6:	89 2f       	mov	r24, r25
     8e8:	83 73       	andi	r24, 0x33	; 51
     8ea:	88 0f       	add	r24, r24
     8ec:	88 0f       	add	r24, r24
     8ee:	82 2b       	or	r24, r18
	byte = ((byte & 0b00001111) << 4) | ((byte & 0b11110000) >> 4);
	return byte;
}
     8f0:	82 95       	swap	r24
     8f2:	08 95       	ret

000008f4 <motor_encoder_read>:

}



uint16_t motor_encoder_read(){
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
	uint8_t msb;
	uint8_t lsb;
	
	
	//enable output
	motor_encoder_output_enable(1);
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	a9 df       	rcall	.-174    	; 0x84e <motor_encoder_output_enable>
	
	//read MSB to data
	motor_encoder_select_byte(0);
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	a1 df       	rcall	.-190    	; 0x842 <motor_encoder_select_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     900:	8a e6       	ldi	r24, 0x6A	; 106
     902:	8a 95       	dec	r24
     904:	f1 f7       	brne	.-4      	; 0x902 <motor_encoder_read+0xe>
     906:	00 c0       	rjmp	.+0      	; 0x908 <motor_encoder_read+0x14>
}



uint8_t motor_encoder_byte_read(){
	uint8_t byte = PINK;
     908:	80 91 06 01 	lds	r24, 0x0106
	motor_encoder_output_enable(1);
	
	//read MSB to data
	motor_encoder_select_byte(0);
	_delay_us(20);
	msb = reverse_bits(motor_encoder_byte_read());
     90c:	e1 df       	rcall	.-62     	; 0x8d0 <reverse_bits>
     90e:	d8 2f       	mov	r29, r24
	
	//read LSB to data
	motor_encoder_select_byte(1);
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	97 df       	rcall	.-210    	; 0x842 <motor_encoder_select_byte>
     914:	8a e6       	ldi	r24, 0x6A	; 106
     916:	8a 95       	dec	r24
     918:	f1 f7       	brne	.-4      	; 0x916 <motor_encoder_read+0x22>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <motor_encoder_read+0x28>
}



uint8_t motor_encoder_byte_read(){
	uint8_t byte = PINK;
     91c:	80 91 06 01 	lds	r24, 0x0106
	msb = reverse_bits(motor_encoder_byte_read());
	
	//read LSB to data
	motor_encoder_select_byte(1);
	_delay_us(20);
	lsb = reverse_bits(motor_encoder_byte_read());
     920:	d7 df       	rcall	.-82     	; 0x8d0 <reverse_bits>
     922:	c8 2f       	mov	r28, r24
	
	//disable output
	motor_encoder_output_enable(0);
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	93 df       	rcall	.-218    	; 0x84e <motor_encoder_output_enable>
	
	
	uint16_t data = (msb << 8) + lsb;
     928:	2d 2f       	mov	r18, r29
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	92 2f       	mov	r25, r18
     92e:	88 27       	eor	r24, r24
	
	return data;

	
}
     930:	8c 0f       	add	r24, r28
     932:	91 1d       	adc	r25, r1
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <motor_controller_calibrate_by_reset>:
	
}


//MOTOR SPEED NEEDS TO BE TUNED FOR INDIVIDUAL GAME BOARD
void motor_controller_calibrate_by_reset(){
     93a:	ef 92       	push	r14
     93c:	ff 92       	push	r15
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
	
	uint8_t speed = 65;
	
	motor_init();
     946:	b8 df       	rcall	.-144    	; 0x8b8 <motor_init>
	
	uint16_t position;
	uint16_t prev_position;
	
	motor_speed(speed);
     948:	81 e4       	ldi	r24, 0x41	; 65
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	8e df       	rcall	.-228    	; 0x86a <motor_speed>
	motor_direction(right);
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	83 df       	rcall	.-250    	; 0x85a <motor_direction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     954:	2f ef       	ldi	r18, 0xFF	; 255
     956:	82 e5       	ldi	r24, 0x52	; 82
     958:	97 e0       	ldi	r25, 0x07	; 7
     95a:	21 50       	subi	r18, 0x01	; 1
     95c:	80 40       	sbci	r24, 0x00	; 0
     95e:	90 40       	sbci	r25, 0x00	; 0
     960:	e1 f7       	brne	.-8      	; 0x95a <motor_controller_calibrate_by_reset+0x20>
     962:	00 c0       	rjmp	.+0      	; 0x964 <motor_controller_calibrate_by_reset+0x2a>
     964:	00 00       	nop
	_delay_ms(150);
	
	position =  motor_encoder_read();
     966:	c6 df       	rcall	.-116    	; 0x8f4 <motor_encoder_read>
	
	//go right until stopped, then set encoder to zero
	while(position != prev_position){
     968:	89 2b       	or	r24, r25
     96a:	21 f1       	breq	.+72     	; 0x9b4 <motor_controller_calibrate_by_reset+0x7a>
		
		position =  motor_encoder_read();
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
		printf("position: %u\tPrev: %u\n", position, prev_position);
     96c:	0f 2e       	mov	r0, r31
     96e:	f9 e6       	ldi	r31, 0x69	; 105
     970:	ef 2e       	mov	r14, r31
     972:	f2 e0       	ldi	r31, 0x02	; 2
     974:	ff 2e       	mov	r15, r31
     976:	f0 2d       	mov	r31, r0
	
	//go right until stopped, then set encoder to zero
	while(position != prev_position){
		
		
		position =  motor_encoder_read();
     978:	bd df       	rcall	.-134    	; 0x8f4 <motor_encoder_read>
     97a:	ec 01       	movw	r28, r24
     97c:	2f ef       	ldi	r18, 0xFF	; 255
     97e:	81 ee       	ldi	r24, 0xE1	; 225
     980:	94 e0       	ldi	r25, 0x04	; 4
     982:	21 50       	subi	r18, 0x01	; 1
     984:	80 40       	sbci	r24, 0x00	; 0
     986:	90 40       	sbci	r25, 0x00	; 0
     988:	e1 f7       	brne	.-8      	; 0x982 <motor_controller_calibrate_by_reset+0x48>
     98a:	00 c0       	rjmp	.+0      	; 0x98c <motor_controller_calibrate_by_reset+0x52>
     98c:	00 00       	nop
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
     98e:	b2 df       	rcall	.-156    	; 0x8f4 <motor_encoder_read>
     990:	8c 01       	movw	r16, r24
		printf("position: %u\tPrev: %u\n", position, prev_position);
     992:	df 93       	push	r29
     994:	cf 93       	push	r28
     996:	1f 93       	push	r17
     998:	0f 93       	push	r16
     99a:	ff 92       	push	r15
     99c:	ef 92       	push	r14
     99e:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <printf>
	_delay_ms(150);
	
	position =  motor_encoder_read();
	
	//go right until stopped, then set encoder to zero
	while(position != prev_position){
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	c0 17       	cp	r28, r16
     9b0:	d1 07       	cpc	r29, r17
     9b2:	11 f7       	brne	.-60     	; 0x978 <motor_controller_calibrate_by_reset+0x3e>
		position = motor_encoder_read();
		printf("position: %u\tPrev: %u\n", position, prev_position);

		
	}
	motor_encoder_reset();
     9b4:	7a df       	rcall	.-268    	; 0x8aa <motor_encoder_reset>
	
	motor_speed(speed);
     9b6:	81 e4       	ldi	r24, 0x41	; 65
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	57 df       	rcall	.-338    	; 0x86a <motor_speed>
	motor_direction(left);
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	4c df       	rcall	.-360    	; 0x85a <motor_direction>
     9c2:	9f ef       	ldi	r25, 0xFF	; 255
     9c4:	22 e5       	ldi	r18, 0x52	; 82
     9c6:	87 e0       	ldi	r24, 0x07	; 7
     9c8:	91 50       	subi	r25, 0x01	; 1
     9ca:	20 40       	sbci	r18, 0x00	; 0
     9cc:	80 40       	sbci	r24, 0x00	; 0
     9ce:	e1 f7       	brne	.-8      	; 0x9c8 <motor_controller_calibrate_by_reset+0x8e>
     9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <motor_controller_calibrate_by_reset+0x98>
     9d2:	00 00       	nop
		
		position =  motor_encoder_read();
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
		printf("position: %d\n", position);
     9d4:	0f 2e       	mov	r0, r31
     9d6:	f0 e8       	ldi	r31, 0x80	; 128
     9d8:	ef 2e       	mov	r14, r31
     9da:	f2 e0       	ldi	r31, 0x02	; 2
     9dc:	ff 2e       	mov	r15, r31
     9de:	f0 2d       	mov	r31, r0
	
	//go left until stopped, set max left to current position
	do{
		
		
		position =  motor_encoder_read();
     9e0:	89 df       	rcall	.-238    	; 0x8f4 <motor_encoder_read>
     9e2:	8c 01       	movw	r16, r24
     9e4:	9f ef       	ldi	r25, 0xFF	; 255
     9e6:	21 ee       	ldi	r18, 0xE1	; 225
     9e8:	84 e0       	ldi	r24, 0x04	; 4
     9ea:	91 50       	subi	r25, 0x01	; 1
     9ec:	20 40       	sbci	r18, 0x00	; 0
     9ee:	80 40       	sbci	r24, 0x00	; 0
     9f0:	e1 f7       	brne	.-8      	; 0x9ea <motor_controller_calibrate_by_reset+0xb0>
     9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <motor_controller_calibrate_by_reset+0xba>
     9f4:	00 00       	nop
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
     9f6:	7e df       	rcall	.-260    	; 0x8f4 <motor_encoder_read>
     9f8:	ec 01       	movw	r28, r24
		printf("position: %d\n", position);
     9fa:	df 93       	push	r29
     9fc:	cf 93       	push	r28
     9fe:	ff 92       	push	r15
     a00:	ef 92       	push	r14
     a02:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <printf>
		
		
	} while(position != prev_position);
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0c 17       	cp	r16, r28
     a10:	1d 07       	cpc	r17, r29
     a12:	31 f7       	brne	.-52     	; 0x9e0 <motor_controller_calibrate_by_reset+0xa6>
	
	max_left = position;
     a14:	10 93 97 02 	sts	0x0297, r17
     a18:	00 93 96 02 	sts	0x0296, r16
	motor_speed(0);
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	24 df       	rcall	.-440    	; 0x86a <motor_speed>
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	ff 90       	pop	r15
     a2c:	ef 90       	pop	r14
     a2e:	08 95       	ret

00000a30 <PI_controller_new>:
	float error;
	float integral;
};


PI_controller* PI_controller_new(float kp, float ki){
     a30:	8f 92       	push	r8
     a32:	9f 92       	push	r9
     a34:	af 92       	push	r10
     a36:	bf 92       	push	r11
     a38:	cf 92       	push	r12
     a3a:	df 92       	push	r13
     a3c:	ef 92       	push	r14
     a3e:	ff 92       	push	r15
     a40:	4b 01       	movw	r8, r22
     a42:	5c 01       	movw	r10, r24
     a44:	69 01       	movw	r12, r18
     a46:	7a 01       	movw	r14, r20
	PI_controller* this = malloc(sizeof(PI_controller));
     a48:	82 e1       	ldi	r24, 0x12	; 18
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	b3 d7       	rcall	.+3942   	; 0x19b4 <malloc>
	
	//initialized variables of controller type to 0
	memset(this, 0, sizeof(PI_controller));
     a4e:	22 e1       	ldi	r18, 0x12	; 18
     a50:	fc 01       	movw	r30, r24
     a52:	11 92       	st	Z+, r1
     a54:	2a 95       	dec	r18
     a56:	e9 f7       	brne	.-6      	; 0xa52 <PI_controller_new+0x22>
	
	this->Ki = ki;
     a58:	fc 01       	movw	r30, r24
     a5a:	c4 82       	std	Z+4, r12	; 0x04
     a5c:	d5 82       	std	Z+5, r13	; 0x05
     a5e:	e6 82       	std	Z+6, r14	; 0x06
     a60:	f7 82       	std	Z+7, r15	; 0x07
	this->Kp = kp;
     a62:	80 82       	st	Z, r8
     a64:	91 82       	std	Z+1, r9	; 0x01
     a66:	a2 82       	std	Z+2, r10	; 0x02
     a68:	b3 82       	std	Z+3, r11	; 0x03
	
	return this;
}
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	bf 90       	pop	r11
     a74:	af 90       	pop	r10
     a76:	9f 90       	pop	r9
     a78:	8f 90       	pop	r8
     a7a:	08 95       	ret

00000a7c <PI_controller_output>:

int16_t PI_controller_output(PI_controller* ctrl, uint16_t y, uint16_t x){
     a7c:	8f 92       	push	r8
     a7e:	9f 92       	push	r9
     a80:	af 92       	push	r10
     a82:	bf 92       	push	r11
     a84:	cf 92       	push	r12
     a86:	df 92       	push	r13
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	ec 01       	movw	r28, r24
     a92:	5b 01       	movw	r10, r22
     a94:	4a 01       	movw	r8, r20


	float dt = (float)(timer_read(4) * prescaler / fcpu);	// dt time [seconds]
     a96:	84 e0       	ldi	r24, 0x04	; 4
     a98:	fc d0       	rcall	.+504    	; 0xc92 <timer_read>
     a9a:	bc 01       	movw	r22, r24
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0b d3       	rcall	.+1558   	; 0x10b8 <__floatunsisf>
     aa2:	20 91 06 02 	lds	r18, 0x0206
     aa6:	30 91 07 02 	lds	r19, 0x0207
     aaa:	40 91 08 02 	lds	r20, 0x0208
     aae:	50 91 09 02 	lds	r21, 0x0209
     ab2:	90 d3       	rcall	.+1824   	; 0x11d4 <__mulsf3>
     ab4:	20 91 0a 02 	lds	r18, 0x020A
     ab8:	30 91 0b 02 	lds	r19, 0x020B
     abc:	40 91 0c 02 	lds	r20, 0x020C
     ac0:	50 91 0d 02 	lds	r21, 0x020D
     ac4:	60 d2       	rcall	.+1216   	; 0xf86 <__divsf3>
     ac6:	6b 01       	movw	r12, r22
     ac8:	7c 01       	movw	r14, r24
	timer_reset(4);
     aca:	84 e0       	ldi	r24, 0x04	; 4
     acc:	07 d1       	rcall	.+526    	; 0xcdc <timer_reset>
	
	int16_t error = x - y;
     ace:	b4 01       	movw	r22, r8
     ad0:	6a 19       	sub	r22, r10
     ad2:	7b 09       	sbc	r23, r11
	ctrl->integral += error * dt;
     ad4:	88 27       	eor	r24, r24
     ad6:	77 fd       	sbrc	r23, 7
     ad8:	80 95       	com	r24
     ada:	98 2f       	mov	r25, r24
     adc:	ef d2       	rcall	.+1502   	; 0x10bc <__floatsisf>
     ade:	4b 01       	movw	r8, r22
     ae0:	5c 01       	movw	r10, r24
     ae2:	a7 01       	movw	r20, r14
     ae4:	96 01       	movw	r18, r12
     ae6:	76 d3       	rcall	.+1772   	; 0x11d4 <__mulsf3>
     ae8:	2e 85       	ldd	r18, Y+14	; 0x0e
     aea:	3f 85       	ldd	r19, Y+15	; 0x0f
     aec:	48 89       	ldd	r20, Y+16	; 0x10
     aee:	59 89       	ldd	r21, Y+17	; 0x11
     af0:	e6 d1       	rcall	.+972    	; 0xebe <__addsf3>
     af2:	6b 01       	movw	r12, r22
     af4:	7c 01       	movw	r14, r24
     af6:	6e 87       	std	Y+14, r22	; 0x0e
     af8:	7f 87       	std	Y+15, r23	; 0x0f
     afa:	88 8b       	std	Y+16, r24	; 0x10
     afc:	99 8b       	std	Y+17, r25	; 0x11
	
	return ctrl->Kp * error + ctrl->Ki * ctrl->integral;
     afe:	28 81       	ld	r18, Y
     b00:	39 81       	ldd	r19, Y+1	; 0x01
     b02:	4a 81       	ldd	r20, Y+2	; 0x02
     b04:	5b 81       	ldd	r21, Y+3	; 0x03
     b06:	c5 01       	movw	r24, r10
     b08:	b4 01       	movw	r22, r8
     b0a:	64 d3       	rcall	.+1736   	; 0x11d4 <__mulsf3>
     b0c:	4b 01       	movw	r8, r22
     b0e:	5c 01       	movw	r10, r24
     b10:	2c 81       	ldd	r18, Y+4	; 0x04
     b12:	3d 81       	ldd	r19, Y+5	; 0x05
     b14:	4e 81       	ldd	r20, Y+6	; 0x06
     b16:	5f 81       	ldd	r21, Y+7	; 0x07
     b18:	c7 01       	movw	r24, r14
     b1a:	b6 01       	movw	r22, r12
     b1c:	5b d3       	rcall	.+1718   	; 0x11d4 <__mulsf3>
     b1e:	9b 01       	movw	r18, r22
     b20:	ac 01       	movw	r20, r24
     b22:	c5 01       	movw	r24, r10
     b24:	b4 01       	movw	r22, r8
     b26:	cb d1       	rcall	.+918    	; 0xebe <__addsf3>
     b28:	96 d2       	rcall	.+1324   	; 0x1056 <__fixsfsi>
				

}
     b2a:	cb 01       	movw	r24, r22
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	bf 90       	pop	r11
     b3a:	af 90       	pop	r10
     b3c:	9f 90       	pop	r9
     b3e:	8f 90       	pop	r8
     b40:	08 95       	ret

00000b42 <pwm_init>:




void pwm_init(uint16_t pulse_period, uint16_t initial_pulse_width){
	DDRE |= (1<<PE3);
     b42:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE |= (1<<PE3);
     b44:	73 9a       	sbi	0x0e, 3	; 14
	
	TCCR3A = 0;
     b46:	a0 e9       	ldi	r26, 0x90	; 144
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	1c 92       	st	X, r1
	TCCR3B = 0;
     b4c:	e1 e9       	ldi	r30, 0x91	; 145
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	10 82       	st	Z, r1
	TCCR3C = 0;
     b52:	10 92 92 00 	sts	0x0092, r1
	
	//16 bit, fast pwm, top: ICR, update OCRnx at bottom, TOVn Flag set on TOP
	TCCR3A &= ~(1<< WGM30);
     b56:	2c 91       	ld	r18, X
     b58:	2e 7f       	andi	r18, 0xFE	; 254
     b5a:	2c 93       	st	X, r18
	TCCR3A |= (1<<WGM31);
     b5c:	2c 91       	ld	r18, X
     b5e:	22 60       	ori	r18, 0x02	; 2
     b60:	2c 93       	st	X, r18
	TCCR3B |= (1<<WGM32);
     b62:	20 81       	ld	r18, Z
     b64:	28 60       	ori	r18, 0x08	; 8
     b66:	20 83       	st	Z, r18
	TCCR3B |= (1<<WGM33);
     b68:	20 81       	ld	r18, Z
     b6a:	20 61       	ori	r18, 0x10	; 16
     b6c:	20 83       	st	Z, r18
	
	//inverting		
	TCCR3A |= (0<<COM3A0);
     b6e:	2c 91       	ld	r18, X
     b70:	2c 93       	st	X, r18
	TCCR3A |= (1<<COM3A1);
     b72:	2c 91       	ld	r18, X
     b74:	20 68       	ori	r18, 0x80	; 128
     b76:	2c 93       	st	X, r18
	
	//prescaler,	CLK / 64
	TCCR3B |= (1<<CS30) | (1<<CS31);
     b78:	20 81       	ld	r18, Z
     b7a:	23 60       	ori	r18, 0x03	; 3
     b7c:	20 83       	st	Z, r18
	TCCR3B &= ~(1<<CS32);
     b7e:	20 81       	ld	r18, Z
     b80:	2b 7f       	andi	r18, 0xFB	; 251
     b82:	20 83       	st	Z, r18
	
	//20 ms
	ICR3 = pulse_period;
     b84:	90 93 97 00 	sts	0x0097, r25
     b88:	80 93 96 00 	sts	0x0096, r24
	
	OCR3A = initial_pulse_width; //should be P_MID
     b8c:	70 93 99 00 	sts	0x0099, r23
     b90:	60 93 98 00 	sts	0x0098, r22
     b94:	08 95       	ret

00000b96 <pwm_set_pulse_width>:
	//printf("PWM init done:\n\tTCCRA: %02X\n\tTCCRB: %02X\n\tICR: %02X\n\tOCR: %02X\n", TCCR3A, TCCR3B, ICR3, OCR3A);
}


void pwm_set_pulse_width(uint16_t pulse){
	OCR3A = pulse;
     b96:	90 93 99 00 	sts	0x0099, r25
     b9a:	80 93 98 00 	sts	0x0098, r24
     b9e:	08 95       	ret

00000ba0 <servo_set_pulse>:
}


void servo_set_pulse(int16_t pulse_width){
	
	if(pulse_width >= P_MAX){
     ba0:	8d 30       	cpi	r24, 0x0D	; 13
     ba2:	22 e0       	ldi	r18, 0x02	; 2
     ba4:	92 07       	cpc	r25, r18
     ba6:	24 f0       	brlt	.+8      	; 0xbb0 <servo_set_pulse+0x10>
		pwm_set_pulse_width(P_MAX);
     ba8:	8d e0       	ldi	r24, 0x0D	; 13
     baa:	92 e0       	ldi	r25, 0x02	; 2
     bac:	f4 cf       	rjmp	.-24     	; 0xb96 <pwm_set_pulse_width>
     bae:	08 95       	ret
	}
	else if(pulse_width < P_MIN){
     bb0:	81 3e       	cpi	r24, 0xE1	; 225
     bb2:	91 05       	cpc	r25, r1
     bb4:	24 f4       	brge	.+8      	; 0xbbe <servo_set_pulse+0x1e>
		pwm_set_pulse_width(P_MIN);
     bb6:	81 ee       	ldi	r24, 0xE1	; 225
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	ed cf       	rjmp	.-38     	; 0xb96 <pwm_set_pulse_width>
     bbc:	08 95       	ret
	}
	else{
		pwm_set_pulse_width(pulse_width);
     bbe:	eb cf       	rjmp	.-42     	; 0xb96 <pwm_set_pulse_width>
     bc0:	08 95       	ret

00000bc2 <servo_set_pulse_by_input>:
}

void servo_set_pulse_by_input(int16_t val){
	
	//reverses control, more intuitive width our hardware
	val = abs(val - 255);
     bc2:	8f 5f       	subi	r24, 0xFF	; 255
     bc4:	91 09       	sbc	r25, r1
     bc6:	bc 01       	movw	r22, r24
     bc8:	99 23       	and	r25, r25
     bca:	24 f4       	brge	.+8      	; 0xbd4 <servo_set_pulse_by_input+0x12>
     bcc:	66 27       	eor	r22, r22
     bce:	77 27       	eor	r23, r23
     bd0:	68 1b       	sub	r22, r24
     bd2:	79 0b       	sbc	r23, r25
	
	
	uint16_t pulse_width = (float)(val * (300/255.0)) + P_MIN;
     bd4:	88 27       	eor	r24, r24
     bd6:	77 fd       	sbrc	r23, 7
     bd8:	80 95       	com	r24
     bda:	98 2f       	mov	r25, r24
     bdc:	6f d2       	rcall	.+1246   	; 0x10bc <__floatsisf>
     bde:	27 e9       	ldi	r18, 0x97	; 151
     be0:	36 e9       	ldi	r19, 0x96	; 150
     be2:	46 e9       	ldi	r20, 0x96	; 150
     be4:	5f e3       	ldi	r21, 0x3F	; 63
     be6:	f6 d2       	rcall	.+1516   	; 0x11d4 <__mulsf3>
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	41 e6       	ldi	r20, 0x61	; 97
     bee:	53 e4       	ldi	r21, 0x43	; 67
     bf0:	66 d1       	rcall	.+716    	; 0xebe <__addsf3>
     bf2:	36 d2       	rcall	.+1132   	; 0x1060 <__fixunssfsi>
	servo_set_pulse(pulse_width);
     bf4:	cb 01       	movw	r24, r22
     bf6:	d4 cf       	rjmp	.-88     	; 0xba0 <servo_set_pulse>
     bf8:	08 95       	ret

00000bfa <solenoid_init>:
void solenoid_extend(){
	PORTH &= ~(1<<PH3);
}

void solenoid_retract(){
	PORTH |= (1<<PH3);	
     bfa:	e1 e0       	ldi	r30, 0x01	; 1
     bfc:	f1 e0       	ldi	r31, 0x01	; 1
     bfe:	80 81       	ld	r24, Z
     c00:	88 60       	ori	r24, 0x08	; 8
     c02:	80 83       	st	Z, r24
     c04:	e2 e0       	ldi	r30, 0x02	; 2
     c06:	f1 e0       	ldi	r31, 0x01	; 1
     c08:	80 81       	ld	r24, Z
     c0a:	88 60       	ori	r24, 0x08	; 8
     c0c:	80 83       	st	Z, r24
     c0e:	08 95       	ret

00000c10 <solenoid_shoot>:
     c10:	e2 e0       	ldi	r30, 0x02	; 2
     c12:	f1 e0       	ldi	r31, 0x01	; 1
     c14:	80 81       	ld	r24, Z
     c16:	87 7f       	andi	r24, 0xF7	; 247
     c18:	80 83       	st	Z, r24
     c1a:	2f ef       	ldi	r18, 0xFF	; 255
     c1c:	82 e5       	ldi	r24, 0x52	; 82
     c1e:	97 e0       	ldi	r25, 0x07	; 7
     c20:	21 50       	subi	r18, 0x01	; 1
     c22:	80 40       	sbci	r24, 0x00	; 0
     c24:	90 40       	sbci	r25, 0x00	; 0
     c26:	e1 f7       	brne	.-8      	; 0xc20 <solenoid_shoot+0x10>
     c28:	00 c0       	rjmp	.+0      	; 0xc2a <solenoid_shoot+0x1a>
     c2a:	00 00       	nop
     c2c:	80 81       	ld	r24, Z
     c2e:	88 60       	ori	r24, 0x08	; 8
     c30:	80 83       	st	Z, r24
     c32:	08 95       	ret

00000c34 <solenoid_disallow_shooting>:
}

void solenoid_disallow_shooting(){
	shoot = 0;
     c34:	10 92 0e 02 	sts	0x020E, r1
     c38:	08 95       	ret

00000c3a <solenoid_allow_shooting>:
}
void solenoid_allow_shooting(){
	shoot = 1;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	80 93 0e 02 	sts	0x020E, r24
     c40:	08 95       	ret

00000c42 <solenoid_is_shooting_allowed>:
}
uint8_t solenoid_is_shooting_allowed(){
	return shoot;
}
     c42:	80 91 0e 02 	lds	r24, 0x020E
     c46:	08 95       	ret

00000c48 <spi_init>:
#include "SPI.h"
#include <avr/io.h>

void spi_init(){
			//SI out		SS out		SCK out
	DDRB |= ( 1 << PB2) | (1 << PB0) | (1 << PB1);
     c48:	84 b1       	in	r24, 0x04	; 4
     c4a:	87 60       	ori	r24, 0x07	; 7
     c4c:	84 b9       	out	0x04, r24	; 4
	//SO in
	DDRB &= ~(1 << PB3);
     c4e:	23 98       	cbi	0x04, 3	; 4
	
	//								 frequency / 16
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     c50:	81 e5       	ldi	r24, 0x51	; 81
     c52:	8c bd       	out	0x2c, r24	; 44
     c54:	08 95       	ret

00000c56 <spi_write>:

//both read and write
int spi_write(char data){
	//SPDR = data;
	//while(!(SPSR & (1<<SPIF)));
	SPDR = data;
     c56:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
     c58:	0d b4       	in	r0, 0x2d	; 45
     c5a:	07 fe       	sbrs	r0, 7
     c5c:	fd cf       	rjmp	.-6      	; 0xc58 <spi_write+0x2>
	return SPDR;
     c5e:	8e b5       	in	r24, 0x2e	; 46
}
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	08 95       	ret

00000c64 <timer_init>:
}
void timer3_reset(){
	TCNT3 = 0;
}
void timer4_reset(){
	TCNT4 = 0;
     c64:	10 92 a0 00 	sts	0x00A0, r1
     c68:	e1 ea       	ldi	r30, 0xA1	; 161
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	10 82       	st	Z, r1
     c6e:	80 81       	ld	r24, Z
     c70:	85 60       	ori	r24, 0x05	; 5
     c72:	80 83       	st	Z, r24
     c74:	80 81       	ld	r24, Z
     c76:	8d 7f       	andi	r24, 0xFD	; 253
     c78:	80 83       	st	Z, r24
     c7a:	10 92 20 01 	sts	0x0120, r1
     c7e:	e1 e2       	ldi	r30, 0x21	; 33
     c80:	f1 e0       	ldi	r31, 0x01	; 1
     c82:	10 82       	st	Z, r1
     c84:	80 81       	ld	r24, Z
     c86:	85 60       	ori	r24, 0x05	; 5
     c88:	80 83       	st	Z, r24
     c8a:	80 81       	ld	r24, Z
     c8c:	8d 7f       	andi	r24, 0xFD	; 253
     c8e:	80 83       	st	Z, r24
     c90:	08 95       	ret

00000c92 <timer_read>:
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	29 f4       	brne	.+10     	; 0xca0 <timer_read+0xe>
     c96:	20 91 84 00 	lds	r18, 0x0084
     c9a:	30 91 85 00 	lds	r19, 0x0085
     c9e:	16 c0       	rjmp	.+44     	; 0xccc <timer_read+0x3a>
     ca0:	83 30       	cpi	r24, 0x03	; 3
     ca2:	29 f4       	brne	.+10     	; 0xcae <timer_read+0x1c>
     ca4:	20 91 94 00 	lds	r18, 0x0094
     ca8:	30 91 95 00 	lds	r19, 0x0095
     cac:	0f c0       	rjmp	.+30     	; 0xccc <timer_read+0x3a>
     cae:	84 30       	cpi	r24, 0x04	; 4
     cb0:	29 f4       	brne	.+10     	; 0xcbc <timer_read+0x2a>
     cb2:	20 91 a4 00 	lds	r18, 0x00A4
     cb6:	30 91 a5 00 	lds	r19, 0x00A5
     cba:	08 c0       	rjmp	.+16     	; 0xccc <timer_read+0x3a>
     cbc:	85 30       	cpi	r24, 0x05	; 5
     cbe:	29 f4       	brne	.+10     	; 0xcca <timer_read+0x38>
     cc0:	20 91 24 01 	lds	r18, 0x0124
     cc4:	30 91 25 01 	lds	r19, 0x0125
     cc8:	01 c0       	rjmp	.+2      	; 0xccc <timer_read+0x3a>
     cca:	08 95       	ret
     ccc:	82 2f       	mov	r24, r18
     cce:	93 2f       	mov	r25, r19
     cd0:	08 95       	ret

00000cd2 <timer5_read>:
     cd2:	80 91 24 01 	lds	r24, 0x0124
     cd6:	90 91 25 01 	lds	r25, 0x0125
     cda:	08 95       	ret

00000cdc <timer_reset>:
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	29 f4       	brne	.+10     	; 0xcea <timer_reset+0xe>
     ce0:	10 92 85 00 	sts	0x0085, r1
     ce4:	10 92 84 00 	sts	0x0084, r1
     ce8:	08 95       	ret
     cea:	83 30       	cpi	r24, 0x03	; 3
     cec:	29 f4       	brne	.+10     	; 0xcf8 <timer_reset+0x1c>
     cee:	10 92 95 00 	sts	0x0095, r1
     cf2:	10 92 94 00 	sts	0x0094, r1
     cf6:	08 95       	ret
     cf8:	84 30       	cpi	r24, 0x04	; 4
     cfa:	29 f4       	brne	.+10     	; 0xd06 <timer_reset+0x2a>
     cfc:	10 92 a5 00 	sts	0x00A5, r1
     d00:	10 92 a4 00 	sts	0x00A4, r1
     d04:	08 95       	ret
     d06:	85 30       	cpi	r24, 0x05	; 5
     d08:	21 f4       	brne	.+8      	; 0xd12 <timer_reset+0x36>
     d0a:	10 92 25 01 	sts	0x0125, r1
     d0e:	10 92 24 01 	sts	0x0124, r1
     d12:	08 95       	ret

00000d14 <timer5_reset>:
}
void timer5_reset(){
	TCNT5 = 0;
     d14:	10 92 25 01 	sts	0x0125, r1
     d18:	10 92 24 01 	sts	0x0124, r1
     d1c:	08 95       	ret

00000d1e <TWI_Master_Initialise>:
		{
			msg[ i ] = TWI_buf[ i ];
		}
	}
	return( TWI_statusReg.lastTransOK );
}
     d1e:	8c e0       	ldi	r24, 0x0C	; 12
     d20:	80 93 b8 00 	sts	0x00B8, r24
     d24:	8f ef       	ldi	r24, 0xFF	; 255
     d26:	80 93 bb 00 	sts	0x00BB, r24
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	80 93 bc 00 	sts	0x00BC, r24
     d30:	08 95       	ret

00000d32 <TWI_Start_Transceiver_With_Data>:
     d32:	ec eb       	ldi	r30, 0xBC	; 188
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	20 81       	ld	r18, Z
     d38:	20 fd       	sbrc	r18, 0
     d3a:	fd cf       	rjmp	.-6      	; 0xd36 <TWI_Start_Transceiver_With_Data+0x4>
     d3c:	60 93 91 02 	sts	0x0291, r22
     d40:	fc 01       	movw	r30, r24
     d42:	20 81       	ld	r18, Z
     d44:	20 93 92 02 	sts	0x0292, r18
     d48:	20 fd       	sbrc	r18, 0
     d4a:	0c c0       	rjmp	.+24     	; 0xd64 <TWI_Start_Transceiver_With_Data+0x32>
     d4c:	62 30       	cpi	r22, 0x02	; 2
     d4e:	50 f0       	brcs	.+20     	; 0xd64 <TWI_Start_Transceiver_With_Data+0x32>
     d50:	dc 01       	movw	r26, r24
     d52:	11 96       	adiw	r26, 0x01	; 1
     d54:	e3 e9       	ldi	r30, 0x93	; 147
     d56:	f2 e0       	ldi	r31, 0x02	; 2
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	9d 91       	ld	r25, X+
     d5c:	91 93       	st	Z+, r25
     d5e:	8f 5f       	subi	r24, 0xFF	; 255
     d60:	86 13       	cpse	r24, r22
     d62:	fb cf       	rjmp	.-10     	; 0xd5a <TWI_Start_Transceiver_With_Data+0x28>
     d64:	10 92 90 02 	sts	0x0290, r1
     d68:	88 ef       	ldi	r24, 0xF8	; 248
     d6a:	80 93 0f 02 	sts	0x020F, r24
     d6e:	85 ea       	ldi	r24, 0xA5	; 165
     d70:	80 93 bc 00 	sts	0x00BC, r24
     d74:	08 95       	ret

00000d76 <__vector_39>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
     d76:	1f 92       	push	r1
     d78:	0f 92       	push	r0
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	0f 92       	push	r0
     d7e:	11 24       	eor	r1, r1
     d80:	0b b6       	in	r0, 0x3b	; 59
     d82:	0f 92       	push	r0
     d84:	2f 93       	push	r18
     d86:	3f 93       	push	r19
     d88:	8f 93       	push	r24
     d8a:	9f 93       	push	r25
     d8c:	af 93       	push	r26
     d8e:	bf 93       	push	r27
     d90:	ef 93       	push	r30
     d92:	ff 93       	push	r31
	static unsigned char TWI_bufPtr;
	
	switch (TWSR)
     d94:	80 91 b9 00 	lds	r24, 0x00B9
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	fc 01       	movw	r30, r24
     d9c:	38 97       	sbiw	r30, 0x08	; 8
     d9e:	e1 35       	cpi	r30, 0x51	; 81
     da0:	f1 05       	cpc	r31, r1
     da2:	08 f0       	brcs	.+2      	; 0xda6 <__vector_39+0x30>
     da4:	55 c0       	rjmp	.+170    	; 0xe50 <__vector_39+0xda>
     da6:	ee 58       	subi	r30, 0x8E	; 142
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	fe c5       	rjmp	.+3068   	; 0x19a8 <__tablejump2__>
	{
		case TWI_START:             // START has been transmitted
		case TWI_REP_START:         // Repeated START has been transmitted
		TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
     dac:	10 92 8f 02 	sts	0x028F, r1
		case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
		case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
		if (TWI_bufPtr < TWI_msgSize)
     db0:	e0 91 8f 02 	lds	r30, 0x028F
     db4:	80 91 91 02 	lds	r24, 0x0291
     db8:	e8 17       	cp	r30, r24
     dba:	70 f4       	brcc	.+28     	; 0xdd8 <__vector_39+0x62>
		{
			TWDR = TWI_buf[TWI_bufPtr++];
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	8e 0f       	add	r24, r30
     dc0:	80 93 8f 02 	sts	0x028F, r24
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	ee 56       	subi	r30, 0x6E	; 110
     dc8:	fd 4f       	sbci	r31, 0xFD	; 253
     dca:	80 81       	ld	r24, Z
     dcc:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     dd0:	85 e8       	ldi	r24, 0x85	; 133
     dd2:	80 93 bc 00 	sts	0x00BC, r24
     dd6:	43 c0       	rjmp	.+134    	; 0xe5e <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
			(0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
			TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     dd8:	80 91 90 02 	lds	r24, 0x0290
     ddc:	81 60       	ori	r24, 0x01	; 1
     dde:	80 93 90 02 	sts	0x0290, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     de2:	84 e9       	ldi	r24, 0x94	; 148
     de4:	80 93 bc 00 	sts	0x00BC, r24
     de8:	3a c0       	rjmp	.+116    	; 0xe5e <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
		TWI_buf[TWI_bufPtr++] = TWDR;
     dea:	e0 91 8f 02 	lds	r30, 0x028F
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	8e 0f       	add	r24, r30
     df2:	80 93 8f 02 	sts	0x028F, r24
     df6:	80 91 bb 00 	lds	r24, 0x00BB
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	ee 56       	subi	r30, 0x6E	; 110
     dfe:	fd 4f       	sbci	r31, 0xFD	; 253
     e00:	80 83       	st	Z, r24
		case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
		if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
     e02:	20 91 8f 02 	lds	r18, 0x028F
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	80 91 91 02 	lds	r24, 0x0291
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	28 17       	cp	r18, r24
     e12:	39 07       	cpc	r19, r25
     e14:	24 f4       	brge	.+8      	; 0xe1e <__vector_39+0xa8>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     e16:	85 ec       	ldi	r24, 0xC5	; 197
     e18:	80 93 bc 00 	sts	0x00BC, r24
     e1c:	20 c0       	rjmp	.+64     	; 0xe5e <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
			(0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     e1e:	85 e8       	ldi	r24, 0x85	; 133
     e20:	80 93 bc 00 	sts	0x00BC, r24
     e24:	1c c0       	rjmp	.+56     	; 0xe5e <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
		TWI_buf[TWI_bufPtr] = TWDR;
     e26:	80 91 bb 00 	lds	r24, 0x00BB
     e2a:	e0 91 8f 02 	lds	r30, 0x028F
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	ee 56       	subi	r30, 0x6E	; 110
     e32:	fd 4f       	sbci	r31, 0xFD	; 253
     e34:	80 83       	st	Z, r24
		TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     e36:	80 91 90 02 	lds	r24, 0x0290
     e3a:	81 60       	ori	r24, 0x01	; 1
     e3c:	80 93 90 02 	sts	0x0290, r24
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     e40:	84 e9       	ldi	r24, 0x94	; 148
     e42:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
		(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
		(0<<TWWC);                                 //
		break;
     e46:	0b c0       	rjmp	.+22     	; 0xe5e <__vector_39+0xe8>
		case TWI_ARB_LOST:          // Arbitration lost
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     e48:	85 ea       	ldi	r24, 0xA5	; 165
     e4a:	80 93 bc 00 	sts	0x00BC, r24
		(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
		(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
		(0<<TWWC);                                 //
		break;
     e4e:	07 c0       	rjmp	.+14     	; 0xe5e <__vector_39+0xe8>
		case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received
		case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
		//    case TWI_NO_STATE              // No relevant state information available; TWINT = ?0?
		case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
		default:
		TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     e50:	80 91 b9 00 	lds	r24, 0x00B9
     e54:	80 93 0f 02 	sts	0x020F, r24
		// Reset TWI Interface
		TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     e58:	84 e0       	ldi	r24, 0x04	; 4
     e5a:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
		(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
		(0<<TWWC);                                 //
	}
     e5e:	ff 91       	pop	r31
     e60:	ef 91       	pop	r30
     e62:	bf 91       	pop	r27
     e64:	af 91       	pop	r26
     e66:	9f 91       	pop	r25
     e68:	8f 91       	pop	r24
     e6a:	3f 91       	pop	r19
     e6c:	2f 91       	pop	r18
     e6e:	0f 90       	pop	r0
     e70:	0b be       	out	0x3b, r0	; 59
     e72:	0f 90       	pop	r0
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	0f 90       	pop	r0
     e78:	1f 90       	pop	r1
     e7a:	18 95       	reti

00000e7c <uart_Transmit>:
}

void uart_Transmit( unsigned char data ){
	
	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     e7c:	e0 ec       	ldi	r30, 0xC0	; 192
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	90 81       	ld	r25, Z
     e82:	95 ff       	sbrs	r25, 5
     e84:	fd cf       	rjmp	.-6      	; 0xe80 <uart_Transmit+0x4>
	
	//Put data into buffer, sends the data
	UDR0 = data;
     e86:	80 93 c6 00 	sts	0x00C6, r24
     e8a:	08 95       	ret

00000e8c <uart_Receive>:

unsigned char uart_Receive(void){
	
	//Wait for data to be received
	
	while( !(UCSR0A & (1<<RXC0)) );
     e8c:	e0 ec       	ldi	r30, 0xC0	; 192
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	88 23       	and	r24, r24
     e94:	ec f7       	brge	.-6      	; 0xe90 <uart_Receive+0x4>
	
	//Get and return received data from buffer
	
	return UDR0;
     e96:	80 91 c6 00 	lds	r24, 0x00C6
}
     e9a:	08 95       	ret

00000e9c <uart_Init>:
#include "uart.h"

void uart_Init(unsigned int ubrr){
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     e9c:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     ea0:	80 93 c4 00 	sts	0x00C4, r24
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     ea4:	88 e1       	ldi	r24, 0x18	; 24
     ea6:	80 93 c1 00 	sts	0x00C1, r24
	
	//Set frame format: 8data, 1stop bit
	UCSR0C = (1 << 7)|(3<<UCSZ00);//here, 7 replaces URSEL0 from ATmega162 project
     eaa:	86 e8       	ldi	r24, 0x86	; 134
     eac:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(uart_Transmit, uart_Receive);
     eb0:	66 e4       	ldi	r22, 0x46	; 70
     eb2:	77 e0       	ldi	r23, 0x07	; 7
     eb4:	8e e3       	ldi	r24, 0x3E	; 62
     eb6:	97 e0       	ldi	r25, 0x07	; 7
     eb8:	92 c7       	rjmp	.+3876   	; 0x1dde <fdevopen>
     eba:	08 95       	ret

00000ebc <__subsf3>:
     ebc:	50 58       	subi	r21, 0x80	; 128

00000ebe <__addsf3>:
     ebe:	bb 27       	eor	r27, r27
     ec0:	aa 27       	eor	r26, r26
     ec2:	0e d0       	rcall	.+28     	; 0xee0 <__addsf3x>
     ec4:	4d c1       	rjmp	.+666    	; 0x1160 <__fp_round>
     ec6:	3e d1       	rcall	.+636    	; 0x1144 <__fp_pscA>
     ec8:	30 f0       	brcs	.+12     	; 0xed6 <__addsf3+0x18>
     eca:	43 d1       	rcall	.+646    	; 0x1152 <__fp_pscB>
     ecc:	20 f0       	brcs	.+8      	; 0xed6 <__addsf3+0x18>
     ece:	31 f4       	brne	.+12     	; 0xedc <__addsf3+0x1e>
     ed0:	9f 3f       	cpi	r25, 0xFF	; 255
     ed2:	11 f4       	brne	.+4      	; 0xed8 <__addsf3+0x1a>
     ed4:	1e f4       	brtc	.+6      	; 0xedc <__addsf3+0x1e>
     ed6:	33 c1       	rjmp	.+614    	; 0x113e <__fp_nan>
     ed8:	0e f4       	brtc	.+2      	; 0xedc <__addsf3+0x1e>
     eda:	e0 95       	com	r30
     edc:	e7 fb       	bst	r30, 7
     ede:	29 c1       	rjmp	.+594    	; 0x1132 <__fp_inf>

00000ee0 <__addsf3x>:
     ee0:	e9 2f       	mov	r30, r25
     ee2:	4f d1       	rcall	.+670    	; 0x1182 <__fp_split3>
     ee4:	80 f3       	brcs	.-32     	; 0xec6 <__addsf3+0x8>
     ee6:	ba 17       	cp	r27, r26
     ee8:	62 07       	cpc	r22, r18
     eea:	73 07       	cpc	r23, r19
     eec:	84 07       	cpc	r24, r20
     eee:	95 07       	cpc	r25, r21
     ef0:	18 f0       	brcs	.+6      	; 0xef8 <__addsf3x+0x18>
     ef2:	71 f4       	brne	.+28     	; 0xf10 <__addsf3x+0x30>
     ef4:	9e f5       	brtc	.+102    	; 0xf5c <__addsf3x+0x7c>
     ef6:	67 c1       	rjmp	.+718    	; 0x11c6 <__fp_zero>
     ef8:	0e f4       	brtc	.+2      	; 0xefc <__addsf3x+0x1c>
     efa:	e0 95       	com	r30
     efc:	0b 2e       	mov	r0, r27
     efe:	ba 2f       	mov	r27, r26
     f00:	a0 2d       	mov	r26, r0
     f02:	0b 01       	movw	r0, r22
     f04:	b9 01       	movw	r22, r18
     f06:	90 01       	movw	r18, r0
     f08:	0c 01       	movw	r0, r24
     f0a:	ca 01       	movw	r24, r20
     f0c:	a0 01       	movw	r20, r0
     f0e:	11 24       	eor	r1, r1
     f10:	ff 27       	eor	r31, r31
     f12:	59 1b       	sub	r21, r25
     f14:	99 f0       	breq	.+38     	; 0xf3c <__addsf3x+0x5c>
     f16:	59 3f       	cpi	r21, 0xF9	; 249
     f18:	50 f4       	brcc	.+20     	; 0xf2e <__addsf3x+0x4e>
     f1a:	50 3e       	cpi	r21, 0xE0	; 224
     f1c:	68 f1       	brcs	.+90     	; 0xf78 <__addsf3x+0x98>
     f1e:	1a 16       	cp	r1, r26
     f20:	f0 40       	sbci	r31, 0x00	; 0
     f22:	a2 2f       	mov	r26, r18
     f24:	23 2f       	mov	r18, r19
     f26:	34 2f       	mov	r19, r20
     f28:	44 27       	eor	r20, r20
     f2a:	58 5f       	subi	r21, 0xF8	; 248
     f2c:	f3 cf       	rjmp	.-26     	; 0xf14 <__addsf3x+0x34>
     f2e:	46 95       	lsr	r20
     f30:	37 95       	ror	r19
     f32:	27 95       	ror	r18
     f34:	a7 95       	ror	r26
     f36:	f0 40       	sbci	r31, 0x00	; 0
     f38:	53 95       	inc	r21
     f3a:	c9 f7       	brne	.-14     	; 0xf2e <__addsf3x+0x4e>
     f3c:	7e f4       	brtc	.+30     	; 0xf5c <__addsf3x+0x7c>
     f3e:	1f 16       	cp	r1, r31
     f40:	ba 0b       	sbc	r27, r26
     f42:	62 0b       	sbc	r22, r18
     f44:	73 0b       	sbc	r23, r19
     f46:	84 0b       	sbc	r24, r20
     f48:	ba f0       	brmi	.+46     	; 0xf78 <__addsf3x+0x98>
     f4a:	91 50       	subi	r25, 0x01	; 1
     f4c:	a1 f0       	breq	.+40     	; 0xf76 <__addsf3x+0x96>
     f4e:	ff 0f       	add	r31, r31
     f50:	bb 1f       	adc	r27, r27
     f52:	66 1f       	adc	r22, r22
     f54:	77 1f       	adc	r23, r23
     f56:	88 1f       	adc	r24, r24
     f58:	c2 f7       	brpl	.-16     	; 0xf4a <__addsf3x+0x6a>
     f5a:	0e c0       	rjmp	.+28     	; 0xf78 <__addsf3x+0x98>
     f5c:	ba 0f       	add	r27, r26
     f5e:	62 1f       	adc	r22, r18
     f60:	73 1f       	adc	r23, r19
     f62:	84 1f       	adc	r24, r20
     f64:	48 f4       	brcc	.+18     	; 0xf78 <__addsf3x+0x98>
     f66:	87 95       	ror	r24
     f68:	77 95       	ror	r23
     f6a:	67 95       	ror	r22
     f6c:	b7 95       	ror	r27
     f6e:	f7 95       	ror	r31
     f70:	9e 3f       	cpi	r25, 0xFE	; 254
     f72:	08 f0       	brcs	.+2      	; 0xf76 <__addsf3x+0x96>
     f74:	b3 cf       	rjmp	.-154    	; 0xedc <__addsf3+0x1e>
     f76:	93 95       	inc	r25
     f78:	88 0f       	add	r24, r24
     f7a:	08 f0       	brcs	.+2      	; 0xf7e <__addsf3x+0x9e>
     f7c:	99 27       	eor	r25, r25
     f7e:	ee 0f       	add	r30, r30
     f80:	97 95       	ror	r25
     f82:	87 95       	ror	r24
     f84:	08 95       	ret

00000f86 <__divsf3>:
     f86:	0c d0       	rcall	.+24     	; 0xfa0 <__divsf3x>
     f88:	eb c0       	rjmp	.+470    	; 0x1160 <__fp_round>
     f8a:	e3 d0       	rcall	.+454    	; 0x1152 <__fp_pscB>
     f8c:	40 f0       	brcs	.+16     	; 0xf9e <__divsf3+0x18>
     f8e:	da d0       	rcall	.+436    	; 0x1144 <__fp_pscA>
     f90:	30 f0       	brcs	.+12     	; 0xf9e <__divsf3+0x18>
     f92:	21 f4       	brne	.+8      	; 0xf9c <__divsf3+0x16>
     f94:	5f 3f       	cpi	r21, 0xFF	; 255
     f96:	19 f0       	breq	.+6      	; 0xf9e <__divsf3+0x18>
     f98:	cc c0       	rjmp	.+408    	; 0x1132 <__fp_inf>
     f9a:	51 11       	cpse	r21, r1
     f9c:	15 c1       	rjmp	.+554    	; 0x11c8 <__fp_szero>
     f9e:	cf c0       	rjmp	.+414    	; 0x113e <__fp_nan>

00000fa0 <__divsf3x>:
     fa0:	f0 d0       	rcall	.+480    	; 0x1182 <__fp_split3>
     fa2:	98 f3       	brcs	.-26     	; 0xf8a <__divsf3+0x4>

00000fa4 <__divsf3_pse>:
     fa4:	99 23       	and	r25, r25
     fa6:	c9 f3       	breq	.-14     	; 0xf9a <__divsf3+0x14>
     fa8:	55 23       	and	r21, r21
     faa:	b1 f3       	breq	.-20     	; 0xf98 <__divsf3+0x12>
     fac:	95 1b       	sub	r25, r21
     fae:	55 0b       	sbc	r21, r21
     fb0:	bb 27       	eor	r27, r27
     fb2:	aa 27       	eor	r26, r26
     fb4:	62 17       	cp	r22, r18
     fb6:	73 07       	cpc	r23, r19
     fb8:	84 07       	cpc	r24, r20
     fba:	38 f0       	brcs	.+14     	; 0xfca <__divsf3_pse+0x26>
     fbc:	9f 5f       	subi	r25, 0xFF	; 255
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255
     fc0:	22 0f       	add	r18, r18
     fc2:	33 1f       	adc	r19, r19
     fc4:	44 1f       	adc	r20, r20
     fc6:	aa 1f       	adc	r26, r26
     fc8:	a9 f3       	breq	.-22     	; 0xfb4 <__divsf3_pse+0x10>
     fca:	33 d0       	rcall	.+102    	; 0x1032 <__divsf3_pse+0x8e>
     fcc:	0e 2e       	mov	r0, r30
     fce:	3a f0       	brmi	.+14     	; 0xfde <__divsf3_pse+0x3a>
     fd0:	e0 e8       	ldi	r30, 0x80	; 128
     fd2:	30 d0       	rcall	.+96     	; 0x1034 <__divsf3_pse+0x90>
     fd4:	91 50       	subi	r25, 0x01	; 1
     fd6:	50 40       	sbci	r21, 0x00	; 0
     fd8:	e6 95       	lsr	r30
     fda:	00 1c       	adc	r0, r0
     fdc:	ca f7       	brpl	.-14     	; 0xfd0 <__divsf3_pse+0x2c>
     fde:	29 d0       	rcall	.+82     	; 0x1032 <__divsf3_pse+0x8e>
     fe0:	fe 2f       	mov	r31, r30
     fe2:	27 d0       	rcall	.+78     	; 0x1032 <__divsf3_pse+0x8e>
     fe4:	66 0f       	add	r22, r22
     fe6:	77 1f       	adc	r23, r23
     fe8:	88 1f       	adc	r24, r24
     fea:	bb 1f       	adc	r27, r27
     fec:	26 17       	cp	r18, r22
     fee:	37 07       	cpc	r19, r23
     ff0:	48 07       	cpc	r20, r24
     ff2:	ab 07       	cpc	r26, r27
     ff4:	b0 e8       	ldi	r27, 0x80	; 128
     ff6:	09 f0       	breq	.+2      	; 0xffa <__divsf3_pse+0x56>
     ff8:	bb 0b       	sbc	r27, r27
     ffa:	80 2d       	mov	r24, r0
     ffc:	bf 01       	movw	r22, r30
     ffe:	ff 27       	eor	r31, r31
    1000:	93 58       	subi	r25, 0x83	; 131
    1002:	5f 4f       	sbci	r21, 0xFF	; 255
    1004:	2a f0       	brmi	.+10     	; 0x1010 <__divsf3_pse+0x6c>
    1006:	9e 3f       	cpi	r25, 0xFE	; 254
    1008:	51 05       	cpc	r21, r1
    100a:	68 f0       	brcs	.+26     	; 0x1026 <__divsf3_pse+0x82>
    100c:	92 c0       	rjmp	.+292    	; 0x1132 <__fp_inf>
    100e:	dc c0       	rjmp	.+440    	; 0x11c8 <__fp_szero>
    1010:	5f 3f       	cpi	r21, 0xFF	; 255
    1012:	ec f3       	brlt	.-6      	; 0x100e <__divsf3_pse+0x6a>
    1014:	98 3e       	cpi	r25, 0xE8	; 232
    1016:	dc f3       	brlt	.-10     	; 0x100e <__divsf3_pse+0x6a>
    1018:	86 95       	lsr	r24
    101a:	77 95       	ror	r23
    101c:	67 95       	ror	r22
    101e:	b7 95       	ror	r27
    1020:	f7 95       	ror	r31
    1022:	9f 5f       	subi	r25, 0xFF	; 255
    1024:	c9 f7       	brne	.-14     	; 0x1018 <__divsf3_pse+0x74>
    1026:	88 0f       	add	r24, r24
    1028:	91 1d       	adc	r25, r1
    102a:	96 95       	lsr	r25
    102c:	87 95       	ror	r24
    102e:	97 f9       	bld	r25, 7
    1030:	08 95       	ret
    1032:	e1 e0       	ldi	r30, 0x01	; 1
    1034:	66 0f       	add	r22, r22
    1036:	77 1f       	adc	r23, r23
    1038:	88 1f       	adc	r24, r24
    103a:	bb 1f       	adc	r27, r27
    103c:	62 17       	cp	r22, r18
    103e:	73 07       	cpc	r23, r19
    1040:	84 07       	cpc	r24, r20
    1042:	ba 07       	cpc	r27, r26
    1044:	20 f0       	brcs	.+8      	; 0x104e <__divsf3_pse+0xaa>
    1046:	62 1b       	sub	r22, r18
    1048:	73 0b       	sbc	r23, r19
    104a:	84 0b       	sbc	r24, r20
    104c:	ba 0b       	sbc	r27, r26
    104e:	ee 1f       	adc	r30, r30
    1050:	88 f7       	brcc	.-30     	; 0x1034 <__divsf3_pse+0x90>
    1052:	e0 95       	com	r30
    1054:	08 95       	ret

00001056 <__fixsfsi>:
    1056:	04 d0       	rcall	.+8      	; 0x1060 <__fixunssfsi>
    1058:	68 94       	set
    105a:	b1 11       	cpse	r27, r1
    105c:	b5 c0       	rjmp	.+362    	; 0x11c8 <__fp_szero>
    105e:	08 95       	ret

00001060 <__fixunssfsi>:
    1060:	98 d0       	rcall	.+304    	; 0x1192 <__fp_splitA>
    1062:	88 f0       	brcs	.+34     	; 0x1086 <__fixunssfsi+0x26>
    1064:	9f 57       	subi	r25, 0x7F	; 127
    1066:	90 f0       	brcs	.+36     	; 0x108c <__fixunssfsi+0x2c>
    1068:	b9 2f       	mov	r27, r25
    106a:	99 27       	eor	r25, r25
    106c:	b7 51       	subi	r27, 0x17	; 23
    106e:	a0 f0       	brcs	.+40     	; 0x1098 <__fixunssfsi+0x38>
    1070:	d1 f0       	breq	.+52     	; 0x10a6 <__fixunssfsi+0x46>
    1072:	66 0f       	add	r22, r22
    1074:	77 1f       	adc	r23, r23
    1076:	88 1f       	adc	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	1a f0       	brmi	.+6      	; 0x1082 <__fixunssfsi+0x22>
    107c:	ba 95       	dec	r27
    107e:	c9 f7       	brne	.-14     	; 0x1072 <__fixunssfsi+0x12>
    1080:	12 c0       	rjmp	.+36     	; 0x10a6 <__fixunssfsi+0x46>
    1082:	b1 30       	cpi	r27, 0x01	; 1
    1084:	81 f0       	breq	.+32     	; 0x10a6 <__fixunssfsi+0x46>
    1086:	9f d0       	rcall	.+318    	; 0x11c6 <__fp_zero>
    1088:	b1 e0       	ldi	r27, 0x01	; 1
    108a:	08 95       	ret
    108c:	9c c0       	rjmp	.+312    	; 0x11c6 <__fp_zero>
    108e:	67 2f       	mov	r22, r23
    1090:	78 2f       	mov	r23, r24
    1092:	88 27       	eor	r24, r24
    1094:	b8 5f       	subi	r27, 0xF8	; 248
    1096:	39 f0       	breq	.+14     	; 0x10a6 <__fixunssfsi+0x46>
    1098:	b9 3f       	cpi	r27, 0xF9	; 249
    109a:	cc f3       	brlt	.-14     	; 0x108e <__fixunssfsi+0x2e>
    109c:	86 95       	lsr	r24
    109e:	77 95       	ror	r23
    10a0:	67 95       	ror	r22
    10a2:	b3 95       	inc	r27
    10a4:	d9 f7       	brne	.-10     	; 0x109c <__fixunssfsi+0x3c>
    10a6:	3e f4       	brtc	.+14     	; 0x10b6 <__fixunssfsi+0x56>
    10a8:	90 95       	com	r25
    10aa:	80 95       	com	r24
    10ac:	70 95       	com	r23
    10ae:	61 95       	neg	r22
    10b0:	7f 4f       	sbci	r23, 0xFF	; 255
    10b2:	8f 4f       	sbci	r24, 0xFF	; 255
    10b4:	9f 4f       	sbci	r25, 0xFF	; 255
    10b6:	08 95       	ret

000010b8 <__floatunsisf>:
    10b8:	e8 94       	clt
    10ba:	09 c0       	rjmp	.+18     	; 0x10ce <__floatsisf+0x12>

000010bc <__floatsisf>:
    10bc:	97 fb       	bst	r25, 7
    10be:	3e f4       	brtc	.+14     	; 0x10ce <__floatsisf+0x12>
    10c0:	90 95       	com	r25
    10c2:	80 95       	com	r24
    10c4:	70 95       	com	r23
    10c6:	61 95       	neg	r22
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	8f 4f       	sbci	r24, 0xFF	; 255
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	99 23       	and	r25, r25
    10d0:	a9 f0       	breq	.+42     	; 0x10fc <__floatsisf+0x40>
    10d2:	f9 2f       	mov	r31, r25
    10d4:	96 e9       	ldi	r25, 0x96	; 150
    10d6:	bb 27       	eor	r27, r27
    10d8:	93 95       	inc	r25
    10da:	f6 95       	lsr	r31
    10dc:	87 95       	ror	r24
    10de:	77 95       	ror	r23
    10e0:	67 95       	ror	r22
    10e2:	b7 95       	ror	r27
    10e4:	f1 11       	cpse	r31, r1
    10e6:	f8 cf       	rjmp	.-16     	; 0x10d8 <__floatsisf+0x1c>
    10e8:	fa f4       	brpl	.+62     	; 0x1128 <__floatsisf+0x6c>
    10ea:	bb 0f       	add	r27, r27
    10ec:	11 f4       	brne	.+4      	; 0x10f2 <__floatsisf+0x36>
    10ee:	60 ff       	sbrs	r22, 0
    10f0:	1b c0       	rjmp	.+54     	; 0x1128 <__floatsisf+0x6c>
    10f2:	6f 5f       	subi	r22, 0xFF	; 255
    10f4:	7f 4f       	sbci	r23, 0xFF	; 255
    10f6:	8f 4f       	sbci	r24, 0xFF	; 255
    10f8:	9f 4f       	sbci	r25, 0xFF	; 255
    10fa:	16 c0       	rjmp	.+44     	; 0x1128 <__floatsisf+0x6c>
    10fc:	88 23       	and	r24, r24
    10fe:	11 f0       	breq	.+4      	; 0x1104 <__floatsisf+0x48>
    1100:	96 e9       	ldi	r25, 0x96	; 150
    1102:	11 c0       	rjmp	.+34     	; 0x1126 <__floatsisf+0x6a>
    1104:	77 23       	and	r23, r23
    1106:	21 f0       	breq	.+8      	; 0x1110 <__floatsisf+0x54>
    1108:	9e e8       	ldi	r25, 0x8E	; 142
    110a:	87 2f       	mov	r24, r23
    110c:	76 2f       	mov	r23, r22
    110e:	05 c0       	rjmp	.+10     	; 0x111a <__floatsisf+0x5e>
    1110:	66 23       	and	r22, r22
    1112:	71 f0       	breq	.+28     	; 0x1130 <__floatsisf+0x74>
    1114:	96 e8       	ldi	r25, 0x86	; 134
    1116:	86 2f       	mov	r24, r22
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	2a f0       	brmi	.+10     	; 0x1128 <__floatsisf+0x6c>
    111e:	9a 95       	dec	r25
    1120:	66 0f       	add	r22, r22
    1122:	77 1f       	adc	r23, r23
    1124:	88 1f       	adc	r24, r24
    1126:	da f7       	brpl	.-10     	; 0x111e <__floatsisf+0x62>
    1128:	88 0f       	add	r24, r24
    112a:	96 95       	lsr	r25
    112c:	87 95       	ror	r24
    112e:	97 f9       	bld	r25, 7
    1130:	08 95       	ret

00001132 <__fp_inf>:
    1132:	97 f9       	bld	r25, 7
    1134:	9f 67       	ori	r25, 0x7F	; 127
    1136:	80 e8       	ldi	r24, 0x80	; 128
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	08 95       	ret

0000113e <__fp_nan>:
    113e:	9f ef       	ldi	r25, 0xFF	; 255
    1140:	80 ec       	ldi	r24, 0xC0	; 192
    1142:	08 95       	ret

00001144 <__fp_pscA>:
    1144:	00 24       	eor	r0, r0
    1146:	0a 94       	dec	r0
    1148:	16 16       	cp	r1, r22
    114a:	17 06       	cpc	r1, r23
    114c:	18 06       	cpc	r1, r24
    114e:	09 06       	cpc	r0, r25
    1150:	08 95       	ret

00001152 <__fp_pscB>:
    1152:	00 24       	eor	r0, r0
    1154:	0a 94       	dec	r0
    1156:	12 16       	cp	r1, r18
    1158:	13 06       	cpc	r1, r19
    115a:	14 06       	cpc	r1, r20
    115c:	05 06       	cpc	r0, r21
    115e:	08 95       	ret

00001160 <__fp_round>:
    1160:	09 2e       	mov	r0, r25
    1162:	03 94       	inc	r0
    1164:	00 0c       	add	r0, r0
    1166:	11 f4       	brne	.+4      	; 0x116c <__fp_round+0xc>
    1168:	88 23       	and	r24, r24
    116a:	52 f0       	brmi	.+20     	; 0x1180 <__fp_round+0x20>
    116c:	bb 0f       	add	r27, r27
    116e:	40 f4       	brcc	.+16     	; 0x1180 <__fp_round+0x20>
    1170:	bf 2b       	or	r27, r31
    1172:	11 f4       	brne	.+4      	; 0x1178 <__fp_round+0x18>
    1174:	60 ff       	sbrs	r22, 0
    1176:	04 c0       	rjmp	.+8      	; 0x1180 <__fp_round+0x20>
    1178:	6f 5f       	subi	r22, 0xFF	; 255
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	8f 4f       	sbci	r24, 0xFF	; 255
    117e:	9f 4f       	sbci	r25, 0xFF	; 255
    1180:	08 95       	ret

00001182 <__fp_split3>:
    1182:	57 fd       	sbrc	r21, 7
    1184:	90 58       	subi	r25, 0x80	; 128
    1186:	44 0f       	add	r20, r20
    1188:	55 1f       	adc	r21, r21
    118a:	59 f0       	breq	.+22     	; 0x11a2 <__fp_splitA+0x10>
    118c:	5f 3f       	cpi	r21, 0xFF	; 255
    118e:	71 f0       	breq	.+28     	; 0x11ac <__fp_splitA+0x1a>
    1190:	47 95       	ror	r20

00001192 <__fp_splitA>:
    1192:	88 0f       	add	r24, r24
    1194:	97 fb       	bst	r25, 7
    1196:	99 1f       	adc	r25, r25
    1198:	61 f0       	breq	.+24     	; 0x11b2 <__fp_splitA+0x20>
    119a:	9f 3f       	cpi	r25, 0xFF	; 255
    119c:	79 f0       	breq	.+30     	; 0x11bc <__fp_splitA+0x2a>
    119e:	87 95       	ror	r24
    11a0:	08 95       	ret
    11a2:	12 16       	cp	r1, r18
    11a4:	13 06       	cpc	r1, r19
    11a6:	14 06       	cpc	r1, r20
    11a8:	55 1f       	adc	r21, r21
    11aa:	f2 cf       	rjmp	.-28     	; 0x1190 <__fp_split3+0xe>
    11ac:	46 95       	lsr	r20
    11ae:	f1 df       	rcall	.-30     	; 0x1192 <__fp_splitA>
    11b0:	08 c0       	rjmp	.+16     	; 0x11c2 <__fp_splitA+0x30>
    11b2:	16 16       	cp	r1, r22
    11b4:	17 06       	cpc	r1, r23
    11b6:	18 06       	cpc	r1, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	f1 cf       	rjmp	.-30     	; 0x119e <__fp_splitA+0xc>
    11bc:	86 95       	lsr	r24
    11be:	71 05       	cpc	r23, r1
    11c0:	61 05       	cpc	r22, r1
    11c2:	08 94       	sec
    11c4:	08 95       	ret

000011c6 <__fp_zero>:
    11c6:	e8 94       	clt

000011c8 <__fp_szero>:
    11c8:	bb 27       	eor	r27, r27
    11ca:	66 27       	eor	r22, r22
    11cc:	77 27       	eor	r23, r23
    11ce:	cb 01       	movw	r24, r22
    11d0:	97 f9       	bld	r25, 7
    11d2:	08 95       	ret

000011d4 <__mulsf3>:
    11d4:	0b d0       	rcall	.+22     	; 0x11ec <__mulsf3x>
    11d6:	c4 cf       	rjmp	.-120    	; 0x1160 <__fp_round>
    11d8:	b5 df       	rcall	.-150    	; 0x1144 <__fp_pscA>
    11da:	28 f0       	brcs	.+10     	; 0x11e6 <__mulsf3+0x12>
    11dc:	ba df       	rcall	.-140    	; 0x1152 <__fp_pscB>
    11de:	18 f0       	brcs	.+6      	; 0x11e6 <__mulsf3+0x12>
    11e0:	95 23       	and	r25, r21
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <__mulsf3+0x12>
    11e4:	a6 cf       	rjmp	.-180    	; 0x1132 <__fp_inf>
    11e6:	ab cf       	rjmp	.-170    	; 0x113e <__fp_nan>
    11e8:	11 24       	eor	r1, r1
    11ea:	ee cf       	rjmp	.-36     	; 0x11c8 <__fp_szero>

000011ec <__mulsf3x>:
    11ec:	ca df       	rcall	.-108    	; 0x1182 <__fp_split3>
    11ee:	a0 f3       	brcs	.-24     	; 0x11d8 <__mulsf3+0x4>

000011f0 <__mulsf3_pse>:
    11f0:	95 9f       	mul	r25, r21
    11f2:	d1 f3       	breq	.-12     	; 0x11e8 <__mulsf3+0x14>
    11f4:	95 0f       	add	r25, r21
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	55 1f       	adc	r21, r21
    11fa:	62 9f       	mul	r22, r18
    11fc:	f0 01       	movw	r30, r0
    11fe:	72 9f       	mul	r23, r18
    1200:	bb 27       	eor	r27, r27
    1202:	f0 0d       	add	r31, r0
    1204:	b1 1d       	adc	r27, r1
    1206:	63 9f       	mul	r22, r19
    1208:	aa 27       	eor	r26, r26
    120a:	f0 0d       	add	r31, r0
    120c:	b1 1d       	adc	r27, r1
    120e:	aa 1f       	adc	r26, r26
    1210:	64 9f       	mul	r22, r20
    1212:	66 27       	eor	r22, r22
    1214:	b0 0d       	add	r27, r0
    1216:	a1 1d       	adc	r26, r1
    1218:	66 1f       	adc	r22, r22
    121a:	82 9f       	mul	r24, r18
    121c:	22 27       	eor	r18, r18
    121e:	b0 0d       	add	r27, r0
    1220:	a1 1d       	adc	r26, r1
    1222:	62 1f       	adc	r22, r18
    1224:	73 9f       	mul	r23, r19
    1226:	b0 0d       	add	r27, r0
    1228:	a1 1d       	adc	r26, r1
    122a:	62 1f       	adc	r22, r18
    122c:	83 9f       	mul	r24, r19
    122e:	a0 0d       	add	r26, r0
    1230:	61 1d       	adc	r22, r1
    1232:	22 1f       	adc	r18, r18
    1234:	74 9f       	mul	r23, r20
    1236:	33 27       	eor	r19, r19
    1238:	a0 0d       	add	r26, r0
    123a:	61 1d       	adc	r22, r1
    123c:	23 1f       	adc	r18, r19
    123e:	84 9f       	mul	r24, r20
    1240:	60 0d       	add	r22, r0
    1242:	21 1d       	adc	r18, r1
    1244:	82 2f       	mov	r24, r18
    1246:	76 2f       	mov	r23, r22
    1248:	6a 2f       	mov	r22, r26
    124a:	11 24       	eor	r1, r1
    124c:	9f 57       	subi	r25, 0x7F	; 127
    124e:	50 40       	sbci	r21, 0x00	; 0
    1250:	8a f0       	brmi	.+34     	; 0x1274 <__mulsf3_pse+0x84>
    1252:	e1 f0       	breq	.+56     	; 0x128c <__mulsf3_pse+0x9c>
    1254:	88 23       	and	r24, r24
    1256:	4a f0       	brmi	.+18     	; 0x126a <__mulsf3_pse+0x7a>
    1258:	ee 0f       	add	r30, r30
    125a:	ff 1f       	adc	r31, r31
    125c:	bb 1f       	adc	r27, r27
    125e:	66 1f       	adc	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	91 50       	subi	r25, 0x01	; 1
    1266:	50 40       	sbci	r21, 0x00	; 0
    1268:	a9 f7       	brne	.-22     	; 0x1254 <__mulsf3_pse+0x64>
    126a:	9e 3f       	cpi	r25, 0xFE	; 254
    126c:	51 05       	cpc	r21, r1
    126e:	70 f0       	brcs	.+28     	; 0x128c <__mulsf3_pse+0x9c>
    1270:	60 cf       	rjmp	.-320    	; 0x1132 <__fp_inf>
    1272:	aa cf       	rjmp	.-172    	; 0x11c8 <__fp_szero>
    1274:	5f 3f       	cpi	r21, 0xFF	; 255
    1276:	ec f3       	brlt	.-6      	; 0x1272 <__mulsf3_pse+0x82>
    1278:	98 3e       	cpi	r25, 0xE8	; 232
    127a:	dc f3       	brlt	.-10     	; 0x1272 <__mulsf3_pse+0x82>
    127c:	86 95       	lsr	r24
    127e:	77 95       	ror	r23
    1280:	67 95       	ror	r22
    1282:	b7 95       	ror	r27
    1284:	f7 95       	ror	r31
    1286:	e7 95       	ror	r30
    1288:	9f 5f       	subi	r25, 0xFF	; 255
    128a:	c1 f7       	brne	.-16     	; 0x127c <__mulsf3_pse+0x8c>
    128c:	fe 2b       	or	r31, r30
    128e:	88 0f       	add	r24, r24
    1290:	91 1d       	adc	r25, r1
    1292:	96 95       	lsr	r25
    1294:	87 95       	ror	r24
    1296:	97 f9       	bld	r25, 7
    1298:	08 95       	ret

0000129a <vfprintf>:
    129a:	2f 92       	push	r2
    129c:	3f 92       	push	r3
    129e:	4f 92       	push	r4
    12a0:	5f 92       	push	r5
    12a2:	6f 92       	push	r6
    12a4:	7f 92       	push	r7
    12a6:	8f 92       	push	r8
    12a8:	9f 92       	push	r9
    12aa:	af 92       	push	r10
    12ac:	bf 92       	push	r11
    12ae:	cf 92       	push	r12
    12b0:	df 92       	push	r13
    12b2:	ef 92       	push	r14
    12b4:	ff 92       	push	r15
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	63 97       	sbiw	r28, 0x13	; 19
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	7c 01       	movw	r14, r24
    12d0:	1b 01       	movw	r2, r22
    12d2:	6a 01       	movw	r12, r20
    12d4:	fc 01       	movw	r30, r24
    12d6:	17 82       	std	Z+7, r1	; 0x07
    12d8:	16 82       	std	Z+6, r1	; 0x06
    12da:	83 81       	ldd	r24, Z+3	; 0x03
    12dc:	81 ff       	sbrs	r24, 1
    12de:	49 c3       	rjmp	.+1682   	; 0x1972 <vfprintf+0x6d8>
    12e0:	be 01       	movw	r22, r28
    12e2:	6f 5f       	subi	r22, 0xFF	; 255
    12e4:	7f 4f       	sbci	r23, 0xFF	; 255
    12e6:	4b 01       	movw	r8, r22
    12e8:	f7 01       	movw	r30, r14
    12ea:	93 81       	ldd	r25, Z+3	; 0x03
    12ec:	f1 01       	movw	r30, r2
    12ee:	93 fd       	sbrc	r25, 3
    12f0:	85 91       	lpm	r24, Z+
    12f2:	93 ff       	sbrs	r25, 3
    12f4:	81 91       	ld	r24, Z+
    12f6:	1f 01       	movw	r2, r30
    12f8:	88 23       	and	r24, r24
    12fa:	09 f4       	brne	.+2      	; 0x12fe <vfprintf+0x64>
    12fc:	36 c3       	rjmp	.+1644   	; 0x196a <vfprintf+0x6d0>
    12fe:	85 32       	cpi	r24, 0x25	; 37
    1300:	39 f4       	brne	.+14     	; 0x1310 <vfprintf+0x76>
    1302:	93 fd       	sbrc	r25, 3
    1304:	85 91       	lpm	r24, Z+
    1306:	93 ff       	sbrs	r25, 3
    1308:	81 91       	ld	r24, Z+
    130a:	1f 01       	movw	r2, r30
    130c:	85 32       	cpi	r24, 0x25	; 37
    130e:	31 f4       	brne	.+12     	; 0x131c <vfprintf+0x82>
    1310:	b7 01       	movw	r22, r14
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	ae d5       	rcall	.+2908   	; 0x1e72 <fputc>
    1316:	56 01       	movw	r10, r12
    1318:	65 01       	movw	r12, r10
    131a:	e6 cf       	rjmp	.-52     	; 0x12e8 <vfprintf+0x4e>
    131c:	10 e0       	ldi	r17, 0x00	; 0
    131e:	51 2c       	mov	r5, r1
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	20 32       	cpi	r18, 0x20	; 32
    1324:	a0 f4       	brcc	.+40     	; 0x134e <vfprintf+0xb4>
    1326:	8b 32       	cpi	r24, 0x2B	; 43
    1328:	69 f0       	breq	.+26     	; 0x1344 <vfprintf+0xaa>
    132a:	30 f4       	brcc	.+12     	; 0x1338 <vfprintf+0x9e>
    132c:	80 32       	cpi	r24, 0x20	; 32
    132e:	59 f0       	breq	.+22     	; 0x1346 <vfprintf+0xac>
    1330:	83 32       	cpi	r24, 0x23	; 35
    1332:	69 f4       	brne	.+26     	; 0x134e <vfprintf+0xb4>
    1334:	20 61       	ori	r18, 0x10	; 16
    1336:	2c c0       	rjmp	.+88     	; 0x1390 <vfprintf+0xf6>
    1338:	8d 32       	cpi	r24, 0x2D	; 45
    133a:	39 f0       	breq	.+14     	; 0x134a <vfprintf+0xb0>
    133c:	80 33       	cpi	r24, 0x30	; 48
    133e:	39 f4       	brne	.+14     	; 0x134e <vfprintf+0xb4>
    1340:	21 60       	ori	r18, 0x01	; 1
    1342:	26 c0       	rjmp	.+76     	; 0x1390 <vfprintf+0xf6>
    1344:	22 60       	ori	r18, 0x02	; 2
    1346:	24 60       	ori	r18, 0x04	; 4
    1348:	23 c0       	rjmp	.+70     	; 0x1390 <vfprintf+0xf6>
    134a:	28 60       	ori	r18, 0x08	; 8
    134c:	21 c0       	rjmp	.+66     	; 0x1390 <vfprintf+0xf6>
    134e:	27 fd       	sbrc	r18, 7
    1350:	27 c0       	rjmp	.+78     	; 0x13a0 <vfprintf+0x106>
    1352:	30 ed       	ldi	r19, 0xD0	; 208
    1354:	38 0f       	add	r19, r24
    1356:	3a 30       	cpi	r19, 0x0A	; 10
    1358:	78 f4       	brcc	.+30     	; 0x1378 <vfprintf+0xde>
    135a:	26 ff       	sbrs	r18, 6
    135c:	06 c0       	rjmp	.+12     	; 0x136a <vfprintf+0xd0>
    135e:	fa e0       	ldi	r31, 0x0A	; 10
    1360:	1f 9f       	mul	r17, r31
    1362:	30 0d       	add	r19, r0
    1364:	11 24       	eor	r1, r1
    1366:	13 2f       	mov	r17, r19
    1368:	13 c0       	rjmp	.+38     	; 0x1390 <vfprintf+0xf6>
    136a:	6a e0       	ldi	r22, 0x0A	; 10
    136c:	56 9e       	mul	r5, r22
    136e:	30 0d       	add	r19, r0
    1370:	11 24       	eor	r1, r1
    1372:	53 2e       	mov	r5, r19
    1374:	20 62       	ori	r18, 0x20	; 32
    1376:	0c c0       	rjmp	.+24     	; 0x1390 <vfprintf+0xf6>
    1378:	8e 32       	cpi	r24, 0x2E	; 46
    137a:	21 f4       	brne	.+8      	; 0x1384 <vfprintf+0xea>
    137c:	26 fd       	sbrc	r18, 6
    137e:	f5 c2       	rjmp	.+1514   	; 0x196a <vfprintf+0x6d0>
    1380:	20 64       	ori	r18, 0x40	; 64
    1382:	06 c0       	rjmp	.+12     	; 0x1390 <vfprintf+0xf6>
    1384:	8c 36       	cpi	r24, 0x6C	; 108
    1386:	11 f4       	brne	.+4      	; 0x138c <vfprintf+0xf2>
    1388:	20 68       	ori	r18, 0x80	; 128
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <vfprintf+0xf6>
    138c:	88 36       	cpi	r24, 0x68	; 104
    138e:	41 f4       	brne	.+16     	; 0x13a0 <vfprintf+0x106>
    1390:	f1 01       	movw	r30, r2
    1392:	93 fd       	sbrc	r25, 3
    1394:	85 91       	lpm	r24, Z+
    1396:	93 ff       	sbrs	r25, 3
    1398:	81 91       	ld	r24, Z+
    139a:	1f 01       	movw	r2, r30
    139c:	81 11       	cpse	r24, r1
    139e:	c1 cf       	rjmp	.-126    	; 0x1322 <vfprintf+0x88>
    13a0:	9b eb       	ldi	r25, 0xBB	; 187
    13a2:	98 0f       	add	r25, r24
    13a4:	93 30       	cpi	r25, 0x03	; 3
    13a6:	18 f4       	brcc	.+6      	; 0x13ae <vfprintf+0x114>
    13a8:	20 61       	ori	r18, 0x10	; 16
    13aa:	80 5e       	subi	r24, 0xE0	; 224
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <vfprintf+0x120>
    13ae:	9b e9       	ldi	r25, 0x9B	; 155
    13b0:	98 0f       	add	r25, r24
    13b2:	93 30       	cpi	r25, 0x03	; 3
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <vfprintf+0x11e>
    13b6:	9a c1       	rjmp	.+820    	; 0x16ec <vfprintf+0x452>
    13b8:	2f 7e       	andi	r18, 0xEF	; 239
    13ba:	26 ff       	sbrs	r18, 6
    13bc:	16 e0       	ldi	r17, 0x06	; 6
    13be:	2f 73       	andi	r18, 0x3F	; 63
    13c0:	72 2e       	mov	r7, r18
    13c2:	85 36       	cpi	r24, 0x65	; 101
    13c4:	21 f4       	brne	.+8      	; 0x13ce <vfprintf+0x134>
    13c6:	f2 2f       	mov	r31, r18
    13c8:	f0 64       	ori	r31, 0x40	; 64
    13ca:	7f 2e       	mov	r7, r31
    13cc:	08 c0       	rjmp	.+16     	; 0x13de <vfprintf+0x144>
    13ce:	86 36       	cpi	r24, 0x66	; 102
    13d0:	21 f4       	brne	.+8      	; 0x13da <vfprintf+0x140>
    13d2:	62 2f       	mov	r22, r18
    13d4:	60 68       	ori	r22, 0x80	; 128
    13d6:	76 2e       	mov	r7, r22
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <vfprintf+0x144>
    13da:	11 11       	cpse	r17, r1
    13dc:	11 50       	subi	r17, 0x01	; 1
    13de:	77 fe       	sbrs	r7, 7
    13e0:	07 c0       	rjmp	.+14     	; 0x13f0 <vfprintf+0x156>
    13e2:	1c 33       	cpi	r17, 0x3C	; 60
    13e4:	48 f4       	brcc	.+18     	; 0x13f8 <vfprintf+0x15e>
    13e6:	44 24       	eor	r4, r4
    13e8:	43 94       	inc	r4
    13ea:	41 0e       	add	r4, r17
    13ec:	27 e0       	ldi	r18, 0x07	; 7
    13ee:	0b c0       	rjmp	.+22     	; 0x1406 <vfprintf+0x16c>
    13f0:	18 30       	cpi	r17, 0x08	; 8
    13f2:	30 f4       	brcc	.+12     	; 0x1400 <vfprintf+0x166>
    13f4:	21 2f       	mov	r18, r17
    13f6:	06 c0       	rjmp	.+12     	; 0x1404 <vfprintf+0x16a>
    13f8:	27 e0       	ldi	r18, 0x07	; 7
    13fa:	4c e3       	ldi	r20, 0x3C	; 60
    13fc:	44 2e       	mov	r4, r20
    13fe:	03 c0       	rjmp	.+6      	; 0x1406 <vfprintf+0x16c>
    1400:	27 e0       	ldi	r18, 0x07	; 7
    1402:	17 e0       	ldi	r17, 0x07	; 7
    1404:	41 2c       	mov	r4, r1
    1406:	56 01       	movw	r10, r12
    1408:	74 e0       	ldi	r23, 0x04	; 4
    140a:	a7 0e       	add	r10, r23
    140c:	b1 1c       	adc	r11, r1
    140e:	f6 01       	movw	r30, r12
    1410:	60 81       	ld	r22, Z
    1412:	71 81       	ldd	r23, Z+1	; 0x01
    1414:	82 81       	ldd	r24, Z+2	; 0x02
    1416:	93 81       	ldd	r25, Z+3	; 0x03
    1418:	04 2d       	mov	r16, r4
    141a:	a4 01       	movw	r20, r8
    141c:	f2 d3       	rcall	.+2020   	; 0x1c02 <__ftoa_engine>
    141e:	6c 01       	movw	r12, r24
    1420:	09 81       	ldd	r16, Y+1	; 0x01
    1422:	00 ff       	sbrs	r16, 0
    1424:	02 c0       	rjmp	.+4      	; 0x142a <vfprintf+0x190>
    1426:	03 ff       	sbrs	r16, 3
    1428:	06 c0       	rjmp	.+12     	; 0x1436 <vfprintf+0x19c>
    142a:	71 fc       	sbrc	r7, 1
    142c:	07 c0       	rjmp	.+14     	; 0x143c <vfprintf+0x1a2>
    142e:	72 fc       	sbrc	r7, 2
    1430:	08 c0       	rjmp	.+16     	; 0x1442 <vfprintf+0x1a8>
    1432:	61 2c       	mov	r6, r1
    1434:	08 c0       	rjmp	.+16     	; 0x1446 <vfprintf+0x1ac>
    1436:	3d e2       	ldi	r19, 0x2D	; 45
    1438:	63 2e       	mov	r6, r19
    143a:	05 c0       	rjmp	.+10     	; 0x1446 <vfprintf+0x1ac>
    143c:	2b e2       	ldi	r18, 0x2B	; 43
    143e:	62 2e       	mov	r6, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <vfprintf+0x1ac>
    1442:	90 e2       	ldi	r25, 0x20	; 32
    1444:	69 2e       	mov	r6, r25
    1446:	80 2f       	mov	r24, r16
    1448:	8c 70       	andi	r24, 0x0C	; 12
    144a:	81 f1       	breq	.+96     	; 0x14ac <vfprintf+0x212>
    144c:	66 20       	and	r6, r6
    144e:	11 f0       	breq	.+4      	; 0x1454 <vfprintf+0x1ba>
    1450:	84 e0       	ldi	r24, 0x04	; 4
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <vfprintf+0x1bc>
    1454:	83 e0       	ldi	r24, 0x03	; 3
    1456:	85 15       	cp	r24, r5
    1458:	10 f0       	brcs	.+4      	; 0x145e <vfprintf+0x1c4>
    145a:	51 2c       	mov	r5, r1
    145c:	0a c0       	rjmp	.+20     	; 0x1472 <vfprintf+0x1d8>
    145e:	58 1a       	sub	r5, r24
    1460:	73 fc       	sbrc	r7, 3
    1462:	07 c0       	rjmp	.+14     	; 0x1472 <vfprintf+0x1d8>
    1464:	b7 01       	movw	r22, r14
    1466:	80 e2       	ldi	r24, 0x20	; 32
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	03 d5       	rcall	.+2566   	; 0x1e72 <fputc>
    146c:	5a 94       	dec	r5
    146e:	d1 f7       	brne	.-12     	; 0x1464 <vfprintf+0x1ca>
    1470:	f4 cf       	rjmp	.-24     	; 0x145a <vfprintf+0x1c0>
    1472:	66 20       	and	r6, r6
    1474:	21 f0       	breq	.+8      	; 0x147e <vfprintf+0x1e4>
    1476:	b7 01       	movw	r22, r14
    1478:	86 2d       	mov	r24, r6
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	fa d4       	rcall	.+2548   	; 0x1e72 <fputc>
    147e:	03 fd       	sbrc	r16, 3
    1480:	03 c0       	rjmp	.+6      	; 0x1488 <vfprintf+0x1ee>
    1482:	0a e8       	ldi	r16, 0x8A	; 138
    1484:	11 e0       	ldi	r17, 0x01	; 1
    1486:	02 c0       	rjmp	.+4      	; 0x148c <vfprintf+0x1f2>
    1488:	06 e8       	ldi	r16, 0x86	; 134
    148a:	11 e0       	ldi	r17, 0x01	; 1
    148c:	f7 2d       	mov	r31, r7
    148e:	f0 71       	andi	r31, 0x10	; 16
    1490:	7f 2e       	mov	r7, r31
    1492:	f8 01       	movw	r30, r16
    1494:	84 91       	lpm	r24, Z
    1496:	88 23       	and	r24, r24
    1498:	09 f4       	brne	.+2      	; 0x149c <vfprintf+0x202>
    149a:	5e c2       	rjmp	.+1212   	; 0x1958 <vfprintf+0x6be>
    149c:	71 10       	cpse	r7, r1
    149e:	80 52       	subi	r24, 0x20	; 32
    14a0:	b7 01       	movw	r22, r14
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	e6 d4       	rcall	.+2508   	; 0x1e72 <fputc>
    14a6:	0f 5f       	subi	r16, 0xFF	; 255
    14a8:	1f 4f       	sbci	r17, 0xFF	; 255
    14aa:	f3 cf       	rjmp	.-26     	; 0x1492 <vfprintf+0x1f8>
    14ac:	77 fe       	sbrs	r7, 7
    14ae:	0f c0       	rjmp	.+30     	; 0x14ce <vfprintf+0x234>
    14b0:	4c 0c       	add	r4, r12
    14b2:	04 ff       	sbrs	r16, 4
    14b4:	04 c0       	rjmp	.+8      	; 0x14be <vfprintf+0x224>
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	81 33       	cpi	r24, 0x31	; 49
    14ba:	09 f4       	brne	.+2      	; 0x14be <vfprintf+0x224>
    14bc:	4a 94       	dec	r4
    14be:	14 14       	cp	r1, r4
    14c0:	74 f5       	brge	.+92     	; 0x151e <vfprintf+0x284>
    14c2:	f8 e0       	ldi	r31, 0x08	; 8
    14c4:	f4 15       	cp	r31, r4
    14c6:	78 f5       	brcc	.+94     	; 0x1526 <vfprintf+0x28c>
    14c8:	88 e0       	ldi	r24, 0x08	; 8
    14ca:	48 2e       	mov	r4, r24
    14cc:	2c c0       	rjmp	.+88     	; 0x1526 <vfprintf+0x28c>
    14ce:	76 fc       	sbrc	r7, 6
    14d0:	2a c0       	rjmp	.+84     	; 0x1526 <vfprintf+0x28c>
    14d2:	81 2f       	mov	r24, r17
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	8c 15       	cp	r24, r12
    14d8:	9d 05       	cpc	r25, r13
    14da:	9c f0       	brlt	.+38     	; 0x1502 <vfprintf+0x268>
    14dc:	6c ef       	ldi	r22, 0xFC	; 252
    14de:	c6 16       	cp	r12, r22
    14e0:	6f ef       	ldi	r22, 0xFF	; 255
    14e2:	d6 06       	cpc	r13, r22
    14e4:	74 f0       	brlt	.+28     	; 0x1502 <vfprintf+0x268>
    14e6:	77 2d       	mov	r23, r7
    14e8:	70 68       	ori	r23, 0x80	; 128
    14ea:	77 2e       	mov	r7, r23
    14ec:	0a c0       	rjmp	.+20     	; 0x1502 <vfprintf+0x268>
    14ee:	e2 e0       	ldi	r30, 0x02	; 2
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	ec 0f       	add	r30, r28
    14f4:	fd 1f       	adc	r31, r29
    14f6:	e1 0f       	add	r30, r17
    14f8:	f1 1d       	adc	r31, r1
    14fa:	80 81       	ld	r24, Z
    14fc:	80 33       	cpi	r24, 0x30	; 48
    14fe:	19 f4       	brne	.+6      	; 0x1506 <vfprintf+0x26c>
    1500:	11 50       	subi	r17, 0x01	; 1
    1502:	11 11       	cpse	r17, r1
    1504:	f4 cf       	rjmp	.-24     	; 0x14ee <vfprintf+0x254>
    1506:	77 fe       	sbrs	r7, 7
    1508:	0e c0       	rjmp	.+28     	; 0x1526 <vfprintf+0x28c>
    150a:	44 24       	eor	r4, r4
    150c:	43 94       	inc	r4
    150e:	41 0e       	add	r4, r17
    1510:	81 2f       	mov	r24, r17
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	c8 16       	cp	r12, r24
    1516:	d9 06       	cpc	r13, r25
    1518:	2c f4       	brge	.+10     	; 0x1524 <vfprintf+0x28a>
    151a:	1c 19       	sub	r17, r12
    151c:	04 c0       	rjmp	.+8      	; 0x1526 <vfprintf+0x28c>
    151e:	44 24       	eor	r4, r4
    1520:	43 94       	inc	r4
    1522:	01 c0       	rjmp	.+2      	; 0x1526 <vfprintf+0x28c>
    1524:	10 e0       	ldi	r17, 0x00	; 0
    1526:	77 fe       	sbrs	r7, 7
    1528:	07 c0       	rjmp	.+14     	; 0x1538 <vfprintf+0x29e>
    152a:	1c 14       	cp	r1, r12
    152c:	1d 04       	cpc	r1, r13
    152e:	3c f4       	brge	.+14     	; 0x153e <vfprintf+0x2a4>
    1530:	96 01       	movw	r18, r12
    1532:	2f 5f       	subi	r18, 0xFF	; 255
    1534:	3f 4f       	sbci	r19, 0xFF	; 255
    1536:	05 c0       	rjmp	.+10     	; 0x1542 <vfprintf+0x2a8>
    1538:	25 e0       	ldi	r18, 0x05	; 5
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <vfprintf+0x2a8>
    153e:	21 e0       	ldi	r18, 0x01	; 1
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	66 20       	and	r6, r6
    1544:	11 f0       	breq	.+4      	; 0x154a <vfprintf+0x2b0>
    1546:	2f 5f       	subi	r18, 0xFF	; 255
    1548:	3f 4f       	sbci	r19, 0xFF	; 255
    154a:	11 23       	and	r17, r17
    154c:	31 f0       	breq	.+12     	; 0x155a <vfprintf+0x2c0>
    154e:	41 2f       	mov	r20, r17
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	4f 5f       	subi	r20, 0xFF	; 255
    1554:	5f 4f       	sbci	r21, 0xFF	; 255
    1556:	24 0f       	add	r18, r20
    1558:	35 1f       	adc	r19, r21
    155a:	45 2d       	mov	r20, r5
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	24 17       	cp	r18, r20
    1560:	35 07       	cpc	r19, r21
    1562:	14 f4       	brge	.+4      	; 0x1568 <vfprintf+0x2ce>
    1564:	52 1a       	sub	r5, r18
    1566:	01 c0       	rjmp	.+2      	; 0x156a <vfprintf+0x2d0>
    1568:	51 2c       	mov	r5, r1
    156a:	87 2d       	mov	r24, r7
    156c:	89 70       	andi	r24, 0x09	; 9
    156e:	41 f4       	brne	.+16     	; 0x1580 <vfprintf+0x2e6>
    1570:	55 20       	and	r5, r5
    1572:	31 f0       	breq	.+12     	; 0x1580 <vfprintf+0x2e6>
    1574:	b7 01       	movw	r22, r14
    1576:	80 e2       	ldi	r24, 0x20	; 32
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	7b d4       	rcall	.+2294   	; 0x1e72 <fputc>
    157c:	5a 94       	dec	r5
    157e:	f8 cf       	rjmp	.-16     	; 0x1570 <vfprintf+0x2d6>
    1580:	66 20       	and	r6, r6
    1582:	21 f0       	breq	.+8      	; 0x158c <vfprintf+0x2f2>
    1584:	b7 01       	movw	r22, r14
    1586:	86 2d       	mov	r24, r6
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	73 d4       	rcall	.+2278   	; 0x1e72 <fputc>
    158c:	73 fc       	sbrc	r7, 3
    158e:	08 c0       	rjmp	.+16     	; 0x15a0 <vfprintf+0x306>
    1590:	55 20       	and	r5, r5
    1592:	31 f0       	breq	.+12     	; 0x15a0 <vfprintf+0x306>
    1594:	b7 01       	movw	r22, r14
    1596:	80 e3       	ldi	r24, 0x30	; 48
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	6b d4       	rcall	.+2262   	; 0x1e72 <fputc>
    159c:	5a 94       	dec	r5
    159e:	f8 cf       	rjmp	.-16     	; 0x1590 <vfprintf+0x2f6>
    15a0:	77 fe       	sbrs	r7, 7
    15a2:	5d c0       	rjmp	.+186    	; 0x165e <vfprintf+0x3c4>
    15a4:	9c 2d       	mov	r25, r12
    15a6:	8d 2d       	mov	r24, r13
    15a8:	d7 fe       	sbrs	r13, 7
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <vfprintf+0x316>
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	69 2e       	mov	r6, r25
    15b2:	78 2e       	mov	r7, r24
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	c6 01       	movw	r24, r12
    15ba:	84 19       	sub	r24, r4
    15bc:	91 09       	sbc	r25, r1
    15be:	9d 87       	std	Y+13, r25	; 0x0d
    15c0:	8c 87       	std	Y+12, r24	; 0x0c
    15c2:	96 01       	movw	r18, r12
    15c4:	26 19       	sub	r18, r6
    15c6:	37 09       	sbc	r19, r7
    15c8:	28 0d       	add	r18, r8
    15ca:	39 1d       	adc	r19, r9
    15cc:	81 2f       	mov	r24, r17
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	ee 27       	eor	r30, r30
    15d2:	ff 27       	eor	r31, r31
    15d4:	e8 1b       	sub	r30, r24
    15d6:	f9 0b       	sbc	r31, r25
    15d8:	ff 87       	std	Y+15, r31	; 0x0f
    15da:	ee 87       	std	Y+14, r30	; 0x0e
    15dc:	ff ef       	ldi	r31, 0xFF	; 255
    15de:	6f 16       	cp	r6, r31
    15e0:	7f 06       	cpc	r7, r31
    15e2:	61 f4       	brne	.+24     	; 0x15fc <vfprintf+0x362>
    15e4:	b7 01       	movw	r22, r14
    15e6:	8e e2       	ldi	r24, 0x2E	; 46
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	2b 8b       	std	Y+19, r18	; 0x13
    15ec:	3a 8b       	std	Y+18, r19	; 0x12
    15ee:	48 8b       	std	Y+16, r20	; 0x10
    15f0:	59 8b       	std	Y+17, r21	; 0x11
    15f2:	3f d4       	rcall	.+2174   	; 0x1e72 <fputc>
    15f4:	59 89       	ldd	r21, Y+17	; 0x11
    15f6:	48 89       	ldd	r20, Y+16	; 0x10
    15f8:	3a 89       	ldd	r19, Y+18	; 0x12
    15fa:	2b 89       	ldd	r18, Y+19	; 0x13
    15fc:	c6 14       	cp	r12, r6
    15fe:	d7 04       	cpc	r13, r7
    1600:	54 f0       	brlt	.+20     	; 0x1616 <vfprintf+0x37c>
    1602:	6c 85       	ldd	r22, Y+12	; 0x0c
    1604:	7d 85       	ldd	r23, Y+13	; 0x0d
    1606:	66 15       	cp	r22, r6
    1608:	77 05       	cpc	r23, r7
    160a:	2c f4       	brge	.+10     	; 0x1616 <vfprintf+0x37c>
    160c:	f9 01       	movw	r30, r18
    160e:	e4 0f       	add	r30, r20
    1610:	f5 1f       	adc	r31, r21
    1612:	81 81       	ldd	r24, Z+1	; 0x01
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <vfprintf+0x37e>
    1616:	80 e3       	ldi	r24, 0x30	; 48
    1618:	71 e0       	ldi	r23, 0x01	; 1
    161a:	67 1a       	sub	r6, r23
    161c:	71 08       	sbc	r7, r1
    161e:	4f 5f       	subi	r20, 0xFF	; 255
    1620:	5f 4f       	sbci	r21, 0xFF	; 255
    1622:	ee 85       	ldd	r30, Y+14	; 0x0e
    1624:	ff 85       	ldd	r31, Y+15	; 0x0f
    1626:	6e 16       	cp	r6, r30
    1628:	7f 06       	cpc	r7, r31
    162a:	64 f0       	brlt	.+24     	; 0x1644 <vfprintf+0x3aa>
    162c:	b7 01       	movw	r22, r14
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	2b 8b       	std	Y+19, r18	; 0x13
    1632:	3a 8b       	std	Y+18, r19	; 0x12
    1634:	48 8b       	std	Y+16, r20	; 0x10
    1636:	59 8b       	std	Y+17, r21	; 0x11
    1638:	1c d4       	rcall	.+2104   	; 0x1e72 <fputc>
    163a:	2b 89       	ldd	r18, Y+19	; 0x13
    163c:	3a 89       	ldd	r19, Y+18	; 0x12
    163e:	48 89       	ldd	r20, Y+16	; 0x10
    1640:	59 89       	ldd	r21, Y+17	; 0x11
    1642:	cc cf       	rjmp	.-104    	; 0x15dc <vfprintf+0x342>
    1644:	6c 14       	cp	r6, r12
    1646:	7d 04       	cpc	r7, r13
    1648:	39 f4       	brne	.+14     	; 0x1658 <vfprintf+0x3be>
    164a:	9a 81       	ldd	r25, Y+2	; 0x02
    164c:	96 33       	cpi	r25, 0x36	; 54
    164e:	18 f4       	brcc	.+6      	; 0x1656 <vfprintf+0x3bc>
    1650:	95 33       	cpi	r25, 0x35	; 53
    1652:	11 f4       	brne	.+4      	; 0x1658 <vfprintf+0x3be>
    1654:	04 ff       	sbrs	r16, 4
    1656:	81 e3       	ldi	r24, 0x31	; 49
    1658:	b7 01       	movw	r22, r14
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	45 c0       	rjmp	.+138    	; 0x16e8 <vfprintf+0x44e>
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	81 33       	cpi	r24, 0x31	; 49
    1662:	09 f0       	breq	.+2      	; 0x1666 <vfprintf+0x3cc>
    1664:	0f 7e       	andi	r16, 0xEF	; 239
    1666:	b7 01       	movw	r22, r14
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	03 d4       	rcall	.+2054   	; 0x1e72 <fputc>
    166c:	11 11       	cpse	r17, r1
    166e:	05 c0       	rjmp	.+10     	; 0x167a <vfprintf+0x3e0>
    1670:	74 fe       	sbrs	r7, 4
    1672:	16 c0       	rjmp	.+44     	; 0x16a0 <vfprintf+0x406>
    1674:	85 e4       	ldi	r24, 0x45	; 69
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	15 c0       	rjmp	.+42     	; 0x16a4 <vfprintf+0x40a>
    167a:	b7 01       	movw	r22, r14
    167c:	8e e2       	ldi	r24, 0x2E	; 46
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	f8 d3       	rcall	.+2032   	; 0x1e72 <fputc>
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	66 24       	eor	r6, r6
    1686:	63 94       	inc	r6
    1688:	68 0e       	add	r6, r24
    168a:	f4 01       	movw	r30, r8
    168c:	e8 0f       	add	r30, r24
    168e:	f1 1d       	adc	r31, r1
    1690:	80 81       	ld	r24, Z
    1692:	b7 01       	movw	r22, r14
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	ed d3       	rcall	.+2010   	; 0x1e72 <fputc>
    1698:	11 50       	subi	r17, 0x01	; 1
    169a:	51 f3       	breq	.-44     	; 0x1670 <vfprintf+0x3d6>
    169c:	86 2d       	mov	r24, r6
    169e:	f2 cf       	rjmp	.-28     	; 0x1684 <vfprintf+0x3ea>
    16a0:	85 e6       	ldi	r24, 0x65	; 101
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	b7 01       	movw	r22, r14
    16a6:	e5 d3       	rcall	.+1994   	; 0x1e72 <fputc>
    16a8:	d7 fc       	sbrc	r13, 7
    16aa:	05 c0       	rjmp	.+10     	; 0x16b6 <vfprintf+0x41c>
    16ac:	c1 14       	cp	r12, r1
    16ae:	d1 04       	cpc	r13, r1
    16b0:	39 f4       	brne	.+14     	; 0x16c0 <vfprintf+0x426>
    16b2:	04 ff       	sbrs	r16, 4
    16b4:	05 c0       	rjmp	.+10     	; 0x16c0 <vfprintf+0x426>
    16b6:	d1 94       	neg	r13
    16b8:	c1 94       	neg	r12
    16ba:	d1 08       	sbc	r13, r1
    16bc:	8d e2       	ldi	r24, 0x2D	; 45
    16be:	01 c0       	rjmp	.+2      	; 0x16c2 <vfprintf+0x428>
    16c0:	8b e2       	ldi	r24, 0x2B	; 43
    16c2:	b7 01       	movw	r22, r14
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	d5 d3       	rcall	.+1962   	; 0x1e72 <fputc>
    16c8:	80 e3       	ldi	r24, 0x30	; 48
    16ca:	6a e0       	ldi	r22, 0x0A	; 10
    16cc:	c6 16       	cp	r12, r22
    16ce:	d1 04       	cpc	r13, r1
    16d0:	2c f0       	brlt	.+10     	; 0x16dc <vfprintf+0x442>
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	fa e0       	ldi	r31, 0x0A	; 10
    16d6:	cf 1a       	sub	r12, r31
    16d8:	d1 08       	sbc	r13, r1
    16da:	f7 cf       	rjmp	.-18     	; 0x16ca <vfprintf+0x430>
    16dc:	b7 01       	movw	r22, r14
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	c8 d3       	rcall	.+1936   	; 0x1e72 <fputc>
    16e2:	b7 01       	movw	r22, r14
    16e4:	c6 01       	movw	r24, r12
    16e6:	c0 96       	adiw	r24, 0x30	; 48
    16e8:	c4 d3       	rcall	.+1928   	; 0x1e72 <fputc>
    16ea:	36 c1       	rjmp	.+620    	; 0x1958 <vfprintf+0x6be>
    16ec:	83 36       	cpi	r24, 0x63	; 99
    16ee:	31 f0       	breq	.+12     	; 0x16fc <vfprintf+0x462>
    16f0:	83 37       	cpi	r24, 0x73	; 115
    16f2:	79 f0       	breq	.+30     	; 0x1712 <vfprintf+0x478>
    16f4:	83 35       	cpi	r24, 0x53	; 83
    16f6:	09 f0       	breq	.+2      	; 0x16fa <vfprintf+0x460>
    16f8:	54 c0       	rjmp	.+168    	; 0x17a2 <vfprintf+0x508>
    16fa:	20 c0       	rjmp	.+64     	; 0x173c <vfprintf+0x4a2>
    16fc:	56 01       	movw	r10, r12
    16fe:	72 e0       	ldi	r23, 0x02	; 2
    1700:	a7 0e       	add	r10, r23
    1702:	b1 1c       	adc	r11, r1
    1704:	f6 01       	movw	r30, r12
    1706:	80 81       	ld	r24, Z
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	01 e0       	ldi	r16, 0x01	; 1
    170c:	10 e0       	ldi	r17, 0x00	; 0
    170e:	64 01       	movw	r12, r8
    1710:	13 c0       	rjmp	.+38     	; 0x1738 <vfprintf+0x49e>
    1712:	56 01       	movw	r10, r12
    1714:	f2 e0       	ldi	r31, 0x02	; 2
    1716:	af 0e       	add	r10, r31
    1718:	b1 1c       	adc	r11, r1
    171a:	f6 01       	movw	r30, r12
    171c:	c0 80       	ld	r12, Z
    171e:	d1 80       	ldd	r13, Z+1	; 0x01
    1720:	26 ff       	sbrs	r18, 6
    1722:	03 c0       	rjmp	.+6      	; 0x172a <vfprintf+0x490>
    1724:	61 2f       	mov	r22, r17
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	02 c0       	rjmp	.+4      	; 0x172e <vfprintf+0x494>
    172a:	6f ef       	ldi	r22, 0xFF	; 255
    172c:	7f ef       	ldi	r23, 0xFF	; 255
    172e:	c6 01       	movw	r24, r12
    1730:	2b 8b       	std	Y+19, r18	; 0x13
    1732:	4a d3       	rcall	.+1684   	; 0x1dc8 <strnlen>
    1734:	8c 01       	movw	r16, r24
    1736:	2b 89       	ldd	r18, Y+19	; 0x13
    1738:	2f 77       	andi	r18, 0x7F	; 127
    173a:	14 c0       	rjmp	.+40     	; 0x1764 <vfprintf+0x4ca>
    173c:	56 01       	movw	r10, r12
    173e:	f2 e0       	ldi	r31, 0x02	; 2
    1740:	af 0e       	add	r10, r31
    1742:	b1 1c       	adc	r11, r1
    1744:	f6 01       	movw	r30, r12
    1746:	c0 80       	ld	r12, Z
    1748:	d1 80       	ldd	r13, Z+1	; 0x01
    174a:	26 ff       	sbrs	r18, 6
    174c:	03 c0       	rjmp	.+6      	; 0x1754 <vfprintf+0x4ba>
    174e:	61 2f       	mov	r22, r17
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <vfprintf+0x4be>
    1754:	6f ef       	ldi	r22, 0xFF	; 255
    1756:	7f ef       	ldi	r23, 0xFF	; 255
    1758:	c6 01       	movw	r24, r12
    175a:	2b 8b       	std	Y+19, r18	; 0x13
    175c:	2a d3       	rcall	.+1620   	; 0x1db2 <strnlen_P>
    175e:	8c 01       	movw	r16, r24
    1760:	2b 89       	ldd	r18, Y+19	; 0x13
    1762:	20 68       	ori	r18, 0x80	; 128
    1764:	72 2e       	mov	r7, r18
    1766:	23 fd       	sbrc	r18, 3
    1768:	18 c0       	rjmp	.+48     	; 0x179a <vfprintf+0x500>
    176a:	85 2d       	mov	r24, r5
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	08 17       	cp	r16, r24
    1770:	19 07       	cpc	r17, r25
    1772:	98 f4       	brcc	.+38     	; 0x179a <vfprintf+0x500>
    1774:	b7 01       	movw	r22, r14
    1776:	80 e2       	ldi	r24, 0x20	; 32
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	7b d3       	rcall	.+1782   	; 0x1e72 <fputc>
    177c:	5a 94       	dec	r5
    177e:	f5 cf       	rjmp	.-22     	; 0x176a <vfprintf+0x4d0>
    1780:	f6 01       	movw	r30, r12
    1782:	77 fc       	sbrc	r7, 7
    1784:	85 91       	lpm	r24, Z+
    1786:	77 fe       	sbrs	r7, 7
    1788:	81 91       	ld	r24, Z+
    178a:	6f 01       	movw	r12, r30
    178c:	b7 01       	movw	r22, r14
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	70 d3       	rcall	.+1760   	; 0x1e72 <fputc>
    1792:	51 10       	cpse	r5, r1
    1794:	5a 94       	dec	r5
    1796:	01 50       	subi	r16, 0x01	; 1
    1798:	11 09       	sbc	r17, r1
    179a:	01 15       	cp	r16, r1
    179c:	11 05       	cpc	r17, r1
    179e:	81 f7       	brne	.-32     	; 0x1780 <vfprintf+0x4e6>
    17a0:	db c0       	rjmp	.+438    	; 0x1958 <vfprintf+0x6be>
    17a2:	84 36       	cpi	r24, 0x64	; 100
    17a4:	11 f0       	breq	.+4      	; 0x17aa <vfprintf+0x510>
    17a6:	89 36       	cpi	r24, 0x69	; 105
    17a8:	49 f5       	brne	.+82     	; 0x17fc <vfprintf+0x562>
    17aa:	56 01       	movw	r10, r12
    17ac:	27 ff       	sbrs	r18, 7
    17ae:	09 c0       	rjmp	.+18     	; 0x17c2 <vfprintf+0x528>
    17b0:	f4 e0       	ldi	r31, 0x04	; 4
    17b2:	af 0e       	add	r10, r31
    17b4:	b1 1c       	adc	r11, r1
    17b6:	f6 01       	movw	r30, r12
    17b8:	60 81       	ld	r22, Z
    17ba:	71 81       	ldd	r23, Z+1	; 0x01
    17bc:	82 81       	ldd	r24, Z+2	; 0x02
    17be:	93 81       	ldd	r25, Z+3	; 0x03
    17c0:	0a c0       	rjmp	.+20     	; 0x17d6 <vfprintf+0x53c>
    17c2:	f2 e0       	ldi	r31, 0x02	; 2
    17c4:	af 0e       	add	r10, r31
    17c6:	b1 1c       	adc	r11, r1
    17c8:	f6 01       	movw	r30, r12
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	88 27       	eor	r24, r24
    17d0:	77 fd       	sbrc	r23, 7
    17d2:	80 95       	com	r24
    17d4:	98 2f       	mov	r25, r24
    17d6:	02 2f       	mov	r16, r18
    17d8:	0f 76       	andi	r16, 0x6F	; 111
    17da:	97 ff       	sbrs	r25, 7
    17dc:	08 c0       	rjmp	.+16     	; 0x17ee <vfprintf+0x554>
    17de:	90 95       	com	r25
    17e0:	80 95       	com	r24
    17e2:	70 95       	com	r23
    17e4:	61 95       	neg	r22
    17e6:	7f 4f       	sbci	r23, 0xFF	; 255
    17e8:	8f 4f       	sbci	r24, 0xFF	; 255
    17ea:	9f 4f       	sbci	r25, 0xFF	; 255
    17ec:	00 68       	ori	r16, 0x80	; 128
    17ee:	2a e0       	ldi	r18, 0x0A	; 10
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	a4 01       	movw	r20, r8
    17f4:	ae d3       	rcall	.+1884   	; 0x1f52 <__ultoa_invert>
    17f6:	c8 2e       	mov	r12, r24
    17f8:	c8 18       	sub	r12, r8
    17fa:	3d c0       	rjmp	.+122    	; 0x1876 <vfprintf+0x5dc>
    17fc:	02 2f       	mov	r16, r18
    17fe:	85 37       	cpi	r24, 0x75	; 117
    1800:	21 f4       	brne	.+8      	; 0x180a <vfprintf+0x570>
    1802:	0f 7e       	andi	r16, 0xEF	; 239
    1804:	2a e0       	ldi	r18, 0x0A	; 10
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	1d c0       	rjmp	.+58     	; 0x1844 <vfprintf+0x5aa>
    180a:	09 7f       	andi	r16, 0xF9	; 249
    180c:	8f 36       	cpi	r24, 0x6F	; 111
    180e:	91 f0       	breq	.+36     	; 0x1834 <vfprintf+0x59a>
    1810:	18 f4       	brcc	.+6      	; 0x1818 <vfprintf+0x57e>
    1812:	88 35       	cpi	r24, 0x58	; 88
    1814:	59 f0       	breq	.+22     	; 0x182c <vfprintf+0x592>
    1816:	a9 c0       	rjmp	.+338    	; 0x196a <vfprintf+0x6d0>
    1818:	80 37       	cpi	r24, 0x70	; 112
    181a:	19 f0       	breq	.+6      	; 0x1822 <vfprintf+0x588>
    181c:	88 37       	cpi	r24, 0x78	; 120
    181e:	11 f0       	breq	.+4      	; 0x1824 <vfprintf+0x58a>
    1820:	a4 c0       	rjmp	.+328    	; 0x196a <vfprintf+0x6d0>
    1822:	00 61       	ori	r16, 0x10	; 16
    1824:	04 ff       	sbrs	r16, 4
    1826:	09 c0       	rjmp	.+18     	; 0x183a <vfprintf+0x5a0>
    1828:	04 60       	ori	r16, 0x04	; 4
    182a:	07 c0       	rjmp	.+14     	; 0x183a <vfprintf+0x5a0>
    182c:	24 ff       	sbrs	r18, 4
    182e:	08 c0       	rjmp	.+16     	; 0x1840 <vfprintf+0x5a6>
    1830:	06 60       	ori	r16, 0x06	; 6
    1832:	06 c0       	rjmp	.+12     	; 0x1840 <vfprintf+0x5a6>
    1834:	28 e0       	ldi	r18, 0x08	; 8
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	05 c0       	rjmp	.+10     	; 0x1844 <vfprintf+0x5aa>
    183a:	20 e1       	ldi	r18, 0x10	; 16
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <vfprintf+0x5aa>
    1840:	20 e1       	ldi	r18, 0x10	; 16
    1842:	32 e0       	ldi	r19, 0x02	; 2
    1844:	56 01       	movw	r10, r12
    1846:	07 ff       	sbrs	r16, 7
    1848:	09 c0       	rjmp	.+18     	; 0x185c <vfprintf+0x5c2>
    184a:	f4 e0       	ldi	r31, 0x04	; 4
    184c:	af 0e       	add	r10, r31
    184e:	b1 1c       	adc	r11, r1
    1850:	f6 01       	movw	r30, r12
    1852:	60 81       	ld	r22, Z
    1854:	71 81       	ldd	r23, Z+1	; 0x01
    1856:	82 81       	ldd	r24, Z+2	; 0x02
    1858:	93 81       	ldd	r25, Z+3	; 0x03
    185a:	08 c0       	rjmp	.+16     	; 0x186c <vfprintf+0x5d2>
    185c:	f2 e0       	ldi	r31, 0x02	; 2
    185e:	af 0e       	add	r10, r31
    1860:	b1 1c       	adc	r11, r1
    1862:	f6 01       	movw	r30, r12
    1864:	60 81       	ld	r22, Z
    1866:	71 81       	ldd	r23, Z+1	; 0x01
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a4 01       	movw	r20, r8
    186e:	71 d3       	rcall	.+1762   	; 0x1f52 <__ultoa_invert>
    1870:	c8 2e       	mov	r12, r24
    1872:	c8 18       	sub	r12, r8
    1874:	0f 77       	andi	r16, 0x7F	; 127
    1876:	06 ff       	sbrs	r16, 6
    1878:	0b c0       	rjmp	.+22     	; 0x1890 <vfprintf+0x5f6>
    187a:	20 2f       	mov	r18, r16
    187c:	2e 7f       	andi	r18, 0xFE	; 254
    187e:	c1 16       	cp	r12, r17
    1880:	50 f4       	brcc	.+20     	; 0x1896 <vfprintf+0x5fc>
    1882:	04 ff       	sbrs	r16, 4
    1884:	0a c0       	rjmp	.+20     	; 0x189a <vfprintf+0x600>
    1886:	02 fd       	sbrc	r16, 2
    1888:	08 c0       	rjmp	.+16     	; 0x189a <vfprintf+0x600>
    188a:	20 2f       	mov	r18, r16
    188c:	2e 7e       	andi	r18, 0xEE	; 238
    188e:	05 c0       	rjmp	.+10     	; 0x189a <vfprintf+0x600>
    1890:	dc 2c       	mov	r13, r12
    1892:	20 2f       	mov	r18, r16
    1894:	03 c0       	rjmp	.+6      	; 0x189c <vfprintf+0x602>
    1896:	dc 2c       	mov	r13, r12
    1898:	01 c0       	rjmp	.+2      	; 0x189c <vfprintf+0x602>
    189a:	d1 2e       	mov	r13, r17
    189c:	24 ff       	sbrs	r18, 4
    189e:	0d c0       	rjmp	.+26     	; 0x18ba <vfprintf+0x620>
    18a0:	fe 01       	movw	r30, r28
    18a2:	ec 0d       	add	r30, r12
    18a4:	f1 1d       	adc	r31, r1
    18a6:	80 81       	ld	r24, Z
    18a8:	80 33       	cpi	r24, 0x30	; 48
    18aa:	11 f4       	brne	.+4      	; 0x18b0 <vfprintf+0x616>
    18ac:	29 7e       	andi	r18, 0xE9	; 233
    18ae:	09 c0       	rjmp	.+18     	; 0x18c2 <vfprintf+0x628>
    18b0:	22 ff       	sbrs	r18, 2
    18b2:	06 c0       	rjmp	.+12     	; 0x18c0 <vfprintf+0x626>
    18b4:	d3 94       	inc	r13
    18b6:	d3 94       	inc	r13
    18b8:	04 c0       	rjmp	.+8      	; 0x18c2 <vfprintf+0x628>
    18ba:	82 2f       	mov	r24, r18
    18bc:	86 78       	andi	r24, 0x86	; 134
    18be:	09 f0       	breq	.+2      	; 0x18c2 <vfprintf+0x628>
    18c0:	d3 94       	inc	r13
    18c2:	23 fd       	sbrc	r18, 3
    18c4:	12 c0       	rjmp	.+36     	; 0x18ea <vfprintf+0x650>
    18c6:	20 ff       	sbrs	r18, 0
    18c8:	06 c0       	rjmp	.+12     	; 0x18d6 <vfprintf+0x63c>
    18ca:	1c 2d       	mov	r17, r12
    18cc:	d5 14       	cp	r13, r5
    18ce:	18 f4       	brcc	.+6      	; 0x18d6 <vfprintf+0x63c>
    18d0:	15 0d       	add	r17, r5
    18d2:	1d 19       	sub	r17, r13
    18d4:	d5 2c       	mov	r13, r5
    18d6:	d5 14       	cp	r13, r5
    18d8:	60 f4       	brcc	.+24     	; 0x18f2 <vfprintf+0x658>
    18da:	b7 01       	movw	r22, r14
    18dc:	80 e2       	ldi	r24, 0x20	; 32
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	2b 8b       	std	Y+19, r18	; 0x13
    18e2:	c7 d2       	rcall	.+1422   	; 0x1e72 <fputc>
    18e4:	d3 94       	inc	r13
    18e6:	2b 89       	ldd	r18, Y+19	; 0x13
    18e8:	f6 cf       	rjmp	.-20     	; 0x18d6 <vfprintf+0x63c>
    18ea:	d5 14       	cp	r13, r5
    18ec:	10 f4       	brcc	.+4      	; 0x18f2 <vfprintf+0x658>
    18ee:	5d 18       	sub	r5, r13
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <vfprintf+0x65a>
    18f2:	51 2c       	mov	r5, r1
    18f4:	24 ff       	sbrs	r18, 4
    18f6:	11 c0       	rjmp	.+34     	; 0x191a <vfprintf+0x680>
    18f8:	b7 01       	movw	r22, r14
    18fa:	80 e3       	ldi	r24, 0x30	; 48
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	2b 8b       	std	Y+19, r18	; 0x13
    1900:	b8 d2       	rcall	.+1392   	; 0x1e72 <fputc>
    1902:	2b 89       	ldd	r18, Y+19	; 0x13
    1904:	22 ff       	sbrs	r18, 2
    1906:	16 c0       	rjmp	.+44     	; 0x1934 <vfprintf+0x69a>
    1908:	21 ff       	sbrs	r18, 1
    190a:	03 c0       	rjmp	.+6      	; 0x1912 <vfprintf+0x678>
    190c:	88 e5       	ldi	r24, 0x58	; 88
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <vfprintf+0x67c>
    1912:	88 e7       	ldi	r24, 0x78	; 120
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	b7 01       	movw	r22, r14
    1918:	0c c0       	rjmp	.+24     	; 0x1932 <vfprintf+0x698>
    191a:	82 2f       	mov	r24, r18
    191c:	86 78       	andi	r24, 0x86	; 134
    191e:	51 f0       	breq	.+20     	; 0x1934 <vfprintf+0x69a>
    1920:	21 fd       	sbrc	r18, 1
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <vfprintf+0x68e>
    1924:	80 e2       	ldi	r24, 0x20	; 32
    1926:	01 c0       	rjmp	.+2      	; 0x192a <vfprintf+0x690>
    1928:	8b e2       	ldi	r24, 0x2B	; 43
    192a:	27 fd       	sbrc	r18, 7
    192c:	8d e2       	ldi	r24, 0x2D	; 45
    192e:	b7 01       	movw	r22, r14
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	9f d2       	rcall	.+1342   	; 0x1e72 <fputc>
    1934:	c1 16       	cp	r12, r17
    1936:	30 f4       	brcc	.+12     	; 0x1944 <vfprintf+0x6aa>
    1938:	b7 01       	movw	r22, r14
    193a:	80 e3       	ldi	r24, 0x30	; 48
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	99 d2       	rcall	.+1330   	; 0x1e72 <fputc>
    1940:	11 50       	subi	r17, 0x01	; 1
    1942:	f8 cf       	rjmp	.-16     	; 0x1934 <vfprintf+0x69a>
    1944:	ca 94       	dec	r12
    1946:	f4 01       	movw	r30, r8
    1948:	ec 0d       	add	r30, r12
    194a:	f1 1d       	adc	r31, r1
    194c:	80 81       	ld	r24, Z
    194e:	b7 01       	movw	r22, r14
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	8f d2       	rcall	.+1310   	; 0x1e72 <fputc>
    1954:	c1 10       	cpse	r12, r1
    1956:	f6 cf       	rjmp	.-20     	; 0x1944 <vfprintf+0x6aa>
    1958:	55 20       	and	r5, r5
    195a:	09 f4       	brne	.+2      	; 0x195e <vfprintf+0x6c4>
    195c:	dd cc       	rjmp	.-1606   	; 0x1318 <vfprintf+0x7e>
    195e:	b7 01       	movw	r22, r14
    1960:	80 e2       	ldi	r24, 0x20	; 32
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	86 d2       	rcall	.+1292   	; 0x1e72 <fputc>
    1966:	5a 94       	dec	r5
    1968:	f7 cf       	rjmp	.-18     	; 0x1958 <vfprintf+0x6be>
    196a:	f7 01       	movw	r30, r14
    196c:	86 81       	ldd	r24, Z+6	; 0x06
    196e:	97 81       	ldd	r25, Z+7	; 0x07
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <vfprintf+0x6dc>
    1972:	8f ef       	ldi	r24, 0xFF	; 255
    1974:	9f ef       	ldi	r25, 0xFF	; 255
    1976:	63 96       	adiw	r28, 0x13	; 19
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	df 91       	pop	r29
    1984:	cf 91       	pop	r28
    1986:	1f 91       	pop	r17
    1988:	0f 91       	pop	r16
    198a:	ff 90       	pop	r15
    198c:	ef 90       	pop	r14
    198e:	df 90       	pop	r13
    1990:	cf 90       	pop	r12
    1992:	bf 90       	pop	r11
    1994:	af 90       	pop	r10
    1996:	9f 90       	pop	r9
    1998:	8f 90       	pop	r8
    199a:	7f 90       	pop	r7
    199c:	6f 90       	pop	r6
    199e:	5f 90       	pop	r5
    19a0:	4f 90       	pop	r4
    19a2:	3f 90       	pop	r3
    19a4:	2f 90       	pop	r2
    19a6:	08 95       	ret

000019a8 <__tablejump2__>:
    19a8:	ee 0f       	add	r30, r30
    19aa:	ff 1f       	adc	r31, r31

000019ac <__tablejump__>:
    19ac:	05 90       	lpm	r0, Z+
    19ae:	f4 91       	lpm	r31, Z
    19b0:	e0 2d       	mov	r30, r0
    19b2:	19 94       	eijmp

000019b4 <malloc>:
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	82 30       	cpi	r24, 0x02	; 2
    19ba:	91 05       	cpc	r25, r1
    19bc:	10 f4       	brcc	.+4      	; 0x19c2 <malloc+0xe>
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	e0 91 a5 02 	lds	r30, 0x02A5
    19c6:	f0 91 a6 02 	lds	r31, 0x02A6
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	a0 e0       	ldi	r26, 0x00	; 0
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	30 97       	sbiw	r30, 0x00	; 0
    19d4:	39 f1       	breq	.+78     	; 0x1a24 <malloc+0x70>
    19d6:	40 81       	ld	r20, Z
    19d8:	51 81       	ldd	r21, Z+1	; 0x01
    19da:	48 17       	cp	r20, r24
    19dc:	59 07       	cpc	r21, r25
    19de:	b8 f0       	brcs	.+46     	; 0x1a0e <malloc+0x5a>
    19e0:	48 17       	cp	r20, r24
    19e2:	59 07       	cpc	r21, r25
    19e4:	71 f4       	brne	.+28     	; 0x1a02 <malloc+0x4e>
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	93 81       	ldd	r25, Z+3	; 0x03
    19ea:	10 97       	sbiw	r26, 0x00	; 0
    19ec:	29 f0       	breq	.+10     	; 0x19f8 <malloc+0x44>
    19ee:	13 96       	adiw	r26, 0x03	; 3
    19f0:	9c 93       	st	X, r25
    19f2:	8e 93       	st	-X, r24
    19f4:	12 97       	sbiw	r26, 0x02	; 2
    19f6:	2c c0       	rjmp	.+88     	; 0x1a50 <malloc+0x9c>
    19f8:	90 93 a6 02 	sts	0x02A6, r25
    19fc:	80 93 a5 02 	sts	0x02A5, r24
    1a00:	27 c0       	rjmp	.+78     	; 0x1a50 <malloc+0x9c>
    1a02:	21 15       	cp	r18, r1
    1a04:	31 05       	cpc	r19, r1
    1a06:	31 f0       	breq	.+12     	; 0x1a14 <malloc+0x60>
    1a08:	42 17       	cp	r20, r18
    1a0a:	53 07       	cpc	r21, r19
    1a0c:	18 f0       	brcs	.+6      	; 0x1a14 <malloc+0x60>
    1a0e:	a9 01       	movw	r20, r18
    1a10:	db 01       	movw	r26, r22
    1a12:	01 c0       	rjmp	.+2      	; 0x1a16 <malloc+0x62>
    1a14:	ef 01       	movw	r28, r30
    1a16:	9a 01       	movw	r18, r20
    1a18:	bd 01       	movw	r22, r26
    1a1a:	df 01       	movw	r26, r30
    1a1c:	02 80       	ldd	r0, Z+2	; 0x02
    1a1e:	f3 81       	ldd	r31, Z+3	; 0x03
    1a20:	e0 2d       	mov	r30, r0
    1a22:	d7 cf       	rjmp	.-82     	; 0x19d2 <malloc+0x1e>
    1a24:	21 15       	cp	r18, r1
    1a26:	31 05       	cpc	r19, r1
    1a28:	f9 f0       	breq	.+62     	; 0x1a68 <malloc+0xb4>
    1a2a:	28 1b       	sub	r18, r24
    1a2c:	39 0b       	sbc	r19, r25
    1a2e:	24 30       	cpi	r18, 0x04	; 4
    1a30:	31 05       	cpc	r19, r1
    1a32:	80 f4       	brcc	.+32     	; 0x1a54 <malloc+0xa0>
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	9b 81       	ldd	r25, Y+3	; 0x03
    1a38:	61 15       	cp	r22, r1
    1a3a:	71 05       	cpc	r23, r1
    1a3c:	21 f0       	breq	.+8      	; 0x1a46 <malloc+0x92>
    1a3e:	fb 01       	movw	r30, r22
    1a40:	93 83       	std	Z+3, r25	; 0x03
    1a42:	82 83       	std	Z+2, r24	; 0x02
    1a44:	04 c0       	rjmp	.+8      	; 0x1a4e <malloc+0x9a>
    1a46:	90 93 a6 02 	sts	0x02A6, r25
    1a4a:	80 93 a5 02 	sts	0x02A5, r24
    1a4e:	fe 01       	movw	r30, r28
    1a50:	32 96       	adiw	r30, 0x02	; 2
    1a52:	44 c0       	rjmp	.+136    	; 0x1adc <malloc+0x128>
    1a54:	fe 01       	movw	r30, r28
    1a56:	e2 0f       	add	r30, r18
    1a58:	f3 1f       	adc	r31, r19
    1a5a:	81 93       	st	Z+, r24
    1a5c:	91 93       	st	Z+, r25
    1a5e:	22 50       	subi	r18, 0x02	; 2
    1a60:	31 09       	sbc	r19, r1
    1a62:	39 83       	std	Y+1, r19	; 0x01
    1a64:	28 83       	st	Y, r18
    1a66:	3a c0       	rjmp	.+116    	; 0x1adc <malloc+0x128>
    1a68:	20 91 a3 02 	lds	r18, 0x02A3
    1a6c:	30 91 a4 02 	lds	r19, 0x02A4
    1a70:	23 2b       	or	r18, r19
    1a72:	41 f4       	brne	.+16     	; 0x1a84 <malloc+0xd0>
    1a74:	20 91 02 02 	lds	r18, 0x0202
    1a78:	30 91 03 02 	lds	r19, 0x0203
    1a7c:	30 93 a4 02 	sts	0x02A4, r19
    1a80:	20 93 a3 02 	sts	0x02A3, r18
    1a84:	20 91 00 02 	lds	r18, 0x0200
    1a88:	30 91 01 02 	lds	r19, 0x0201
    1a8c:	21 15       	cp	r18, r1
    1a8e:	31 05       	cpc	r19, r1
    1a90:	41 f4       	brne	.+16     	; 0x1aa2 <malloc+0xee>
    1a92:	2d b7       	in	r18, 0x3d	; 61
    1a94:	3e b7       	in	r19, 0x3e	; 62
    1a96:	40 91 04 02 	lds	r20, 0x0204
    1a9a:	50 91 05 02 	lds	r21, 0x0205
    1a9e:	24 1b       	sub	r18, r20
    1aa0:	35 0b       	sbc	r19, r21
    1aa2:	e0 91 a3 02 	lds	r30, 0x02A3
    1aa6:	f0 91 a4 02 	lds	r31, 0x02A4
    1aaa:	e2 17       	cp	r30, r18
    1aac:	f3 07       	cpc	r31, r19
    1aae:	a0 f4       	brcc	.+40     	; 0x1ad8 <malloc+0x124>
    1ab0:	2e 1b       	sub	r18, r30
    1ab2:	3f 0b       	sbc	r19, r31
    1ab4:	28 17       	cp	r18, r24
    1ab6:	39 07       	cpc	r19, r25
    1ab8:	78 f0       	brcs	.+30     	; 0x1ad8 <malloc+0x124>
    1aba:	ac 01       	movw	r20, r24
    1abc:	4e 5f       	subi	r20, 0xFE	; 254
    1abe:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac0:	24 17       	cp	r18, r20
    1ac2:	35 07       	cpc	r19, r21
    1ac4:	48 f0       	brcs	.+18     	; 0x1ad8 <malloc+0x124>
    1ac6:	4e 0f       	add	r20, r30
    1ac8:	5f 1f       	adc	r21, r31
    1aca:	50 93 a4 02 	sts	0x02A4, r21
    1ace:	40 93 a3 02 	sts	0x02A3, r20
    1ad2:	81 93       	st	Z+, r24
    1ad4:	91 93       	st	Z+, r25
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <malloc+0x128>
    1ad8:	e0 e0       	ldi	r30, 0x00	; 0
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	cf 01       	movw	r24, r30
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

00001ae4 <free>:
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	09 f4       	brne	.+2      	; 0x1aee <free+0xa>
    1aec:	87 c0       	rjmp	.+270    	; 0x1bfc <free+0x118>
    1aee:	fc 01       	movw	r30, r24
    1af0:	32 97       	sbiw	r30, 0x02	; 2
    1af2:	13 82       	std	Z+3, r1	; 0x03
    1af4:	12 82       	std	Z+2, r1	; 0x02
    1af6:	c0 91 a5 02 	lds	r28, 0x02A5
    1afa:	d0 91 a6 02 	lds	r29, 0x02A6
    1afe:	20 97       	sbiw	r28, 0x00	; 0
    1b00:	81 f4       	brne	.+32     	; 0x1b22 <free+0x3e>
    1b02:	20 81       	ld	r18, Z
    1b04:	31 81       	ldd	r19, Z+1	; 0x01
    1b06:	28 0f       	add	r18, r24
    1b08:	39 1f       	adc	r19, r25
    1b0a:	80 91 a3 02 	lds	r24, 0x02A3
    1b0e:	90 91 a4 02 	lds	r25, 0x02A4
    1b12:	82 17       	cp	r24, r18
    1b14:	93 07       	cpc	r25, r19
    1b16:	79 f5       	brne	.+94     	; 0x1b76 <free+0x92>
    1b18:	f0 93 a4 02 	sts	0x02A4, r31
    1b1c:	e0 93 a3 02 	sts	0x02A3, r30
    1b20:	6d c0       	rjmp	.+218    	; 0x1bfc <free+0x118>
    1b22:	de 01       	movw	r26, r28
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	ae 17       	cp	r26, r30
    1b2a:	bf 07       	cpc	r27, r31
    1b2c:	50 f4       	brcc	.+20     	; 0x1b42 <free+0x5e>
    1b2e:	12 96       	adiw	r26, 0x02	; 2
    1b30:	4d 91       	ld	r20, X+
    1b32:	5c 91       	ld	r21, X
    1b34:	13 97       	sbiw	r26, 0x03	; 3
    1b36:	9d 01       	movw	r18, r26
    1b38:	41 15       	cp	r20, r1
    1b3a:	51 05       	cpc	r21, r1
    1b3c:	09 f1       	breq	.+66     	; 0x1b80 <free+0x9c>
    1b3e:	da 01       	movw	r26, r20
    1b40:	f3 cf       	rjmp	.-26     	; 0x1b28 <free+0x44>
    1b42:	b3 83       	std	Z+3, r27	; 0x03
    1b44:	a2 83       	std	Z+2, r26	; 0x02
    1b46:	40 81       	ld	r20, Z
    1b48:	51 81       	ldd	r21, Z+1	; 0x01
    1b4a:	84 0f       	add	r24, r20
    1b4c:	95 1f       	adc	r25, r21
    1b4e:	8a 17       	cp	r24, r26
    1b50:	9b 07       	cpc	r25, r27
    1b52:	71 f4       	brne	.+28     	; 0x1b70 <free+0x8c>
    1b54:	8d 91       	ld	r24, X+
    1b56:	9c 91       	ld	r25, X
    1b58:	11 97       	sbiw	r26, 0x01	; 1
    1b5a:	84 0f       	add	r24, r20
    1b5c:	95 1f       	adc	r25, r21
    1b5e:	02 96       	adiw	r24, 0x02	; 2
    1b60:	91 83       	std	Z+1, r25	; 0x01
    1b62:	80 83       	st	Z, r24
    1b64:	12 96       	adiw	r26, 0x02	; 2
    1b66:	8d 91       	ld	r24, X+
    1b68:	9c 91       	ld	r25, X
    1b6a:	13 97       	sbiw	r26, 0x03	; 3
    1b6c:	93 83       	std	Z+3, r25	; 0x03
    1b6e:	82 83       	std	Z+2, r24	; 0x02
    1b70:	21 15       	cp	r18, r1
    1b72:	31 05       	cpc	r19, r1
    1b74:	29 f4       	brne	.+10     	; 0x1b80 <free+0x9c>
    1b76:	f0 93 a6 02 	sts	0x02A6, r31
    1b7a:	e0 93 a5 02 	sts	0x02A5, r30
    1b7e:	3e c0       	rjmp	.+124    	; 0x1bfc <free+0x118>
    1b80:	d9 01       	movw	r26, r18
    1b82:	13 96       	adiw	r26, 0x03	; 3
    1b84:	fc 93       	st	X, r31
    1b86:	ee 93       	st	-X, r30
    1b88:	12 97       	sbiw	r26, 0x02	; 2
    1b8a:	4d 91       	ld	r20, X+
    1b8c:	5d 91       	ld	r21, X+
    1b8e:	a4 0f       	add	r26, r20
    1b90:	b5 1f       	adc	r27, r21
    1b92:	ea 17       	cp	r30, r26
    1b94:	fb 07       	cpc	r31, r27
    1b96:	79 f4       	brne	.+30     	; 0x1bb6 <free+0xd2>
    1b98:	80 81       	ld	r24, Z
    1b9a:	91 81       	ldd	r25, Z+1	; 0x01
    1b9c:	84 0f       	add	r24, r20
    1b9e:	95 1f       	adc	r25, r21
    1ba0:	02 96       	adiw	r24, 0x02	; 2
    1ba2:	d9 01       	movw	r26, r18
    1ba4:	11 96       	adiw	r26, 0x01	; 1
    1ba6:	9c 93       	st	X, r25
    1ba8:	8e 93       	st	-X, r24
    1baa:	82 81       	ldd	r24, Z+2	; 0x02
    1bac:	93 81       	ldd	r25, Z+3	; 0x03
    1bae:	13 96       	adiw	r26, 0x03	; 3
    1bb0:	9c 93       	st	X, r25
    1bb2:	8e 93       	st	-X, r24
    1bb4:	12 97       	sbiw	r26, 0x02	; 2
    1bb6:	e0 e0       	ldi	r30, 0x00	; 0
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	19 f0       	breq	.+6      	; 0x1bc8 <free+0xe4>
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	ec 01       	movw	r28, r24
    1bc6:	f9 cf       	rjmp	.-14     	; 0x1bba <free+0xd6>
    1bc8:	ce 01       	movw	r24, r28
    1bca:	02 96       	adiw	r24, 0x02	; 2
    1bcc:	28 81       	ld	r18, Y
    1bce:	39 81       	ldd	r19, Y+1	; 0x01
    1bd0:	82 0f       	add	r24, r18
    1bd2:	93 1f       	adc	r25, r19
    1bd4:	20 91 a3 02 	lds	r18, 0x02A3
    1bd8:	30 91 a4 02 	lds	r19, 0x02A4
    1bdc:	28 17       	cp	r18, r24
    1bde:	39 07       	cpc	r19, r25
    1be0:	69 f4       	brne	.+26     	; 0x1bfc <free+0x118>
    1be2:	30 97       	sbiw	r30, 0x00	; 0
    1be4:	29 f4       	brne	.+10     	; 0x1bf0 <free+0x10c>
    1be6:	10 92 a6 02 	sts	0x02A6, r1
    1bea:	10 92 a5 02 	sts	0x02A5, r1
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <free+0x110>
    1bf0:	13 82       	std	Z+3, r1	; 0x03
    1bf2:	12 82       	std	Z+2, r1	; 0x02
    1bf4:	d0 93 a4 02 	sts	0x02A4, r29
    1bf8:	c0 93 a3 02 	sts	0x02A3, r28
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	08 95       	ret

00001c02 <__ftoa_engine>:
    1c02:	28 30       	cpi	r18, 0x08	; 8
    1c04:	08 f0       	brcs	.+2      	; 0x1c08 <__ftoa_engine+0x6>
    1c06:	27 e0       	ldi	r18, 0x07	; 7
    1c08:	33 27       	eor	r19, r19
    1c0a:	da 01       	movw	r26, r20
    1c0c:	99 0f       	add	r25, r25
    1c0e:	31 1d       	adc	r19, r1
    1c10:	87 fd       	sbrc	r24, 7
    1c12:	91 60       	ori	r25, 0x01	; 1
    1c14:	00 96       	adiw	r24, 0x00	; 0
    1c16:	61 05       	cpc	r22, r1
    1c18:	71 05       	cpc	r23, r1
    1c1a:	39 f4       	brne	.+14     	; 0x1c2a <__ftoa_engine+0x28>
    1c1c:	32 60       	ori	r19, 0x02	; 2
    1c1e:	2e 5f       	subi	r18, 0xFE	; 254
    1c20:	3d 93       	st	X+, r19
    1c22:	30 e3       	ldi	r19, 0x30	; 48
    1c24:	2a 95       	dec	r18
    1c26:	e1 f7       	brne	.-8      	; 0x1c20 <__ftoa_engine+0x1e>
    1c28:	08 95       	ret
    1c2a:	9f 3f       	cpi	r25, 0xFF	; 255
    1c2c:	30 f0       	brcs	.+12     	; 0x1c3a <__ftoa_engine+0x38>
    1c2e:	80 38       	cpi	r24, 0x80	; 128
    1c30:	71 05       	cpc	r23, r1
    1c32:	61 05       	cpc	r22, r1
    1c34:	09 f0       	breq	.+2      	; 0x1c38 <__ftoa_engine+0x36>
    1c36:	3c 5f       	subi	r19, 0xFC	; 252
    1c38:	3c 5f       	subi	r19, 0xFC	; 252
    1c3a:	3d 93       	st	X+, r19
    1c3c:	91 30       	cpi	r25, 0x01	; 1
    1c3e:	08 f0       	brcs	.+2      	; 0x1c42 <__ftoa_engine+0x40>
    1c40:	80 68       	ori	r24, 0x80	; 128
    1c42:	91 1d       	adc	r25, r1
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	1f 93       	push	r17
    1c4a:	0f 93       	push	r16
    1c4c:	ff 92       	push	r15
    1c4e:	ef 92       	push	r14
    1c50:	19 2f       	mov	r17, r25
    1c52:	98 7f       	andi	r25, 0xF8	; 248
    1c54:	96 95       	lsr	r25
    1c56:	e9 2f       	mov	r30, r25
    1c58:	96 95       	lsr	r25
    1c5a:	96 95       	lsr	r25
    1c5c:	e9 0f       	add	r30, r25
    1c5e:	ff 27       	eor	r31, r31
    1c60:	e8 51       	subi	r30, 0x18	; 24
    1c62:	fe 4f       	sbci	r31, 0xFE	; 254
    1c64:	99 27       	eor	r25, r25
    1c66:	33 27       	eor	r19, r19
    1c68:	ee 24       	eor	r14, r14
    1c6a:	ff 24       	eor	r15, r15
    1c6c:	a7 01       	movw	r20, r14
    1c6e:	e7 01       	movw	r28, r14
    1c70:	05 90       	lpm	r0, Z+
    1c72:	08 94       	sec
    1c74:	07 94       	ror	r0
    1c76:	28 f4       	brcc	.+10     	; 0x1c82 <__ftoa_engine+0x80>
    1c78:	36 0f       	add	r19, r22
    1c7a:	e7 1e       	adc	r14, r23
    1c7c:	f8 1e       	adc	r15, r24
    1c7e:	49 1f       	adc	r20, r25
    1c80:	51 1d       	adc	r21, r1
    1c82:	66 0f       	add	r22, r22
    1c84:	77 1f       	adc	r23, r23
    1c86:	88 1f       	adc	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	06 94       	lsr	r0
    1c8c:	a1 f7       	brne	.-24     	; 0x1c76 <__ftoa_engine+0x74>
    1c8e:	05 90       	lpm	r0, Z+
    1c90:	07 94       	ror	r0
    1c92:	28 f4       	brcc	.+10     	; 0x1c9e <__ftoa_engine+0x9c>
    1c94:	e7 0e       	add	r14, r23
    1c96:	f8 1e       	adc	r15, r24
    1c98:	49 1f       	adc	r20, r25
    1c9a:	56 1f       	adc	r21, r22
    1c9c:	c1 1d       	adc	r28, r1
    1c9e:	77 0f       	add	r23, r23
    1ca0:	88 1f       	adc	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	66 1f       	adc	r22, r22
    1ca6:	06 94       	lsr	r0
    1ca8:	a1 f7       	brne	.-24     	; 0x1c92 <__ftoa_engine+0x90>
    1caa:	05 90       	lpm	r0, Z+
    1cac:	07 94       	ror	r0
    1cae:	28 f4       	brcc	.+10     	; 0x1cba <__ftoa_engine+0xb8>
    1cb0:	f8 0e       	add	r15, r24
    1cb2:	49 1f       	adc	r20, r25
    1cb4:	56 1f       	adc	r21, r22
    1cb6:	c7 1f       	adc	r28, r23
    1cb8:	d1 1d       	adc	r29, r1
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	66 1f       	adc	r22, r22
    1cc0:	77 1f       	adc	r23, r23
    1cc2:	06 94       	lsr	r0
    1cc4:	a1 f7       	brne	.-24     	; 0x1cae <__ftoa_engine+0xac>
    1cc6:	05 90       	lpm	r0, Z+
    1cc8:	07 94       	ror	r0
    1cca:	20 f4       	brcc	.+8      	; 0x1cd4 <__ftoa_engine+0xd2>
    1ccc:	49 0f       	add	r20, r25
    1cce:	56 1f       	adc	r21, r22
    1cd0:	c7 1f       	adc	r28, r23
    1cd2:	d8 1f       	adc	r29, r24
    1cd4:	99 0f       	add	r25, r25
    1cd6:	66 1f       	adc	r22, r22
    1cd8:	77 1f       	adc	r23, r23
    1cda:	88 1f       	adc	r24, r24
    1cdc:	06 94       	lsr	r0
    1cde:	a9 f7       	brne	.-22     	; 0x1cca <__ftoa_engine+0xc8>
    1ce0:	84 91       	lpm	r24, Z
    1ce2:	10 95       	com	r17
    1ce4:	17 70       	andi	r17, 0x07	; 7
    1ce6:	41 f0       	breq	.+16     	; 0x1cf8 <__ftoa_engine+0xf6>
    1ce8:	d6 95       	lsr	r29
    1cea:	c7 95       	ror	r28
    1cec:	57 95       	ror	r21
    1cee:	47 95       	ror	r20
    1cf0:	f7 94       	ror	r15
    1cf2:	e7 94       	ror	r14
    1cf4:	1a 95       	dec	r17
    1cf6:	c1 f7       	brne	.-16     	; 0x1ce8 <__ftoa_engine+0xe6>
    1cf8:	ee e8       	ldi	r30, 0x8E	; 142
    1cfa:	f1 e0       	ldi	r31, 0x01	; 1
    1cfc:	68 94       	set
    1cfe:	15 90       	lpm	r1, Z+
    1d00:	15 91       	lpm	r17, Z+
    1d02:	35 91       	lpm	r19, Z+
    1d04:	65 91       	lpm	r22, Z+
    1d06:	95 91       	lpm	r25, Z+
    1d08:	05 90       	lpm	r0, Z+
    1d0a:	7f e2       	ldi	r23, 0x2F	; 47
    1d0c:	73 95       	inc	r23
    1d0e:	e1 18       	sub	r14, r1
    1d10:	f1 0a       	sbc	r15, r17
    1d12:	43 0b       	sbc	r20, r19
    1d14:	56 0b       	sbc	r21, r22
    1d16:	c9 0b       	sbc	r28, r25
    1d18:	d0 09       	sbc	r29, r0
    1d1a:	c0 f7       	brcc	.-16     	; 0x1d0c <__ftoa_engine+0x10a>
    1d1c:	e1 0c       	add	r14, r1
    1d1e:	f1 1e       	adc	r15, r17
    1d20:	43 1f       	adc	r20, r19
    1d22:	56 1f       	adc	r21, r22
    1d24:	c9 1f       	adc	r28, r25
    1d26:	d0 1d       	adc	r29, r0
    1d28:	7e f4       	brtc	.+30     	; 0x1d48 <__ftoa_engine+0x146>
    1d2a:	70 33       	cpi	r23, 0x30	; 48
    1d2c:	11 f4       	brne	.+4      	; 0x1d32 <__ftoa_engine+0x130>
    1d2e:	8a 95       	dec	r24
    1d30:	e6 cf       	rjmp	.-52     	; 0x1cfe <__ftoa_engine+0xfc>
    1d32:	e8 94       	clt
    1d34:	01 50       	subi	r16, 0x01	; 1
    1d36:	30 f0       	brcs	.+12     	; 0x1d44 <__ftoa_engine+0x142>
    1d38:	08 0f       	add	r16, r24
    1d3a:	0a f4       	brpl	.+2      	; 0x1d3e <__ftoa_engine+0x13c>
    1d3c:	00 27       	eor	r16, r16
    1d3e:	02 17       	cp	r16, r18
    1d40:	08 f4       	brcc	.+2      	; 0x1d44 <__ftoa_engine+0x142>
    1d42:	20 2f       	mov	r18, r16
    1d44:	23 95       	inc	r18
    1d46:	02 2f       	mov	r16, r18
    1d48:	7a 33       	cpi	r23, 0x3A	; 58
    1d4a:	28 f0       	brcs	.+10     	; 0x1d56 <__ftoa_engine+0x154>
    1d4c:	79 e3       	ldi	r23, 0x39	; 57
    1d4e:	7d 93       	st	X+, r23
    1d50:	2a 95       	dec	r18
    1d52:	e9 f7       	brne	.-6      	; 0x1d4e <__ftoa_engine+0x14c>
    1d54:	10 c0       	rjmp	.+32     	; 0x1d76 <__ftoa_engine+0x174>
    1d56:	7d 93       	st	X+, r23
    1d58:	2a 95       	dec	r18
    1d5a:	89 f6       	brne	.-94     	; 0x1cfe <__ftoa_engine+0xfc>
    1d5c:	06 94       	lsr	r0
    1d5e:	97 95       	ror	r25
    1d60:	67 95       	ror	r22
    1d62:	37 95       	ror	r19
    1d64:	17 95       	ror	r17
    1d66:	17 94       	ror	r1
    1d68:	e1 18       	sub	r14, r1
    1d6a:	f1 0a       	sbc	r15, r17
    1d6c:	43 0b       	sbc	r20, r19
    1d6e:	56 0b       	sbc	r21, r22
    1d70:	c9 0b       	sbc	r28, r25
    1d72:	d0 09       	sbc	r29, r0
    1d74:	98 f0       	brcs	.+38     	; 0x1d9c <__ftoa_engine+0x19a>
    1d76:	23 95       	inc	r18
    1d78:	7e 91       	ld	r23, -X
    1d7a:	73 95       	inc	r23
    1d7c:	7a 33       	cpi	r23, 0x3A	; 58
    1d7e:	08 f0       	brcs	.+2      	; 0x1d82 <__ftoa_engine+0x180>
    1d80:	70 e3       	ldi	r23, 0x30	; 48
    1d82:	7c 93       	st	X, r23
    1d84:	20 13       	cpse	r18, r16
    1d86:	b8 f7       	brcc	.-18     	; 0x1d76 <__ftoa_engine+0x174>
    1d88:	7e 91       	ld	r23, -X
    1d8a:	70 61       	ori	r23, 0x10	; 16
    1d8c:	7d 93       	st	X+, r23
    1d8e:	30 f0       	brcs	.+12     	; 0x1d9c <__ftoa_engine+0x19a>
    1d90:	83 95       	inc	r24
    1d92:	71 e3       	ldi	r23, 0x31	; 49
    1d94:	7d 93       	st	X+, r23
    1d96:	70 e3       	ldi	r23, 0x30	; 48
    1d98:	2a 95       	dec	r18
    1d9a:	e1 f7       	brne	.-8      	; 0x1d94 <__ftoa_engine+0x192>
    1d9c:	11 24       	eor	r1, r1
    1d9e:	ef 90       	pop	r14
    1da0:	ff 90       	pop	r15
    1da2:	0f 91       	pop	r16
    1da4:	1f 91       	pop	r17
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	99 27       	eor	r25, r25
    1dac:	87 fd       	sbrc	r24, 7
    1dae:	90 95       	com	r25
    1db0:	08 95       	ret

00001db2 <strnlen_P>:
    1db2:	fc 01       	movw	r30, r24
    1db4:	05 90       	lpm	r0, Z+
    1db6:	61 50       	subi	r22, 0x01	; 1
    1db8:	70 40       	sbci	r23, 0x00	; 0
    1dba:	01 10       	cpse	r0, r1
    1dbc:	d8 f7       	brcc	.-10     	; 0x1db4 <strnlen_P+0x2>
    1dbe:	80 95       	com	r24
    1dc0:	90 95       	com	r25
    1dc2:	8e 0f       	add	r24, r30
    1dc4:	9f 1f       	adc	r25, r31
    1dc6:	08 95       	ret

00001dc8 <strnlen>:
    1dc8:	fc 01       	movw	r30, r24
    1dca:	61 50       	subi	r22, 0x01	; 1
    1dcc:	70 40       	sbci	r23, 0x00	; 0
    1dce:	01 90       	ld	r0, Z+
    1dd0:	01 10       	cpse	r0, r1
    1dd2:	d8 f7       	brcc	.-10     	; 0x1dca <strnlen+0x2>
    1dd4:	80 95       	com	r24
    1dd6:	90 95       	com	r25
    1dd8:	8e 0f       	add	r24, r30
    1dda:	9f 1f       	adc	r25, r31
    1ddc:	08 95       	ret

00001dde <fdevopen>:
    1dde:	0f 93       	push	r16
    1de0:	1f 93       	push	r17
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
    1de6:	ec 01       	movw	r28, r24
    1de8:	8b 01       	movw	r16, r22
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	31 f4       	brne	.+12     	; 0x1dfa <fdevopen+0x1c>
    1dee:	61 15       	cp	r22, r1
    1df0:	71 05       	cpc	r23, r1
    1df2:	19 f4       	brne	.+6      	; 0x1dfa <fdevopen+0x1c>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	37 c0       	rjmp	.+110    	; 0x1e68 <fdevopen+0x8a>
    1dfa:	6e e0       	ldi	r22, 0x0E	; 14
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	05 d1       	rcall	.+522    	; 0x200e <calloc>
    1e04:	fc 01       	movw	r30, r24
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	a9 f3       	breq	.-22     	; 0x1df4 <fdevopen+0x16>
    1e0a:	80 e8       	ldi	r24, 0x80	; 128
    1e0c:	83 83       	std	Z+3, r24	; 0x03
    1e0e:	01 15       	cp	r16, r1
    1e10:	11 05       	cpc	r17, r1
    1e12:	71 f0       	breq	.+28     	; 0x1e30 <fdevopen+0x52>
    1e14:	13 87       	std	Z+11, r17	; 0x0b
    1e16:	02 87       	std	Z+10, r16	; 0x0a
    1e18:	81 e8       	ldi	r24, 0x81	; 129
    1e1a:	83 83       	std	Z+3, r24	; 0x03
    1e1c:	80 91 a7 02 	lds	r24, 0x02A7
    1e20:	90 91 a8 02 	lds	r25, 0x02A8
    1e24:	89 2b       	or	r24, r25
    1e26:	21 f4       	brne	.+8      	; 0x1e30 <fdevopen+0x52>
    1e28:	f0 93 a8 02 	sts	0x02A8, r31
    1e2c:	e0 93 a7 02 	sts	0x02A7, r30
    1e30:	20 97       	sbiw	r28, 0x00	; 0
    1e32:	c9 f0       	breq	.+50     	; 0x1e66 <fdevopen+0x88>
    1e34:	d1 87       	std	Z+9, r29	; 0x09
    1e36:	c0 87       	std	Z+8, r28	; 0x08
    1e38:	83 81       	ldd	r24, Z+3	; 0x03
    1e3a:	82 60       	ori	r24, 0x02	; 2
    1e3c:	83 83       	std	Z+3, r24	; 0x03
    1e3e:	80 91 a9 02 	lds	r24, 0x02A9
    1e42:	90 91 aa 02 	lds	r25, 0x02AA
    1e46:	89 2b       	or	r24, r25
    1e48:	71 f4       	brne	.+28     	; 0x1e66 <fdevopen+0x88>
    1e4a:	f0 93 aa 02 	sts	0x02AA, r31
    1e4e:	e0 93 a9 02 	sts	0x02A9, r30
    1e52:	80 91 ab 02 	lds	r24, 0x02AB
    1e56:	90 91 ac 02 	lds	r25, 0x02AC
    1e5a:	89 2b       	or	r24, r25
    1e5c:	21 f4       	brne	.+8      	; 0x1e66 <fdevopen+0x88>
    1e5e:	f0 93 ac 02 	sts	0x02AC, r31
    1e62:	e0 93 ab 02 	sts	0x02AB, r30
    1e66:	cf 01       	movw	r24, r30
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	1f 91       	pop	r17
    1e6e:	0f 91       	pop	r16
    1e70:	08 95       	ret

00001e72 <fputc>:
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	18 2f       	mov	r17, r24
    1e7c:	09 2f       	mov	r16, r25
    1e7e:	eb 01       	movw	r28, r22
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	81 fd       	sbrc	r24, 1
    1e84:	03 c0       	rjmp	.+6      	; 0x1e8c <fputc+0x1a>
    1e86:	8f ef       	ldi	r24, 0xFF	; 255
    1e88:	9f ef       	ldi	r25, 0xFF	; 255
    1e8a:	20 c0       	rjmp	.+64     	; 0x1ecc <fputc+0x5a>
    1e8c:	82 ff       	sbrs	r24, 2
    1e8e:	10 c0       	rjmp	.+32     	; 0x1eb0 <fputc+0x3e>
    1e90:	4e 81       	ldd	r20, Y+6	; 0x06
    1e92:	5f 81       	ldd	r21, Y+7	; 0x07
    1e94:	2c 81       	ldd	r18, Y+4	; 0x04
    1e96:	3d 81       	ldd	r19, Y+5	; 0x05
    1e98:	42 17       	cp	r20, r18
    1e9a:	53 07       	cpc	r21, r19
    1e9c:	7c f4       	brge	.+30     	; 0x1ebc <fputc+0x4a>
    1e9e:	e8 81       	ld	r30, Y
    1ea0:	f9 81       	ldd	r31, Y+1	; 0x01
    1ea2:	9f 01       	movw	r18, r30
    1ea4:	2f 5f       	subi	r18, 0xFF	; 255
    1ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea8:	39 83       	std	Y+1, r19	; 0x01
    1eaa:	28 83       	st	Y, r18
    1eac:	10 83       	st	Z, r17
    1eae:	06 c0       	rjmp	.+12     	; 0x1ebc <fputc+0x4a>
    1eb0:	e8 85       	ldd	r30, Y+8	; 0x08
    1eb2:	f9 85       	ldd	r31, Y+9	; 0x09
    1eb4:	81 2f       	mov	r24, r17
    1eb6:	19 95       	eicall
    1eb8:	89 2b       	or	r24, r25
    1eba:	29 f7       	brne	.-54     	; 0x1e86 <fputc+0x14>
    1ebc:	2e 81       	ldd	r18, Y+6	; 0x06
    1ebe:	3f 81       	ldd	r19, Y+7	; 0x07
    1ec0:	2f 5f       	subi	r18, 0xFF	; 255
    1ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec4:	3f 83       	std	Y+7, r19	; 0x07
    1ec6:	2e 83       	std	Y+6, r18	; 0x06
    1ec8:	81 2f       	mov	r24, r17
    1eca:	90 2f       	mov	r25, r16
    1ecc:	df 91       	pop	r29
    1ece:	cf 91       	pop	r28
    1ed0:	1f 91       	pop	r17
    1ed2:	0f 91       	pop	r16
    1ed4:	08 95       	ret

00001ed6 <printf>:
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	fe 01       	movw	r30, r28
    1ee0:	36 96       	adiw	r30, 0x06	; 6
    1ee2:	61 91       	ld	r22, Z+
    1ee4:	71 91       	ld	r23, Z+
    1ee6:	af 01       	movw	r20, r30
    1ee8:	80 91 a9 02 	lds	r24, 0x02A9
    1eec:	90 91 aa 02 	lds	r25, 0x02AA
    1ef0:	d4 d9       	rcall	.-3160   	; 0x129a <vfprintf>
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	08 95       	ret

00001ef8 <puts>:
    1ef8:	0f 93       	push	r16
    1efa:	1f 93       	push	r17
    1efc:	cf 93       	push	r28
    1efe:	df 93       	push	r29
    1f00:	e0 91 a9 02 	lds	r30, 0x02A9
    1f04:	f0 91 aa 02 	lds	r31, 0x02AA
    1f08:	23 81       	ldd	r18, Z+3	; 0x03
    1f0a:	21 ff       	sbrs	r18, 1
    1f0c:	1b c0       	rjmp	.+54     	; 0x1f44 <puts+0x4c>
    1f0e:	ec 01       	movw	r28, r24
    1f10:	00 e0       	ldi	r16, 0x00	; 0
    1f12:	10 e0       	ldi	r17, 0x00	; 0
    1f14:	89 91       	ld	r24, Y+
    1f16:	60 91 a9 02 	lds	r22, 0x02A9
    1f1a:	70 91 aa 02 	lds	r23, 0x02AA
    1f1e:	db 01       	movw	r26, r22
    1f20:	18 96       	adiw	r26, 0x08	; 8
    1f22:	ed 91       	ld	r30, X+
    1f24:	fc 91       	ld	r31, X
    1f26:	19 97       	sbiw	r26, 0x09	; 9
    1f28:	88 23       	and	r24, r24
    1f2a:	31 f0       	breq	.+12     	; 0x1f38 <puts+0x40>
    1f2c:	19 95       	eicall
    1f2e:	89 2b       	or	r24, r25
    1f30:	89 f3       	breq	.-30     	; 0x1f14 <puts+0x1c>
    1f32:	0f ef       	ldi	r16, 0xFF	; 255
    1f34:	1f ef       	ldi	r17, 0xFF	; 255
    1f36:	ee cf       	rjmp	.-36     	; 0x1f14 <puts+0x1c>
    1f38:	8a e0       	ldi	r24, 0x0A	; 10
    1f3a:	19 95       	eicall
    1f3c:	89 2b       	or	r24, r25
    1f3e:	11 f4       	brne	.+4      	; 0x1f44 <puts+0x4c>
    1f40:	c8 01       	movw	r24, r16
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <puts+0x50>
    1f44:	8f ef       	ldi	r24, 0xFF	; 255
    1f46:	9f ef       	ldi	r25, 0xFF	; 255
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	08 95       	ret

00001f52 <__ultoa_invert>:
    1f52:	fa 01       	movw	r30, r20
    1f54:	aa 27       	eor	r26, r26
    1f56:	28 30       	cpi	r18, 0x08	; 8
    1f58:	51 f1       	breq	.+84     	; 0x1fae <__ultoa_invert+0x5c>
    1f5a:	20 31       	cpi	r18, 0x10	; 16
    1f5c:	81 f1       	breq	.+96     	; 0x1fbe <__ultoa_invert+0x6c>
    1f5e:	e8 94       	clt
    1f60:	6f 93       	push	r22
    1f62:	6e 7f       	andi	r22, 0xFE	; 254
    1f64:	6e 5f       	subi	r22, 0xFE	; 254
    1f66:	7f 4f       	sbci	r23, 0xFF	; 255
    1f68:	8f 4f       	sbci	r24, 0xFF	; 255
    1f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6c:	af 4f       	sbci	r26, 0xFF	; 255
    1f6e:	b1 e0       	ldi	r27, 0x01	; 1
    1f70:	3e d0       	rcall	.+124    	; 0x1fee <__ultoa_invert+0x9c>
    1f72:	b4 e0       	ldi	r27, 0x04	; 4
    1f74:	3c d0       	rcall	.+120    	; 0x1fee <__ultoa_invert+0x9c>
    1f76:	67 0f       	add	r22, r23
    1f78:	78 1f       	adc	r23, r24
    1f7a:	89 1f       	adc	r24, r25
    1f7c:	9a 1f       	adc	r25, r26
    1f7e:	a1 1d       	adc	r26, r1
    1f80:	68 0f       	add	r22, r24
    1f82:	79 1f       	adc	r23, r25
    1f84:	8a 1f       	adc	r24, r26
    1f86:	91 1d       	adc	r25, r1
    1f88:	a1 1d       	adc	r26, r1
    1f8a:	6a 0f       	add	r22, r26
    1f8c:	71 1d       	adc	r23, r1
    1f8e:	81 1d       	adc	r24, r1
    1f90:	91 1d       	adc	r25, r1
    1f92:	a1 1d       	adc	r26, r1
    1f94:	20 d0       	rcall	.+64     	; 0x1fd6 <__ultoa_invert+0x84>
    1f96:	09 f4       	brne	.+2      	; 0x1f9a <__ultoa_invert+0x48>
    1f98:	68 94       	set
    1f9a:	3f 91       	pop	r19
    1f9c:	2a e0       	ldi	r18, 0x0A	; 10
    1f9e:	26 9f       	mul	r18, r22
    1fa0:	11 24       	eor	r1, r1
    1fa2:	30 19       	sub	r19, r0
    1fa4:	30 5d       	subi	r19, 0xD0	; 208
    1fa6:	31 93       	st	Z+, r19
    1fa8:	de f6       	brtc	.-74     	; 0x1f60 <__ultoa_invert+0xe>
    1faa:	cf 01       	movw	r24, r30
    1fac:	08 95       	ret
    1fae:	46 2f       	mov	r20, r22
    1fb0:	47 70       	andi	r20, 0x07	; 7
    1fb2:	40 5d       	subi	r20, 0xD0	; 208
    1fb4:	41 93       	st	Z+, r20
    1fb6:	b3 e0       	ldi	r27, 0x03	; 3
    1fb8:	0f d0       	rcall	.+30     	; 0x1fd8 <__ultoa_invert+0x86>
    1fba:	c9 f7       	brne	.-14     	; 0x1fae <__ultoa_invert+0x5c>
    1fbc:	f6 cf       	rjmp	.-20     	; 0x1faa <__ultoa_invert+0x58>
    1fbe:	46 2f       	mov	r20, r22
    1fc0:	4f 70       	andi	r20, 0x0F	; 15
    1fc2:	40 5d       	subi	r20, 0xD0	; 208
    1fc4:	4a 33       	cpi	r20, 0x3A	; 58
    1fc6:	18 f0       	brcs	.+6      	; 0x1fce <__ultoa_invert+0x7c>
    1fc8:	49 5d       	subi	r20, 0xD9	; 217
    1fca:	31 fd       	sbrc	r19, 1
    1fcc:	40 52       	subi	r20, 0x20	; 32
    1fce:	41 93       	st	Z+, r20
    1fd0:	02 d0       	rcall	.+4      	; 0x1fd6 <__ultoa_invert+0x84>
    1fd2:	a9 f7       	brne	.-22     	; 0x1fbe <__ultoa_invert+0x6c>
    1fd4:	ea cf       	rjmp	.-44     	; 0x1faa <__ultoa_invert+0x58>
    1fd6:	b4 e0       	ldi	r27, 0x04	; 4
    1fd8:	a6 95       	lsr	r26
    1fda:	97 95       	ror	r25
    1fdc:	87 95       	ror	r24
    1fde:	77 95       	ror	r23
    1fe0:	67 95       	ror	r22
    1fe2:	ba 95       	dec	r27
    1fe4:	c9 f7       	brne	.-14     	; 0x1fd8 <__ultoa_invert+0x86>
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	61 05       	cpc	r22, r1
    1fea:	71 05       	cpc	r23, r1
    1fec:	08 95       	ret
    1fee:	9b 01       	movw	r18, r22
    1ff0:	ac 01       	movw	r20, r24
    1ff2:	0a 2e       	mov	r0, r26
    1ff4:	06 94       	lsr	r0
    1ff6:	57 95       	ror	r21
    1ff8:	47 95       	ror	r20
    1ffa:	37 95       	ror	r19
    1ffc:	27 95       	ror	r18
    1ffe:	ba 95       	dec	r27
    2000:	c9 f7       	brne	.-14     	; 0x1ff4 <__ultoa_invert+0xa2>
    2002:	62 0f       	add	r22, r18
    2004:	73 1f       	adc	r23, r19
    2006:	84 1f       	adc	r24, r20
    2008:	95 1f       	adc	r25, r21
    200a:	a0 1d       	adc	r26, r0
    200c:	08 95       	ret

0000200e <calloc>:
    200e:	0f 93       	push	r16
    2010:	1f 93       	push	r17
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	86 9f       	mul	r24, r22
    2018:	80 01       	movw	r16, r0
    201a:	87 9f       	mul	r24, r23
    201c:	10 0d       	add	r17, r0
    201e:	96 9f       	mul	r25, r22
    2020:	10 0d       	add	r17, r0
    2022:	11 24       	eor	r1, r1
    2024:	c8 01       	movw	r24, r16
    2026:	c6 dc       	rcall	.-1652   	; 0x19b4 <malloc>
    2028:	ec 01       	movw	r28, r24
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	21 f0       	breq	.+8      	; 0x2036 <calloc+0x28>
    202e:	a8 01       	movw	r20, r16
    2030:	60 e0       	ldi	r22, 0x00	; 0
    2032:	70 e0       	ldi	r23, 0x00	; 0
    2034:	06 d0       	rcall	.+12     	; 0x2042 <memset>
    2036:	ce 01       	movw	r24, r28
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	1f 91       	pop	r17
    203e:	0f 91       	pop	r16
    2040:	08 95       	ret

00002042 <memset>:
    2042:	dc 01       	movw	r26, r24
    2044:	01 c0       	rjmp	.+2      	; 0x2048 <memset+0x6>
    2046:	6d 93       	st	X+, r22
    2048:	41 50       	subi	r20, 0x01	; 1
    204a:	50 40       	sbci	r21, 0x00	; 0
    204c:	e0 f7       	brcc	.-8      	; 0x2046 <memset+0x4>
    204e:	08 95       	ret

00002050 <_exit>:
    2050:	f8 94       	cli

00002052 <__stop_program>:
    2052:	ff cf       	rjmp	.-2      	; 0x2052 <__stop_program>
