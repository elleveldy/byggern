
ATmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800200  000020a4  00002138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  0080029a  0080029a  000021d2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021d2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000448  00000000  00000000  0000222e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002f2f  00000000  00000000  00002676  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000148e  00000000  00000000  000055a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ee1  00000000  00000000  00006a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009a4  00000000  00000000  00008914  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a81  00000000  00000000  000092b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000016e1  00000000  00000000  00009d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000348  00000000  00000000  0000b41a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	43 c1       	rjmp	.+646    	; 0x288 <__ctors_end>
       2:	00 00       	nop
       4:	61 c1       	rjmp	.+706    	; 0x2c8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c1       	rjmp	.+702    	; 0x2c8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c1       	rjmp	.+698    	; 0x2c8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c1       	rjmp	.+694    	; 0x2c8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c1       	rjmp	.+690    	; 0x2c8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c1       	rjmp	.+686    	; 0x2c8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c1       	rjmp	.+682    	; 0x2c8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c1       	rjmp	.+678    	; 0x2c8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c1       	rjmp	.+674    	; 0x2c8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c1       	rjmp	.+670    	; 0x2c8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c1       	rjmp	.+666    	; 0x2c8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c1       	rjmp	.+662    	; 0x2c8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c1       	rjmp	.+658    	; 0x2c8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c1       	rjmp	.+654    	; 0x2c8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c1       	rjmp	.+650    	; 0x2c8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c1       	rjmp	.+646    	; 0x2c8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c1       	rjmp	.+642    	; 0x2c8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c1       	rjmp	.+638    	; 0x2c8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c1       	rjmp	.+634    	; 0x2c8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c1       	rjmp	.+630    	; 0x2c8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c1       	rjmp	.+626    	; 0x2c8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c1       	rjmp	.+622    	; 0x2c8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c1       	rjmp	.+618    	; 0x2c8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c1       	rjmp	.+614    	; 0x2c8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c1       	rjmp	.+610    	; 0x2c8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c1       	rjmp	.+606    	; 0x2c8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c1       	rjmp	.+602    	; 0x2c8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c1       	rjmp	.+598    	; 0x2c8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c1       	rjmp	.+594    	; 0x2c8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c1       	rjmp	.+590    	; 0x2c8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c1       	rjmp	.+586    	; 0x2c8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c1       	rjmp	.+582    	; 0x2c8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c1       	rjmp	.+578    	; 0x2c8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c1       	rjmp	.+574    	; 0x2c8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1d c1       	rjmp	.+570    	; 0x2c8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1b c1       	rjmp	.+566    	; 0x2c8 <__bad_interrupt>
      92:	00 00       	nop
      94:	19 c1       	rjmp	.+562    	; 0x2c8 <__bad_interrupt>
      96:	00 00       	nop
      98:	17 c1       	rjmp	.+558    	; 0x2c8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	94 c6       	rjmp	.+3368   	; 0xdc6 <__vector_39>
      9e:	00 00       	nop
      a0:	13 c1       	rjmp	.+550    	; 0x2c8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	11 c1       	rjmp	.+546    	; 0x2c8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0f c1       	rjmp	.+542    	; 0x2c8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0d c1       	rjmp	.+538    	; 0x2c8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0b c1       	rjmp	.+534    	; 0x2c8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	09 c1       	rjmp	.+530    	; 0x2c8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	07 c1       	rjmp	.+526    	; 0x2c8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	05 c1       	rjmp	.+522    	; 0x2c8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	03 c1       	rjmp	.+518    	; 0x2c8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	01 c1       	rjmp	.+514    	; 0x2c8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ff c0       	rjmp	.+510    	; 0x2c8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fd c0       	rjmp	.+506    	; 0x2c8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fb c0       	rjmp	.+502    	; 0x2c8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f9 c0       	rjmp	.+498    	; 0x2c8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f7 c0       	rjmp	.+494    	; 0x2c8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f5 c0       	rjmp	.+490    	; 0x2c8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f3 c0       	rjmp	.+486    	; 0x2c8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	fe 06       	cpc	r15, r30
      e6:	50 07       	cpc	r21, r16
      e8:	50 07       	cpc	r21, r16
      ea:	50 07       	cpc	r21, r16
      ec:	50 07       	cpc	r21, r16
      ee:	50 07       	cpc	r21, r16
      f0:	50 07       	cpc	r21, r16
      f2:	50 07       	cpc	r21, r16
      f4:	fe 06       	cpc	r15, r30
      f6:	50 07       	cpc	r21, r16
      f8:	50 07       	cpc	r21, r16
      fa:	50 07       	cpc	r21, r16
      fc:	50 07       	cpc	r21, r16
      fe:	50 07       	cpc	r21, r16
     100:	50 07       	cpc	r21, r16
     102:	50 07       	cpc	r21, r16
     104:	00 07       	cpc	r16, r16
     106:	50 07       	cpc	r21, r16
     108:	50 07       	cpc	r21, r16
     10a:	50 07       	cpc	r21, r16
     10c:	50 07       	cpc	r21, r16
     10e:	50 07       	cpc	r21, r16
     110:	50 07       	cpc	r21, r16
     112:	50 07       	cpc	r21, r16
     114:	50 07       	cpc	r21, r16
     116:	50 07       	cpc	r21, r16
     118:	50 07       	cpc	r21, r16
     11a:	50 07       	cpc	r21, r16
     11c:	50 07       	cpc	r21, r16
     11e:	50 07       	cpc	r21, r16
     120:	50 07       	cpc	r21, r16
     122:	50 07       	cpc	r21, r16
     124:	00 07       	cpc	r16, r16
     126:	50 07       	cpc	r21, r16
     128:	50 07       	cpc	r21, r16
     12a:	50 07       	cpc	r21, r16
     12c:	50 07       	cpc	r21, r16
     12e:	50 07       	cpc	r21, r16
     130:	50 07       	cpc	r21, r16
     132:	50 07       	cpc	r21, r16
     134:	50 07       	cpc	r21, r16
     136:	50 07       	cpc	r21, r16
     138:	50 07       	cpc	r21, r16
     13a:	50 07       	cpc	r21, r16
     13c:	50 07       	cpc	r21, r16
     13e:	50 07       	cpc	r21, r16
     140:	50 07       	cpc	r21, r16
     142:	50 07       	cpc	r21, r16
     144:	4c 07       	cpc	r20, r28
     146:	50 07       	cpc	r21, r16
     148:	50 07       	cpc	r21, r16
     14a:	50 07       	cpc	r21, r16
     14c:	50 07       	cpc	r21, r16
     14e:	50 07       	cpc	r21, r16
     150:	50 07       	cpc	r21, r16
     152:	50 07       	cpc	r21, r16
     154:	29 07       	cpc	r18, r25
     156:	50 07       	cpc	r21, r16
     158:	50 07       	cpc	r21, r16
     15a:	50 07       	cpc	r21, r16
     15c:	50 07       	cpc	r21, r16
     15e:	50 07       	cpc	r21, r16
     160:	50 07       	cpc	r21, r16
     162:	50 07       	cpc	r21, r16
     164:	50 07       	cpc	r21, r16
     166:	50 07       	cpc	r21, r16
     168:	50 07       	cpc	r21, r16
     16a:	50 07       	cpc	r21, r16
     16c:	50 07       	cpc	r21, r16
     16e:	50 07       	cpc	r21, r16
     170:	50 07       	cpc	r21, r16
     172:	50 07       	cpc	r21, r16
     174:	1d 07       	cpc	r17, r29
     176:	50 07       	cpc	r21, r16
     178:	50 07       	cpc	r21, r16
     17a:	50 07       	cpc	r21, r16
     17c:	50 07       	cpc	r21, r16
     17e:	50 07       	cpc	r21, r16
     180:	50 07       	cpc	r21, r16
     182:	50 07       	cpc	r21, r16
     184:	3b 07       	cpc	r19, r27

00000186 <__trampolines_end>:
     186:	6e 61       	ori	r22, 0x1E	; 30
     188:	6e 00       	.word	0x006e	; ????

0000018a <__c.2159>:
     18a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     19a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1aa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ba:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1ca:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1da:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1ea:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1fa:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     20a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     21a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     22a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     23a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     24a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     25a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     26a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     27a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000288 <__ctors_end>:
     288:	11 24       	eor	r1, r1
     28a:	1f be       	out	0x3f, r1	; 63
     28c:	cf ef       	ldi	r28, 0xFF	; 255
     28e:	d1 e2       	ldi	r29, 0x21	; 33
     290:	de bf       	out	0x3e, r29	; 62
     292:	cd bf       	out	0x3d, r28	; 61
     294:	00 e0       	ldi	r16, 0x00	; 0
     296:	0c bf       	out	0x3c, r16	; 60

00000298 <__do_copy_data>:
     298:	12 e0       	ldi	r17, 0x02	; 2
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b2 e0       	ldi	r27, 0x02	; 2
     29e:	e4 ea       	ldi	r30, 0xA4	; 164
     2a0:	f0 e2       	ldi	r31, 0x20	; 32
     2a2:	00 e0       	ldi	r16, 0x00	; 0
     2a4:	0b bf       	out	0x3b, r16	; 59
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__do_copy_data+0x14>
     2a8:	07 90       	elpm	r0, Z+
     2aa:	0d 92       	st	X+, r0
     2ac:	aa 39       	cpi	r26, 0x9A	; 154
     2ae:	b1 07       	cpc	r27, r17
     2b0:	d9 f7       	brne	.-10     	; 0x2a8 <__do_copy_data+0x10>

000002b2 <__do_clear_bss>:
     2b2:	22 e0       	ldi	r18, 0x02	; 2
     2b4:	aa e9       	ldi	r26, 0x9A	; 154
     2b6:	b2 e0       	ldi	r27, 0x02	; 2
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	a9 3b       	cpi	r26, 0xB9	; 185
     2be:	b2 07       	cpc	r27, r18
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	24 d0       	rcall	.+72     	; 0x30c <main>
     2c4:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <_exit>

000002c8 <__bad_interrupt>:
     2c8:	9b ce       	rjmp	.-714    	; 0x0 <__vectors>

000002ca <adc_init>:
#include "adc.h"

void adc_init(){
	
	// Division factor 128
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     2ca:	ea e7       	ldi	r30, 0x7A	; 122
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	87 68       	ori	r24, 0x87	; 135
     2d2:	80 83       	st	Z, r24
	
	/*We find max voltage to be 1.1 V
	Internal 1.1 V Voltage Reference with external capacitor at AREF pin  ->  REFS1 = 1 REFS0 = 0 
	*/  
	ADMUX |= (1 << REFS0);
     2d4:	ec e7       	ldi	r30, 0x7C	; 124
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	80 81       	ld	r24, Z
     2da:	80 64       	ori	r24, 0x40	; 64
     2dc:	80 83       	st	Z, r24
	//ADMUX &= ~(1 << REFS1);
	ADMUX |= (1 << REFS1);
     2de:	80 81       	ld	r24, Z
     2e0:	80 68       	ori	r24, 0x80	; 128
     2e2:	80 83       	st	Z, r24
     2e4:	08 95       	ret

000002e6 <adc_read>:
	
	
}

uint16_t adc_read(uint8_t ch){ //IR set to ADC0 = PF0
	ADMUX |= (ch & 0x03);
     2e6:	ec e7       	ldi	r30, 0x7C	; 124
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	90 81       	ld	r25, Z
     2ec:	83 70       	andi	r24, 0x03	; 3
     2ee:	98 2b       	or	r25, r24
     2f0:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADSC);
     2f2:	ea e7       	ldi	r30, 0x7A	; 122
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
     2f8:	80 64       	ori	r24, 0x40	; 64
     2fa:	80 83       	st	Z, r24
	
	while((ADCSRA & (1 << ADSC))){}
     2fc:	80 81       	ld	r24, Z
     2fe:	86 fd       	sbrc	r24, 6
     300:	fd cf       	rjmp	.-6      	; 0x2fc <adc_read+0x16>

	return ADC; //sexy premade code
     302:	80 91 78 00 	lds	r24, 0x0078
     306:	90 91 79 00 	lds	r25, 0x0079
     30a:	08 95       	ret

0000030c <main>:

*/



int main(void){
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
     314:	66 97       	sbiw	r28, 0x16	; 22
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	cd bf       	out	0x3d, r28	; 61
	

	MCUCR |= (1 << SRE);
     320:	85 b7       	in	r24, 0x35	; 53
     322:	80 68       	ori	r24, 0x80	; 128
     324:	85 bf       	out	0x35, r24	; 53
	uart_Init(MYUBRR);
     326:	87 e6       	ldi	r24, 0x67	; 103
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	e0 d5       	rcall	.+3008   	; 0xeec <uart_Init>
	//
	
	can_init(MODE_NORMAL);
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	b1 d0       	rcall	.+354    	; 0x494 <can_init>
	/*adc_init();*/
	ir_init();
     332:	23 d2       	rcall	.+1094   	; 0x77a <ir_init>
	
	
	DDRE |= (1 << 3); //studass PWM bandaid that can be removed? 
     334:	6b 9a       	sbi	0x0d, 3	; 13



	timer_init();
     336:	be d4       	rcall	.+2428   	; 0xcb4 <timer_init>
	
	solenoid_init();
     338:	88 d4       	rcall	.+2320   	; 0xc4a <solenoid_init>
	motor_init();
     33a:	c9 d2       	rcall	.+1426   	; 0x8ce <motor_init>
	pwm_init(SERVO_PERIOD, P_MID);
     33c:	67 e7       	ldi	r22, 0x77	; 119
     33e:	71 e0       	ldi	r23, 0x01	; 1
     340:	88 e8       	ldi	r24, 0x88	; 136
     342:	93 e1       	ldi	r25, 0x13	; 19
     344:	26 d4       	rcall	.+2124   	; 0xb92 <pwm_init>
	

	PI_controller* sliders = PI_controller_new(0.02, 0.05);
     346:	2d ec       	ldi	r18, 0xCD	; 205
     348:	3c ec       	ldi	r19, 0xCC	; 204
     34a:	4c e4       	ldi	r20, 0x4C	; 76
     34c:	5d e3       	ldi	r21, 0x3D	; 61
     34e:	6a e0       	ldi	r22, 0x0A	; 10
     350:	77 ed       	ldi	r23, 0xD7	; 215
     352:	83 ea       	ldi	r24, 0xA3	; 163
     354:	9c e3       	ldi	r25, 0x3C	; 60
     356:	94 d3       	rcall	.+1832   	; 0xa80 <PI_controller_new>
     358:	5c 01       	movw	r10, r24
	
	uint16_t position;
	uint16_t reference;
	float output;
	
	motor_controller_calibrate_by_reset();
     35a:	fa d2       	rcall	.+1524   	; 0x950 <motor_controller_calibrate_by_reset>
				
				position = motor_encoder_read();
				output =  PI_controller_output(sliders, position, reference);
				motor_speed_direction(output);
				
				printf("Output: %d\n", abs(output));
     35c:	0f 2e       	mov	r0, r31
     35e:	f0 e1       	ldi	r31, 0x10	; 16
     360:	ef 2e       	mov	r14, r31
     362:	f2 e0       	ldi	r31, 0x02	; 2
     364:	ff 2e       	mov	r15, r31
     366:	f0 2d       	mov	r31, r0
				//controll servo
				servo_set_pulse_by_input(input_slider_right());
				

				
				printf("score: %u\n",game_score);
     368:	0f 2e       	mov	r0, r31
     36a:	fc e1       	ldi	r31, 0x1C	; 28
     36c:	8f 2e       	mov	r8, r31
     36e:	f2 e0       	ldi	r31, 0x02	; 2
     370:	9f 2e       	mov	r9, r31
     372:	f0 2d       	mov	r31, r0
				
				//use timer for this, to avoid spamming?
				if(timer5_read() > 100){//somewhat arbitrary time
					game_score++;
					game_status.id = CAN_GAME_STATE_RUNNING;
     374:	0f 2e       	mov	r0, r31
     376:	f1 e9       	ldi	r31, 0x91	; 145
     378:	2f 2e       	mov	r2, r31
     37a:	33 24       	eor	r3, r3
     37c:	33 94       	inc	r3
     37e:	f0 2d       	mov	r31, r0
	can_message game_status;
	while(1){
		
		/*switch(message_node1.id){
			case(GAME_ID):*/
				input_update();
     380:	ce 01       	movw	r24, r28
     382:	0c 96       	adiw	r24, 0x0c	; 12
     384:	b8 d1       	rcall	.+880    	; 0x6f6 <input_update>
				
				//printf("stuff: %u\n", input_joystick_x());
				
				//inverts and multiplies 8 bit input to board game domain
				reference = abs(input_joystick_x() - 255) * (float)(max_left) / 255.0;
     386:	ed d1       	rcall	.+986    	; 0x762 <input_joystick_x>
     388:	8f 5f       	subi	r24, 0xFF	; 255
     38a:	91 09       	sbc	r25, r1
     38c:	bc 01       	movw	r22, r24
     38e:	99 23       	and	r25, r25
     390:	24 f4       	brge	.+8      	; 0x39a <main+0x8e>
     392:	66 27       	eor	r22, r22
     394:	77 27       	eor	r23, r23
     396:	68 1b       	sub	r22, r24
     398:	79 0b       	sbc	r23, r25
     39a:	88 27       	eor	r24, r24
     39c:	77 fd       	sbrc	r23, 7
     39e:	80 95       	com	r24
     3a0:	98 2f       	mov	r25, r24
     3a2:	b4 d6       	rcall	.+3432   	; 0x110c <__floatsisf>
     3a4:	2b 01       	movw	r4, r22
     3a6:	3c 01       	movw	r6, r24
     3a8:	60 91 a2 02 	lds	r22, 0x02A2
     3ac:	70 91 a3 02 	lds	r23, 0x02A3
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	a9 d6       	rcall	.+3410   	; 0x1108 <__floatunsisf>
     3b6:	9b 01       	movw	r18, r22
     3b8:	ac 01       	movw	r20, r24
     3ba:	c3 01       	movw	r24, r6
     3bc:	b2 01       	movw	r22, r4
     3be:	32 d7       	rcall	.+3684   	; 0x1224 <__mulsf3>
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	4f e7       	ldi	r20, 0x7F	; 127
     3c6:	53 e4       	ldi	r21, 0x43	; 67
     3c8:	06 d6       	rcall	.+3084   	; 0xfd6 <__divsf3>
     3ca:	72 d6       	rcall	.+3300   	; 0x10b0 <__fixunssfsi>
     3cc:	2b 01       	movw	r4, r22
     3ce:	3c 01       	movw	r6, r24
     3d0:	6b 01       	movw	r12, r22
				
				position = motor_encoder_read();
     3d2:	9b d2       	rcall	.+1334   	; 0x90a <motor_encoder_read>
     3d4:	8c 01       	movw	r16, r24
				output =  PI_controller_output(sliders, position, reference);
     3d6:	a2 01       	movw	r20, r4
     3d8:	bc 01       	movw	r22, r24
     3da:	c5 01       	movw	r24, r10
     3dc:	77 d3       	rcall	.+1774   	; 0xacc <PI_controller_output>
     3de:	3c 01       	movw	r6, r24
				motor_speed_direction(output);
     3e0:	58 d2       	rcall	.+1200   	; 0x892 <motor_speed_direction>
				
				printf("Output: %d\n", abs(output));
     3e2:	c3 01       	movw	r24, r6
     3e4:	99 23       	and	r25, r25
     3e6:	24 f4       	brge	.+8      	; 0x3f0 <main+0xe4>
     3e8:	88 27       	eor	r24, r24
     3ea:	99 27       	eor	r25, r25
     3ec:	86 19       	sub	r24, r6
     3ee:	97 09       	sbc	r25, r7
     3f0:	9f 93       	push	r25
     3f2:	8f 93       	push	r24
     3f4:	ff 92       	push	r15
     3f6:	ef 92       	push	r14
     3f8:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <printf>
				
				//clockblock spinning at either wall
				if((position > max_left) && (reference < 127)){
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	80 91 a2 02 	lds	r24, 0x02A2
     408:	90 91 a3 02 	lds	r25, 0x02A3
     40c:	80 17       	cp	r24, r16
     40e:	91 07       	cpc	r25, r17
     410:	20 f4       	brcc	.+8      	; 0x41a <main+0x10e>
     412:	8f e7       	ldi	r24, 0x7F	; 127
     414:	c8 16       	cp	r12, r24
     416:	d1 04       	cpc	r13, r1
     418:	20 f0       	brcs	.+8      	; 0x422 <main+0x116>
					output = 0;
				}//if negative overflow
				else if(position > 60000){
     41a:	01 36       	cpi	r16, 0x61	; 97
     41c:	1a 4e       	sbci	r17, 0xEA	; 234
     41e:	08 f0       	brcs	.+2      	; 0x422 <main+0x116>
					motor_encoder_reset();
     420:	4f d2       	rcall	.+1182   	; 0x8c0 <motor_encoder_reset>
				}
				
				//allows shooting solonoid, with 50ms pulse, without "burst mode"
				if(input_button_right() && solenoid_is_shooting_allowed()){
     422:	a7 d1       	rcall	.+846    	; 0x772 <input_button_right>
     424:	89 2b       	or	r24, r25
     426:	31 f0       	breq	.+12     	; 0x434 <main+0x128>
     428:	34 d4       	rcall	.+2152   	; 0xc92 <solenoid_is_shooting_allowed>
     42a:	88 23       	and	r24, r24
     42c:	19 f0       	breq	.+6      	; 0x434 <main+0x128>
					solenoid_shoot();
     42e:	18 d4       	rcall	.+2096   	; 0xc60 <solenoid_shoot>
					solenoid_disallow_shooting();
     430:	29 d4       	rcall	.+2130   	; 0xc84 <solenoid_disallow_shooting>
     432:	04 c0       	rjmp	.+8      	; 0x43c <main+0x130>
				}
				else if(input_button_right()){}
     434:	9e d1       	rcall	.+828    	; 0x772 <input_button_right>
     436:	89 2b       	or	r24, r25
     438:	09 f4       	brne	.+2      	; 0x43c <main+0x130>
				else{
					solenoid_allow_shooting();
     43a:	27 d4       	rcall	.+2126   	; 0xc8a <solenoid_allow_shooting>
				}
				
				//controll servo
				servo_set_pulse_by_input(input_slider_right());
     43c:	96 d1       	rcall	.+812    	; 0x76a <input_slider_right>
     43e:	e9 d3       	rcall	.+2002   	; 0xc12 <servo_set_pulse_by_input>
				

				
				printf("score: %u\n",game_score);
     440:	80 91 9a 02 	lds	r24, 0x029A
     444:	1f 92       	push	r1
     446:	8f 93       	push	r24
     448:	9f 92       	push	r9
     44a:	8f 92       	push	r8
     44c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <printf>
				
				//use timer for this, to avoid spamming?
				if(timer5_read() > 100){//somewhat arbitrary time
     450:	68 d4       	rcall	.+2256   	; 0xd22 <timer5_read>
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	85 36       	cpi	r24, 0x65	; 101
     45c:	91 05       	cpc	r25, r1
     45e:	08 f4       	brcc	.+2      	; 0x462 <main+0x156>
     460:	8f cf       	rjmp	.-226    	; 0x380 <main+0x74>
					game_score++;
     462:	80 91 9a 02 	lds	r24, 0x029A
     466:	8f 5f       	subi	r24, 0xFF	; 255
     468:	80 93 9a 02 	sts	0x029A, r24
					game_status.id = CAN_GAME_STATE_RUNNING;
     46c:	3a 82       	std	Y+2, r3	; 0x02
     46e:	29 82       	std	Y+1, r2	; 0x01
					game_status.data[0] = 0; // game over
     470:	1c 82       	std	Y+4, r1	; 0x04

					if(ir_alt_blocked()){
     472:	85 d1       	rcall	.+778    	; 0x77e <ir_alt_blocked>
     474:	89 2b       	or	r24, r25
     476:	29 f0       	breq	.+10     	; 0x482 <main+0x176>
						game_status.id = CAN_GAME_STATE_OVER;
     478:	80 e9       	ldi	r24, 0x90	; 144
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	9a 83       	std	Y+2, r25	; 0x02
     47e:	89 83       	std	Y+1, r24	; 0x01
     480:	02 c0       	rjmp	.+4      	; 0x486 <main+0x17a>

					}
					else{
						game_status.id = CAN_GAME_STATE_RUNNING; // game over
     482:	3a 82       	std	Y+2, r3	; 0x02
     484:	29 82       	std	Y+1, r2	; 0x01

					}
					can_transmit(&game_status, 0x30);
     486:	60 e3       	ldi	r22, 0x30	; 48
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	ce 01       	movw	r24, r28
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	1e d0       	rcall	.+60     	; 0x4cc <can_transmit>
					timer5_reset();
     490:	69 d4       	rcall	.+2258   	; 0xd64 <timer5_reset>
     492:	76 cf       	rjmp	.-276    	; 0x380 <main+0x74>

00000494 <can_init>:
#include <stdlib.h>
#include <string.h>
#include <util/delay.h>


void can_init(int mode){
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	ec 01       	movw	r28, r24

	mcp2515_init();
     49a:	ca d1       	rcall	.+916    	; 0x830 <mcp2515_init>
	mcp2515_bit_modify(MCP_RXB0CTRL, MCP_MASK_FILTER, 0xff);
     49c:	4f ef       	ldi	r20, 0xFF	; 255
     49e:	50 e0       	ldi	r21, 0x00	; 0
     4a0:	60 e6       	ldi	r22, 0x60	; 96
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	80 e6       	ldi	r24, 0x60	; 96
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	aa d1       	rcall	.+852    	; 0x7fe <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXB1CTRL, MCP_MASK_FILTER, 0xff);
     4aa:	4f ef       	ldi	r20, 0xFF	; 255
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	60 e6       	ldi	r22, 0x60	; 96
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	80 e7       	ldi	r24, 0x70	; 112
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	a3 d1       	rcall	.+838    	; 0x7fe <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, mode);
     4b8:	ae 01       	movw	r20, r28
     4ba:	60 ee       	ldi	r22, 0xE0	; 224
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	8f e0       	ldi	r24, 0x0F	; 15
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	9d d1       	rcall	.+826    	; 0x7fe <mcp2515_bit_modify>
	DDRE &= ~(1 << PE1);
     4c4:	69 98       	cbi	0x0d, 1	; 13
}
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <can_transmit>:

void can_transmit(can_message* msg, int buffer_select){
     4cc:	8f 92       	push	r8
     4ce:	9f 92       	push	r9
     4d0:	af 92       	push	r10
     4d2:	bf 92       	push	r11
     4d4:	cf 92       	push	r12
     4d6:	df 92       	push	r13
     4d8:	ef 92       	push	r14
     4da:	ff 92       	push	r15
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	1f 92       	push	r1
     4e6:	1f 92       	push	r1
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	5c 01       	movw	r10, r24
     4ee:	7b 01       	movw	r14, r22
	
	mcp2515_bit_modify(buffer_select, 0x08, 0xff);
     4f0:	4f ef       	ldi	r20, 0xFF	; 255
     4f2:	50 e0       	ldi	r21, 0x00	; 0
     4f4:	68 e0       	ldi	r22, 0x08	; 8
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	c7 01       	movw	r24, r14
     4fa:	81 d1       	rcall	.+770    	; 0x7fe <mcp2515_bit_modify>
	
	while(mcp2515_read(buffer_select) & (1 << MCP_TXREQ));
     4fc:	c7 01       	movw	r24, r14
     4fe:	60 d1       	rcall	.+704    	; 0x7c0 <mcp2515_read>
     500:	83 fd       	sbrc	r24, 3
     502:	fc cf       	rjmp	.-8      	; 0x4fc <can_transmit+0x30>
	
	volatile uint8_t idl = MCP2515_MASK_IDL & (msg->id << 5);
     504:	f5 01       	movw	r30, r10
     506:	80 81       	ld	r24, Z
     508:	91 81       	ldd	r25, Z+1	; 0x01
     50a:	28 2f       	mov	r18, r24
     50c:	22 95       	swap	r18
     50e:	22 0f       	add	r18, r18
     510:	20 7e       	andi	r18, 0xE0	; 224
     512:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t idh = MCP2515_MASK_IDH & (msg->id >> 3);
     514:	96 95       	lsr	r25
     516:	87 95       	ror	r24
     518:	96 95       	lsr	r25
     51a:	87 95       	ror	r24
     51c:	96 95       	lsr	r25
     51e:	87 95       	ror	r24
     520:	8a 83       	std	Y+2, r24	; 0x02
	
	mcp2515_write(buffer_select + MCP2515_IDL_OFFSET, idl); //3 LSB
     522:	69 81       	ldd	r22, Y+1	; 0x01
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	c7 01       	movw	r24, r14
     528:	02 96       	adiw	r24, 0x02	; 2
     52a:	56 d1       	rcall	.+684    	; 0x7d8 <mcp2515_write>
	mcp2515_write(buffer_select + MCP2515_IDH_OFFSET, idh); //8 MSB
     52c:	6a 81       	ldd	r22, Y+2	; 0x02
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	c7 01       	movw	r24, r14
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	51 d1       	rcall	.+674    	; 0x7d8 <mcp2515_write>
	
	mcp2515_write(buffer_select + MCP2515_DLC_OFFSET, MCP2515_MASK_DLC & (msg->length));
     536:	f5 01       	movw	r30, r10
     538:	62 81       	ldd	r22, Z+2	; 0x02
     53a:	6f 70       	andi	r22, 0x0F	; 15
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	c7 01       	movw	r24, r14
     540:	05 96       	adiw	r24, 0x05	; 5
     542:	4a d1       	rcall	.+660    	; 0x7d8 <mcp2515_write>
	
	
	for(int i = 0; i < msg->length; i++){
     544:	f5 01       	movw	r30, r10
     546:	82 81       	ldd	r24, Z+2	; 0x02
     548:	88 23       	and	r24, r24
     54a:	d1 f0       	breq	.+52     	; 0x580 <can_transmit+0xb4>
     54c:	65 01       	movw	r12, r10
     54e:	f3 e0       	ldi	r31, 0x03	; 3
     550:	cf 0e       	add	r12, r31
     552:	d1 1c       	adc	r13, r1
     554:	00 e0       	ldi	r16, 0x00	; 0
     556:	10 e0       	ldi	r17, 0x00	; 0
     558:	47 01       	movw	r8, r14
     55a:	86 e0       	ldi	r24, 0x06	; 6
     55c:	88 0e       	add	r8, r24
     55e:	91 1c       	adc	r9, r1
		mcp2515_write(buffer_select + MCP2515_TXB_OFFSET + i, msg->data[i]);
     560:	f6 01       	movw	r30, r12
     562:	61 91       	ld	r22, Z+
     564:	6f 01       	movw	r12, r30
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	c4 01       	movw	r24, r8
     56a:	80 0f       	add	r24, r16
     56c:	91 1f       	adc	r25, r17
     56e:	34 d1       	rcall	.+616    	; 0x7d8 <mcp2515_write>
	mcp2515_write(buffer_select + MCP2515_IDH_OFFSET, idh); //8 MSB
	
	mcp2515_write(buffer_select + MCP2515_DLC_OFFSET, MCP2515_MASK_DLC & (msg->length));
	
	
	for(int i = 0; i < msg->length; i++){
     570:	0f 5f       	subi	r16, 0xFF	; 255
     572:	1f 4f       	sbci	r17, 0xFF	; 255
     574:	f5 01       	movw	r30, r10
     576:	82 81       	ldd	r24, Z+2	; 0x02
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	08 17       	cp	r16, r24
     57c:	19 07       	cpc	r17, r25
     57e:	84 f3       	brlt	.-32     	; 0x560 <can_transmit+0x94>
		
	}
	
	int buffer_control;
	
	if (buffer_select == MCP_TXB0CTRL){
     580:	f0 e3       	ldi	r31, 0x30	; 48
     582:	ef 16       	cp	r14, r31
     584:	f1 04       	cpc	r15, r1
     586:	59 f0       	breq	.+22     	; 0x59e <can_transmit+0xd2>
		buffer_control = MCP_RTS_TX0;
	}
	else if (buffer_select == MCP_TXB1CTRL){
     588:	80 e4       	ldi	r24, 0x40	; 64
     58a:	e8 16       	cp	r14, r24
     58c:	f1 04       	cpc	r15, r1
     58e:	51 f0       	breq	.+20     	; 0x5a4 <can_transmit+0xd8>
		buffer_control = MCP_RTS_TX1;
	}
	else if (buffer_select == MCP_TXB2CTRL){
     590:	e0 e5       	ldi	r30, 0x50	; 80
     592:	ee 16       	cp	r14, r30
     594:	f1 04       	cpc	r15, r1
     596:	49 f4       	brne	.+18     	; 0x5aa <can_transmit+0xde>
		buffer_control=MCP_RTS_TX2;
     598:	84 e8       	ldi	r24, 0x84	; 132
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	05 c0       	rjmp	.+10     	; 0x5a8 <can_transmit+0xdc>
	}
	
	int buffer_control;
	
	if (buffer_select == MCP_TXB0CTRL){
		buffer_control = MCP_RTS_TX0;
     59e:	81 e8       	ldi	r24, 0x81	; 129
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <can_transmit+0xdc>
	}
	else if (buffer_select == MCP_TXB1CTRL){
		buffer_control = MCP_RTS_TX1;
     5a4:	82 e8       	ldi	r24, 0x82	; 130
     5a6:	90 e0       	ldi	r25, 0x00	; 0
		return;
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
     5a8:	26 d1       	rcall	.+588    	; 0x7f6 <mcp2515_request_to_send>
}
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	1f 91       	pop	r17
     5b4:	0f 91       	pop	r16
     5b6:	ff 90       	pop	r15
     5b8:	ef 90       	pop	r14
     5ba:	df 90       	pop	r13
     5bc:	cf 90       	pop	r12
     5be:	bf 90       	pop	r11
     5c0:	af 90       	pop	r10
     5c2:	9f 90       	pop	r9
     5c4:	8f 90       	pop	r8
     5c6:	08 95       	ret

000005c8 <can_poll_interrupt>:
}


uint8_t can_poll_interrupt(){
	
	while(!(PINE & (1 << PE1))){}
     5c8:	61 9b       	sbis	0x0c, 1	; 12
     5ca:	fe cf       	rjmp	.-4      	; 0x5c8 <can_poll_interrupt>
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
     5cc:	8c e2       	ldi	r24, 0x2C	; 44
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	f7 d0       	rcall	.+494    	; 0x7c0 <mcp2515_read>
     5d2:	80 fd       	sbrc	r24, 0
     5d4:	07 c0       	rjmp	.+14     	; 0x5e4 <can_poll_interrupt+0x1c>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
	}
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
     5d6:	8c e2       	ldi	r24, 0x2C	; 44
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	f2 d0       	rcall	.+484    	; 0x7c0 <mcp2515_read>
     5dc:	81 ff       	sbrs	r24, 1
     5de:	04 c0       	rjmp	.+8      	; 0x5e8 <can_poll_interrupt+0x20>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
     5e0:	80 e7       	ldi	r24, 0x70	; 112
     5e2:	08 95       	ret
	
	while(!(PINE & (1 << PE1))){}
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
     5e4:	80 e6       	ldi	r24, 0x60	; 96
     5e6:	08 95       	ret
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
	}
	return -1;
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
}
     5ea:	08 95       	ret

000005ec <can_recieve>:
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
}

can_message can_recieve(can_message* msg){
     5ec:	7f 92       	push	r7
     5ee:	8f 92       	push	r8
     5f0:	9f 92       	push	r9
     5f2:	af 92       	push	r10
     5f4:	bf 92       	push	r11
     5f6:	cf 92       	push	r12
     5f8:	df 92       	push	r13
     5fa:	ef 92       	push	r14
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	2b 97       	sbiw	r28, 0x0b	; 11
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
     616:	6c 01       	movw	r12, r24
	can_message m;
	
	uint8_t buffer_select = can_poll_interrupt();
     618:	d7 df       	rcall	.-82     	; 0x5c8 <can_poll_interrupt>
     61a:	98 2e       	mov	r9, r24
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
     61c:	08 2f       	mov	r16, r24
     61e:	10 e0       	ldi	r17, 0x00	; 0
     620:	c8 01       	movw	r24, r16
     622:	01 96       	adiw	r24, 0x01	; 1
     624:	cd d0       	rcall	.+410    	; 0x7c0 <mcp2515_read>
     626:	7c 01       	movw	r14, r24
     628:	c8 01       	movw	r24, r16
     62a:	02 96       	adiw	r24, 0x02	; 2
     62c:	c9 d0       	rcall	.+402    	; 0x7c0 <mcp2515_read>
     62e:	95 95       	asr	r25
     630:	87 95       	ror	r24
     632:	95 95       	asr	r25
     634:	87 95       	ror	r24
     636:	95 95       	asr	r25
     638:	87 95       	ror	r24
     63a:	95 95       	asr	r25
     63c:	87 95       	ror	r24
     63e:	95 95       	asr	r25
     640:	87 95       	ror	r24
     642:	ee 0c       	add	r14, r14
     644:	ff 1c       	adc	r15, r15
     646:	ee 0c       	add	r14, r14
     648:	ff 1c       	adc	r15, r15
     64a:	ee 0c       	add	r14, r14
     64c:	ff 1c       	adc	r15, r15
     64e:	5c 01       	movw	r10, r24
     650:	ae 28       	or	r10, r14
     652:	bf 28       	or	r11, r15
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
     654:	c8 01       	movw	r24, r16
     656:	05 96       	adiw	r24, 0x05	; 5
     658:	b3 d0       	rcall	.+358    	; 0x7c0 <mcp2515_read>
     65a:	8f 70       	andi	r24, 0x0F	; 15
     65c:	78 2e       	mov	r7, r24
	
	for(uint8_t i = 0; i < m.length; i++){
     65e:	a9 f0       	breq	.+42     	; 0x68a <can_recieve+0x9e>
     660:	8e 01       	movw	r16, r28
     662:	0c 5f       	subi	r16, 0xFC	; 252
     664:	1f 4f       	sbci	r17, 0xFF	; 255
     666:	81 2c       	mov	r8, r1
     668:	ce 01       	movw	r24, r28
     66a:	80 95       	com	r24
     66c:	90 95       	com	r25
     66e:	03 96       	adiw	r24, 0x03	; 3
     670:	7c 01       	movw	r14, r24
     672:	e9 0c       	add	r14, r9
     674:	f1 1c       	adc	r15, r1
		m.data[i] = mcp2515_read(buffer_select + MCP2515_RXB_OFFSET + i);// + i, msg->data[i]);
     676:	c7 01       	movw	r24, r14
     678:	80 0f       	add	r24, r16
     67a:	91 1f       	adc	r25, r17
     67c:	a1 d0       	rcall	.+322    	; 0x7c0 <mcp2515_read>
     67e:	f8 01       	movw	r30, r16
     680:	81 93       	st	Z+, r24
     682:	8f 01       	movw	r16, r30
	uint8_t buffer_select = can_poll_interrupt();
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
	
	for(uint8_t i = 0; i < m.length; i++){
     684:	83 94       	inc	r8
     686:	87 10       	cpse	r8, r7
     688:	f6 cf       	rjmp	.-20     	; 0x676 <can_recieve+0x8a>
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	
	switch(buffer_select){
     68a:	f0 e6       	ldi	r31, 0x60	; 96
     68c:	9f 16       	cp	r9, r31
     68e:	21 f0       	breq	.+8      	; 0x698 <can_recieve+0xac>
     690:	80 e7       	ldi	r24, 0x70	; 112
     692:	98 16       	cp	r9, r24
     694:	49 f0       	breq	.+18     	; 0x6a8 <can_recieve+0xbc>
     696:	0f c0       	rjmp	.+30     	; 0x6b6 <can_recieve+0xca>
		case MCP_RXB0CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	61 e0       	ldi	r22, 0x01	; 1
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	8c e2       	ldi	r24, 0x2C	; 44
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	ac d0       	rcall	.+344    	; 0x7fe <mcp2515_bit_modify>
		break;
     6a6:	07 c0       	rjmp	.+14     	; 0x6b6 <can_recieve+0xca>
		case MCP_RXB1CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
     6a8:	40 e0       	ldi	r20, 0x00	; 0
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	62 e0       	ldi	r22, 0x02	; 2
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	8c e2       	ldi	r24, 0x2C	; 44
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	a4 d0       	rcall	.+328    	; 0x7fe <mcp2515_bit_modify>
		break;
	}
	
	return m;
     6b6:	ba 82       	std	Y+2, r11	; 0x02
     6b8:	a9 82       	std	Y+1, r10	; 0x01
     6ba:	7b 82       	std	Y+3, r7	; 0x03
     6bc:	8b e0       	ldi	r24, 0x0B	; 11
     6be:	fe 01       	movw	r30, r28
     6c0:	31 96       	adiw	r30, 0x01	; 1
     6c2:	d6 01       	movw	r26, r12
     6c4:	01 90       	ld	r0, Z+
     6c6:	0d 92       	st	X+, r0
     6c8:	8a 95       	dec	r24
     6ca:	e1 f7       	brne	.-8      	; 0x6c4 <can_recieve+0xd8>
}
     6cc:	c6 01       	movw	r24, r12
     6ce:	2b 96       	adiw	r28, 0x0b	; 11
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	df 90       	pop	r13
     6e8:	cf 90       	pop	r12
     6ea:	bf 90       	pop	r11
     6ec:	af 90       	pop	r10
     6ee:	9f 90       	pop	r9
     6f0:	8f 90       	pop	r8
     6f2:	7f 90       	pop	r7
     6f4:	08 95       	ret

000006f6 <input_update>:
int input_slider_right(){
	return input_msg.data[4];
}
int input_button_left(){
	return input_msg.data[5];
}
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	ec 01       	movw	r28, r24
     700:	75 df       	rcall	.-278    	; 0x5ec <can_recieve>
     702:	0a 81       	ldd	r16, Y+2	; 0x02
     704:	1b 81       	ldd	r17, Y+3	; 0x03
     706:	7c 81       	ldd	r23, Y+4	; 0x04
     708:	6d 81       	ldd	r22, Y+5	; 0x05
     70a:	5e 81       	ldd	r21, Y+6	; 0x06
     70c:	4f 81       	ldd	r20, Y+7	; 0x07
     70e:	38 85       	ldd	r19, Y+8	; 0x08
     710:	29 85       	ldd	r18, Y+9	; 0x09
     712:	88 81       	ld	r24, Y
     714:	99 81       	ldd	r25, Y+1	; 0x01
     716:	07 97       	sbiw	r24, 0x07	; 7
     718:	89 f4       	brne	.+34     	; 0x73c <input_update+0x46>
     71a:	8b e0       	ldi	r24, 0x0B	; 11
     71c:	fe 01       	movw	r30, r28
     71e:	a4 ea       	ldi	r26, 0xA4	; 164
     720:	b2 e0       	ldi	r27, 0x02	; 2
     722:	01 90       	ld	r0, Z+
     724:	0d 92       	st	X+, r0
     726:	8a 95       	dec	r24
     728:	e1 f7       	brne	.-8      	; 0x722 <input_update+0x2c>
     72a:	0a 83       	std	Y+2, r16	; 0x02
     72c:	1b 83       	std	Y+3, r17	; 0x03
     72e:	7c 83       	std	Y+4, r23	; 0x04
     730:	6d 83       	std	Y+5, r22	; 0x05
     732:	5e 83       	std	Y+6, r21	; 0x06
     734:	4f 83       	std	Y+7, r20	; 0x07
     736:	38 87       	std	Y+8, r19	; 0x08
     738:	29 87       	std	Y+9, r18	; 0x09
     73a:	0d c0       	rjmp	.+26     	; 0x756 <input_update+0x60>
     73c:	87 e2       	ldi	r24, 0x27	; 39
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <puts>
     744:	87 e0       	ldi	r24, 0x07	; 7
     746:	8a 83       	std	Y+2, r24	; 0x02
     748:	8b 83       	std	Y+3, r24	; 0x03
     74a:	1c 82       	std	Y+4, r1	; 0x04
     74c:	1d 82       	std	Y+5, r1	; 0x05
     74e:	1e 82       	std	Y+6, r1	; 0x06
     750:	1f 82       	std	Y+7, r1	; 0x07
     752:	18 86       	std	Y+8, r1	; 0x08
     754:	19 86       	std	Y+9, r1	; 0x09
     756:	ce 01       	movw	r24, r28
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	08 95       	ret

00000762 <input_joystick_x>:
     762:	80 91 a7 02 	lds	r24, 0x02A7
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	08 95       	ret

0000076a <input_slider_right>:
     76a:	80 91 ab 02 	lds	r24, 0x02AB
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	08 95       	ret

00000772 <input_button_right>:
int input_button_right(){
	return input_msg.data[6];
     772:	80 91 ad 02 	lds	r24, 0x02AD
}
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	08 95       	ret

0000077a <ir_init>:
	}
	else{
		return 0;
	}
	
}
     77a:	a7 cd       	rjmp	.-1202   	; 0x2ca <adc_init>
     77c:	08 95       	ret

0000077e <ir_alt_blocked>:

int ir_alt_blocked(){
	
	if(adc_read(IR_PIN) > MID){
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	b2 dd       	rcall	.-1180   	; 0x2e6 <adc_read>
     782:	21 e0       	ldi	r18, 0x01	; 1
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	8d 32       	cpi	r24, 0x2D	; 45
     788:	91 40       	sbci	r25, 0x01	; 1
     78a:	10 f0       	brcs	.+4      	; 0x790 <ir_alt_blocked+0x12>
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
		return 1;
	
	
}
     790:	c9 01       	movw	r24, r18
     792:	08 95       	ret

00000794 <max520_init>:
#define MAX520_TWI_ADDR 0b01011110



void max520_init(){
	TWI_Master_Initialise();
     794:	ec d2       	rcall	.+1496   	; 0xd6e <TWI_Master_Initialise>
	sei();//interrupts on
     796:	78 94       	sei
     798:	08 95       	ret

0000079a <max520_send>:
}


void max520_send(uint8_t val)
{
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <max520_send+0x6>
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
	//printf("In max520_send\n");
	uint8_t message[3] = {MAX520_TWI_ADDR, 0, val};
     7a4:	9e e5       	ldi	r25, 0x5E	; 94
     7a6:	99 83       	std	Y+1, r25	; 0x01
     7a8:	1a 82       	std	Y+2, r1	; 0x02
     7aa:	8b 83       	std	Y+3, r24	; 0x03
	
	TWI_Start_Transceiver_With_Data(message, 3);
     7ac:	63 e0       	ldi	r22, 0x03	; 3
     7ae:	ce 01       	movw	r24, r28
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	e7 d2       	rcall	.+1486   	; 0xd82 <TWI_Start_Transceiver_With_Data>
	
}
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <mcp2515_read>:
	}
	return 0;
}


int mcp2515_read(int address){
     7c0:	cf 93       	push	r28
     7c2:	c8 2f       	mov	r28, r24
	
	int result;
	
	PORTB &= ~(1 << MCP2515_CS);
     7c4:	28 98       	cbi	0x05, 0	; 5
	
	spi_write(MCP_READ);
     7c6:	83 e0       	ldi	r24, 0x03	; 3
     7c8:	6e d2       	rcall	.+1244   	; 0xca6 <spi_write>
	spi_write(address);
     7ca:	8c 2f       	mov	r24, r28
     7cc:	6c d2       	rcall	.+1240   	; 0xca6 <spi_write>
	
	result = spi_write(0x00);
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	6a d2       	rcall	.+1236   	; 0xca6 <spi_write>
	
	PORTB |= (1 << MCP2515_CS);
     7d2:	28 9a       	sbi	0x05, 0	; 5
	return result;
}
     7d4:	cf 91       	pop	r28
     7d6:	08 95       	ret

000007d8 <mcp2515_write>:

void mcp2515_write(int address, int data){
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	d8 2f       	mov	r29, r24
     7de:	c6 2f       	mov	r28, r22
	
	PORTB &= ~(1 << MCP2515_CS);
     7e0:	28 98       	cbi	0x05, 0	; 5
	
	spi_write(MCP_WRITE);
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	60 d2       	rcall	.+1216   	; 0xca6 <spi_write>
	spi_write(address);
     7e6:	8d 2f       	mov	r24, r29
     7e8:	5e d2       	rcall	.+1212   	; 0xca6 <spi_write>
	spi_write(data);
     7ea:	8c 2f       	mov	r24, r28
     7ec:	5c d2       	rcall	.+1208   	; 0xca6 <spi_write>
	
	PORTB |= (1 << MCP2515_CS);	
     7ee:	28 9a       	sbi	0x05, 0	; 5
}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	08 95       	ret

000007f6 <mcp2515_request_to_send>:

void mcp2515_request_to_send(int buffer_select){
	PORTB &= ~(1 << MCP2515_CS);
     7f6:	28 98       	cbi	0x05, 0	; 5
	spi_write(buffer_select);
     7f8:	56 d2       	rcall	.+1196   	; 0xca6 <spi_write>
	PORTB |= (1 << MCP2515_CS);
     7fa:	28 9a       	sbi	0x05, 0	; 5
     7fc:	08 95       	ret

000007fe <mcp2515_bit_modify>:
}

void mcp2515_bit_modify(int address, int mask, int data){
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	18 2f       	mov	r17, r24
     806:	d6 2f       	mov	r29, r22
     808:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS);
     80a:	28 98       	cbi	0x05, 0	; 5
	
	spi_write(MCP_BITMOD);
     80c:	85 e0       	ldi	r24, 0x05	; 5
     80e:	4b d2       	rcall	.+1174   	; 0xca6 <spi_write>
	spi_write(address);
     810:	81 2f       	mov	r24, r17
     812:	49 d2       	rcall	.+1170   	; 0xca6 <spi_write>
	spi_write(mask);
     814:	8d 2f       	mov	r24, r29
     816:	47 d2       	rcall	.+1166   	; 0xca6 <spi_write>
	spi_write(data);
     818:	8c 2f       	mov	r24, r28
     81a:	45 d2       	rcall	.+1162   	; 0xca6 <spi_write>

	PORTB |= (1 << MCP2515_CS);
     81c:	28 9a       	sbi	0x05, 0	; 5
	
}
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	08 95       	ret

00000826 <mcp2515_reset>:

void mcp2515_reset(){
	PORTB &= ~(1 << MCP2515_CS);
     826:	28 98       	cbi	0x05, 0	; 5
	spi_write(MCP_RESET);
     828:	80 ec       	ldi	r24, 0xC0	; 192
     82a:	3d d2       	rcall	.+1146   	; 0xca6 <spi_write>
	PORTB |= (1 << MCP2515_CS);
     82c:	28 9a       	sbi	0x05, 0	; 5
     82e:	08 95       	ret

00000830 <mcp2515_init>:
#include "SPI.h"
#include "mcp2515_define.h"


int mcp2515_init(){
	spi_init();
     830:	33 d2       	rcall	.+1126   	; 0xc98 <spi_init>
	mcp2515_reset();
     832:	f9 df       	rcall	.-14     	; 0x826 <mcp2515_reset>
	
	uint8_t val = mcp2515_read(MCP_CANSTAT);
     834:	8e e0       	ldi	r24, 0x0E	; 14
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	c3 df       	rcall	.-122    	; 0x7c0 <mcp2515_read>
	if((val & MODE_MASK) != MODE_CONFIG){
     83a:	80 7e       	andi	r24, 0xE0	; 224
     83c:	99 27       	eor	r25, r25
     83e:	80 38       	cpi	r24, 0x80	; 128
     840:	91 05       	cpc	r25, r1
     842:	39 f0       	breq	.+14     	; 0x852 <mcp2515_init+0x22>
		printf("ERROR: MCP2515 is NOT in config mode after reset!\n");
     844:	80 e3       	ldi	r24, 0x30	; 48
     846:	92 e0       	ldi	r25, 0x02	; 2
     848:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <puts>
		return 1;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	08 95       	ret
	}
	return 0;
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
}
     856:	08 95       	ret

00000858 <motor_encoder_select_byte>:

uint8_t motor_encoder_byte_read(){
	uint8_t byte = PINK;
	return byte;

}
     858:	88 23       	and	r24, r24
     85a:	11 f0       	breq	.+4      	; 0x860 <motor_encoder_select_byte+0x8>
     85c:	8d 9a       	sbi	0x11, 5	; 17
     85e:	08 95       	ret
     860:	8d 98       	cbi	0x11, 5	; 17
     862:	08 95       	ret

00000864 <motor_encoder_output_enable>:
     864:	88 23       	and	r24, r24
     866:	11 f0       	breq	.+4      	; 0x86c <motor_encoder_output_enable+0x8>
     868:	8c 98       	cbi	0x11, 4	; 17
     86a:	08 95       	ret
     86c:	8c 9a       	sbi	0x11, 4	; 17
     86e:	08 95       	ret

00000870 <motor_direction>:
     870:	00 97       	sbiw	r24, 0x00	; 0
     872:	11 f4       	brne	.+4      	; 0x878 <motor_direction+0x8>
     874:	8b 9a       	sbi	0x11, 3	; 17
     876:	08 95       	ret
     878:	01 97       	sbiw	r24, 0x01	; 1
     87a:	09 f4       	brne	.+2      	; 0x87e <motor_direction+0xe>
     87c:	8b 98       	cbi	0x11, 3	; 17
     87e:	08 95       	ret

00000880 <motor_speed>:
     880:	8f 3f       	cpi	r24, 0xFF	; 255
     882:	91 05       	cpc	r25, r1
     884:	21 f0       	breq	.+8      	; 0x88e <motor_speed+0xe>
     886:	18 f0       	brcs	.+6      	; 0x88e <motor_speed+0xe>
     888:	8f ef       	ldi	r24, 0xFF	; 255
     88a:	87 cf       	rjmp	.-242    	; 0x79a <max520_send>
     88c:	08 95       	ret
     88e:	85 cf       	rjmp	.-246    	; 0x79a <max520_send>
     890:	08 95       	ret

00000892 <motor_speed_direction>:
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	ec 01       	movw	r28, r24
     898:	99 23       	and	r25, r25
     89a:	24 f4       	brge	.+8      	; 0x8a4 <motor_speed_direction+0x12>
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	e7 df       	rcall	.-50     	; 0x870 <motor_direction>
     8a2:	03 c0       	rjmp	.+6      	; 0x8aa <motor_speed_direction+0x18>
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	e3 df       	rcall	.-58     	; 0x870 <motor_direction>
     8aa:	ce 01       	movw	r24, r28
     8ac:	dd 23       	and	r29, r29
     8ae:	24 f4       	brge	.+8      	; 0x8b8 <motor_speed_direction+0x26>
     8b0:	88 27       	eor	r24, r24
     8b2:	99 27       	eor	r25, r25
     8b4:	8c 1b       	sub	r24, r28
     8b6:	9d 0b       	sbc	r25, r29
     8b8:	e3 df       	rcall	.-58     	; 0x880 <motor_speed>
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <motor_encoder_reset>:
     8c0:	8e 98       	cbi	0x11, 6	; 17
     8c2:	8a e6       	ldi	r24, 0x6A	; 106
     8c4:	8a 95       	dec	r24
     8c6:	f1 f7       	brne	.-4      	; 0x8c4 <motor_encoder_reset+0x4>
     8c8:	00 c0       	rjmp	.+0      	; 0x8ca <motor_encoder_reset+0xa>
     8ca:	8e 9a       	sbi	0x11, 6	; 17
     8cc:	08 95       	ret

000008ce <motor_init>:
     8ce:	62 df       	rcall	.-316    	; 0x794 <max520_init>
     8d0:	80 b3       	in	r24, 0x10	; 16
     8d2:	88 6f       	ori	r24, 0xF8	; 248
     8d4:	80 bb       	out	0x10, r24	; 16
     8d6:	81 b3       	in	r24, 0x11	; 17
     8d8:	88 63       	ori	r24, 0x38	; 56
     8da:	81 bb       	out	0x11, r24	; 17
     8dc:	8f 98       	cbi	0x11, 7	; 17
     8de:	10 92 07 01 	sts	0x0107, r1
     8e2:	ee cf       	rjmp	.-36     	; 0x8c0 <motor_encoder_reset>
     8e4:	08 95       	ret

000008e6 <reverse_bits>:
	
}


uint8_t reverse_bits(uint8_t byte){
	byte = ((byte & 0b01010101) << 1) | ((byte & 0b10101010) >> 1);
     8e6:	28 2f       	mov	r18, r24
     8e8:	2a 7a       	andi	r18, 0xAA	; 170
     8ea:	26 95       	lsr	r18
     8ec:	98 2f       	mov	r25, r24
     8ee:	95 75       	andi	r25, 0x55	; 85
     8f0:	99 0f       	add	r25, r25
     8f2:	92 2b       	or	r25, r18
	byte = ((byte & 0b00110011) << 2) | ((byte & 0b11001100) >> 2);
     8f4:	29 2f       	mov	r18, r25
     8f6:	2c 7c       	andi	r18, 0xCC	; 204
     8f8:	26 95       	lsr	r18
     8fa:	26 95       	lsr	r18
     8fc:	89 2f       	mov	r24, r25
     8fe:	83 73       	andi	r24, 0x33	; 51
     900:	88 0f       	add	r24, r24
     902:	88 0f       	add	r24, r24
     904:	82 2b       	or	r24, r18
	byte = ((byte & 0b00001111) << 4) | ((byte & 0b11110000) >> 4);
	return byte;
}
     906:	82 95       	swap	r24
     908:	08 95       	ret

0000090a <motor_encoder_read>:

}



uint16_t motor_encoder_read(){
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
	uint8_t msb;
	uint8_t lsb;
	
	
	//enable output
	motor_encoder_output_enable(1);
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	a9 df       	rcall	.-174    	; 0x864 <motor_encoder_output_enable>
	
	//read MSB to data
	motor_encoder_select_byte(0);
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	a1 df       	rcall	.-190    	; 0x858 <motor_encoder_select_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     916:	8a e6       	ldi	r24, 0x6A	; 106
     918:	8a 95       	dec	r24
     91a:	f1 f7       	brne	.-4      	; 0x918 <motor_encoder_read+0xe>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <motor_encoder_read+0x14>
}



uint8_t motor_encoder_byte_read(){
	uint8_t byte = PINK;
     91e:	80 91 06 01 	lds	r24, 0x0106
	motor_encoder_output_enable(1);
	
	//read MSB to data
	motor_encoder_select_byte(0);
	_delay_us(20);
	msb = reverse_bits(motor_encoder_byte_read());
     922:	e1 df       	rcall	.-62     	; 0x8e6 <reverse_bits>
     924:	d8 2f       	mov	r29, r24
	
	//read LSB to data
	motor_encoder_select_byte(1);
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	97 df       	rcall	.-210    	; 0x858 <motor_encoder_select_byte>
     92a:	8a e6       	ldi	r24, 0x6A	; 106
     92c:	8a 95       	dec	r24
     92e:	f1 f7       	brne	.-4      	; 0x92c <motor_encoder_read+0x22>
     930:	00 c0       	rjmp	.+0      	; 0x932 <motor_encoder_read+0x28>
}



uint8_t motor_encoder_byte_read(){
	uint8_t byte = PINK;
     932:	80 91 06 01 	lds	r24, 0x0106
	msb = reverse_bits(motor_encoder_byte_read());
	
	//read LSB to data
	motor_encoder_select_byte(1);
	_delay_us(20);
	lsb = reverse_bits(motor_encoder_byte_read());
     936:	d7 df       	rcall	.-82     	; 0x8e6 <reverse_bits>
     938:	c8 2f       	mov	r28, r24
	
	//disable output
	motor_encoder_output_enable(0);
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	93 df       	rcall	.-218    	; 0x864 <motor_encoder_output_enable>
	
	
	uint16_t data = (msb << 8) + lsb;
     93e:	2d 2f       	mov	r18, r29
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	92 2f       	mov	r25, r18
     944:	88 27       	eor	r24, r24
	
	return data;

	
}
     946:	8c 0f       	add	r24, r28
     948:	91 1d       	adc	r25, r1
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <motor_controller_calibrate_by_reset>:
	
}


//MOTOR SPEED NEEDS TO BE TUNED FOR INDIVIDUAL GAME BOARD
void motor_controller_calibrate_by_reset(){
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
	
	uint8_t speed = 65;
	
	motor_init();
     95c:	b8 df       	rcall	.-144    	; 0x8ce <motor_init>
	
	uint16_t position;
	uint16_t prev_position;
	
	motor_speed(speed);
     95e:	81 e4       	ldi	r24, 0x41	; 65
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	8e df       	rcall	.-228    	; 0x880 <motor_speed>
	motor_direction(right);
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	83 df       	rcall	.-250    	; 0x870 <motor_direction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     96a:	2f ef       	ldi	r18, 0xFF	; 255
     96c:	82 e5       	ldi	r24, 0x52	; 82
     96e:	97 e0       	ldi	r25, 0x07	; 7
     970:	21 50       	subi	r18, 0x01	; 1
     972:	80 40       	sbci	r24, 0x00	; 0
     974:	90 40       	sbci	r25, 0x00	; 0
     976:	e1 f7       	brne	.-8      	; 0x970 <motor_controller_calibrate_by_reset+0x20>
     978:	00 c0       	rjmp	.+0      	; 0x97a <motor_controller_calibrate_by_reset+0x2a>
     97a:	00 00       	nop
	_delay_ms(150);
	
	position =  motor_encoder_read();
     97c:	c6 df       	rcall	.-116    	; 0x90a <motor_encoder_read>
	
	//go right until stopped, then set encoder to zero
	while(position != prev_position){
     97e:	89 2b       	or	r24, r25
     980:	21 f1       	breq	.+72     	; 0x9ca <motor_controller_calibrate_by_reset+0x7a>
		
		position =  motor_encoder_read();
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
		printf("position: %u\tPrev: %u\n", position, prev_position);
     982:	0f 2e       	mov	r0, r31
     984:	f5 e7       	ldi	r31, 0x75	; 117
     986:	ef 2e       	mov	r14, r31
     988:	f2 e0       	ldi	r31, 0x02	; 2
     98a:	ff 2e       	mov	r15, r31
     98c:	f0 2d       	mov	r31, r0
	
	//go right until stopped, then set encoder to zero
	while(position != prev_position){
		
		
		position =  motor_encoder_read();
     98e:	bd df       	rcall	.-134    	; 0x90a <motor_encoder_read>
     990:	ec 01       	movw	r28, r24
     992:	2f ef       	ldi	r18, 0xFF	; 255
     994:	81 ee       	ldi	r24, 0xE1	; 225
     996:	94 e0       	ldi	r25, 0x04	; 4
     998:	21 50       	subi	r18, 0x01	; 1
     99a:	80 40       	sbci	r24, 0x00	; 0
     99c:	90 40       	sbci	r25, 0x00	; 0
     99e:	e1 f7       	brne	.-8      	; 0x998 <motor_controller_calibrate_by_reset+0x48>
     9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <motor_controller_calibrate_by_reset+0x52>
     9a2:	00 00       	nop
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
     9a4:	b2 df       	rcall	.-156    	; 0x90a <motor_encoder_read>
     9a6:	8c 01       	movw	r16, r24
		printf("position: %u\tPrev: %u\n", position, prev_position);
     9a8:	df 93       	push	r29
     9aa:	cf 93       	push	r28
     9ac:	1f 93       	push	r17
     9ae:	0f 93       	push	r16
     9b0:	ff 92       	push	r15
     9b2:	ef 92       	push	r14
     9b4:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <printf>
	_delay_ms(150);
	
	position =  motor_encoder_read();
	
	//go right until stopped, then set encoder to zero
	while(position != prev_position){
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	c0 17       	cp	r28, r16
     9c6:	d1 07       	cpc	r29, r17
     9c8:	11 f7       	brne	.-60     	; 0x98e <motor_controller_calibrate_by_reset+0x3e>
		position = motor_encoder_read();
		printf("position: %u\tPrev: %u\n", position, prev_position);

		
	}
	motor_encoder_reset();
     9ca:	7a df       	rcall	.-268    	; 0x8c0 <motor_encoder_reset>
	
	motor_speed(speed);
     9cc:	81 e4       	ldi	r24, 0x41	; 65
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	57 df       	rcall	.-338    	; 0x880 <motor_speed>
	motor_direction(left);
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	4c df       	rcall	.-360    	; 0x870 <motor_direction>
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	22 e5       	ldi	r18, 0x52	; 82
     9dc:	87 e0       	ldi	r24, 0x07	; 7
     9de:	91 50       	subi	r25, 0x01	; 1
     9e0:	20 40       	sbci	r18, 0x00	; 0
     9e2:	80 40       	sbci	r24, 0x00	; 0
     9e4:	e1 f7       	brne	.-8      	; 0x9de <motor_controller_calibrate_by_reset+0x8e>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <motor_controller_calibrate_by_reset+0x98>
     9e8:	00 00       	nop
		
		position =  motor_encoder_read();
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
		printf("position: %d\n", position);
     9ea:	0f 2e       	mov	r0, r31
     9ec:	fc e8       	ldi	r31, 0x8C	; 140
     9ee:	ef 2e       	mov	r14, r31
     9f0:	f2 e0       	ldi	r31, 0x02	; 2
     9f2:	ff 2e       	mov	r15, r31
     9f4:	f0 2d       	mov	r31, r0
	
	//go left until stopped, set max left to current position
	do{
		
		
		position =  motor_encoder_read();
     9f6:	89 df       	rcall	.-238    	; 0x90a <motor_encoder_read>
     9f8:	8c 01       	movw	r16, r24
     9fa:	9f ef       	ldi	r25, 0xFF	; 255
     9fc:	21 ee       	ldi	r18, 0xE1	; 225
     9fe:	84 e0       	ldi	r24, 0x04	; 4
     a00:	91 50       	subi	r25, 0x01	; 1
     a02:	20 40       	sbci	r18, 0x00	; 0
     a04:	80 40       	sbci	r24, 0x00	; 0
     a06:	e1 f7       	brne	.-8      	; 0xa00 <motor_controller_calibrate_by_reset+0xb0>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <motor_controller_calibrate_by_reset+0xba>
     a0a:	00 00       	nop
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
     a0c:	7e df       	rcall	.-260    	; 0x90a <motor_encoder_read>
     a0e:	ec 01       	movw	r28, r24
		printf("position: %d\n", position);
     a10:	df 93       	push	r29
     a12:	cf 93       	push	r28
     a14:	ff 92       	push	r15
     a16:	ef 92       	push	r14
     a18:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <printf>
		
		
	} while(position != prev_position);
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	0c 17       	cp	r16, r28
     a26:	1d 07       	cpc	r17, r29
     a28:	31 f7       	brne	.-52     	; 0x9f6 <motor_controller_calibrate_by_reset+0xa6>
	
	max_left = position;
     a2a:	10 93 a3 02 	sts	0x02A3, r17
     a2e:	00 93 a2 02 	sts	0x02A2, r16
	motor_speed(0);
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	24 df       	rcall	.-440    	; 0x880 <motor_speed>
	
	motor_speed(speed);
     a38:	81 e4       	ldi	r24, 0x41	; 65
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	21 df       	rcall	.-446    	; 0x880 <motor_speed>
	motor_direction(right);
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	16 df       	rcall	.-468    	; 0x870 <motor_direction>
     a44:	8f ef       	ldi	r24, 0xFF	; 255
     a46:	91 ee       	ldi	r25, 0xE1	; 225
     a48:	24 e0       	ldi	r18, 0x04	; 4
     a4a:	81 50       	subi	r24, 0x01	; 1
     a4c:	90 40       	sbci	r25, 0x00	; 0
     a4e:	20 40       	sbci	r18, 0x00	; 0
     a50:	e1 f7       	brne	.-8      	; 0xa4a <motor_controller_calibrate_by_reset+0xfa>
     a52:	00 c0       	rjmp	.+0      	; 0xa54 <motor_controller_calibrate_by_reset+0x104>
     a54:	00 00       	nop
     a56:	09 c0       	rjmp	.+18     	; 0xa6a <motor_controller_calibrate_by_reset+0x11a>
     a58:	8f ef       	ldi	r24, 0xFF	; 255
     a5a:	91 ee       	ldi	r25, 0xE1	; 225
     a5c:	24 e0       	ldi	r18, 0x04	; 4
     a5e:	81 50       	subi	r24, 0x01	; 1
     a60:	90 40       	sbci	r25, 0x00	; 0
     a62:	20 40       	sbci	r18, 0x00	; 0
     a64:	e1 f7       	brne	.-8      	; 0xa5e <motor_controller_calibrate_by_reset+0x10e>
     a66:	00 c0       	rjmp	.+0      	; 0xa68 <motor_controller_calibrate_by_reset+0x118>
     a68:	00 00       	nop
	_delay_ms(100);
	while(motor_encoder_read() > 4500){
     a6a:	4f df       	rcall	.-354    	; 0x90a <motor_encoder_read>
     a6c:	85 39       	cpi	r24, 0x95	; 149
     a6e:	91 41       	sbci	r25, 0x11	; 17
     a70:	98 f7       	brcc	.-26     	; 0xa58 <motor_controller_calibrate_by_reset+0x108>
		_delay_ms(100);
	}
}
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	ff 90       	pop	r15
     a7c:	ef 90       	pop	r14
     a7e:	08 95       	ret

00000a80 <PI_controller_new>:
	float error;
	float integral;
};


PI_controller* PI_controller_new(float kp, float ki){
     a80:	8f 92       	push	r8
     a82:	9f 92       	push	r9
     a84:	af 92       	push	r10
     a86:	bf 92       	push	r11
     a88:	cf 92       	push	r12
     a8a:	df 92       	push	r13
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	4b 01       	movw	r8, r22
     a92:	5c 01       	movw	r10, r24
     a94:	69 01       	movw	r12, r18
     a96:	7a 01       	movw	r14, r20
	PI_controller* this = malloc(sizeof(PI_controller));
     a98:	82 e1       	ldi	r24, 0x12	; 18
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	b3 d7       	rcall	.+3942   	; 0x1a04 <malloc>
	
	//initialized variables of controller type to 0
	memset(this, 0, sizeof(PI_controller));
     a9e:	22 e1       	ldi	r18, 0x12	; 18
     aa0:	fc 01       	movw	r30, r24
     aa2:	11 92       	st	Z+, r1
     aa4:	2a 95       	dec	r18
     aa6:	e9 f7       	brne	.-6      	; 0xaa2 <PI_controller_new+0x22>
	
	this->Ki = ki;
     aa8:	fc 01       	movw	r30, r24
     aaa:	c4 82       	std	Z+4, r12	; 0x04
     aac:	d5 82       	std	Z+5, r13	; 0x05
     aae:	e6 82       	std	Z+6, r14	; 0x06
     ab0:	f7 82       	std	Z+7, r15	; 0x07
	this->Kp = kp;
     ab2:	80 82       	st	Z, r8
     ab4:	91 82       	std	Z+1, r9	; 0x01
     ab6:	a2 82       	std	Z+2, r10	; 0x02
     ab8:	b3 82       	std	Z+3, r11	; 0x03
	
	return this;
}
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	bf 90       	pop	r11
     ac4:	af 90       	pop	r10
     ac6:	9f 90       	pop	r9
     ac8:	8f 90       	pop	r8
     aca:	08 95       	ret

00000acc <PI_controller_output>:

int16_t PI_controller_output(PI_controller* ctrl, uint16_t y, uint16_t x){
     acc:	8f 92       	push	r8
     ace:	9f 92       	push	r9
     ad0:	af 92       	push	r10
     ad2:	bf 92       	push	r11
     ad4:	cf 92       	push	r12
     ad6:	df 92       	push	r13
     ad8:	ef 92       	push	r14
     ada:	ff 92       	push	r15
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ec 01       	movw	r28, r24
     ae2:	5b 01       	movw	r10, r22
     ae4:	4a 01       	movw	r8, r20


	float dt = (float)(timer_read(4) * prescaler / fcpu);	// dt time [seconds]
     ae6:	84 e0       	ldi	r24, 0x04	; 4
     ae8:	fc d0       	rcall	.+504    	; 0xce2 <timer_read>
     aea:	bc 01       	movw	r22, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0b d3       	rcall	.+1558   	; 0x1108 <__floatunsisf>
     af2:	20 91 06 02 	lds	r18, 0x0206
     af6:	30 91 07 02 	lds	r19, 0x0207
     afa:	40 91 08 02 	lds	r20, 0x0208
     afe:	50 91 09 02 	lds	r21, 0x0209
     b02:	90 d3       	rcall	.+1824   	; 0x1224 <__mulsf3>
     b04:	20 91 0a 02 	lds	r18, 0x020A
     b08:	30 91 0b 02 	lds	r19, 0x020B
     b0c:	40 91 0c 02 	lds	r20, 0x020C
     b10:	50 91 0d 02 	lds	r21, 0x020D
     b14:	60 d2       	rcall	.+1216   	; 0xfd6 <__divsf3>
     b16:	6b 01       	movw	r12, r22
     b18:	7c 01       	movw	r14, r24
	timer_reset(4);
     b1a:	84 e0       	ldi	r24, 0x04	; 4
     b1c:	07 d1       	rcall	.+526    	; 0xd2c <timer_reset>
	
	int16_t error = x - y;
     b1e:	b4 01       	movw	r22, r8
     b20:	6a 19       	sub	r22, r10
     b22:	7b 09       	sbc	r23, r11
	ctrl->integral += error * dt;
     b24:	88 27       	eor	r24, r24
     b26:	77 fd       	sbrc	r23, 7
     b28:	80 95       	com	r24
     b2a:	98 2f       	mov	r25, r24
     b2c:	ef d2       	rcall	.+1502   	; 0x110c <__floatsisf>
     b2e:	4b 01       	movw	r8, r22
     b30:	5c 01       	movw	r10, r24
     b32:	a7 01       	movw	r20, r14
     b34:	96 01       	movw	r18, r12
     b36:	76 d3       	rcall	.+1772   	; 0x1224 <__mulsf3>
     b38:	2e 85       	ldd	r18, Y+14	; 0x0e
     b3a:	3f 85       	ldd	r19, Y+15	; 0x0f
     b3c:	48 89       	ldd	r20, Y+16	; 0x10
     b3e:	59 89       	ldd	r21, Y+17	; 0x11
     b40:	e6 d1       	rcall	.+972    	; 0xf0e <__addsf3>
     b42:	6b 01       	movw	r12, r22
     b44:	7c 01       	movw	r14, r24
     b46:	6e 87       	std	Y+14, r22	; 0x0e
     b48:	7f 87       	std	Y+15, r23	; 0x0f
     b4a:	88 8b       	std	Y+16, r24	; 0x10
     b4c:	99 8b       	std	Y+17, r25	; 0x11
	
	return ctrl->Kp * error + ctrl->Ki * ctrl->integral;
     b4e:	28 81       	ld	r18, Y
     b50:	39 81       	ldd	r19, Y+1	; 0x01
     b52:	4a 81       	ldd	r20, Y+2	; 0x02
     b54:	5b 81       	ldd	r21, Y+3	; 0x03
     b56:	c5 01       	movw	r24, r10
     b58:	b4 01       	movw	r22, r8
     b5a:	64 d3       	rcall	.+1736   	; 0x1224 <__mulsf3>
     b5c:	4b 01       	movw	r8, r22
     b5e:	5c 01       	movw	r10, r24
     b60:	2c 81       	ldd	r18, Y+4	; 0x04
     b62:	3d 81       	ldd	r19, Y+5	; 0x05
     b64:	4e 81       	ldd	r20, Y+6	; 0x06
     b66:	5f 81       	ldd	r21, Y+7	; 0x07
     b68:	c7 01       	movw	r24, r14
     b6a:	b6 01       	movw	r22, r12
     b6c:	5b d3       	rcall	.+1718   	; 0x1224 <__mulsf3>
     b6e:	9b 01       	movw	r18, r22
     b70:	ac 01       	movw	r20, r24
     b72:	c5 01       	movw	r24, r10
     b74:	b4 01       	movw	r22, r8
     b76:	cb d1       	rcall	.+918    	; 0xf0e <__addsf3>
     b78:	96 d2       	rcall	.+1324   	; 0x10a6 <__fixsfsi>
				

}
     b7a:	cb 01       	movw	r24, r22
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	df 90       	pop	r13
     b86:	cf 90       	pop	r12
     b88:	bf 90       	pop	r11
     b8a:	af 90       	pop	r10
     b8c:	9f 90       	pop	r9
     b8e:	8f 90       	pop	r8
     b90:	08 95       	ret

00000b92 <pwm_init>:




void pwm_init(uint16_t pulse_period, uint16_t initial_pulse_width){
	DDRE |= (1<<PE3);
     b92:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE |= (1<<PE3);
     b94:	73 9a       	sbi	0x0e, 3	; 14
	
	TCCR3A = 0;
     b96:	a0 e9       	ldi	r26, 0x90	; 144
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	1c 92       	st	X, r1
	TCCR3B = 0;
     b9c:	e1 e9       	ldi	r30, 0x91	; 145
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	10 82       	st	Z, r1
	TCCR3C = 0;
     ba2:	10 92 92 00 	sts	0x0092, r1
	
	//16 bit, fast pwm, top: ICR, update OCRnx at bottom, TOVn Flag set on TOP
	TCCR3A &= ~(1<< WGM30);
     ba6:	2c 91       	ld	r18, X
     ba8:	2e 7f       	andi	r18, 0xFE	; 254
     baa:	2c 93       	st	X, r18
	TCCR3A |= (1<<WGM31);
     bac:	2c 91       	ld	r18, X
     bae:	22 60       	ori	r18, 0x02	; 2
     bb0:	2c 93       	st	X, r18
	TCCR3B |= (1<<WGM32);
     bb2:	20 81       	ld	r18, Z
     bb4:	28 60       	ori	r18, 0x08	; 8
     bb6:	20 83       	st	Z, r18
	TCCR3B |= (1<<WGM33);
     bb8:	20 81       	ld	r18, Z
     bba:	20 61       	ori	r18, 0x10	; 16
     bbc:	20 83       	st	Z, r18
	
	//inverting		
	TCCR3A |= (0<<COM3A0);
     bbe:	2c 91       	ld	r18, X
     bc0:	2c 93       	st	X, r18
	TCCR3A |= (1<<COM3A1);
     bc2:	2c 91       	ld	r18, X
     bc4:	20 68       	ori	r18, 0x80	; 128
     bc6:	2c 93       	st	X, r18
	
	//prescaler,	CLK / 64
	TCCR3B |= (1<<CS30) | (1<<CS31);
     bc8:	20 81       	ld	r18, Z
     bca:	23 60       	ori	r18, 0x03	; 3
     bcc:	20 83       	st	Z, r18
	TCCR3B &= ~(1<<CS32);
     bce:	20 81       	ld	r18, Z
     bd0:	2b 7f       	andi	r18, 0xFB	; 251
     bd2:	20 83       	st	Z, r18
	
	//20 ms
	ICR3 = pulse_period;
     bd4:	90 93 97 00 	sts	0x0097, r25
     bd8:	80 93 96 00 	sts	0x0096, r24
	
	OCR3A = initial_pulse_width; //should be P_MID
     bdc:	70 93 99 00 	sts	0x0099, r23
     be0:	60 93 98 00 	sts	0x0098, r22
     be4:	08 95       	ret

00000be6 <pwm_set_pulse_width>:
	//printf("PWM init done:\n\tTCCRA: %02X\n\tTCCRB: %02X\n\tICR: %02X\n\tOCR: %02X\n", TCCR3A, TCCR3B, ICR3, OCR3A);
}


void pwm_set_pulse_width(uint16_t pulse){
	OCR3A = pulse;
     be6:	90 93 99 00 	sts	0x0099, r25
     bea:	80 93 98 00 	sts	0x0098, r24
     bee:	08 95       	ret

00000bf0 <servo_set_pulse>:
}


void servo_set_pulse(int16_t pulse_width){
	
	if(pulse_width >= P_MAX){
     bf0:	8d 30       	cpi	r24, 0x0D	; 13
     bf2:	22 e0       	ldi	r18, 0x02	; 2
     bf4:	92 07       	cpc	r25, r18
     bf6:	24 f0       	brlt	.+8      	; 0xc00 <servo_set_pulse+0x10>
		pwm_set_pulse_width(P_MAX);
     bf8:	8d e0       	ldi	r24, 0x0D	; 13
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	f4 cf       	rjmp	.-24     	; 0xbe6 <pwm_set_pulse_width>
     bfe:	08 95       	ret
	}
	else if(pulse_width < P_MIN){
     c00:	81 3e       	cpi	r24, 0xE1	; 225
     c02:	91 05       	cpc	r25, r1
     c04:	24 f4       	brge	.+8      	; 0xc0e <servo_set_pulse+0x1e>
		pwm_set_pulse_width(P_MIN);
     c06:	81 ee       	ldi	r24, 0xE1	; 225
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	ed cf       	rjmp	.-38     	; 0xbe6 <pwm_set_pulse_width>
     c0c:	08 95       	ret
	}
	else{
		pwm_set_pulse_width(pulse_width);
     c0e:	eb cf       	rjmp	.-42     	; 0xbe6 <pwm_set_pulse_width>
     c10:	08 95       	ret

00000c12 <servo_set_pulse_by_input>:
}

void servo_set_pulse_by_input(int16_t val){
	
	//reverses control, more intuitive width our hardware
	val = abs(val - 255);
     c12:	8f 5f       	subi	r24, 0xFF	; 255
     c14:	91 09       	sbc	r25, r1
     c16:	bc 01       	movw	r22, r24
     c18:	99 23       	and	r25, r25
     c1a:	24 f4       	brge	.+8      	; 0xc24 <servo_set_pulse_by_input+0x12>
     c1c:	66 27       	eor	r22, r22
     c1e:	77 27       	eor	r23, r23
     c20:	68 1b       	sub	r22, r24
     c22:	79 0b       	sbc	r23, r25
	
	
	uint16_t pulse_width = (float)(val * (300/255.0)) + P_MIN;
     c24:	88 27       	eor	r24, r24
     c26:	77 fd       	sbrc	r23, 7
     c28:	80 95       	com	r24
     c2a:	98 2f       	mov	r25, r24
     c2c:	6f d2       	rcall	.+1246   	; 0x110c <__floatsisf>
     c2e:	27 e9       	ldi	r18, 0x97	; 151
     c30:	36 e9       	ldi	r19, 0x96	; 150
     c32:	46 e9       	ldi	r20, 0x96	; 150
     c34:	5f e3       	ldi	r21, 0x3F	; 63
     c36:	f6 d2       	rcall	.+1516   	; 0x1224 <__mulsf3>
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	41 e6       	ldi	r20, 0x61	; 97
     c3e:	53 e4       	ldi	r21, 0x43	; 67
     c40:	66 d1       	rcall	.+716    	; 0xf0e <__addsf3>
     c42:	36 d2       	rcall	.+1132   	; 0x10b0 <__fixunssfsi>
	servo_set_pulse(pulse_width);
     c44:	cb 01       	movw	r24, r22
     c46:	d4 cf       	rjmp	.-88     	; 0xbf0 <servo_set_pulse>
     c48:	08 95       	ret

00000c4a <solenoid_init>:
void solenoid_extend(){
	PORTH &= ~(1<<PH3);
}

void solenoid_retract(){
	PORTH |= (1<<PH3);	
     c4a:	e1 e0       	ldi	r30, 0x01	; 1
     c4c:	f1 e0       	ldi	r31, 0x01	; 1
     c4e:	80 81       	ld	r24, Z
     c50:	88 60       	ori	r24, 0x08	; 8
     c52:	80 83       	st	Z, r24
     c54:	e2 e0       	ldi	r30, 0x02	; 2
     c56:	f1 e0       	ldi	r31, 0x01	; 1
     c58:	80 81       	ld	r24, Z
     c5a:	88 60       	ori	r24, 0x08	; 8
     c5c:	80 83       	st	Z, r24
     c5e:	08 95       	ret

00000c60 <solenoid_shoot>:
     c60:	e2 e0       	ldi	r30, 0x02	; 2
     c62:	f1 e0       	ldi	r31, 0x01	; 1
     c64:	80 81       	ld	r24, Z
     c66:	87 7f       	andi	r24, 0xF7	; 247
     c68:	80 83       	st	Z, r24
     c6a:	2f ef       	ldi	r18, 0xFF	; 255
     c6c:	82 e5       	ldi	r24, 0x52	; 82
     c6e:	97 e0       	ldi	r25, 0x07	; 7
     c70:	21 50       	subi	r18, 0x01	; 1
     c72:	80 40       	sbci	r24, 0x00	; 0
     c74:	90 40       	sbci	r25, 0x00	; 0
     c76:	e1 f7       	brne	.-8      	; 0xc70 <solenoid_shoot+0x10>
     c78:	00 c0       	rjmp	.+0      	; 0xc7a <solenoid_shoot+0x1a>
     c7a:	00 00       	nop
     c7c:	80 81       	ld	r24, Z
     c7e:	88 60       	ori	r24, 0x08	; 8
     c80:	80 83       	st	Z, r24
     c82:	08 95       	ret

00000c84 <solenoid_disallow_shooting>:
}

void solenoid_disallow_shooting(){
	shoot = 0;
     c84:	10 92 0e 02 	sts	0x020E, r1
     c88:	08 95       	ret

00000c8a <solenoid_allow_shooting>:
}
void solenoid_allow_shooting(){
	shoot = 1;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	80 93 0e 02 	sts	0x020E, r24
     c90:	08 95       	ret

00000c92 <solenoid_is_shooting_allowed>:
}
uint8_t solenoid_is_shooting_allowed(){
	return shoot;
}
     c92:	80 91 0e 02 	lds	r24, 0x020E
     c96:	08 95       	ret

00000c98 <spi_init>:
#include "SPI.h"
#include <avr/io.h>

void spi_init(){
			//SI out		SS out		SCK out
	DDRB |= ( 1 << PB2) | (1 << PB0) | (1 << PB1);
     c98:	84 b1       	in	r24, 0x04	; 4
     c9a:	87 60       	ori	r24, 0x07	; 7
     c9c:	84 b9       	out	0x04, r24	; 4
	//SO in
	DDRB &= ~(1 << PB3);
     c9e:	23 98       	cbi	0x04, 3	; 4
	
	//								 frequency / 16
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     ca0:	81 e5       	ldi	r24, 0x51	; 81
     ca2:	8c bd       	out	0x2c, r24	; 44
     ca4:	08 95       	ret

00000ca6 <spi_write>:

//both read and write
int spi_write(char data){
	//SPDR = data;
	//while(!(SPSR & (1<<SPIF)));
	SPDR = data;
     ca6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
     ca8:	0d b4       	in	r0, 0x2d	; 45
     caa:	07 fe       	sbrs	r0, 7
     cac:	fd cf       	rjmp	.-6      	; 0xca8 <spi_write+0x2>
	return SPDR;
     cae:	8e b5       	in	r24, 0x2e	; 46
}
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	08 95       	ret

00000cb4 <timer_init>:
}
void timer3_reset(){
	TCNT3 = 0;
}
void timer4_reset(){
	TCNT4 = 0;
     cb4:	10 92 a0 00 	sts	0x00A0, r1
     cb8:	e1 ea       	ldi	r30, 0xA1	; 161
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	10 82       	st	Z, r1
     cbe:	80 81       	ld	r24, Z
     cc0:	85 60       	ori	r24, 0x05	; 5
     cc2:	80 83       	st	Z, r24
     cc4:	80 81       	ld	r24, Z
     cc6:	8d 7f       	andi	r24, 0xFD	; 253
     cc8:	80 83       	st	Z, r24
     cca:	10 92 20 01 	sts	0x0120, r1
     cce:	e1 e2       	ldi	r30, 0x21	; 33
     cd0:	f1 e0       	ldi	r31, 0x01	; 1
     cd2:	10 82       	st	Z, r1
     cd4:	80 81       	ld	r24, Z
     cd6:	85 60       	ori	r24, 0x05	; 5
     cd8:	80 83       	st	Z, r24
     cda:	80 81       	ld	r24, Z
     cdc:	8d 7f       	andi	r24, 0xFD	; 253
     cde:	80 83       	st	Z, r24
     ce0:	08 95       	ret

00000ce2 <timer_read>:
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	29 f4       	brne	.+10     	; 0xcf0 <timer_read+0xe>
     ce6:	20 91 84 00 	lds	r18, 0x0084
     cea:	30 91 85 00 	lds	r19, 0x0085
     cee:	16 c0       	rjmp	.+44     	; 0xd1c <timer_read+0x3a>
     cf0:	83 30       	cpi	r24, 0x03	; 3
     cf2:	29 f4       	brne	.+10     	; 0xcfe <timer_read+0x1c>
     cf4:	20 91 94 00 	lds	r18, 0x0094
     cf8:	30 91 95 00 	lds	r19, 0x0095
     cfc:	0f c0       	rjmp	.+30     	; 0xd1c <timer_read+0x3a>
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	29 f4       	brne	.+10     	; 0xd0c <timer_read+0x2a>
     d02:	20 91 a4 00 	lds	r18, 0x00A4
     d06:	30 91 a5 00 	lds	r19, 0x00A5
     d0a:	08 c0       	rjmp	.+16     	; 0xd1c <timer_read+0x3a>
     d0c:	85 30       	cpi	r24, 0x05	; 5
     d0e:	29 f4       	brne	.+10     	; 0xd1a <timer_read+0x38>
     d10:	20 91 24 01 	lds	r18, 0x0124
     d14:	30 91 25 01 	lds	r19, 0x0125
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <timer_read+0x3a>
     d1a:	08 95       	ret
     d1c:	82 2f       	mov	r24, r18
     d1e:	93 2f       	mov	r25, r19
     d20:	08 95       	ret

00000d22 <timer5_read>:
     d22:	80 91 24 01 	lds	r24, 0x0124
     d26:	90 91 25 01 	lds	r25, 0x0125
     d2a:	08 95       	ret

00000d2c <timer_reset>:
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	29 f4       	brne	.+10     	; 0xd3a <timer_reset+0xe>
     d30:	10 92 85 00 	sts	0x0085, r1
     d34:	10 92 84 00 	sts	0x0084, r1
     d38:	08 95       	ret
     d3a:	83 30       	cpi	r24, 0x03	; 3
     d3c:	29 f4       	brne	.+10     	; 0xd48 <timer_reset+0x1c>
     d3e:	10 92 95 00 	sts	0x0095, r1
     d42:	10 92 94 00 	sts	0x0094, r1
     d46:	08 95       	ret
     d48:	84 30       	cpi	r24, 0x04	; 4
     d4a:	29 f4       	brne	.+10     	; 0xd56 <timer_reset+0x2a>
     d4c:	10 92 a5 00 	sts	0x00A5, r1
     d50:	10 92 a4 00 	sts	0x00A4, r1
     d54:	08 95       	ret
     d56:	85 30       	cpi	r24, 0x05	; 5
     d58:	21 f4       	brne	.+8      	; 0xd62 <timer_reset+0x36>
     d5a:	10 92 25 01 	sts	0x0125, r1
     d5e:	10 92 24 01 	sts	0x0124, r1
     d62:	08 95       	ret

00000d64 <timer5_reset>:
}
void timer5_reset(){
	TCNT5 = 0;
     d64:	10 92 25 01 	sts	0x0125, r1
     d68:	10 92 24 01 	sts	0x0124, r1
     d6c:	08 95       	ret

00000d6e <TWI_Master_Initialise>:
		{
			msg[ i ] = TWI_buf[ i ];
		}
	}
	return( TWI_statusReg.lastTransOK );
}
     d6e:	8c e0       	ldi	r24, 0x0C	; 12
     d70:	80 93 b8 00 	sts	0x00B8, r24
     d74:	8f ef       	ldi	r24, 0xFF	; 255
     d76:	80 93 bb 00 	sts	0x00BB, r24
     d7a:	84 e0       	ldi	r24, 0x04	; 4
     d7c:	80 93 bc 00 	sts	0x00BC, r24
     d80:	08 95       	ret

00000d82 <TWI_Start_Transceiver_With_Data>:
     d82:	ec eb       	ldi	r30, 0xBC	; 188
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	20 81       	ld	r18, Z
     d88:	20 fd       	sbrc	r18, 0
     d8a:	fd cf       	rjmp	.-6      	; 0xd86 <TWI_Start_Transceiver_With_Data+0x4>
     d8c:	60 93 9d 02 	sts	0x029D, r22
     d90:	fc 01       	movw	r30, r24
     d92:	20 81       	ld	r18, Z
     d94:	20 93 9e 02 	sts	0x029E, r18
     d98:	20 fd       	sbrc	r18, 0
     d9a:	0c c0       	rjmp	.+24     	; 0xdb4 <TWI_Start_Transceiver_With_Data+0x32>
     d9c:	62 30       	cpi	r22, 0x02	; 2
     d9e:	50 f0       	brcs	.+20     	; 0xdb4 <TWI_Start_Transceiver_With_Data+0x32>
     da0:	dc 01       	movw	r26, r24
     da2:	11 96       	adiw	r26, 0x01	; 1
     da4:	ef e9       	ldi	r30, 0x9F	; 159
     da6:	f2 e0       	ldi	r31, 0x02	; 2
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	9d 91       	ld	r25, X+
     dac:	91 93       	st	Z+, r25
     dae:	8f 5f       	subi	r24, 0xFF	; 255
     db0:	86 13       	cpse	r24, r22
     db2:	fb cf       	rjmp	.-10     	; 0xdaa <TWI_Start_Transceiver_With_Data+0x28>
     db4:	10 92 9c 02 	sts	0x029C, r1
     db8:	88 ef       	ldi	r24, 0xF8	; 248
     dba:	80 93 0f 02 	sts	0x020F, r24
     dbe:	85 ea       	ldi	r24, 0xA5	; 165
     dc0:	80 93 bc 00 	sts	0x00BC, r24
     dc4:	08 95       	ret

00000dc6 <__vector_39>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
     dc6:	1f 92       	push	r1
     dc8:	0f 92       	push	r0
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	0f 92       	push	r0
     dce:	11 24       	eor	r1, r1
     dd0:	0b b6       	in	r0, 0x3b	; 59
     dd2:	0f 92       	push	r0
     dd4:	2f 93       	push	r18
     dd6:	3f 93       	push	r19
     dd8:	8f 93       	push	r24
     dda:	9f 93       	push	r25
     ddc:	af 93       	push	r26
     dde:	bf 93       	push	r27
     de0:	ef 93       	push	r30
     de2:	ff 93       	push	r31
	static unsigned char TWI_bufPtr;
	
	switch (TWSR)
     de4:	80 91 b9 00 	lds	r24, 0x00B9
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	fc 01       	movw	r30, r24
     dec:	38 97       	sbiw	r30, 0x08	; 8
     dee:	e1 35       	cpi	r30, 0x51	; 81
     df0:	f1 05       	cpc	r31, r1
     df2:	08 f0       	brcs	.+2      	; 0xdf6 <__vector_39+0x30>
     df4:	55 c0       	rjmp	.+170    	; 0xea0 <__vector_39+0xda>
     df6:	ee 58       	subi	r30, 0x8E	; 142
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	fe c5       	rjmp	.+3068   	; 0x19f8 <__tablejump2__>
	{
		case TWI_START:             // START has been transmitted
		case TWI_REP_START:         // Repeated START has been transmitted
		TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
     dfc:	10 92 9b 02 	sts	0x029B, r1
		case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
		case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
		if (TWI_bufPtr < TWI_msgSize)
     e00:	e0 91 9b 02 	lds	r30, 0x029B
     e04:	80 91 9d 02 	lds	r24, 0x029D
     e08:	e8 17       	cp	r30, r24
     e0a:	70 f4       	brcc	.+28     	; 0xe28 <__vector_39+0x62>
		{
			TWDR = TWI_buf[TWI_bufPtr++];
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	8e 0f       	add	r24, r30
     e10:	80 93 9b 02 	sts	0x029B, r24
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	e2 56       	subi	r30, 0x62	; 98
     e18:	fd 4f       	sbci	r31, 0xFD	; 253
     e1a:	80 81       	ld	r24, Z
     e1c:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     e20:	85 e8       	ldi	r24, 0x85	; 133
     e22:	80 93 bc 00 	sts	0x00BC, r24
     e26:	43 c0       	rjmp	.+134    	; 0xeae <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
			(0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
			TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     e28:	80 91 9c 02 	lds	r24, 0x029C
     e2c:	81 60       	ori	r24, 0x01	; 1
     e2e:	80 93 9c 02 	sts	0x029C, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     e32:	84 e9       	ldi	r24, 0x94	; 148
     e34:	80 93 bc 00 	sts	0x00BC, r24
     e38:	3a c0       	rjmp	.+116    	; 0xeae <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
		TWI_buf[TWI_bufPtr++] = TWDR;
     e3a:	e0 91 9b 02 	lds	r30, 0x029B
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	8e 0f       	add	r24, r30
     e42:	80 93 9b 02 	sts	0x029B, r24
     e46:	80 91 bb 00 	lds	r24, 0x00BB
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	e2 56       	subi	r30, 0x62	; 98
     e4e:	fd 4f       	sbci	r31, 0xFD	; 253
     e50:	80 83       	st	Z, r24
		case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
		if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
     e52:	20 91 9b 02 	lds	r18, 0x029B
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	80 91 9d 02 	lds	r24, 0x029D
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	28 17       	cp	r18, r24
     e62:	39 07       	cpc	r19, r25
     e64:	24 f4       	brge	.+8      	; 0xe6e <__vector_39+0xa8>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     e66:	85 ec       	ldi	r24, 0xC5	; 197
     e68:	80 93 bc 00 	sts	0x00BC, r24
     e6c:	20 c0       	rjmp	.+64     	; 0xeae <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
			(0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     e6e:	85 e8       	ldi	r24, 0x85	; 133
     e70:	80 93 bc 00 	sts	0x00BC, r24
     e74:	1c c0       	rjmp	.+56     	; 0xeae <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
		TWI_buf[TWI_bufPtr] = TWDR;
     e76:	80 91 bb 00 	lds	r24, 0x00BB
     e7a:	e0 91 9b 02 	lds	r30, 0x029B
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	e2 56       	subi	r30, 0x62	; 98
     e82:	fd 4f       	sbci	r31, 0xFD	; 253
     e84:	80 83       	st	Z, r24
		TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     e86:	80 91 9c 02 	lds	r24, 0x029C
     e8a:	81 60       	ori	r24, 0x01	; 1
     e8c:	80 93 9c 02 	sts	0x029C, r24
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     e90:	84 e9       	ldi	r24, 0x94	; 148
     e92:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
		(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
		(0<<TWWC);                                 //
		break;
     e96:	0b c0       	rjmp	.+22     	; 0xeae <__vector_39+0xe8>
		case TWI_ARB_LOST:          // Arbitration lost
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     e98:	85 ea       	ldi	r24, 0xA5	; 165
     e9a:	80 93 bc 00 	sts	0x00BC, r24
		(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
		(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
		(0<<TWWC);                                 //
		break;
     e9e:	07 c0       	rjmp	.+14     	; 0xeae <__vector_39+0xe8>
		case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received
		case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
		//    case TWI_NO_STATE              // No relevant state information available; TWINT = ?0?
		case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
		default:
		TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     ea0:	80 91 b9 00 	lds	r24, 0x00B9
     ea4:	80 93 0f 02 	sts	0x020F, r24
		// Reset TWI Interface
		TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     ea8:	84 e0       	ldi	r24, 0x04	; 4
     eaa:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
		(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
		(0<<TWWC);                                 //
	}
     eae:	ff 91       	pop	r31
     eb0:	ef 91       	pop	r30
     eb2:	bf 91       	pop	r27
     eb4:	af 91       	pop	r26
     eb6:	9f 91       	pop	r25
     eb8:	8f 91       	pop	r24
     eba:	3f 91       	pop	r19
     ebc:	2f 91       	pop	r18
     ebe:	0f 90       	pop	r0
     ec0:	0b be       	out	0x3b, r0	; 59
     ec2:	0f 90       	pop	r0
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	0f 90       	pop	r0
     ec8:	1f 90       	pop	r1
     eca:	18 95       	reti

00000ecc <uart_Transmit>:
}

void uart_Transmit( unsigned char data ){
	
	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     ecc:	e0 ec       	ldi	r30, 0xC0	; 192
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	90 81       	ld	r25, Z
     ed2:	95 ff       	sbrs	r25, 5
     ed4:	fd cf       	rjmp	.-6      	; 0xed0 <uart_Transmit+0x4>
	
	//Put data into buffer, sends the data
	UDR0 = data;
     ed6:	80 93 c6 00 	sts	0x00C6, r24
     eda:	08 95       	ret

00000edc <uart_Receive>:

unsigned char uart_Receive(void){
	
	//Wait for data to be received
	
	while( !(UCSR0A & (1<<RXC0)) );
     edc:	e0 ec       	ldi	r30, 0xC0	; 192
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	88 23       	and	r24, r24
     ee4:	ec f7       	brge	.-6      	; 0xee0 <uart_Receive+0x4>
	
	//Get and return received data from buffer
	
	return UDR0;
     ee6:	80 91 c6 00 	lds	r24, 0x00C6
}
     eea:	08 95       	ret

00000eec <uart_Init>:
#include "uart.h"

void uart_Init(unsigned int ubrr){
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     eec:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     ef0:	80 93 c4 00 	sts	0x00C4, r24
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     ef4:	88 e1       	ldi	r24, 0x18	; 24
     ef6:	80 93 c1 00 	sts	0x00C1, r24
	
	//Set frame format: 8data, 1stop bit
	UCSR0C = (1 << 7)|(3<<UCSZ00);//here, 7 replaces URSEL0 from ATmega162 project
     efa:	86 e8       	ldi	r24, 0x86	; 134
     efc:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(uart_Transmit, uart_Receive);
     f00:	6e e6       	ldi	r22, 0x6E	; 110
     f02:	77 e0       	ldi	r23, 0x07	; 7
     f04:	86 e6       	ldi	r24, 0x66	; 102
     f06:	97 e0       	ldi	r25, 0x07	; 7
     f08:	92 c7       	rjmp	.+3876   	; 0x1e2e <fdevopen>
     f0a:	08 95       	ret

00000f0c <__subsf3>:
     f0c:	50 58       	subi	r21, 0x80	; 128

00000f0e <__addsf3>:
     f0e:	bb 27       	eor	r27, r27
     f10:	aa 27       	eor	r26, r26
     f12:	0e d0       	rcall	.+28     	; 0xf30 <__addsf3x>
     f14:	4d c1       	rjmp	.+666    	; 0x11b0 <__fp_round>
     f16:	3e d1       	rcall	.+636    	; 0x1194 <__fp_pscA>
     f18:	30 f0       	brcs	.+12     	; 0xf26 <__addsf3+0x18>
     f1a:	43 d1       	rcall	.+646    	; 0x11a2 <__fp_pscB>
     f1c:	20 f0       	brcs	.+8      	; 0xf26 <__addsf3+0x18>
     f1e:	31 f4       	brne	.+12     	; 0xf2c <__addsf3+0x1e>
     f20:	9f 3f       	cpi	r25, 0xFF	; 255
     f22:	11 f4       	brne	.+4      	; 0xf28 <__addsf3+0x1a>
     f24:	1e f4       	brtc	.+6      	; 0xf2c <__addsf3+0x1e>
     f26:	33 c1       	rjmp	.+614    	; 0x118e <__fp_nan>
     f28:	0e f4       	brtc	.+2      	; 0xf2c <__addsf3+0x1e>
     f2a:	e0 95       	com	r30
     f2c:	e7 fb       	bst	r30, 7
     f2e:	29 c1       	rjmp	.+594    	; 0x1182 <__fp_inf>

00000f30 <__addsf3x>:
     f30:	e9 2f       	mov	r30, r25
     f32:	4f d1       	rcall	.+670    	; 0x11d2 <__fp_split3>
     f34:	80 f3       	brcs	.-32     	; 0xf16 <__addsf3+0x8>
     f36:	ba 17       	cp	r27, r26
     f38:	62 07       	cpc	r22, r18
     f3a:	73 07       	cpc	r23, r19
     f3c:	84 07       	cpc	r24, r20
     f3e:	95 07       	cpc	r25, r21
     f40:	18 f0       	brcs	.+6      	; 0xf48 <__addsf3x+0x18>
     f42:	71 f4       	brne	.+28     	; 0xf60 <__addsf3x+0x30>
     f44:	9e f5       	brtc	.+102    	; 0xfac <__addsf3x+0x7c>
     f46:	67 c1       	rjmp	.+718    	; 0x1216 <__fp_zero>
     f48:	0e f4       	brtc	.+2      	; 0xf4c <__addsf3x+0x1c>
     f4a:	e0 95       	com	r30
     f4c:	0b 2e       	mov	r0, r27
     f4e:	ba 2f       	mov	r27, r26
     f50:	a0 2d       	mov	r26, r0
     f52:	0b 01       	movw	r0, r22
     f54:	b9 01       	movw	r22, r18
     f56:	90 01       	movw	r18, r0
     f58:	0c 01       	movw	r0, r24
     f5a:	ca 01       	movw	r24, r20
     f5c:	a0 01       	movw	r20, r0
     f5e:	11 24       	eor	r1, r1
     f60:	ff 27       	eor	r31, r31
     f62:	59 1b       	sub	r21, r25
     f64:	99 f0       	breq	.+38     	; 0xf8c <__addsf3x+0x5c>
     f66:	59 3f       	cpi	r21, 0xF9	; 249
     f68:	50 f4       	brcc	.+20     	; 0xf7e <__addsf3x+0x4e>
     f6a:	50 3e       	cpi	r21, 0xE0	; 224
     f6c:	68 f1       	brcs	.+90     	; 0xfc8 <__addsf3x+0x98>
     f6e:	1a 16       	cp	r1, r26
     f70:	f0 40       	sbci	r31, 0x00	; 0
     f72:	a2 2f       	mov	r26, r18
     f74:	23 2f       	mov	r18, r19
     f76:	34 2f       	mov	r19, r20
     f78:	44 27       	eor	r20, r20
     f7a:	58 5f       	subi	r21, 0xF8	; 248
     f7c:	f3 cf       	rjmp	.-26     	; 0xf64 <__addsf3x+0x34>
     f7e:	46 95       	lsr	r20
     f80:	37 95       	ror	r19
     f82:	27 95       	ror	r18
     f84:	a7 95       	ror	r26
     f86:	f0 40       	sbci	r31, 0x00	; 0
     f88:	53 95       	inc	r21
     f8a:	c9 f7       	brne	.-14     	; 0xf7e <__addsf3x+0x4e>
     f8c:	7e f4       	brtc	.+30     	; 0xfac <__addsf3x+0x7c>
     f8e:	1f 16       	cp	r1, r31
     f90:	ba 0b       	sbc	r27, r26
     f92:	62 0b       	sbc	r22, r18
     f94:	73 0b       	sbc	r23, r19
     f96:	84 0b       	sbc	r24, r20
     f98:	ba f0       	brmi	.+46     	; 0xfc8 <__addsf3x+0x98>
     f9a:	91 50       	subi	r25, 0x01	; 1
     f9c:	a1 f0       	breq	.+40     	; 0xfc6 <__addsf3x+0x96>
     f9e:	ff 0f       	add	r31, r31
     fa0:	bb 1f       	adc	r27, r27
     fa2:	66 1f       	adc	r22, r22
     fa4:	77 1f       	adc	r23, r23
     fa6:	88 1f       	adc	r24, r24
     fa8:	c2 f7       	brpl	.-16     	; 0xf9a <__addsf3x+0x6a>
     faa:	0e c0       	rjmp	.+28     	; 0xfc8 <__addsf3x+0x98>
     fac:	ba 0f       	add	r27, r26
     fae:	62 1f       	adc	r22, r18
     fb0:	73 1f       	adc	r23, r19
     fb2:	84 1f       	adc	r24, r20
     fb4:	48 f4       	brcc	.+18     	; 0xfc8 <__addsf3x+0x98>
     fb6:	87 95       	ror	r24
     fb8:	77 95       	ror	r23
     fba:	67 95       	ror	r22
     fbc:	b7 95       	ror	r27
     fbe:	f7 95       	ror	r31
     fc0:	9e 3f       	cpi	r25, 0xFE	; 254
     fc2:	08 f0       	brcs	.+2      	; 0xfc6 <__addsf3x+0x96>
     fc4:	b3 cf       	rjmp	.-154    	; 0xf2c <__addsf3+0x1e>
     fc6:	93 95       	inc	r25
     fc8:	88 0f       	add	r24, r24
     fca:	08 f0       	brcs	.+2      	; 0xfce <__addsf3x+0x9e>
     fcc:	99 27       	eor	r25, r25
     fce:	ee 0f       	add	r30, r30
     fd0:	97 95       	ror	r25
     fd2:	87 95       	ror	r24
     fd4:	08 95       	ret

00000fd6 <__divsf3>:
     fd6:	0c d0       	rcall	.+24     	; 0xff0 <__divsf3x>
     fd8:	eb c0       	rjmp	.+470    	; 0x11b0 <__fp_round>
     fda:	e3 d0       	rcall	.+454    	; 0x11a2 <__fp_pscB>
     fdc:	40 f0       	brcs	.+16     	; 0xfee <__divsf3+0x18>
     fde:	da d0       	rcall	.+436    	; 0x1194 <__fp_pscA>
     fe0:	30 f0       	brcs	.+12     	; 0xfee <__divsf3+0x18>
     fe2:	21 f4       	brne	.+8      	; 0xfec <__divsf3+0x16>
     fe4:	5f 3f       	cpi	r21, 0xFF	; 255
     fe6:	19 f0       	breq	.+6      	; 0xfee <__divsf3+0x18>
     fe8:	cc c0       	rjmp	.+408    	; 0x1182 <__fp_inf>
     fea:	51 11       	cpse	r21, r1
     fec:	15 c1       	rjmp	.+554    	; 0x1218 <__fp_szero>
     fee:	cf c0       	rjmp	.+414    	; 0x118e <__fp_nan>

00000ff0 <__divsf3x>:
     ff0:	f0 d0       	rcall	.+480    	; 0x11d2 <__fp_split3>
     ff2:	98 f3       	brcs	.-26     	; 0xfda <__divsf3+0x4>

00000ff4 <__divsf3_pse>:
     ff4:	99 23       	and	r25, r25
     ff6:	c9 f3       	breq	.-14     	; 0xfea <__divsf3+0x14>
     ff8:	55 23       	and	r21, r21
     ffa:	b1 f3       	breq	.-20     	; 0xfe8 <__divsf3+0x12>
     ffc:	95 1b       	sub	r25, r21
     ffe:	55 0b       	sbc	r21, r21
    1000:	bb 27       	eor	r27, r27
    1002:	aa 27       	eor	r26, r26
    1004:	62 17       	cp	r22, r18
    1006:	73 07       	cpc	r23, r19
    1008:	84 07       	cpc	r24, r20
    100a:	38 f0       	brcs	.+14     	; 0x101a <__divsf3_pse+0x26>
    100c:	9f 5f       	subi	r25, 0xFF	; 255
    100e:	5f 4f       	sbci	r21, 0xFF	; 255
    1010:	22 0f       	add	r18, r18
    1012:	33 1f       	adc	r19, r19
    1014:	44 1f       	adc	r20, r20
    1016:	aa 1f       	adc	r26, r26
    1018:	a9 f3       	breq	.-22     	; 0x1004 <__divsf3_pse+0x10>
    101a:	33 d0       	rcall	.+102    	; 0x1082 <__divsf3_pse+0x8e>
    101c:	0e 2e       	mov	r0, r30
    101e:	3a f0       	brmi	.+14     	; 0x102e <__divsf3_pse+0x3a>
    1020:	e0 e8       	ldi	r30, 0x80	; 128
    1022:	30 d0       	rcall	.+96     	; 0x1084 <__divsf3_pse+0x90>
    1024:	91 50       	subi	r25, 0x01	; 1
    1026:	50 40       	sbci	r21, 0x00	; 0
    1028:	e6 95       	lsr	r30
    102a:	00 1c       	adc	r0, r0
    102c:	ca f7       	brpl	.-14     	; 0x1020 <__divsf3_pse+0x2c>
    102e:	29 d0       	rcall	.+82     	; 0x1082 <__divsf3_pse+0x8e>
    1030:	fe 2f       	mov	r31, r30
    1032:	27 d0       	rcall	.+78     	; 0x1082 <__divsf3_pse+0x8e>
    1034:	66 0f       	add	r22, r22
    1036:	77 1f       	adc	r23, r23
    1038:	88 1f       	adc	r24, r24
    103a:	bb 1f       	adc	r27, r27
    103c:	26 17       	cp	r18, r22
    103e:	37 07       	cpc	r19, r23
    1040:	48 07       	cpc	r20, r24
    1042:	ab 07       	cpc	r26, r27
    1044:	b0 e8       	ldi	r27, 0x80	; 128
    1046:	09 f0       	breq	.+2      	; 0x104a <__divsf3_pse+0x56>
    1048:	bb 0b       	sbc	r27, r27
    104a:	80 2d       	mov	r24, r0
    104c:	bf 01       	movw	r22, r30
    104e:	ff 27       	eor	r31, r31
    1050:	93 58       	subi	r25, 0x83	; 131
    1052:	5f 4f       	sbci	r21, 0xFF	; 255
    1054:	2a f0       	brmi	.+10     	; 0x1060 <__divsf3_pse+0x6c>
    1056:	9e 3f       	cpi	r25, 0xFE	; 254
    1058:	51 05       	cpc	r21, r1
    105a:	68 f0       	brcs	.+26     	; 0x1076 <__divsf3_pse+0x82>
    105c:	92 c0       	rjmp	.+292    	; 0x1182 <__fp_inf>
    105e:	dc c0       	rjmp	.+440    	; 0x1218 <__fp_szero>
    1060:	5f 3f       	cpi	r21, 0xFF	; 255
    1062:	ec f3       	brlt	.-6      	; 0x105e <__divsf3_pse+0x6a>
    1064:	98 3e       	cpi	r25, 0xE8	; 232
    1066:	dc f3       	brlt	.-10     	; 0x105e <__divsf3_pse+0x6a>
    1068:	86 95       	lsr	r24
    106a:	77 95       	ror	r23
    106c:	67 95       	ror	r22
    106e:	b7 95       	ror	r27
    1070:	f7 95       	ror	r31
    1072:	9f 5f       	subi	r25, 0xFF	; 255
    1074:	c9 f7       	brne	.-14     	; 0x1068 <__divsf3_pse+0x74>
    1076:	88 0f       	add	r24, r24
    1078:	91 1d       	adc	r25, r1
    107a:	96 95       	lsr	r25
    107c:	87 95       	ror	r24
    107e:	97 f9       	bld	r25, 7
    1080:	08 95       	ret
    1082:	e1 e0       	ldi	r30, 0x01	; 1
    1084:	66 0f       	add	r22, r22
    1086:	77 1f       	adc	r23, r23
    1088:	88 1f       	adc	r24, r24
    108a:	bb 1f       	adc	r27, r27
    108c:	62 17       	cp	r22, r18
    108e:	73 07       	cpc	r23, r19
    1090:	84 07       	cpc	r24, r20
    1092:	ba 07       	cpc	r27, r26
    1094:	20 f0       	brcs	.+8      	; 0x109e <__divsf3_pse+0xaa>
    1096:	62 1b       	sub	r22, r18
    1098:	73 0b       	sbc	r23, r19
    109a:	84 0b       	sbc	r24, r20
    109c:	ba 0b       	sbc	r27, r26
    109e:	ee 1f       	adc	r30, r30
    10a0:	88 f7       	brcc	.-30     	; 0x1084 <__divsf3_pse+0x90>
    10a2:	e0 95       	com	r30
    10a4:	08 95       	ret

000010a6 <__fixsfsi>:
    10a6:	04 d0       	rcall	.+8      	; 0x10b0 <__fixunssfsi>
    10a8:	68 94       	set
    10aa:	b1 11       	cpse	r27, r1
    10ac:	b5 c0       	rjmp	.+362    	; 0x1218 <__fp_szero>
    10ae:	08 95       	ret

000010b0 <__fixunssfsi>:
    10b0:	98 d0       	rcall	.+304    	; 0x11e2 <__fp_splitA>
    10b2:	88 f0       	brcs	.+34     	; 0x10d6 <__fixunssfsi+0x26>
    10b4:	9f 57       	subi	r25, 0x7F	; 127
    10b6:	90 f0       	brcs	.+36     	; 0x10dc <__fixunssfsi+0x2c>
    10b8:	b9 2f       	mov	r27, r25
    10ba:	99 27       	eor	r25, r25
    10bc:	b7 51       	subi	r27, 0x17	; 23
    10be:	a0 f0       	brcs	.+40     	; 0x10e8 <__fixunssfsi+0x38>
    10c0:	d1 f0       	breq	.+52     	; 0x10f6 <__fixunssfsi+0x46>
    10c2:	66 0f       	add	r22, r22
    10c4:	77 1f       	adc	r23, r23
    10c6:	88 1f       	adc	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	1a f0       	brmi	.+6      	; 0x10d2 <__fixunssfsi+0x22>
    10cc:	ba 95       	dec	r27
    10ce:	c9 f7       	brne	.-14     	; 0x10c2 <__fixunssfsi+0x12>
    10d0:	12 c0       	rjmp	.+36     	; 0x10f6 <__fixunssfsi+0x46>
    10d2:	b1 30       	cpi	r27, 0x01	; 1
    10d4:	81 f0       	breq	.+32     	; 0x10f6 <__fixunssfsi+0x46>
    10d6:	9f d0       	rcall	.+318    	; 0x1216 <__fp_zero>
    10d8:	b1 e0       	ldi	r27, 0x01	; 1
    10da:	08 95       	ret
    10dc:	9c c0       	rjmp	.+312    	; 0x1216 <__fp_zero>
    10de:	67 2f       	mov	r22, r23
    10e0:	78 2f       	mov	r23, r24
    10e2:	88 27       	eor	r24, r24
    10e4:	b8 5f       	subi	r27, 0xF8	; 248
    10e6:	39 f0       	breq	.+14     	; 0x10f6 <__fixunssfsi+0x46>
    10e8:	b9 3f       	cpi	r27, 0xF9	; 249
    10ea:	cc f3       	brlt	.-14     	; 0x10de <__fixunssfsi+0x2e>
    10ec:	86 95       	lsr	r24
    10ee:	77 95       	ror	r23
    10f0:	67 95       	ror	r22
    10f2:	b3 95       	inc	r27
    10f4:	d9 f7       	brne	.-10     	; 0x10ec <__fixunssfsi+0x3c>
    10f6:	3e f4       	brtc	.+14     	; 0x1106 <__fixunssfsi+0x56>
    10f8:	90 95       	com	r25
    10fa:	80 95       	com	r24
    10fc:	70 95       	com	r23
    10fe:	61 95       	neg	r22
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	8f 4f       	sbci	r24, 0xFF	; 255
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	08 95       	ret

00001108 <__floatunsisf>:
    1108:	e8 94       	clt
    110a:	09 c0       	rjmp	.+18     	; 0x111e <__floatsisf+0x12>

0000110c <__floatsisf>:
    110c:	97 fb       	bst	r25, 7
    110e:	3e f4       	brtc	.+14     	; 0x111e <__floatsisf+0x12>
    1110:	90 95       	com	r25
    1112:	80 95       	com	r24
    1114:	70 95       	com	r23
    1116:	61 95       	neg	r22
    1118:	7f 4f       	sbci	r23, 0xFF	; 255
    111a:	8f 4f       	sbci	r24, 0xFF	; 255
    111c:	9f 4f       	sbci	r25, 0xFF	; 255
    111e:	99 23       	and	r25, r25
    1120:	a9 f0       	breq	.+42     	; 0x114c <__floatsisf+0x40>
    1122:	f9 2f       	mov	r31, r25
    1124:	96 e9       	ldi	r25, 0x96	; 150
    1126:	bb 27       	eor	r27, r27
    1128:	93 95       	inc	r25
    112a:	f6 95       	lsr	r31
    112c:	87 95       	ror	r24
    112e:	77 95       	ror	r23
    1130:	67 95       	ror	r22
    1132:	b7 95       	ror	r27
    1134:	f1 11       	cpse	r31, r1
    1136:	f8 cf       	rjmp	.-16     	; 0x1128 <__floatsisf+0x1c>
    1138:	fa f4       	brpl	.+62     	; 0x1178 <__floatsisf+0x6c>
    113a:	bb 0f       	add	r27, r27
    113c:	11 f4       	brne	.+4      	; 0x1142 <__floatsisf+0x36>
    113e:	60 ff       	sbrs	r22, 0
    1140:	1b c0       	rjmp	.+54     	; 0x1178 <__floatsisf+0x6c>
    1142:	6f 5f       	subi	r22, 0xFF	; 255
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
    1146:	8f 4f       	sbci	r24, 0xFF	; 255
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	16 c0       	rjmp	.+44     	; 0x1178 <__floatsisf+0x6c>
    114c:	88 23       	and	r24, r24
    114e:	11 f0       	breq	.+4      	; 0x1154 <__floatsisf+0x48>
    1150:	96 e9       	ldi	r25, 0x96	; 150
    1152:	11 c0       	rjmp	.+34     	; 0x1176 <__floatsisf+0x6a>
    1154:	77 23       	and	r23, r23
    1156:	21 f0       	breq	.+8      	; 0x1160 <__floatsisf+0x54>
    1158:	9e e8       	ldi	r25, 0x8E	; 142
    115a:	87 2f       	mov	r24, r23
    115c:	76 2f       	mov	r23, r22
    115e:	05 c0       	rjmp	.+10     	; 0x116a <__floatsisf+0x5e>
    1160:	66 23       	and	r22, r22
    1162:	71 f0       	breq	.+28     	; 0x1180 <__floatsisf+0x74>
    1164:	96 e8       	ldi	r25, 0x86	; 134
    1166:	86 2f       	mov	r24, r22
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	2a f0       	brmi	.+10     	; 0x1178 <__floatsisf+0x6c>
    116e:	9a 95       	dec	r25
    1170:	66 0f       	add	r22, r22
    1172:	77 1f       	adc	r23, r23
    1174:	88 1f       	adc	r24, r24
    1176:	da f7       	brpl	.-10     	; 0x116e <__floatsisf+0x62>
    1178:	88 0f       	add	r24, r24
    117a:	96 95       	lsr	r25
    117c:	87 95       	ror	r24
    117e:	97 f9       	bld	r25, 7
    1180:	08 95       	ret

00001182 <__fp_inf>:
    1182:	97 f9       	bld	r25, 7
    1184:	9f 67       	ori	r25, 0x7F	; 127
    1186:	80 e8       	ldi	r24, 0x80	; 128
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	08 95       	ret

0000118e <__fp_nan>:
    118e:	9f ef       	ldi	r25, 0xFF	; 255
    1190:	80 ec       	ldi	r24, 0xC0	; 192
    1192:	08 95       	ret

00001194 <__fp_pscA>:
    1194:	00 24       	eor	r0, r0
    1196:	0a 94       	dec	r0
    1198:	16 16       	cp	r1, r22
    119a:	17 06       	cpc	r1, r23
    119c:	18 06       	cpc	r1, r24
    119e:	09 06       	cpc	r0, r25
    11a0:	08 95       	ret

000011a2 <__fp_pscB>:
    11a2:	00 24       	eor	r0, r0
    11a4:	0a 94       	dec	r0
    11a6:	12 16       	cp	r1, r18
    11a8:	13 06       	cpc	r1, r19
    11aa:	14 06       	cpc	r1, r20
    11ac:	05 06       	cpc	r0, r21
    11ae:	08 95       	ret

000011b0 <__fp_round>:
    11b0:	09 2e       	mov	r0, r25
    11b2:	03 94       	inc	r0
    11b4:	00 0c       	add	r0, r0
    11b6:	11 f4       	brne	.+4      	; 0x11bc <__fp_round+0xc>
    11b8:	88 23       	and	r24, r24
    11ba:	52 f0       	brmi	.+20     	; 0x11d0 <__fp_round+0x20>
    11bc:	bb 0f       	add	r27, r27
    11be:	40 f4       	brcc	.+16     	; 0x11d0 <__fp_round+0x20>
    11c0:	bf 2b       	or	r27, r31
    11c2:	11 f4       	brne	.+4      	; 0x11c8 <__fp_round+0x18>
    11c4:	60 ff       	sbrs	r22, 0
    11c6:	04 c0       	rjmp	.+8      	; 0x11d0 <__fp_round+0x20>
    11c8:	6f 5f       	subi	r22, 0xFF	; 255
    11ca:	7f 4f       	sbci	r23, 0xFF	; 255
    11cc:	8f 4f       	sbci	r24, 0xFF	; 255
    11ce:	9f 4f       	sbci	r25, 0xFF	; 255
    11d0:	08 95       	ret

000011d2 <__fp_split3>:
    11d2:	57 fd       	sbrc	r21, 7
    11d4:	90 58       	subi	r25, 0x80	; 128
    11d6:	44 0f       	add	r20, r20
    11d8:	55 1f       	adc	r21, r21
    11da:	59 f0       	breq	.+22     	; 0x11f2 <__fp_splitA+0x10>
    11dc:	5f 3f       	cpi	r21, 0xFF	; 255
    11de:	71 f0       	breq	.+28     	; 0x11fc <__fp_splitA+0x1a>
    11e0:	47 95       	ror	r20

000011e2 <__fp_splitA>:
    11e2:	88 0f       	add	r24, r24
    11e4:	97 fb       	bst	r25, 7
    11e6:	99 1f       	adc	r25, r25
    11e8:	61 f0       	breq	.+24     	; 0x1202 <__fp_splitA+0x20>
    11ea:	9f 3f       	cpi	r25, 0xFF	; 255
    11ec:	79 f0       	breq	.+30     	; 0x120c <__fp_splitA+0x2a>
    11ee:	87 95       	ror	r24
    11f0:	08 95       	ret
    11f2:	12 16       	cp	r1, r18
    11f4:	13 06       	cpc	r1, r19
    11f6:	14 06       	cpc	r1, r20
    11f8:	55 1f       	adc	r21, r21
    11fa:	f2 cf       	rjmp	.-28     	; 0x11e0 <__fp_split3+0xe>
    11fc:	46 95       	lsr	r20
    11fe:	f1 df       	rcall	.-30     	; 0x11e2 <__fp_splitA>
    1200:	08 c0       	rjmp	.+16     	; 0x1212 <__fp_splitA+0x30>
    1202:	16 16       	cp	r1, r22
    1204:	17 06       	cpc	r1, r23
    1206:	18 06       	cpc	r1, r24
    1208:	99 1f       	adc	r25, r25
    120a:	f1 cf       	rjmp	.-30     	; 0x11ee <__fp_splitA+0xc>
    120c:	86 95       	lsr	r24
    120e:	71 05       	cpc	r23, r1
    1210:	61 05       	cpc	r22, r1
    1212:	08 94       	sec
    1214:	08 95       	ret

00001216 <__fp_zero>:
    1216:	e8 94       	clt

00001218 <__fp_szero>:
    1218:	bb 27       	eor	r27, r27
    121a:	66 27       	eor	r22, r22
    121c:	77 27       	eor	r23, r23
    121e:	cb 01       	movw	r24, r22
    1220:	97 f9       	bld	r25, 7
    1222:	08 95       	ret

00001224 <__mulsf3>:
    1224:	0b d0       	rcall	.+22     	; 0x123c <__mulsf3x>
    1226:	c4 cf       	rjmp	.-120    	; 0x11b0 <__fp_round>
    1228:	b5 df       	rcall	.-150    	; 0x1194 <__fp_pscA>
    122a:	28 f0       	brcs	.+10     	; 0x1236 <__mulsf3+0x12>
    122c:	ba df       	rcall	.-140    	; 0x11a2 <__fp_pscB>
    122e:	18 f0       	brcs	.+6      	; 0x1236 <__mulsf3+0x12>
    1230:	95 23       	and	r25, r21
    1232:	09 f0       	breq	.+2      	; 0x1236 <__mulsf3+0x12>
    1234:	a6 cf       	rjmp	.-180    	; 0x1182 <__fp_inf>
    1236:	ab cf       	rjmp	.-170    	; 0x118e <__fp_nan>
    1238:	11 24       	eor	r1, r1
    123a:	ee cf       	rjmp	.-36     	; 0x1218 <__fp_szero>

0000123c <__mulsf3x>:
    123c:	ca df       	rcall	.-108    	; 0x11d2 <__fp_split3>
    123e:	a0 f3       	brcs	.-24     	; 0x1228 <__mulsf3+0x4>

00001240 <__mulsf3_pse>:
    1240:	95 9f       	mul	r25, r21
    1242:	d1 f3       	breq	.-12     	; 0x1238 <__mulsf3+0x14>
    1244:	95 0f       	add	r25, r21
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	55 1f       	adc	r21, r21
    124a:	62 9f       	mul	r22, r18
    124c:	f0 01       	movw	r30, r0
    124e:	72 9f       	mul	r23, r18
    1250:	bb 27       	eor	r27, r27
    1252:	f0 0d       	add	r31, r0
    1254:	b1 1d       	adc	r27, r1
    1256:	63 9f       	mul	r22, r19
    1258:	aa 27       	eor	r26, r26
    125a:	f0 0d       	add	r31, r0
    125c:	b1 1d       	adc	r27, r1
    125e:	aa 1f       	adc	r26, r26
    1260:	64 9f       	mul	r22, r20
    1262:	66 27       	eor	r22, r22
    1264:	b0 0d       	add	r27, r0
    1266:	a1 1d       	adc	r26, r1
    1268:	66 1f       	adc	r22, r22
    126a:	82 9f       	mul	r24, r18
    126c:	22 27       	eor	r18, r18
    126e:	b0 0d       	add	r27, r0
    1270:	a1 1d       	adc	r26, r1
    1272:	62 1f       	adc	r22, r18
    1274:	73 9f       	mul	r23, r19
    1276:	b0 0d       	add	r27, r0
    1278:	a1 1d       	adc	r26, r1
    127a:	62 1f       	adc	r22, r18
    127c:	83 9f       	mul	r24, r19
    127e:	a0 0d       	add	r26, r0
    1280:	61 1d       	adc	r22, r1
    1282:	22 1f       	adc	r18, r18
    1284:	74 9f       	mul	r23, r20
    1286:	33 27       	eor	r19, r19
    1288:	a0 0d       	add	r26, r0
    128a:	61 1d       	adc	r22, r1
    128c:	23 1f       	adc	r18, r19
    128e:	84 9f       	mul	r24, r20
    1290:	60 0d       	add	r22, r0
    1292:	21 1d       	adc	r18, r1
    1294:	82 2f       	mov	r24, r18
    1296:	76 2f       	mov	r23, r22
    1298:	6a 2f       	mov	r22, r26
    129a:	11 24       	eor	r1, r1
    129c:	9f 57       	subi	r25, 0x7F	; 127
    129e:	50 40       	sbci	r21, 0x00	; 0
    12a0:	8a f0       	brmi	.+34     	; 0x12c4 <__mulsf3_pse+0x84>
    12a2:	e1 f0       	breq	.+56     	; 0x12dc <__mulsf3_pse+0x9c>
    12a4:	88 23       	and	r24, r24
    12a6:	4a f0       	brmi	.+18     	; 0x12ba <__mulsf3_pse+0x7a>
    12a8:	ee 0f       	add	r30, r30
    12aa:	ff 1f       	adc	r31, r31
    12ac:	bb 1f       	adc	r27, r27
    12ae:	66 1f       	adc	r22, r22
    12b0:	77 1f       	adc	r23, r23
    12b2:	88 1f       	adc	r24, r24
    12b4:	91 50       	subi	r25, 0x01	; 1
    12b6:	50 40       	sbci	r21, 0x00	; 0
    12b8:	a9 f7       	brne	.-22     	; 0x12a4 <__mulsf3_pse+0x64>
    12ba:	9e 3f       	cpi	r25, 0xFE	; 254
    12bc:	51 05       	cpc	r21, r1
    12be:	70 f0       	brcs	.+28     	; 0x12dc <__mulsf3_pse+0x9c>
    12c0:	60 cf       	rjmp	.-320    	; 0x1182 <__fp_inf>
    12c2:	aa cf       	rjmp	.-172    	; 0x1218 <__fp_szero>
    12c4:	5f 3f       	cpi	r21, 0xFF	; 255
    12c6:	ec f3       	brlt	.-6      	; 0x12c2 <__mulsf3_pse+0x82>
    12c8:	98 3e       	cpi	r25, 0xE8	; 232
    12ca:	dc f3       	brlt	.-10     	; 0x12c2 <__mulsf3_pse+0x82>
    12cc:	86 95       	lsr	r24
    12ce:	77 95       	ror	r23
    12d0:	67 95       	ror	r22
    12d2:	b7 95       	ror	r27
    12d4:	f7 95       	ror	r31
    12d6:	e7 95       	ror	r30
    12d8:	9f 5f       	subi	r25, 0xFF	; 255
    12da:	c1 f7       	brne	.-16     	; 0x12cc <__mulsf3_pse+0x8c>
    12dc:	fe 2b       	or	r31, r30
    12de:	88 0f       	add	r24, r24
    12e0:	91 1d       	adc	r25, r1
    12e2:	96 95       	lsr	r25
    12e4:	87 95       	ror	r24
    12e6:	97 f9       	bld	r25, 7
    12e8:	08 95       	ret

000012ea <vfprintf>:
    12ea:	2f 92       	push	r2
    12ec:	3f 92       	push	r3
    12ee:	4f 92       	push	r4
    12f0:	5f 92       	push	r5
    12f2:	6f 92       	push	r6
    12f4:	7f 92       	push	r7
    12f6:	8f 92       	push	r8
    12f8:	9f 92       	push	r9
    12fa:	af 92       	push	r10
    12fc:	bf 92       	push	r11
    12fe:	cf 92       	push	r12
    1300:	df 92       	push	r13
    1302:	ef 92       	push	r14
    1304:	ff 92       	push	r15
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	63 97       	sbiw	r28, 0x13	; 19
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	7c 01       	movw	r14, r24
    1320:	1b 01       	movw	r2, r22
    1322:	6a 01       	movw	r12, r20
    1324:	fc 01       	movw	r30, r24
    1326:	17 82       	std	Z+7, r1	; 0x07
    1328:	16 82       	std	Z+6, r1	; 0x06
    132a:	83 81       	ldd	r24, Z+3	; 0x03
    132c:	81 ff       	sbrs	r24, 1
    132e:	49 c3       	rjmp	.+1682   	; 0x19c2 <vfprintf+0x6d8>
    1330:	be 01       	movw	r22, r28
    1332:	6f 5f       	subi	r22, 0xFF	; 255
    1334:	7f 4f       	sbci	r23, 0xFF	; 255
    1336:	4b 01       	movw	r8, r22
    1338:	f7 01       	movw	r30, r14
    133a:	93 81       	ldd	r25, Z+3	; 0x03
    133c:	f1 01       	movw	r30, r2
    133e:	93 fd       	sbrc	r25, 3
    1340:	85 91       	lpm	r24, Z+
    1342:	93 ff       	sbrs	r25, 3
    1344:	81 91       	ld	r24, Z+
    1346:	1f 01       	movw	r2, r30
    1348:	88 23       	and	r24, r24
    134a:	09 f4       	brne	.+2      	; 0x134e <vfprintf+0x64>
    134c:	36 c3       	rjmp	.+1644   	; 0x19ba <vfprintf+0x6d0>
    134e:	85 32       	cpi	r24, 0x25	; 37
    1350:	39 f4       	brne	.+14     	; 0x1360 <vfprintf+0x76>
    1352:	93 fd       	sbrc	r25, 3
    1354:	85 91       	lpm	r24, Z+
    1356:	93 ff       	sbrs	r25, 3
    1358:	81 91       	ld	r24, Z+
    135a:	1f 01       	movw	r2, r30
    135c:	85 32       	cpi	r24, 0x25	; 37
    135e:	31 f4       	brne	.+12     	; 0x136c <vfprintf+0x82>
    1360:	b7 01       	movw	r22, r14
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	ae d5       	rcall	.+2908   	; 0x1ec2 <fputc>
    1366:	56 01       	movw	r10, r12
    1368:	65 01       	movw	r12, r10
    136a:	e6 cf       	rjmp	.-52     	; 0x1338 <vfprintf+0x4e>
    136c:	10 e0       	ldi	r17, 0x00	; 0
    136e:	51 2c       	mov	r5, r1
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	20 32       	cpi	r18, 0x20	; 32
    1374:	a0 f4       	brcc	.+40     	; 0x139e <vfprintf+0xb4>
    1376:	8b 32       	cpi	r24, 0x2B	; 43
    1378:	69 f0       	breq	.+26     	; 0x1394 <vfprintf+0xaa>
    137a:	30 f4       	brcc	.+12     	; 0x1388 <vfprintf+0x9e>
    137c:	80 32       	cpi	r24, 0x20	; 32
    137e:	59 f0       	breq	.+22     	; 0x1396 <vfprintf+0xac>
    1380:	83 32       	cpi	r24, 0x23	; 35
    1382:	69 f4       	brne	.+26     	; 0x139e <vfprintf+0xb4>
    1384:	20 61       	ori	r18, 0x10	; 16
    1386:	2c c0       	rjmp	.+88     	; 0x13e0 <vfprintf+0xf6>
    1388:	8d 32       	cpi	r24, 0x2D	; 45
    138a:	39 f0       	breq	.+14     	; 0x139a <vfprintf+0xb0>
    138c:	80 33       	cpi	r24, 0x30	; 48
    138e:	39 f4       	brne	.+14     	; 0x139e <vfprintf+0xb4>
    1390:	21 60       	ori	r18, 0x01	; 1
    1392:	26 c0       	rjmp	.+76     	; 0x13e0 <vfprintf+0xf6>
    1394:	22 60       	ori	r18, 0x02	; 2
    1396:	24 60       	ori	r18, 0x04	; 4
    1398:	23 c0       	rjmp	.+70     	; 0x13e0 <vfprintf+0xf6>
    139a:	28 60       	ori	r18, 0x08	; 8
    139c:	21 c0       	rjmp	.+66     	; 0x13e0 <vfprintf+0xf6>
    139e:	27 fd       	sbrc	r18, 7
    13a0:	27 c0       	rjmp	.+78     	; 0x13f0 <vfprintf+0x106>
    13a2:	30 ed       	ldi	r19, 0xD0	; 208
    13a4:	38 0f       	add	r19, r24
    13a6:	3a 30       	cpi	r19, 0x0A	; 10
    13a8:	78 f4       	brcc	.+30     	; 0x13c8 <vfprintf+0xde>
    13aa:	26 ff       	sbrs	r18, 6
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <vfprintf+0xd0>
    13ae:	fa e0       	ldi	r31, 0x0A	; 10
    13b0:	1f 9f       	mul	r17, r31
    13b2:	30 0d       	add	r19, r0
    13b4:	11 24       	eor	r1, r1
    13b6:	13 2f       	mov	r17, r19
    13b8:	13 c0       	rjmp	.+38     	; 0x13e0 <vfprintf+0xf6>
    13ba:	6a e0       	ldi	r22, 0x0A	; 10
    13bc:	56 9e       	mul	r5, r22
    13be:	30 0d       	add	r19, r0
    13c0:	11 24       	eor	r1, r1
    13c2:	53 2e       	mov	r5, r19
    13c4:	20 62       	ori	r18, 0x20	; 32
    13c6:	0c c0       	rjmp	.+24     	; 0x13e0 <vfprintf+0xf6>
    13c8:	8e 32       	cpi	r24, 0x2E	; 46
    13ca:	21 f4       	brne	.+8      	; 0x13d4 <vfprintf+0xea>
    13cc:	26 fd       	sbrc	r18, 6
    13ce:	f5 c2       	rjmp	.+1514   	; 0x19ba <vfprintf+0x6d0>
    13d0:	20 64       	ori	r18, 0x40	; 64
    13d2:	06 c0       	rjmp	.+12     	; 0x13e0 <vfprintf+0xf6>
    13d4:	8c 36       	cpi	r24, 0x6C	; 108
    13d6:	11 f4       	brne	.+4      	; 0x13dc <vfprintf+0xf2>
    13d8:	20 68       	ori	r18, 0x80	; 128
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <vfprintf+0xf6>
    13dc:	88 36       	cpi	r24, 0x68	; 104
    13de:	41 f4       	brne	.+16     	; 0x13f0 <vfprintf+0x106>
    13e0:	f1 01       	movw	r30, r2
    13e2:	93 fd       	sbrc	r25, 3
    13e4:	85 91       	lpm	r24, Z+
    13e6:	93 ff       	sbrs	r25, 3
    13e8:	81 91       	ld	r24, Z+
    13ea:	1f 01       	movw	r2, r30
    13ec:	81 11       	cpse	r24, r1
    13ee:	c1 cf       	rjmp	.-126    	; 0x1372 <vfprintf+0x88>
    13f0:	9b eb       	ldi	r25, 0xBB	; 187
    13f2:	98 0f       	add	r25, r24
    13f4:	93 30       	cpi	r25, 0x03	; 3
    13f6:	18 f4       	brcc	.+6      	; 0x13fe <vfprintf+0x114>
    13f8:	20 61       	ori	r18, 0x10	; 16
    13fa:	80 5e       	subi	r24, 0xE0	; 224
    13fc:	06 c0       	rjmp	.+12     	; 0x140a <vfprintf+0x120>
    13fe:	9b e9       	ldi	r25, 0x9B	; 155
    1400:	98 0f       	add	r25, r24
    1402:	93 30       	cpi	r25, 0x03	; 3
    1404:	08 f0       	brcs	.+2      	; 0x1408 <vfprintf+0x11e>
    1406:	9a c1       	rjmp	.+820    	; 0x173c <vfprintf+0x452>
    1408:	2f 7e       	andi	r18, 0xEF	; 239
    140a:	26 ff       	sbrs	r18, 6
    140c:	16 e0       	ldi	r17, 0x06	; 6
    140e:	2f 73       	andi	r18, 0x3F	; 63
    1410:	72 2e       	mov	r7, r18
    1412:	85 36       	cpi	r24, 0x65	; 101
    1414:	21 f4       	brne	.+8      	; 0x141e <vfprintf+0x134>
    1416:	f2 2f       	mov	r31, r18
    1418:	f0 64       	ori	r31, 0x40	; 64
    141a:	7f 2e       	mov	r7, r31
    141c:	08 c0       	rjmp	.+16     	; 0x142e <vfprintf+0x144>
    141e:	86 36       	cpi	r24, 0x66	; 102
    1420:	21 f4       	brne	.+8      	; 0x142a <vfprintf+0x140>
    1422:	62 2f       	mov	r22, r18
    1424:	60 68       	ori	r22, 0x80	; 128
    1426:	76 2e       	mov	r7, r22
    1428:	02 c0       	rjmp	.+4      	; 0x142e <vfprintf+0x144>
    142a:	11 11       	cpse	r17, r1
    142c:	11 50       	subi	r17, 0x01	; 1
    142e:	77 fe       	sbrs	r7, 7
    1430:	07 c0       	rjmp	.+14     	; 0x1440 <vfprintf+0x156>
    1432:	1c 33       	cpi	r17, 0x3C	; 60
    1434:	48 f4       	brcc	.+18     	; 0x1448 <vfprintf+0x15e>
    1436:	44 24       	eor	r4, r4
    1438:	43 94       	inc	r4
    143a:	41 0e       	add	r4, r17
    143c:	27 e0       	ldi	r18, 0x07	; 7
    143e:	0b c0       	rjmp	.+22     	; 0x1456 <vfprintf+0x16c>
    1440:	18 30       	cpi	r17, 0x08	; 8
    1442:	30 f4       	brcc	.+12     	; 0x1450 <vfprintf+0x166>
    1444:	21 2f       	mov	r18, r17
    1446:	06 c0       	rjmp	.+12     	; 0x1454 <vfprintf+0x16a>
    1448:	27 e0       	ldi	r18, 0x07	; 7
    144a:	4c e3       	ldi	r20, 0x3C	; 60
    144c:	44 2e       	mov	r4, r20
    144e:	03 c0       	rjmp	.+6      	; 0x1456 <vfprintf+0x16c>
    1450:	27 e0       	ldi	r18, 0x07	; 7
    1452:	17 e0       	ldi	r17, 0x07	; 7
    1454:	41 2c       	mov	r4, r1
    1456:	56 01       	movw	r10, r12
    1458:	74 e0       	ldi	r23, 0x04	; 4
    145a:	a7 0e       	add	r10, r23
    145c:	b1 1c       	adc	r11, r1
    145e:	f6 01       	movw	r30, r12
    1460:	60 81       	ld	r22, Z
    1462:	71 81       	ldd	r23, Z+1	; 0x01
    1464:	82 81       	ldd	r24, Z+2	; 0x02
    1466:	93 81       	ldd	r25, Z+3	; 0x03
    1468:	04 2d       	mov	r16, r4
    146a:	a4 01       	movw	r20, r8
    146c:	f2 d3       	rcall	.+2020   	; 0x1c52 <__ftoa_engine>
    146e:	6c 01       	movw	r12, r24
    1470:	09 81       	ldd	r16, Y+1	; 0x01
    1472:	00 ff       	sbrs	r16, 0
    1474:	02 c0       	rjmp	.+4      	; 0x147a <vfprintf+0x190>
    1476:	03 ff       	sbrs	r16, 3
    1478:	06 c0       	rjmp	.+12     	; 0x1486 <vfprintf+0x19c>
    147a:	71 fc       	sbrc	r7, 1
    147c:	07 c0       	rjmp	.+14     	; 0x148c <vfprintf+0x1a2>
    147e:	72 fc       	sbrc	r7, 2
    1480:	08 c0       	rjmp	.+16     	; 0x1492 <vfprintf+0x1a8>
    1482:	61 2c       	mov	r6, r1
    1484:	08 c0       	rjmp	.+16     	; 0x1496 <vfprintf+0x1ac>
    1486:	3d e2       	ldi	r19, 0x2D	; 45
    1488:	63 2e       	mov	r6, r19
    148a:	05 c0       	rjmp	.+10     	; 0x1496 <vfprintf+0x1ac>
    148c:	2b e2       	ldi	r18, 0x2B	; 43
    148e:	62 2e       	mov	r6, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <vfprintf+0x1ac>
    1492:	90 e2       	ldi	r25, 0x20	; 32
    1494:	69 2e       	mov	r6, r25
    1496:	80 2f       	mov	r24, r16
    1498:	8c 70       	andi	r24, 0x0C	; 12
    149a:	81 f1       	breq	.+96     	; 0x14fc <vfprintf+0x212>
    149c:	66 20       	and	r6, r6
    149e:	11 f0       	breq	.+4      	; 0x14a4 <vfprintf+0x1ba>
    14a0:	84 e0       	ldi	r24, 0x04	; 4
    14a2:	01 c0       	rjmp	.+2      	; 0x14a6 <vfprintf+0x1bc>
    14a4:	83 e0       	ldi	r24, 0x03	; 3
    14a6:	85 15       	cp	r24, r5
    14a8:	10 f0       	brcs	.+4      	; 0x14ae <vfprintf+0x1c4>
    14aa:	51 2c       	mov	r5, r1
    14ac:	0a c0       	rjmp	.+20     	; 0x14c2 <vfprintf+0x1d8>
    14ae:	58 1a       	sub	r5, r24
    14b0:	73 fc       	sbrc	r7, 3
    14b2:	07 c0       	rjmp	.+14     	; 0x14c2 <vfprintf+0x1d8>
    14b4:	b7 01       	movw	r22, r14
    14b6:	80 e2       	ldi	r24, 0x20	; 32
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	03 d5       	rcall	.+2566   	; 0x1ec2 <fputc>
    14bc:	5a 94       	dec	r5
    14be:	d1 f7       	brne	.-12     	; 0x14b4 <vfprintf+0x1ca>
    14c0:	f4 cf       	rjmp	.-24     	; 0x14aa <vfprintf+0x1c0>
    14c2:	66 20       	and	r6, r6
    14c4:	21 f0       	breq	.+8      	; 0x14ce <vfprintf+0x1e4>
    14c6:	b7 01       	movw	r22, r14
    14c8:	86 2d       	mov	r24, r6
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	fa d4       	rcall	.+2548   	; 0x1ec2 <fputc>
    14ce:	03 fd       	sbrc	r16, 3
    14d0:	03 c0       	rjmp	.+6      	; 0x14d8 <vfprintf+0x1ee>
    14d2:	0a e8       	ldi	r16, 0x8A	; 138
    14d4:	11 e0       	ldi	r17, 0x01	; 1
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <vfprintf+0x1f2>
    14d8:	06 e8       	ldi	r16, 0x86	; 134
    14da:	11 e0       	ldi	r17, 0x01	; 1
    14dc:	f7 2d       	mov	r31, r7
    14de:	f0 71       	andi	r31, 0x10	; 16
    14e0:	7f 2e       	mov	r7, r31
    14e2:	f8 01       	movw	r30, r16
    14e4:	84 91       	lpm	r24, Z
    14e6:	88 23       	and	r24, r24
    14e8:	09 f4       	brne	.+2      	; 0x14ec <vfprintf+0x202>
    14ea:	5e c2       	rjmp	.+1212   	; 0x19a8 <vfprintf+0x6be>
    14ec:	71 10       	cpse	r7, r1
    14ee:	80 52       	subi	r24, 0x20	; 32
    14f0:	b7 01       	movw	r22, r14
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	e6 d4       	rcall	.+2508   	; 0x1ec2 <fputc>
    14f6:	0f 5f       	subi	r16, 0xFF	; 255
    14f8:	1f 4f       	sbci	r17, 0xFF	; 255
    14fa:	f3 cf       	rjmp	.-26     	; 0x14e2 <vfprintf+0x1f8>
    14fc:	77 fe       	sbrs	r7, 7
    14fe:	0f c0       	rjmp	.+30     	; 0x151e <vfprintf+0x234>
    1500:	4c 0c       	add	r4, r12
    1502:	04 ff       	sbrs	r16, 4
    1504:	04 c0       	rjmp	.+8      	; 0x150e <vfprintf+0x224>
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	81 33       	cpi	r24, 0x31	; 49
    150a:	09 f4       	brne	.+2      	; 0x150e <vfprintf+0x224>
    150c:	4a 94       	dec	r4
    150e:	14 14       	cp	r1, r4
    1510:	74 f5       	brge	.+92     	; 0x156e <vfprintf+0x284>
    1512:	f8 e0       	ldi	r31, 0x08	; 8
    1514:	f4 15       	cp	r31, r4
    1516:	78 f5       	brcc	.+94     	; 0x1576 <vfprintf+0x28c>
    1518:	88 e0       	ldi	r24, 0x08	; 8
    151a:	48 2e       	mov	r4, r24
    151c:	2c c0       	rjmp	.+88     	; 0x1576 <vfprintf+0x28c>
    151e:	76 fc       	sbrc	r7, 6
    1520:	2a c0       	rjmp	.+84     	; 0x1576 <vfprintf+0x28c>
    1522:	81 2f       	mov	r24, r17
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	8c 15       	cp	r24, r12
    1528:	9d 05       	cpc	r25, r13
    152a:	9c f0       	brlt	.+38     	; 0x1552 <vfprintf+0x268>
    152c:	6c ef       	ldi	r22, 0xFC	; 252
    152e:	c6 16       	cp	r12, r22
    1530:	6f ef       	ldi	r22, 0xFF	; 255
    1532:	d6 06       	cpc	r13, r22
    1534:	74 f0       	brlt	.+28     	; 0x1552 <vfprintf+0x268>
    1536:	77 2d       	mov	r23, r7
    1538:	70 68       	ori	r23, 0x80	; 128
    153a:	77 2e       	mov	r7, r23
    153c:	0a c0       	rjmp	.+20     	; 0x1552 <vfprintf+0x268>
    153e:	e2 e0       	ldi	r30, 0x02	; 2
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	ec 0f       	add	r30, r28
    1544:	fd 1f       	adc	r31, r29
    1546:	e1 0f       	add	r30, r17
    1548:	f1 1d       	adc	r31, r1
    154a:	80 81       	ld	r24, Z
    154c:	80 33       	cpi	r24, 0x30	; 48
    154e:	19 f4       	brne	.+6      	; 0x1556 <vfprintf+0x26c>
    1550:	11 50       	subi	r17, 0x01	; 1
    1552:	11 11       	cpse	r17, r1
    1554:	f4 cf       	rjmp	.-24     	; 0x153e <vfprintf+0x254>
    1556:	77 fe       	sbrs	r7, 7
    1558:	0e c0       	rjmp	.+28     	; 0x1576 <vfprintf+0x28c>
    155a:	44 24       	eor	r4, r4
    155c:	43 94       	inc	r4
    155e:	41 0e       	add	r4, r17
    1560:	81 2f       	mov	r24, r17
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	c8 16       	cp	r12, r24
    1566:	d9 06       	cpc	r13, r25
    1568:	2c f4       	brge	.+10     	; 0x1574 <vfprintf+0x28a>
    156a:	1c 19       	sub	r17, r12
    156c:	04 c0       	rjmp	.+8      	; 0x1576 <vfprintf+0x28c>
    156e:	44 24       	eor	r4, r4
    1570:	43 94       	inc	r4
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <vfprintf+0x28c>
    1574:	10 e0       	ldi	r17, 0x00	; 0
    1576:	77 fe       	sbrs	r7, 7
    1578:	07 c0       	rjmp	.+14     	; 0x1588 <vfprintf+0x29e>
    157a:	1c 14       	cp	r1, r12
    157c:	1d 04       	cpc	r1, r13
    157e:	3c f4       	brge	.+14     	; 0x158e <vfprintf+0x2a4>
    1580:	96 01       	movw	r18, r12
    1582:	2f 5f       	subi	r18, 0xFF	; 255
    1584:	3f 4f       	sbci	r19, 0xFF	; 255
    1586:	05 c0       	rjmp	.+10     	; 0x1592 <vfprintf+0x2a8>
    1588:	25 e0       	ldi	r18, 0x05	; 5
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <vfprintf+0x2a8>
    158e:	21 e0       	ldi	r18, 0x01	; 1
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	66 20       	and	r6, r6
    1594:	11 f0       	breq	.+4      	; 0x159a <vfprintf+0x2b0>
    1596:	2f 5f       	subi	r18, 0xFF	; 255
    1598:	3f 4f       	sbci	r19, 0xFF	; 255
    159a:	11 23       	and	r17, r17
    159c:	31 f0       	breq	.+12     	; 0x15aa <vfprintf+0x2c0>
    159e:	41 2f       	mov	r20, r17
    15a0:	50 e0       	ldi	r21, 0x00	; 0
    15a2:	4f 5f       	subi	r20, 0xFF	; 255
    15a4:	5f 4f       	sbci	r21, 0xFF	; 255
    15a6:	24 0f       	add	r18, r20
    15a8:	35 1f       	adc	r19, r21
    15aa:	45 2d       	mov	r20, r5
    15ac:	50 e0       	ldi	r21, 0x00	; 0
    15ae:	24 17       	cp	r18, r20
    15b0:	35 07       	cpc	r19, r21
    15b2:	14 f4       	brge	.+4      	; 0x15b8 <vfprintf+0x2ce>
    15b4:	52 1a       	sub	r5, r18
    15b6:	01 c0       	rjmp	.+2      	; 0x15ba <vfprintf+0x2d0>
    15b8:	51 2c       	mov	r5, r1
    15ba:	87 2d       	mov	r24, r7
    15bc:	89 70       	andi	r24, 0x09	; 9
    15be:	41 f4       	brne	.+16     	; 0x15d0 <vfprintf+0x2e6>
    15c0:	55 20       	and	r5, r5
    15c2:	31 f0       	breq	.+12     	; 0x15d0 <vfprintf+0x2e6>
    15c4:	b7 01       	movw	r22, r14
    15c6:	80 e2       	ldi	r24, 0x20	; 32
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	7b d4       	rcall	.+2294   	; 0x1ec2 <fputc>
    15cc:	5a 94       	dec	r5
    15ce:	f8 cf       	rjmp	.-16     	; 0x15c0 <vfprintf+0x2d6>
    15d0:	66 20       	and	r6, r6
    15d2:	21 f0       	breq	.+8      	; 0x15dc <vfprintf+0x2f2>
    15d4:	b7 01       	movw	r22, r14
    15d6:	86 2d       	mov	r24, r6
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	73 d4       	rcall	.+2278   	; 0x1ec2 <fputc>
    15dc:	73 fc       	sbrc	r7, 3
    15de:	08 c0       	rjmp	.+16     	; 0x15f0 <vfprintf+0x306>
    15e0:	55 20       	and	r5, r5
    15e2:	31 f0       	breq	.+12     	; 0x15f0 <vfprintf+0x306>
    15e4:	b7 01       	movw	r22, r14
    15e6:	80 e3       	ldi	r24, 0x30	; 48
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	6b d4       	rcall	.+2262   	; 0x1ec2 <fputc>
    15ec:	5a 94       	dec	r5
    15ee:	f8 cf       	rjmp	.-16     	; 0x15e0 <vfprintf+0x2f6>
    15f0:	77 fe       	sbrs	r7, 7
    15f2:	5d c0       	rjmp	.+186    	; 0x16ae <vfprintf+0x3c4>
    15f4:	9c 2d       	mov	r25, r12
    15f6:	8d 2d       	mov	r24, r13
    15f8:	d7 fe       	sbrs	r13, 7
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <vfprintf+0x316>
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	69 2e       	mov	r6, r25
    1602:	78 2e       	mov	r7, r24
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	c6 01       	movw	r24, r12
    160a:	84 19       	sub	r24, r4
    160c:	91 09       	sbc	r25, r1
    160e:	9d 87       	std	Y+13, r25	; 0x0d
    1610:	8c 87       	std	Y+12, r24	; 0x0c
    1612:	96 01       	movw	r18, r12
    1614:	26 19       	sub	r18, r6
    1616:	37 09       	sbc	r19, r7
    1618:	28 0d       	add	r18, r8
    161a:	39 1d       	adc	r19, r9
    161c:	81 2f       	mov	r24, r17
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	ee 27       	eor	r30, r30
    1622:	ff 27       	eor	r31, r31
    1624:	e8 1b       	sub	r30, r24
    1626:	f9 0b       	sbc	r31, r25
    1628:	ff 87       	std	Y+15, r31	; 0x0f
    162a:	ee 87       	std	Y+14, r30	; 0x0e
    162c:	ff ef       	ldi	r31, 0xFF	; 255
    162e:	6f 16       	cp	r6, r31
    1630:	7f 06       	cpc	r7, r31
    1632:	61 f4       	brne	.+24     	; 0x164c <vfprintf+0x362>
    1634:	b7 01       	movw	r22, r14
    1636:	8e e2       	ldi	r24, 0x2E	; 46
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	2b 8b       	std	Y+19, r18	; 0x13
    163c:	3a 8b       	std	Y+18, r19	; 0x12
    163e:	48 8b       	std	Y+16, r20	; 0x10
    1640:	59 8b       	std	Y+17, r21	; 0x11
    1642:	3f d4       	rcall	.+2174   	; 0x1ec2 <fputc>
    1644:	59 89       	ldd	r21, Y+17	; 0x11
    1646:	48 89       	ldd	r20, Y+16	; 0x10
    1648:	3a 89       	ldd	r19, Y+18	; 0x12
    164a:	2b 89       	ldd	r18, Y+19	; 0x13
    164c:	c6 14       	cp	r12, r6
    164e:	d7 04       	cpc	r13, r7
    1650:	54 f0       	brlt	.+20     	; 0x1666 <vfprintf+0x37c>
    1652:	6c 85       	ldd	r22, Y+12	; 0x0c
    1654:	7d 85       	ldd	r23, Y+13	; 0x0d
    1656:	66 15       	cp	r22, r6
    1658:	77 05       	cpc	r23, r7
    165a:	2c f4       	brge	.+10     	; 0x1666 <vfprintf+0x37c>
    165c:	f9 01       	movw	r30, r18
    165e:	e4 0f       	add	r30, r20
    1660:	f5 1f       	adc	r31, r21
    1662:	81 81       	ldd	r24, Z+1	; 0x01
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <vfprintf+0x37e>
    1666:	80 e3       	ldi	r24, 0x30	; 48
    1668:	71 e0       	ldi	r23, 0x01	; 1
    166a:	67 1a       	sub	r6, r23
    166c:	71 08       	sbc	r7, r1
    166e:	4f 5f       	subi	r20, 0xFF	; 255
    1670:	5f 4f       	sbci	r21, 0xFF	; 255
    1672:	ee 85       	ldd	r30, Y+14	; 0x0e
    1674:	ff 85       	ldd	r31, Y+15	; 0x0f
    1676:	6e 16       	cp	r6, r30
    1678:	7f 06       	cpc	r7, r31
    167a:	64 f0       	brlt	.+24     	; 0x1694 <vfprintf+0x3aa>
    167c:	b7 01       	movw	r22, r14
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	2b 8b       	std	Y+19, r18	; 0x13
    1682:	3a 8b       	std	Y+18, r19	; 0x12
    1684:	48 8b       	std	Y+16, r20	; 0x10
    1686:	59 8b       	std	Y+17, r21	; 0x11
    1688:	1c d4       	rcall	.+2104   	; 0x1ec2 <fputc>
    168a:	2b 89       	ldd	r18, Y+19	; 0x13
    168c:	3a 89       	ldd	r19, Y+18	; 0x12
    168e:	48 89       	ldd	r20, Y+16	; 0x10
    1690:	59 89       	ldd	r21, Y+17	; 0x11
    1692:	cc cf       	rjmp	.-104    	; 0x162c <vfprintf+0x342>
    1694:	6c 14       	cp	r6, r12
    1696:	7d 04       	cpc	r7, r13
    1698:	39 f4       	brne	.+14     	; 0x16a8 <vfprintf+0x3be>
    169a:	9a 81       	ldd	r25, Y+2	; 0x02
    169c:	96 33       	cpi	r25, 0x36	; 54
    169e:	18 f4       	brcc	.+6      	; 0x16a6 <vfprintf+0x3bc>
    16a0:	95 33       	cpi	r25, 0x35	; 53
    16a2:	11 f4       	brne	.+4      	; 0x16a8 <vfprintf+0x3be>
    16a4:	04 ff       	sbrs	r16, 4
    16a6:	81 e3       	ldi	r24, 0x31	; 49
    16a8:	b7 01       	movw	r22, r14
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	45 c0       	rjmp	.+138    	; 0x1738 <vfprintf+0x44e>
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	81 33       	cpi	r24, 0x31	; 49
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <vfprintf+0x3cc>
    16b4:	0f 7e       	andi	r16, 0xEF	; 239
    16b6:	b7 01       	movw	r22, r14
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	03 d4       	rcall	.+2054   	; 0x1ec2 <fputc>
    16bc:	11 11       	cpse	r17, r1
    16be:	05 c0       	rjmp	.+10     	; 0x16ca <vfprintf+0x3e0>
    16c0:	74 fe       	sbrs	r7, 4
    16c2:	16 c0       	rjmp	.+44     	; 0x16f0 <vfprintf+0x406>
    16c4:	85 e4       	ldi	r24, 0x45	; 69
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	15 c0       	rjmp	.+42     	; 0x16f4 <vfprintf+0x40a>
    16ca:	b7 01       	movw	r22, r14
    16cc:	8e e2       	ldi	r24, 0x2E	; 46
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	f8 d3       	rcall	.+2032   	; 0x1ec2 <fputc>
    16d2:	82 e0       	ldi	r24, 0x02	; 2
    16d4:	66 24       	eor	r6, r6
    16d6:	63 94       	inc	r6
    16d8:	68 0e       	add	r6, r24
    16da:	f4 01       	movw	r30, r8
    16dc:	e8 0f       	add	r30, r24
    16de:	f1 1d       	adc	r31, r1
    16e0:	80 81       	ld	r24, Z
    16e2:	b7 01       	movw	r22, r14
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	ed d3       	rcall	.+2010   	; 0x1ec2 <fputc>
    16e8:	11 50       	subi	r17, 0x01	; 1
    16ea:	51 f3       	breq	.-44     	; 0x16c0 <vfprintf+0x3d6>
    16ec:	86 2d       	mov	r24, r6
    16ee:	f2 cf       	rjmp	.-28     	; 0x16d4 <vfprintf+0x3ea>
    16f0:	85 e6       	ldi	r24, 0x65	; 101
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	b7 01       	movw	r22, r14
    16f6:	e5 d3       	rcall	.+1994   	; 0x1ec2 <fputc>
    16f8:	d7 fc       	sbrc	r13, 7
    16fa:	05 c0       	rjmp	.+10     	; 0x1706 <vfprintf+0x41c>
    16fc:	c1 14       	cp	r12, r1
    16fe:	d1 04       	cpc	r13, r1
    1700:	39 f4       	brne	.+14     	; 0x1710 <vfprintf+0x426>
    1702:	04 ff       	sbrs	r16, 4
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <vfprintf+0x426>
    1706:	d1 94       	neg	r13
    1708:	c1 94       	neg	r12
    170a:	d1 08       	sbc	r13, r1
    170c:	8d e2       	ldi	r24, 0x2D	; 45
    170e:	01 c0       	rjmp	.+2      	; 0x1712 <vfprintf+0x428>
    1710:	8b e2       	ldi	r24, 0x2B	; 43
    1712:	b7 01       	movw	r22, r14
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	d5 d3       	rcall	.+1962   	; 0x1ec2 <fputc>
    1718:	80 e3       	ldi	r24, 0x30	; 48
    171a:	6a e0       	ldi	r22, 0x0A	; 10
    171c:	c6 16       	cp	r12, r22
    171e:	d1 04       	cpc	r13, r1
    1720:	2c f0       	brlt	.+10     	; 0x172c <vfprintf+0x442>
    1722:	8f 5f       	subi	r24, 0xFF	; 255
    1724:	fa e0       	ldi	r31, 0x0A	; 10
    1726:	cf 1a       	sub	r12, r31
    1728:	d1 08       	sbc	r13, r1
    172a:	f7 cf       	rjmp	.-18     	; 0x171a <vfprintf+0x430>
    172c:	b7 01       	movw	r22, r14
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	c8 d3       	rcall	.+1936   	; 0x1ec2 <fputc>
    1732:	b7 01       	movw	r22, r14
    1734:	c6 01       	movw	r24, r12
    1736:	c0 96       	adiw	r24, 0x30	; 48
    1738:	c4 d3       	rcall	.+1928   	; 0x1ec2 <fputc>
    173a:	36 c1       	rjmp	.+620    	; 0x19a8 <vfprintf+0x6be>
    173c:	83 36       	cpi	r24, 0x63	; 99
    173e:	31 f0       	breq	.+12     	; 0x174c <vfprintf+0x462>
    1740:	83 37       	cpi	r24, 0x73	; 115
    1742:	79 f0       	breq	.+30     	; 0x1762 <vfprintf+0x478>
    1744:	83 35       	cpi	r24, 0x53	; 83
    1746:	09 f0       	breq	.+2      	; 0x174a <vfprintf+0x460>
    1748:	54 c0       	rjmp	.+168    	; 0x17f2 <vfprintf+0x508>
    174a:	20 c0       	rjmp	.+64     	; 0x178c <vfprintf+0x4a2>
    174c:	56 01       	movw	r10, r12
    174e:	72 e0       	ldi	r23, 0x02	; 2
    1750:	a7 0e       	add	r10, r23
    1752:	b1 1c       	adc	r11, r1
    1754:	f6 01       	movw	r30, r12
    1756:	80 81       	ld	r24, Z
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	01 e0       	ldi	r16, 0x01	; 1
    175c:	10 e0       	ldi	r17, 0x00	; 0
    175e:	64 01       	movw	r12, r8
    1760:	13 c0       	rjmp	.+38     	; 0x1788 <vfprintf+0x49e>
    1762:	56 01       	movw	r10, r12
    1764:	f2 e0       	ldi	r31, 0x02	; 2
    1766:	af 0e       	add	r10, r31
    1768:	b1 1c       	adc	r11, r1
    176a:	f6 01       	movw	r30, r12
    176c:	c0 80       	ld	r12, Z
    176e:	d1 80       	ldd	r13, Z+1	; 0x01
    1770:	26 ff       	sbrs	r18, 6
    1772:	03 c0       	rjmp	.+6      	; 0x177a <vfprintf+0x490>
    1774:	61 2f       	mov	r22, r17
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	02 c0       	rjmp	.+4      	; 0x177e <vfprintf+0x494>
    177a:	6f ef       	ldi	r22, 0xFF	; 255
    177c:	7f ef       	ldi	r23, 0xFF	; 255
    177e:	c6 01       	movw	r24, r12
    1780:	2b 8b       	std	Y+19, r18	; 0x13
    1782:	4a d3       	rcall	.+1684   	; 0x1e18 <strnlen>
    1784:	8c 01       	movw	r16, r24
    1786:	2b 89       	ldd	r18, Y+19	; 0x13
    1788:	2f 77       	andi	r18, 0x7F	; 127
    178a:	14 c0       	rjmp	.+40     	; 0x17b4 <vfprintf+0x4ca>
    178c:	56 01       	movw	r10, r12
    178e:	f2 e0       	ldi	r31, 0x02	; 2
    1790:	af 0e       	add	r10, r31
    1792:	b1 1c       	adc	r11, r1
    1794:	f6 01       	movw	r30, r12
    1796:	c0 80       	ld	r12, Z
    1798:	d1 80       	ldd	r13, Z+1	; 0x01
    179a:	26 ff       	sbrs	r18, 6
    179c:	03 c0       	rjmp	.+6      	; 0x17a4 <vfprintf+0x4ba>
    179e:	61 2f       	mov	r22, r17
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <vfprintf+0x4be>
    17a4:	6f ef       	ldi	r22, 0xFF	; 255
    17a6:	7f ef       	ldi	r23, 0xFF	; 255
    17a8:	c6 01       	movw	r24, r12
    17aa:	2b 8b       	std	Y+19, r18	; 0x13
    17ac:	2a d3       	rcall	.+1620   	; 0x1e02 <strnlen_P>
    17ae:	8c 01       	movw	r16, r24
    17b0:	2b 89       	ldd	r18, Y+19	; 0x13
    17b2:	20 68       	ori	r18, 0x80	; 128
    17b4:	72 2e       	mov	r7, r18
    17b6:	23 fd       	sbrc	r18, 3
    17b8:	18 c0       	rjmp	.+48     	; 0x17ea <vfprintf+0x500>
    17ba:	85 2d       	mov	r24, r5
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	08 17       	cp	r16, r24
    17c0:	19 07       	cpc	r17, r25
    17c2:	98 f4       	brcc	.+38     	; 0x17ea <vfprintf+0x500>
    17c4:	b7 01       	movw	r22, r14
    17c6:	80 e2       	ldi	r24, 0x20	; 32
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	7b d3       	rcall	.+1782   	; 0x1ec2 <fputc>
    17cc:	5a 94       	dec	r5
    17ce:	f5 cf       	rjmp	.-22     	; 0x17ba <vfprintf+0x4d0>
    17d0:	f6 01       	movw	r30, r12
    17d2:	77 fc       	sbrc	r7, 7
    17d4:	85 91       	lpm	r24, Z+
    17d6:	77 fe       	sbrs	r7, 7
    17d8:	81 91       	ld	r24, Z+
    17da:	6f 01       	movw	r12, r30
    17dc:	b7 01       	movw	r22, r14
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	70 d3       	rcall	.+1760   	; 0x1ec2 <fputc>
    17e2:	51 10       	cpse	r5, r1
    17e4:	5a 94       	dec	r5
    17e6:	01 50       	subi	r16, 0x01	; 1
    17e8:	11 09       	sbc	r17, r1
    17ea:	01 15       	cp	r16, r1
    17ec:	11 05       	cpc	r17, r1
    17ee:	81 f7       	brne	.-32     	; 0x17d0 <vfprintf+0x4e6>
    17f0:	db c0       	rjmp	.+438    	; 0x19a8 <vfprintf+0x6be>
    17f2:	84 36       	cpi	r24, 0x64	; 100
    17f4:	11 f0       	breq	.+4      	; 0x17fa <vfprintf+0x510>
    17f6:	89 36       	cpi	r24, 0x69	; 105
    17f8:	49 f5       	brne	.+82     	; 0x184c <vfprintf+0x562>
    17fa:	56 01       	movw	r10, r12
    17fc:	27 ff       	sbrs	r18, 7
    17fe:	09 c0       	rjmp	.+18     	; 0x1812 <vfprintf+0x528>
    1800:	f4 e0       	ldi	r31, 0x04	; 4
    1802:	af 0e       	add	r10, r31
    1804:	b1 1c       	adc	r11, r1
    1806:	f6 01       	movw	r30, r12
    1808:	60 81       	ld	r22, Z
    180a:	71 81       	ldd	r23, Z+1	; 0x01
    180c:	82 81       	ldd	r24, Z+2	; 0x02
    180e:	93 81       	ldd	r25, Z+3	; 0x03
    1810:	0a c0       	rjmp	.+20     	; 0x1826 <vfprintf+0x53c>
    1812:	f2 e0       	ldi	r31, 0x02	; 2
    1814:	af 0e       	add	r10, r31
    1816:	b1 1c       	adc	r11, r1
    1818:	f6 01       	movw	r30, r12
    181a:	60 81       	ld	r22, Z
    181c:	71 81       	ldd	r23, Z+1	; 0x01
    181e:	88 27       	eor	r24, r24
    1820:	77 fd       	sbrc	r23, 7
    1822:	80 95       	com	r24
    1824:	98 2f       	mov	r25, r24
    1826:	02 2f       	mov	r16, r18
    1828:	0f 76       	andi	r16, 0x6F	; 111
    182a:	97 ff       	sbrs	r25, 7
    182c:	08 c0       	rjmp	.+16     	; 0x183e <vfprintf+0x554>
    182e:	90 95       	com	r25
    1830:	80 95       	com	r24
    1832:	70 95       	com	r23
    1834:	61 95       	neg	r22
    1836:	7f 4f       	sbci	r23, 0xFF	; 255
    1838:	8f 4f       	sbci	r24, 0xFF	; 255
    183a:	9f 4f       	sbci	r25, 0xFF	; 255
    183c:	00 68       	ori	r16, 0x80	; 128
    183e:	2a e0       	ldi	r18, 0x0A	; 10
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	a4 01       	movw	r20, r8
    1844:	ae d3       	rcall	.+1884   	; 0x1fa2 <__ultoa_invert>
    1846:	c8 2e       	mov	r12, r24
    1848:	c8 18       	sub	r12, r8
    184a:	3d c0       	rjmp	.+122    	; 0x18c6 <vfprintf+0x5dc>
    184c:	02 2f       	mov	r16, r18
    184e:	85 37       	cpi	r24, 0x75	; 117
    1850:	21 f4       	brne	.+8      	; 0x185a <vfprintf+0x570>
    1852:	0f 7e       	andi	r16, 0xEF	; 239
    1854:	2a e0       	ldi	r18, 0x0A	; 10
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	1d c0       	rjmp	.+58     	; 0x1894 <vfprintf+0x5aa>
    185a:	09 7f       	andi	r16, 0xF9	; 249
    185c:	8f 36       	cpi	r24, 0x6F	; 111
    185e:	91 f0       	breq	.+36     	; 0x1884 <vfprintf+0x59a>
    1860:	18 f4       	brcc	.+6      	; 0x1868 <vfprintf+0x57e>
    1862:	88 35       	cpi	r24, 0x58	; 88
    1864:	59 f0       	breq	.+22     	; 0x187c <vfprintf+0x592>
    1866:	a9 c0       	rjmp	.+338    	; 0x19ba <vfprintf+0x6d0>
    1868:	80 37       	cpi	r24, 0x70	; 112
    186a:	19 f0       	breq	.+6      	; 0x1872 <vfprintf+0x588>
    186c:	88 37       	cpi	r24, 0x78	; 120
    186e:	11 f0       	breq	.+4      	; 0x1874 <vfprintf+0x58a>
    1870:	a4 c0       	rjmp	.+328    	; 0x19ba <vfprintf+0x6d0>
    1872:	00 61       	ori	r16, 0x10	; 16
    1874:	04 ff       	sbrs	r16, 4
    1876:	09 c0       	rjmp	.+18     	; 0x188a <vfprintf+0x5a0>
    1878:	04 60       	ori	r16, 0x04	; 4
    187a:	07 c0       	rjmp	.+14     	; 0x188a <vfprintf+0x5a0>
    187c:	24 ff       	sbrs	r18, 4
    187e:	08 c0       	rjmp	.+16     	; 0x1890 <vfprintf+0x5a6>
    1880:	06 60       	ori	r16, 0x06	; 6
    1882:	06 c0       	rjmp	.+12     	; 0x1890 <vfprintf+0x5a6>
    1884:	28 e0       	ldi	r18, 0x08	; 8
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	05 c0       	rjmp	.+10     	; 0x1894 <vfprintf+0x5aa>
    188a:	20 e1       	ldi	r18, 0x10	; 16
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <vfprintf+0x5aa>
    1890:	20 e1       	ldi	r18, 0x10	; 16
    1892:	32 e0       	ldi	r19, 0x02	; 2
    1894:	56 01       	movw	r10, r12
    1896:	07 ff       	sbrs	r16, 7
    1898:	09 c0       	rjmp	.+18     	; 0x18ac <vfprintf+0x5c2>
    189a:	f4 e0       	ldi	r31, 0x04	; 4
    189c:	af 0e       	add	r10, r31
    189e:	b1 1c       	adc	r11, r1
    18a0:	f6 01       	movw	r30, r12
    18a2:	60 81       	ld	r22, Z
    18a4:	71 81       	ldd	r23, Z+1	; 0x01
    18a6:	82 81       	ldd	r24, Z+2	; 0x02
    18a8:	93 81       	ldd	r25, Z+3	; 0x03
    18aa:	08 c0       	rjmp	.+16     	; 0x18bc <vfprintf+0x5d2>
    18ac:	f2 e0       	ldi	r31, 0x02	; 2
    18ae:	af 0e       	add	r10, r31
    18b0:	b1 1c       	adc	r11, r1
    18b2:	f6 01       	movw	r30, r12
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a4 01       	movw	r20, r8
    18be:	71 d3       	rcall	.+1762   	; 0x1fa2 <__ultoa_invert>
    18c0:	c8 2e       	mov	r12, r24
    18c2:	c8 18       	sub	r12, r8
    18c4:	0f 77       	andi	r16, 0x7F	; 127
    18c6:	06 ff       	sbrs	r16, 6
    18c8:	0b c0       	rjmp	.+22     	; 0x18e0 <vfprintf+0x5f6>
    18ca:	20 2f       	mov	r18, r16
    18cc:	2e 7f       	andi	r18, 0xFE	; 254
    18ce:	c1 16       	cp	r12, r17
    18d0:	50 f4       	brcc	.+20     	; 0x18e6 <vfprintf+0x5fc>
    18d2:	04 ff       	sbrs	r16, 4
    18d4:	0a c0       	rjmp	.+20     	; 0x18ea <vfprintf+0x600>
    18d6:	02 fd       	sbrc	r16, 2
    18d8:	08 c0       	rjmp	.+16     	; 0x18ea <vfprintf+0x600>
    18da:	20 2f       	mov	r18, r16
    18dc:	2e 7e       	andi	r18, 0xEE	; 238
    18de:	05 c0       	rjmp	.+10     	; 0x18ea <vfprintf+0x600>
    18e0:	dc 2c       	mov	r13, r12
    18e2:	20 2f       	mov	r18, r16
    18e4:	03 c0       	rjmp	.+6      	; 0x18ec <vfprintf+0x602>
    18e6:	dc 2c       	mov	r13, r12
    18e8:	01 c0       	rjmp	.+2      	; 0x18ec <vfprintf+0x602>
    18ea:	d1 2e       	mov	r13, r17
    18ec:	24 ff       	sbrs	r18, 4
    18ee:	0d c0       	rjmp	.+26     	; 0x190a <vfprintf+0x620>
    18f0:	fe 01       	movw	r30, r28
    18f2:	ec 0d       	add	r30, r12
    18f4:	f1 1d       	adc	r31, r1
    18f6:	80 81       	ld	r24, Z
    18f8:	80 33       	cpi	r24, 0x30	; 48
    18fa:	11 f4       	brne	.+4      	; 0x1900 <vfprintf+0x616>
    18fc:	29 7e       	andi	r18, 0xE9	; 233
    18fe:	09 c0       	rjmp	.+18     	; 0x1912 <vfprintf+0x628>
    1900:	22 ff       	sbrs	r18, 2
    1902:	06 c0       	rjmp	.+12     	; 0x1910 <vfprintf+0x626>
    1904:	d3 94       	inc	r13
    1906:	d3 94       	inc	r13
    1908:	04 c0       	rjmp	.+8      	; 0x1912 <vfprintf+0x628>
    190a:	82 2f       	mov	r24, r18
    190c:	86 78       	andi	r24, 0x86	; 134
    190e:	09 f0       	breq	.+2      	; 0x1912 <vfprintf+0x628>
    1910:	d3 94       	inc	r13
    1912:	23 fd       	sbrc	r18, 3
    1914:	12 c0       	rjmp	.+36     	; 0x193a <vfprintf+0x650>
    1916:	20 ff       	sbrs	r18, 0
    1918:	06 c0       	rjmp	.+12     	; 0x1926 <vfprintf+0x63c>
    191a:	1c 2d       	mov	r17, r12
    191c:	d5 14       	cp	r13, r5
    191e:	18 f4       	brcc	.+6      	; 0x1926 <vfprintf+0x63c>
    1920:	15 0d       	add	r17, r5
    1922:	1d 19       	sub	r17, r13
    1924:	d5 2c       	mov	r13, r5
    1926:	d5 14       	cp	r13, r5
    1928:	60 f4       	brcc	.+24     	; 0x1942 <vfprintf+0x658>
    192a:	b7 01       	movw	r22, r14
    192c:	80 e2       	ldi	r24, 0x20	; 32
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	2b 8b       	std	Y+19, r18	; 0x13
    1932:	c7 d2       	rcall	.+1422   	; 0x1ec2 <fputc>
    1934:	d3 94       	inc	r13
    1936:	2b 89       	ldd	r18, Y+19	; 0x13
    1938:	f6 cf       	rjmp	.-20     	; 0x1926 <vfprintf+0x63c>
    193a:	d5 14       	cp	r13, r5
    193c:	10 f4       	brcc	.+4      	; 0x1942 <vfprintf+0x658>
    193e:	5d 18       	sub	r5, r13
    1940:	01 c0       	rjmp	.+2      	; 0x1944 <vfprintf+0x65a>
    1942:	51 2c       	mov	r5, r1
    1944:	24 ff       	sbrs	r18, 4
    1946:	11 c0       	rjmp	.+34     	; 0x196a <vfprintf+0x680>
    1948:	b7 01       	movw	r22, r14
    194a:	80 e3       	ldi	r24, 0x30	; 48
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	2b 8b       	std	Y+19, r18	; 0x13
    1950:	b8 d2       	rcall	.+1392   	; 0x1ec2 <fputc>
    1952:	2b 89       	ldd	r18, Y+19	; 0x13
    1954:	22 ff       	sbrs	r18, 2
    1956:	16 c0       	rjmp	.+44     	; 0x1984 <vfprintf+0x69a>
    1958:	21 ff       	sbrs	r18, 1
    195a:	03 c0       	rjmp	.+6      	; 0x1962 <vfprintf+0x678>
    195c:	88 e5       	ldi	r24, 0x58	; 88
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <vfprintf+0x67c>
    1962:	88 e7       	ldi	r24, 0x78	; 120
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	b7 01       	movw	r22, r14
    1968:	0c c0       	rjmp	.+24     	; 0x1982 <vfprintf+0x698>
    196a:	82 2f       	mov	r24, r18
    196c:	86 78       	andi	r24, 0x86	; 134
    196e:	51 f0       	breq	.+20     	; 0x1984 <vfprintf+0x69a>
    1970:	21 fd       	sbrc	r18, 1
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <vfprintf+0x68e>
    1974:	80 e2       	ldi	r24, 0x20	; 32
    1976:	01 c0       	rjmp	.+2      	; 0x197a <vfprintf+0x690>
    1978:	8b e2       	ldi	r24, 0x2B	; 43
    197a:	27 fd       	sbrc	r18, 7
    197c:	8d e2       	ldi	r24, 0x2D	; 45
    197e:	b7 01       	movw	r22, r14
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	9f d2       	rcall	.+1342   	; 0x1ec2 <fputc>
    1984:	c1 16       	cp	r12, r17
    1986:	30 f4       	brcc	.+12     	; 0x1994 <vfprintf+0x6aa>
    1988:	b7 01       	movw	r22, r14
    198a:	80 e3       	ldi	r24, 0x30	; 48
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	99 d2       	rcall	.+1330   	; 0x1ec2 <fputc>
    1990:	11 50       	subi	r17, 0x01	; 1
    1992:	f8 cf       	rjmp	.-16     	; 0x1984 <vfprintf+0x69a>
    1994:	ca 94       	dec	r12
    1996:	f4 01       	movw	r30, r8
    1998:	ec 0d       	add	r30, r12
    199a:	f1 1d       	adc	r31, r1
    199c:	80 81       	ld	r24, Z
    199e:	b7 01       	movw	r22, r14
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	8f d2       	rcall	.+1310   	; 0x1ec2 <fputc>
    19a4:	c1 10       	cpse	r12, r1
    19a6:	f6 cf       	rjmp	.-20     	; 0x1994 <vfprintf+0x6aa>
    19a8:	55 20       	and	r5, r5
    19aa:	09 f4       	brne	.+2      	; 0x19ae <vfprintf+0x6c4>
    19ac:	dd cc       	rjmp	.-1606   	; 0x1368 <vfprintf+0x7e>
    19ae:	b7 01       	movw	r22, r14
    19b0:	80 e2       	ldi	r24, 0x20	; 32
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	86 d2       	rcall	.+1292   	; 0x1ec2 <fputc>
    19b6:	5a 94       	dec	r5
    19b8:	f7 cf       	rjmp	.-18     	; 0x19a8 <vfprintf+0x6be>
    19ba:	f7 01       	movw	r30, r14
    19bc:	86 81       	ldd	r24, Z+6	; 0x06
    19be:	97 81       	ldd	r25, Z+7	; 0x07
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <vfprintf+0x6dc>
    19c2:	8f ef       	ldi	r24, 0xFF	; 255
    19c4:	9f ef       	ldi	r25, 0xFF	; 255
    19c6:	63 96       	adiw	r28, 0x13	; 19
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	f8 94       	cli
    19cc:	de bf       	out	0x3e, r29	; 62
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	cd bf       	out	0x3d, r28	; 61
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	ff 90       	pop	r15
    19dc:	ef 90       	pop	r14
    19de:	df 90       	pop	r13
    19e0:	cf 90       	pop	r12
    19e2:	bf 90       	pop	r11
    19e4:	af 90       	pop	r10
    19e6:	9f 90       	pop	r9
    19e8:	8f 90       	pop	r8
    19ea:	7f 90       	pop	r7
    19ec:	6f 90       	pop	r6
    19ee:	5f 90       	pop	r5
    19f0:	4f 90       	pop	r4
    19f2:	3f 90       	pop	r3
    19f4:	2f 90       	pop	r2
    19f6:	08 95       	ret

000019f8 <__tablejump2__>:
    19f8:	ee 0f       	add	r30, r30
    19fa:	ff 1f       	adc	r31, r31

000019fc <__tablejump__>:
    19fc:	05 90       	lpm	r0, Z+
    19fe:	f4 91       	lpm	r31, Z
    1a00:	e0 2d       	mov	r30, r0
    1a02:	19 94       	eijmp

00001a04 <malloc>:
    1a04:	cf 93       	push	r28
    1a06:	df 93       	push	r29
    1a08:	82 30       	cpi	r24, 0x02	; 2
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	10 f4       	brcc	.+4      	; 0x1a12 <malloc+0xe>
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	e0 91 b1 02 	lds	r30, 0x02B1
    1a16:	f0 91 b2 02 	lds	r31, 0x02B2
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	a0 e0       	ldi	r26, 0x00	; 0
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	30 97       	sbiw	r30, 0x00	; 0
    1a24:	39 f1       	breq	.+78     	; 0x1a74 <malloc+0x70>
    1a26:	40 81       	ld	r20, Z
    1a28:	51 81       	ldd	r21, Z+1	; 0x01
    1a2a:	48 17       	cp	r20, r24
    1a2c:	59 07       	cpc	r21, r25
    1a2e:	b8 f0       	brcs	.+46     	; 0x1a5e <malloc+0x5a>
    1a30:	48 17       	cp	r20, r24
    1a32:	59 07       	cpc	r21, r25
    1a34:	71 f4       	brne	.+28     	; 0x1a52 <malloc+0x4e>
    1a36:	82 81       	ldd	r24, Z+2	; 0x02
    1a38:	93 81       	ldd	r25, Z+3	; 0x03
    1a3a:	10 97       	sbiw	r26, 0x00	; 0
    1a3c:	29 f0       	breq	.+10     	; 0x1a48 <malloc+0x44>
    1a3e:	13 96       	adiw	r26, 0x03	; 3
    1a40:	9c 93       	st	X, r25
    1a42:	8e 93       	st	-X, r24
    1a44:	12 97       	sbiw	r26, 0x02	; 2
    1a46:	2c c0       	rjmp	.+88     	; 0x1aa0 <malloc+0x9c>
    1a48:	90 93 b2 02 	sts	0x02B2, r25
    1a4c:	80 93 b1 02 	sts	0x02B1, r24
    1a50:	27 c0       	rjmp	.+78     	; 0x1aa0 <malloc+0x9c>
    1a52:	21 15       	cp	r18, r1
    1a54:	31 05       	cpc	r19, r1
    1a56:	31 f0       	breq	.+12     	; 0x1a64 <malloc+0x60>
    1a58:	42 17       	cp	r20, r18
    1a5a:	53 07       	cpc	r21, r19
    1a5c:	18 f0       	brcs	.+6      	; 0x1a64 <malloc+0x60>
    1a5e:	a9 01       	movw	r20, r18
    1a60:	db 01       	movw	r26, r22
    1a62:	01 c0       	rjmp	.+2      	; 0x1a66 <malloc+0x62>
    1a64:	ef 01       	movw	r28, r30
    1a66:	9a 01       	movw	r18, r20
    1a68:	bd 01       	movw	r22, r26
    1a6a:	df 01       	movw	r26, r30
    1a6c:	02 80       	ldd	r0, Z+2	; 0x02
    1a6e:	f3 81       	ldd	r31, Z+3	; 0x03
    1a70:	e0 2d       	mov	r30, r0
    1a72:	d7 cf       	rjmp	.-82     	; 0x1a22 <malloc+0x1e>
    1a74:	21 15       	cp	r18, r1
    1a76:	31 05       	cpc	r19, r1
    1a78:	f9 f0       	breq	.+62     	; 0x1ab8 <malloc+0xb4>
    1a7a:	28 1b       	sub	r18, r24
    1a7c:	39 0b       	sbc	r19, r25
    1a7e:	24 30       	cpi	r18, 0x04	; 4
    1a80:	31 05       	cpc	r19, r1
    1a82:	80 f4       	brcc	.+32     	; 0x1aa4 <malloc+0xa0>
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	9b 81       	ldd	r25, Y+3	; 0x03
    1a88:	61 15       	cp	r22, r1
    1a8a:	71 05       	cpc	r23, r1
    1a8c:	21 f0       	breq	.+8      	; 0x1a96 <malloc+0x92>
    1a8e:	fb 01       	movw	r30, r22
    1a90:	93 83       	std	Z+3, r25	; 0x03
    1a92:	82 83       	std	Z+2, r24	; 0x02
    1a94:	04 c0       	rjmp	.+8      	; 0x1a9e <malloc+0x9a>
    1a96:	90 93 b2 02 	sts	0x02B2, r25
    1a9a:	80 93 b1 02 	sts	0x02B1, r24
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	32 96       	adiw	r30, 0x02	; 2
    1aa2:	44 c0       	rjmp	.+136    	; 0x1b2c <malloc+0x128>
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	e2 0f       	add	r30, r18
    1aa8:	f3 1f       	adc	r31, r19
    1aaa:	81 93       	st	Z+, r24
    1aac:	91 93       	st	Z+, r25
    1aae:	22 50       	subi	r18, 0x02	; 2
    1ab0:	31 09       	sbc	r19, r1
    1ab2:	39 83       	std	Y+1, r19	; 0x01
    1ab4:	28 83       	st	Y, r18
    1ab6:	3a c0       	rjmp	.+116    	; 0x1b2c <malloc+0x128>
    1ab8:	20 91 af 02 	lds	r18, 0x02AF
    1abc:	30 91 b0 02 	lds	r19, 0x02B0
    1ac0:	23 2b       	or	r18, r19
    1ac2:	41 f4       	brne	.+16     	; 0x1ad4 <malloc+0xd0>
    1ac4:	20 91 02 02 	lds	r18, 0x0202
    1ac8:	30 91 03 02 	lds	r19, 0x0203
    1acc:	30 93 b0 02 	sts	0x02B0, r19
    1ad0:	20 93 af 02 	sts	0x02AF, r18
    1ad4:	20 91 00 02 	lds	r18, 0x0200
    1ad8:	30 91 01 02 	lds	r19, 0x0201
    1adc:	21 15       	cp	r18, r1
    1ade:	31 05       	cpc	r19, r1
    1ae0:	41 f4       	brne	.+16     	; 0x1af2 <malloc+0xee>
    1ae2:	2d b7       	in	r18, 0x3d	; 61
    1ae4:	3e b7       	in	r19, 0x3e	; 62
    1ae6:	40 91 04 02 	lds	r20, 0x0204
    1aea:	50 91 05 02 	lds	r21, 0x0205
    1aee:	24 1b       	sub	r18, r20
    1af0:	35 0b       	sbc	r19, r21
    1af2:	e0 91 af 02 	lds	r30, 0x02AF
    1af6:	f0 91 b0 02 	lds	r31, 0x02B0
    1afa:	e2 17       	cp	r30, r18
    1afc:	f3 07       	cpc	r31, r19
    1afe:	a0 f4       	brcc	.+40     	; 0x1b28 <malloc+0x124>
    1b00:	2e 1b       	sub	r18, r30
    1b02:	3f 0b       	sbc	r19, r31
    1b04:	28 17       	cp	r18, r24
    1b06:	39 07       	cpc	r19, r25
    1b08:	78 f0       	brcs	.+30     	; 0x1b28 <malloc+0x124>
    1b0a:	ac 01       	movw	r20, r24
    1b0c:	4e 5f       	subi	r20, 0xFE	; 254
    1b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b10:	24 17       	cp	r18, r20
    1b12:	35 07       	cpc	r19, r21
    1b14:	48 f0       	brcs	.+18     	; 0x1b28 <malloc+0x124>
    1b16:	4e 0f       	add	r20, r30
    1b18:	5f 1f       	adc	r21, r31
    1b1a:	50 93 b0 02 	sts	0x02B0, r21
    1b1e:	40 93 af 02 	sts	0x02AF, r20
    1b22:	81 93       	st	Z+, r24
    1b24:	91 93       	st	Z+, r25
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <malloc+0x128>
    1b28:	e0 e0       	ldi	r30, 0x00	; 0
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	cf 01       	movw	r24, r30
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	08 95       	ret

00001b34 <free>:
    1b34:	cf 93       	push	r28
    1b36:	df 93       	push	r29
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <free+0xa>
    1b3c:	87 c0       	rjmp	.+270    	; 0x1c4c <free+0x118>
    1b3e:	fc 01       	movw	r30, r24
    1b40:	32 97       	sbiw	r30, 0x02	; 2
    1b42:	13 82       	std	Z+3, r1	; 0x03
    1b44:	12 82       	std	Z+2, r1	; 0x02
    1b46:	c0 91 b1 02 	lds	r28, 0x02B1
    1b4a:	d0 91 b2 02 	lds	r29, 0x02B2
    1b4e:	20 97       	sbiw	r28, 0x00	; 0
    1b50:	81 f4       	brne	.+32     	; 0x1b72 <free+0x3e>
    1b52:	20 81       	ld	r18, Z
    1b54:	31 81       	ldd	r19, Z+1	; 0x01
    1b56:	28 0f       	add	r18, r24
    1b58:	39 1f       	adc	r19, r25
    1b5a:	80 91 af 02 	lds	r24, 0x02AF
    1b5e:	90 91 b0 02 	lds	r25, 0x02B0
    1b62:	82 17       	cp	r24, r18
    1b64:	93 07       	cpc	r25, r19
    1b66:	79 f5       	brne	.+94     	; 0x1bc6 <free+0x92>
    1b68:	f0 93 b0 02 	sts	0x02B0, r31
    1b6c:	e0 93 af 02 	sts	0x02AF, r30
    1b70:	6d c0       	rjmp	.+218    	; 0x1c4c <free+0x118>
    1b72:	de 01       	movw	r26, r28
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	ae 17       	cp	r26, r30
    1b7a:	bf 07       	cpc	r27, r31
    1b7c:	50 f4       	brcc	.+20     	; 0x1b92 <free+0x5e>
    1b7e:	12 96       	adiw	r26, 0x02	; 2
    1b80:	4d 91       	ld	r20, X+
    1b82:	5c 91       	ld	r21, X
    1b84:	13 97       	sbiw	r26, 0x03	; 3
    1b86:	9d 01       	movw	r18, r26
    1b88:	41 15       	cp	r20, r1
    1b8a:	51 05       	cpc	r21, r1
    1b8c:	09 f1       	breq	.+66     	; 0x1bd0 <free+0x9c>
    1b8e:	da 01       	movw	r26, r20
    1b90:	f3 cf       	rjmp	.-26     	; 0x1b78 <free+0x44>
    1b92:	b3 83       	std	Z+3, r27	; 0x03
    1b94:	a2 83       	std	Z+2, r26	; 0x02
    1b96:	40 81       	ld	r20, Z
    1b98:	51 81       	ldd	r21, Z+1	; 0x01
    1b9a:	84 0f       	add	r24, r20
    1b9c:	95 1f       	adc	r25, r21
    1b9e:	8a 17       	cp	r24, r26
    1ba0:	9b 07       	cpc	r25, r27
    1ba2:	71 f4       	brne	.+28     	; 0x1bc0 <free+0x8c>
    1ba4:	8d 91       	ld	r24, X+
    1ba6:	9c 91       	ld	r25, X
    1ba8:	11 97       	sbiw	r26, 0x01	; 1
    1baa:	84 0f       	add	r24, r20
    1bac:	95 1f       	adc	r25, r21
    1bae:	02 96       	adiw	r24, 0x02	; 2
    1bb0:	91 83       	std	Z+1, r25	; 0x01
    1bb2:	80 83       	st	Z, r24
    1bb4:	12 96       	adiw	r26, 0x02	; 2
    1bb6:	8d 91       	ld	r24, X+
    1bb8:	9c 91       	ld	r25, X
    1bba:	13 97       	sbiw	r26, 0x03	; 3
    1bbc:	93 83       	std	Z+3, r25	; 0x03
    1bbe:	82 83       	std	Z+2, r24	; 0x02
    1bc0:	21 15       	cp	r18, r1
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	29 f4       	brne	.+10     	; 0x1bd0 <free+0x9c>
    1bc6:	f0 93 b2 02 	sts	0x02B2, r31
    1bca:	e0 93 b1 02 	sts	0x02B1, r30
    1bce:	3e c0       	rjmp	.+124    	; 0x1c4c <free+0x118>
    1bd0:	d9 01       	movw	r26, r18
    1bd2:	13 96       	adiw	r26, 0x03	; 3
    1bd4:	fc 93       	st	X, r31
    1bd6:	ee 93       	st	-X, r30
    1bd8:	12 97       	sbiw	r26, 0x02	; 2
    1bda:	4d 91       	ld	r20, X+
    1bdc:	5d 91       	ld	r21, X+
    1bde:	a4 0f       	add	r26, r20
    1be0:	b5 1f       	adc	r27, r21
    1be2:	ea 17       	cp	r30, r26
    1be4:	fb 07       	cpc	r31, r27
    1be6:	79 f4       	brne	.+30     	; 0x1c06 <free+0xd2>
    1be8:	80 81       	ld	r24, Z
    1bea:	91 81       	ldd	r25, Z+1	; 0x01
    1bec:	84 0f       	add	r24, r20
    1bee:	95 1f       	adc	r25, r21
    1bf0:	02 96       	adiw	r24, 0x02	; 2
    1bf2:	d9 01       	movw	r26, r18
    1bf4:	11 96       	adiw	r26, 0x01	; 1
    1bf6:	9c 93       	st	X, r25
    1bf8:	8e 93       	st	-X, r24
    1bfa:	82 81       	ldd	r24, Z+2	; 0x02
    1bfc:	93 81       	ldd	r25, Z+3	; 0x03
    1bfe:	13 96       	adiw	r26, 0x03	; 3
    1c00:	9c 93       	st	X, r25
    1c02:	8e 93       	st	-X, r24
    1c04:	12 97       	sbiw	r26, 0x02	; 2
    1c06:	e0 e0       	ldi	r30, 0x00	; 0
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	19 f0       	breq	.+6      	; 0x1c18 <free+0xe4>
    1c12:	fe 01       	movw	r30, r28
    1c14:	ec 01       	movw	r28, r24
    1c16:	f9 cf       	rjmp	.-14     	; 0x1c0a <free+0xd6>
    1c18:	ce 01       	movw	r24, r28
    1c1a:	02 96       	adiw	r24, 0x02	; 2
    1c1c:	28 81       	ld	r18, Y
    1c1e:	39 81       	ldd	r19, Y+1	; 0x01
    1c20:	82 0f       	add	r24, r18
    1c22:	93 1f       	adc	r25, r19
    1c24:	20 91 af 02 	lds	r18, 0x02AF
    1c28:	30 91 b0 02 	lds	r19, 0x02B0
    1c2c:	28 17       	cp	r18, r24
    1c2e:	39 07       	cpc	r19, r25
    1c30:	69 f4       	brne	.+26     	; 0x1c4c <free+0x118>
    1c32:	30 97       	sbiw	r30, 0x00	; 0
    1c34:	29 f4       	brne	.+10     	; 0x1c40 <free+0x10c>
    1c36:	10 92 b2 02 	sts	0x02B2, r1
    1c3a:	10 92 b1 02 	sts	0x02B1, r1
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <free+0x110>
    1c40:	13 82       	std	Z+3, r1	; 0x03
    1c42:	12 82       	std	Z+2, r1	; 0x02
    1c44:	d0 93 b0 02 	sts	0x02B0, r29
    1c48:	c0 93 af 02 	sts	0x02AF, r28
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	08 95       	ret

00001c52 <__ftoa_engine>:
    1c52:	28 30       	cpi	r18, 0x08	; 8
    1c54:	08 f0       	brcs	.+2      	; 0x1c58 <__ftoa_engine+0x6>
    1c56:	27 e0       	ldi	r18, 0x07	; 7
    1c58:	33 27       	eor	r19, r19
    1c5a:	da 01       	movw	r26, r20
    1c5c:	99 0f       	add	r25, r25
    1c5e:	31 1d       	adc	r19, r1
    1c60:	87 fd       	sbrc	r24, 7
    1c62:	91 60       	ori	r25, 0x01	; 1
    1c64:	00 96       	adiw	r24, 0x00	; 0
    1c66:	61 05       	cpc	r22, r1
    1c68:	71 05       	cpc	r23, r1
    1c6a:	39 f4       	brne	.+14     	; 0x1c7a <__ftoa_engine+0x28>
    1c6c:	32 60       	ori	r19, 0x02	; 2
    1c6e:	2e 5f       	subi	r18, 0xFE	; 254
    1c70:	3d 93       	st	X+, r19
    1c72:	30 e3       	ldi	r19, 0x30	; 48
    1c74:	2a 95       	dec	r18
    1c76:	e1 f7       	brne	.-8      	; 0x1c70 <__ftoa_engine+0x1e>
    1c78:	08 95       	ret
    1c7a:	9f 3f       	cpi	r25, 0xFF	; 255
    1c7c:	30 f0       	brcs	.+12     	; 0x1c8a <__ftoa_engine+0x38>
    1c7e:	80 38       	cpi	r24, 0x80	; 128
    1c80:	71 05       	cpc	r23, r1
    1c82:	61 05       	cpc	r22, r1
    1c84:	09 f0       	breq	.+2      	; 0x1c88 <__ftoa_engine+0x36>
    1c86:	3c 5f       	subi	r19, 0xFC	; 252
    1c88:	3c 5f       	subi	r19, 0xFC	; 252
    1c8a:	3d 93       	st	X+, r19
    1c8c:	91 30       	cpi	r25, 0x01	; 1
    1c8e:	08 f0       	brcs	.+2      	; 0x1c92 <__ftoa_engine+0x40>
    1c90:	80 68       	ori	r24, 0x80	; 128
    1c92:	91 1d       	adc	r25, r1
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	1f 93       	push	r17
    1c9a:	0f 93       	push	r16
    1c9c:	ff 92       	push	r15
    1c9e:	ef 92       	push	r14
    1ca0:	19 2f       	mov	r17, r25
    1ca2:	98 7f       	andi	r25, 0xF8	; 248
    1ca4:	96 95       	lsr	r25
    1ca6:	e9 2f       	mov	r30, r25
    1ca8:	96 95       	lsr	r25
    1caa:	96 95       	lsr	r25
    1cac:	e9 0f       	add	r30, r25
    1cae:	ff 27       	eor	r31, r31
    1cb0:	e8 51       	subi	r30, 0x18	; 24
    1cb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb4:	99 27       	eor	r25, r25
    1cb6:	33 27       	eor	r19, r19
    1cb8:	ee 24       	eor	r14, r14
    1cba:	ff 24       	eor	r15, r15
    1cbc:	a7 01       	movw	r20, r14
    1cbe:	e7 01       	movw	r28, r14
    1cc0:	05 90       	lpm	r0, Z+
    1cc2:	08 94       	sec
    1cc4:	07 94       	ror	r0
    1cc6:	28 f4       	brcc	.+10     	; 0x1cd2 <__ftoa_engine+0x80>
    1cc8:	36 0f       	add	r19, r22
    1cca:	e7 1e       	adc	r14, r23
    1ccc:	f8 1e       	adc	r15, r24
    1cce:	49 1f       	adc	r20, r25
    1cd0:	51 1d       	adc	r21, r1
    1cd2:	66 0f       	add	r22, r22
    1cd4:	77 1f       	adc	r23, r23
    1cd6:	88 1f       	adc	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	06 94       	lsr	r0
    1cdc:	a1 f7       	brne	.-24     	; 0x1cc6 <__ftoa_engine+0x74>
    1cde:	05 90       	lpm	r0, Z+
    1ce0:	07 94       	ror	r0
    1ce2:	28 f4       	brcc	.+10     	; 0x1cee <__ftoa_engine+0x9c>
    1ce4:	e7 0e       	add	r14, r23
    1ce6:	f8 1e       	adc	r15, r24
    1ce8:	49 1f       	adc	r20, r25
    1cea:	56 1f       	adc	r21, r22
    1cec:	c1 1d       	adc	r28, r1
    1cee:	77 0f       	add	r23, r23
    1cf0:	88 1f       	adc	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	66 1f       	adc	r22, r22
    1cf6:	06 94       	lsr	r0
    1cf8:	a1 f7       	brne	.-24     	; 0x1ce2 <__ftoa_engine+0x90>
    1cfa:	05 90       	lpm	r0, Z+
    1cfc:	07 94       	ror	r0
    1cfe:	28 f4       	brcc	.+10     	; 0x1d0a <__ftoa_engine+0xb8>
    1d00:	f8 0e       	add	r15, r24
    1d02:	49 1f       	adc	r20, r25
    1d04:	56 1f       	adc	r21, r22
    1d06:	c7 1f       	adc	r28, r23
    1d08:	d1 1d       	adc	r29, r1
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	66 1f       	adc	r22, r22
    1d10:	77 1f       	adc	r23, r23
    1d12:	06 94       	lsr	r0
    1d14:	a1 f7       	brne	.-24     	; 0x1cfe <__ftoa_engine+0xac>
    1d16:	05 90       	lpm	r0, Z+
    1d18:	07 94       	ror	r0
    1d1a:	20 f4       	brcc	.+8      	; 0x1d24 <__ftoa_engine+0xd2>
    1d1c:	49 0f       	add	r20, r25
    1d1e:	56 1f       	adc	r21, r22
    1d20:	c7 1f       	adc	r28, r23
    1d22:	d8 1f       	adc	r29, r24
    1d24:	99 0f       	add	r25, r25
    1d26:	66 1f       	adc	r22, r22
    1d28:	77 1f       	adc	r23, r23
    1d2a:	88 1f       	adc	r24, r24
    1d2c:	06 94       	lsr	r0
    1d2e:	a9 f7       	brne	.-22     	; 0x1d1a <__ftoa_engine+0xc8>
    1d30:	84 91       	lpm	r24, Z
    1d32:	10 95       	com	r17
    1d34:	17 70       	andi	r17, 0x07	; 7
    1d36:	41 f0       	breq	.+16     	; 0x1d48 <__ftoa_engine+0xf6>
    1d38:	d6 95       	lsr	r29
    1d3a:	c7 95       	ror	r28
    1d3c:	57 95       	ror	r21
    1d3e:	47 95       	ror	r20
    1d40:	f7 94       	ror	r15
    1d42:	e7 94       	ror	r14
    1d44:	1a 95       	dec	r17
    1d46:	c1 f7       	brne	.-16     	; 0x1d38 <__ftoa_engine+0xe6>
    1d48:	ee e8       	ldi	r30, 0x8E	; 142
    1d4a:	f1 e0       	ldi	r31, 0x01	; 1
    1d4c:	68 94       	set
    1d4e:	15 90       	lpm	r1, Z+
    1d50:	15 91       	lpm	r17, Z+
    1d52:	35 91       	lpm	r19, Z+
    1d54:	65 91       	lpm	r22, Z+
    1d56:	95 91       	lpm	r25, Z+
    1d58:	05 90       	lpm	r0, Z+
    1d5a:	7f e2       	ldi	r23, 0x2F	; 47
    1d5c:	73 95       	inc	r23
    1d5e:	e1 18       	sub	r14, r1
    1d60:	f1 0a       	sbc	r15, r17
    1d62:	43 0b       	sbc	r20, r19
    1d64:	56 0b       	sbc	r21, r22
    1d66:	c9 0b       	sbc	r28, r25
    1d68:	d0 09       	sbc	r29, r0
    1d6a:	c0 f7       	brcc	.-16     	; 0x1d5c <__ftoa_engine+0x10a>
    1d6c:	e1 0c       	add	r14, r1
    1d6e:	f1 1e       	adc	r15, r17
    1d70:	43 1f       	adc	r20, r19
    1d72:	56 1f       	adc	r21, r22
    1d74:	c9 1f       	adc	r28, r25
    1d76:	d0 1d       	adc	r29, r0
    1d78:	7e f4       	brtc	.+30     	; 0x1d98 <__ftoa_engine+0x146>
    1d7a:	70 33       	cpi	r23, 0x30	; 48
    1d7c:	11 f4       	brne	.+4      	; 0x1d82 <__ftoa_engine+0x130>
    1d7e:	8a 95       	dec	r24
    1d80:	e6 cf       	rjmp	.-52     	; 0x1d4e <__ftoa_engine+0xfc>
    1d82:	e8 94       	clt
    1d84:	01 50       	subi	r16, 0x01	; 1
    1d86:	30 f0       	brcs	.+12     	; 0x1d94 <__ftoa_engine+0x142>
    1d88:	08 0f       	add	r16, r24
    1d8a:	0a f4       	brpl	.+2      	; 0x1d8e <__ftoa_engine+0x13c>
    1d8c:	00 27       	eor	r16, r16
    1d8e:	02 17       	cp	r16, r18
    1d90:	08 f4       	brcc	.+2      	; 0x1d94 <__ftoa_engine+0x142>
    1d92:	20 2f       	mov	r18, r16
    1d94:	23 95       	inc	r18
    1d96:	02 2f       	mov	r16, r18
    1d98:	7a 33       	cpi	r23, 0x3A	; 58
    1d9a:	28 f0       	brcs	.+10     	; 0x1da6 <__ftoa_engine+0x154>
    1d9c:	79 e3       	ldi	r23, 0x39	; 57
    1d9e:	7d 93       	st	X+, r23
    1da0:	2a 95       	dec	r18
    1da2:	e9 f7       	brne	.-6      	; 0x1d9e <__ftoa_engine+0x14c>
    1da4:	10 c0       	rjmp	.+32     	; 0x1dc6 <__ftoa_engine+0x174>
    1da6:	7d 93       	st	X+, r23
    1da8:	2a 95       	dec	r18
    1daa:	89 f6       	brne	.-94     	; 0x1d4e <__ftoa_engine+0xfc>
    1dac:	06 94       	lsr	r0
    1dae:	97 95       	ror	r25
    1db0:	67 95       	ror	r22
    1db2:	37 95       	ror	r19
    1db4:	17 95       	ror	r17
    1db6:	17 94       	ror	r1
    1db8:	e1 18       	sub	r14, r1
    1dba:	f1 0a       	sbc	r15, r17
    1dbc:	43 0b       	sbc	r20, r19
    1dbe:	56 0b       	sbc	r21, r22
    1dc0:	c9 0b       	sbc	r28, r25
    1dc2:	d0 09       	sbc	r29, r0
    1dc4:	98 f0       	brcs	.+38     	; 0x1dec <__ftoa_engine+0x19a>
    1dc6:	23 95       	inc	r18
    1dc8:	7e 91       	ld	r23, -X
    1dca:	73 95       	inc	r23
    1dcc:	7a 33       	cpi	r23, 0x3A	; 58
    1dce:	08 f0       	brcs	.+2      	; 0x1dd2 <__ftoa_engine+0x180>
    1dd0:	70 e3       	ldi	r23, 0x30	; 48
    1dd2:	7c 93       	st	X, r23
    1dd4:	20 13       	cpse	r18, r16
    1dd6:	b8 f7       	brcc	.-18     	; 0x1dc6 <__ftoa_engine+0x174>
    1dd8:	7e 91       	ld	r23, -X
    1dda:	70 61       	ori	r23, 0x10	; 16
    1ddc:	7d 93       	st	X+, r23
    1dde:	30 f0       	brcs	.+12     	; 0x1dec <__ftoa_engine+0x19a>
    1de0:	83 95       	inc	r24
    1de2:	71 e3       	ldi	r23, 0x31	; 49
    1de4:	7d 93       	st	X+, r23
    1de6:	70 e3       	ldi	r23, 0x30	; 48
    1de8:	2a 95       	dec	r18
    1dea:	e1 f7       	brne	.-8      	; 0x1de4 <__ftoa_engine+0x192>
    1dec:	11 24       	eor	r1, r1
    1dee:	ef 90       	pop	r14
    1df0:	ff 90       	pop	r15
    1df2:	0f 91       	pop	r16
    1df4:	1f 91       	pop	r17
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	99 27       	eor	r25, r25
    1dfc:	87 fd       	sbrc	r24, 7
    1dfe:	90 95       	com	r25
    1e00:	08 95       	ret

00001e02 <strnlen_P>:
    1e02:	fc 01       	movw	r30, r24
    1e04:	05 90       	lpm	r0, Z+
    1e06:	61 50       	subi	r22, 0x01	; 1
    1e08:	70 40       	sbci	r23, 0x00	; 0
    1e0a:	01 10       	cpse	r0, r1
    1e0c:	d8 f7       	brcc	.-10     	; 0x1e04 <strnlen_P+0x2>
    1e0e:	80 95       	com	r24
    1e10:	90 95       	com	r25
    1e12:	8e 0f       	add	r24, r30
    1e14:	9f 1f       	adc	r25, r31
    1e16:	08 95       	ret

00001e18 <strnlen>:
    1e18:	fc 01       	movw	r30, r24
    1e1a:	61 50       	subi	r22, 0x01	; 1
    1e1c:	70 40       	sbci	r23, 0x00	; 0
    1e1e:	01 90       	ld	r0, Z+
    1e20:	01 10       	cpse	r0, r1
    1e22:	d8 f7       	brcc	.-10     	; 0x1e1a <strnlen+0x2>
    1e24:	80 95       	com	r24
    1e26:	90 95       	com	r25
    1e28:	8e 0f       	add	r24, r30
    1e2a:	9f 1f       	adc	r25, r31
    1e2c:	08 95       	ret

00001e2e <fdevopen>:
    1e2e:	0f 93       	push	r16
    1e30:	1f 93       	push	r17
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	ec 01       	movw	r28, r24
    1e38:	8b 01       	movw	r16, r22
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	31 f4       	brne	.+12     	; 0x1e4a <fdevopen+0x1c>
    1e3e:	61 15       	cp	r22, r1
    1e40:	71 05       	cpc	r23, r1
    1e42:	19 f4       	brne	.+6      	; 0x1e4a <fdevopen+0x1c>
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	37 c0       	rjmp	.+110    	; 0x1eb8 <fdevopen+0x8a>
    1e4a:	6e e0       	ldi	r22, 0x0E	; 14
    1e4c:	70 e0       	ldi	r23, 0x00	; 0
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	05 d1       	rcall	.+522    	; 0x205e <calloc>
    1e54:	fc 01       	movw	r30, r24
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	a9 f3       	breq	.-22     	; 0x1e44 <fdevopen+0x16>
    1e5a:	80 e8       	ldi	r24, 0x80	; 128
    1e5c:	83 83       	std	Z+3, r24	; 0x03
    1e5e:	01 15       	cp	r16, r1
    1e60:	11 05       	cpc	r17, r1
    1e62:	71 f0       	breq	.+28     	; 0x1e80 <fdevopen+0x52>
    1e64:	13 87       	std	Z+11, r17	; 0x0b
    1e66:	02 87       	std	Z+10, r16	; 0x0a
    1e68:	81 e8       	ldi	r24, 0x81	; 129
    1e6a:	83 83       	std	Z+3, r24	; 0x03
    1e6c:	80 91 b3 02 	lds	r24, 0x02B3
    1e70:	90 91 b4 02 	lds	r25, 0x02B4
    1e74:	89 2b       	or	r24, r25
    1e76:	21 f4       	brne	.+8      	; 0x1e80 <fdevopen+0x52>
    1e78:	f0 93 b4 02 	sts	0x02B4, r31
    1e7c:	e0 93 b3 02 	sts	0x02B3, r30
    1e80:	20 97       	sbiw	r28, 0x00	; 0
    1e82:	c9 f0       	breq	.+50     	; 0x1eb6 <fdevopen+0x88>
    1e84:	d1 87       	std	Z+9, r29	; 0x09
    1e86:	c0 87       	std	Z+8, r28	; 0x08
    1e88:	83 81       	ldd	r24, Z+3	; 0x03
    1e8a:	82 60       	ori	r24, 0x02	; 2
    1e8c:	83 83       	std	Z+3, r24	; 0x03
    1e8e:	80 91 b5 02 	lds	r24, 0x02B5
    1e92:	90 91 b6 02 	lds	r25, 0x02B6
    1e96:	89 2b       	or	r24, r25
    1e98:	71 f4       	brne	.+28     	; 0x1eb6 <fdevopen+0x88>
    1e9a:	f0 93 b6 02 	sts	0x02B6, r31
    1e9e:	e0 93 b5 02 	sts	0x02B5, r30
    1ea2:	80 91 b7 02 	lds	r24, 0x02B7
    1ea6:	90 91 b8 02 	lds	r25, 0x02B8
    1eaa:	89 2b       	or	r24, r25
    1eac:	21 f4       	brne	.+8      	; 0x1eb6 <fdevopen+0x88>
    1eae:	f0 93 b8 02 	sts	0x02B8, r31
    1eb2:	e0 93 b7 02 	sts	0x02B7, r30
    1eb6:	cf 01       	movw	r24, r30
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	1f 91       	pop	r17
    1ebe:	0f 91       	pop	r16
    1ec0:	08 95       	ret

00001ec2 <fputc>:
    1ec2:	0f 93       	push	r16
    1ec4:	1f 93       	push	r17
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	18 2f       	mov	r17, r24
    1ecc:	09 2f       	mov	r16, r25
    1ece:	eb 01       	movw	r28, r22
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	81 fd       	sbrc	r24, 1
    1ed4:	03 c0       	rjmp	.+6      	; 0x1edc <fputc+0x1a>
    1ed6:	8f ef       	ldi	r24, 0xFF	; 255
    1ed8:	9f ef       	ldi	r25, 0xFF	; 255
    1eda:	20 c0       	rjmp	.+64     	; 0x1f1c <fputc+0x5a>
    1edc:	82 ff       	sbrs	r24, 2
    1ede:	10 c0       	rjmp	.+32     	; 0x1f00 <fputc+0x3e>
    1ee0:	4e 81       	ldd	r20, Y+6	; 0x06
    1ee2:	5f 81       	ldd	r21, Y+7	; 0x07
    1ee4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ee6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ee8:	42 17       	cp	r20, r18
    1eea:	53 07       	cpc	r21, r19
    1eec:	7c f4       	brge	.+30     	; 0x1f0c <fputc+0x4a>
    1eee:	e8 81       	ld	r30, Y
    1ef0:	f9 81       	ldd	r31, Y+1	; 0x01
    1ef2:	9f 01       	movw	r18, r30
    1ef4:	2f 5f       	subi	r18, 0xFF	; 255
    1ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef8:	39 83       	std	Y+1, r19	; 0x01
    1efa:	28 83       	st	Y, r18
    1efc:	10 83       	st	Z, r17
    1efe:	06 c0       	rjmp	.+12     	; 0x1f0c <fputc+0x4a>
    1f00:	e8 85       	ldd	r30, Y+8	; 0x08
    1f02:	f9 85       	ldd	r31, Y+9	; 0x09
    1f04:	81 2f       	mov	r24, r17
    1f06:	19 95       	eicall
    1f08:	89 2b       	or	r24, r25
    1f0a:	29 f7       	brne	.-54     	; 0x1ed6 <fputc+0x14>
    1f0c:	2e 81       	ldd	r18, Y+6	; 0x06
    1f0e:	3f 81       	ldd	r19, Y+7	; 0x07
    1f10:	2f 5f       	subi	r18, 0xFF	; 255
    1f12:	3f 4f       	sbci	r19, 0xFF	; 255
    1f14:	3f 83       	std	Y+7, r19	; 0x07
    1f16:	2e 83       	std	Y+6, r18	; 0x06
    1f18:	81 2f       	mov	r24, r17
    1f1a:	90 2f       	mov	r25, r16
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	1f 91       	pop	r17
    1f22:	0f 91       	pop	r16
    1f24:	08 95       	ret

00001f26 <printf>:
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	fe 01       	movw	r30, r28
    1f30:	36 96       	adiw	r30, 0x06	; 6
    1f32:	61 91       	ld	r22, Z+
    1f34:	71 91       	ld	r23, Z+
    1f36:	af 01       	movw	r20, r30
    1f38:	80 91 b5 02 	lds	r24, 0x02B5
    1f3c:	90 91 b6 02 	lds	r25, 0x02B6
    1f40:	d4 d9       	rcall	.-3160   	; 0x12ea <vfprintf>
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	08 95       	ret

00001f48 <puts>:
    1f48:	0f 93       	push	r16
    1f4a:	1f 93       	push	r17
    1f4c:	cf 93       	push	r28
    1f4e:	df 93       	push	r29
    1f50:	e0 91 b5 02 	lds	r30, 0x02B5
    1f54:	f0 91 b6 02 	lds	r31, 0x02B6
    1f58:	23 81       	ldd	r18, Z+3	; 0x03
    1f5a:	21 ff       	sbrs	r18, 1
    1f5c:	1b c0       	rjmp	.+54     	; 0x1f94 <puts+0x4c>
    1f5e:	ec 01       	movw	r28, r24
    1f60:	00 e0       	ldi	r16, 0x00	; 0
    1f62:	10 e0       	ldi	r17, 0x00	; 0
    1f64:	89 91       	ld	r24, Y+
    1f66:	60 91 b5 02 	lds	r22, 0x02B5
    1f6a:	70 91 b6 02 	lds	r23, 0x02B6
    1f6e:	db 01       	movw	r26, r22
    1f70:	18 96       	adiw	r26, 0x08	; 8
    1f72:	ed 91       	ld	r30, X+
    1f74:	fc 91       	ld	r31, X
    1f76:	19 97       	sbiw	r26, 0x09	; 9
    1f78:	88 23       	and	r24, r24
    1f7a:	31 f0       	breq	.+12     	; 0x1f88 <puts+0x40>
    1f7c:	19 95       	eicall
    1f7e:	89 2b       	or	r24, r25
    1f80:	89 f3       	breq	.-30     	; 0x1f64 <puts+0x1c>
    1f82:	0f ef       	ldi	r16, 0xFF	; 255
    1f84:	1f ef       	ldi	r17, 0xFF	; 255
    1f86:	ee cf       	rjmp	.-36     	; 0x1f64 <puts+0x1c>
    1f88:	8a e0       	ldi	r24, 0x0A	; 10
    1f8a:	19 95       	eicall
    1f8c:	89 2b       	or	r24, r25
    1f8e:	11 f4       	brne	.+4      	; 0x1f94 <puts+0x4c>
    1f90:	c8 01       	movw	r24, r16
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <puts+0x50>
    1f94:	8f ef       	ldi	r24, 0xFF	; 255
    1f96:	9f ef       	ldi	r25, 0xFF	; 255
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	1f 91       	pop	r17
    1f9e:	0f 91       	pop	r16
    1fa0:	08 95       	ret

00001fa2 <__ultoa_invert>:
    1fa2:	fa 01       	movw	r30, r20
    1fa4:	aa 27       	eor	r26, r26
    1fa6:	28 30       	cpi	r18, 0x08	; 8
    1fa8:	51 f1       	breq	.+84     	; 0x1ffe <__ultoa_invert+0x5c>
    1faa:	20 31       	cpi	r18, 0x10	; 16
    1fac:	81 f1       	breq	.+96     	; 0x200e <__ultoa_invert+0x6c>
    1fae:	e8 94       	clt
    1fb0:	6f 93       	push	r22
    1fb2:	6e 7f       	andi	r22, 0xFE	; 254
    1fb4:	6e 5f       	subi	r22, 0xFE	; 254
    1fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fba:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbc:	af 4f       	sbci	r26, 0xFF	; 255
    1fbe:	b1 e0       	ldi	r27, 0x01	; 1
    1fc0:	3e d0       	rcall	.+124    	; 0x203e <__ultoa_invert+0x9c>
    1fc2:	b4 e0       	ldi	r27, 0x04	; 4
    1fc4:	3c d0       	rcall	.+120    	; 0x203e <__ultoa_invert+0x9c>
    1fc6:	67 0f       	add	r22, r23
    1fc8:	78 1f       	adc	r23, r24
    1fca:	89 1f       	adc	r24, r25
    1fcc:	9a 1f       	adc	r25, r26
    1fce:	a1 1d       	adc	r26, r1
    1fd0:	68 0f       	add	r22, r24
    1fd2:	79 1f       	adc	r23, r25
    1fd4:	8a 1f       	adc	r24, r26
    1fd6:	91 1d       	adc	r25, r1
    1fd8:	a1 1d       	adc	r26, r1
    1fda:	6a 0f       	add	r22, r26
    1fdc:	71 1d       	adc	r23, r1
    1fde:	81 1d       	adc	r24, r1
    1fe0:	91 1d       	adc	r25, r1
    1fe2:	a1 1d       	adc	r26, r1
    1fe4:	20 d0       	rcall	.+64     	; 0x2026 <__ultoa_invert+0x84>
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <__ultoa_invert+0x48>
    1fe8:	68 94       	set
    1fea:	3f 91       	pop	r19
    1fec:	2a e0       	ldi	r18, 0x0A	; 10
    1fee:	26 9f       	mul	r18, r22
    1ff0:	11 24       	eor	r1, r1
    1ff2:	30 19       	sub	r19, r0
    1ff4:	30 5d       	subi	r19, 0xD0	; 208
    1ff6:	31 93       	st	Z+, r19
    1ff8:	de f6       	brtc	.-74     	; 0x1fb0 <__ultoa_invert+0xe>
    1ffa:	cf 01       	movw	r24, r30
    1ffc:	08 95       	ret
    1ffe:	46 2f       	mov	r20, r22
    2000:	47 70       	andi	r20, 0x07	; 7
    2002:	40 5d       	subi	r20, 0xD0	; 208
    2004:	41 93       	st	Z+, r20
    2006:	b3 e0       	ldi	r27, 0x03	; 3
    2008:	0f d0       	rcall	.+30     	; 0x2028 <__ultoa_invert+0x86>
    200a:	c9 f7       	brne	.-14     	; 0x1ffe <__ultoa_invert+0x5c>
    200c:	f6 cf       	rjmp	.-20     	; 0x1ffa <__ultoa_invert+0x58>
    200e:	46 2f       	mov	r20, r22
    2010:	4f 70       	andi	r20, 0x0F	; 15
    2012:	40 5d       	subi	r20, 0xD0	; 208
    2014:	4a 33       	cpi	r20, 0x3A	; 58
    2016:	18 f0       	brcs	.+6      	; 0x201e <__ultoa_invert+0x7c>
    2018:	49 5d       	subi	r20, 0xD9	; 217
    201a:	31 fd       	sbrc	r19, 1
    201c:	40 52       	subi	r20, 0x20	; 32
    201e:	41 93       	st	Z+, r20
    2020:	02 d0       	rcall	.+4      	; 0x2026 <__ultoa_invert+0x84>
    2022:	a9 f7       	brne	.-22     	; 0x200e <__ultoa_invert+0x6c>
    2024:	ea cf       	rjmp	.-44     	; 0x1ffa <__ultoa_invert+0x58>
    2026:	b4 e0       	ldi	r27, 0x04	; 4
    2028:	a6 95       	lsr	r26
    202a:	97 95       	ror	r25
    202c:	87 95       	ror	r24
    202e:	77 95       	ror	r23
    2030:	67 95       	ror	r22
    2032:	ba 95       	dec	r27
    2034:	c9 f7       	brne	.-14     	; 0x2028 <__ultoa_invert+0x86>
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	61 05       	cpc	r22, r1
    203a:	71 05       	cpc	r23, r1
    203c:	08 95       	ret
    203e:	9b 01       	movw	r18, r22
    2040:	ac 01       	movw	r20, r24
    2042:	0a 2e       	mov	r0, r26
    2044:	06 94       	lsr	r0
    2046:	57 95       	ror	r21
    2048:	47 95       	ror	r20
    204a:	37 95       	ror	r19
    204c:	27 95       	ror	r18
    204e:	ba 95       	dec	r27
    2050:	c9 f7       	brne	.-14     	; 0x2044 <__ultoa_invert+0xa2>
    2052:	62 0f       	add	r22, r18
    2054:	73 1f       	adc	r23, r19
    2056:	84 1f       	adc	r24, r20
    2058:	95 1f       	adc	r25, r21
    205a:	a0 1d       	adc	r26, r0
    205c:	08 95       	ret

0000205e <calloc>:
    205e:	0f 93       	push	r16
    2060:	1f 93       	push	r17
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	86 9f       	mul	r24, r22
    2068:	80 01       	movw	r16, r0
    206a:	87 9f       	mul	r24, r23
    206c:	10 0d       	add	r17, r0
    206e:	96 9f       	mul	r25, r22
    2070:	10 0d       	add	r17, r0
    2072:	11 24       	eor	r1, r1
    2074:	c8 01       	movw	r24, r16
    2076:	c6 dc       	rcall	.-1652   	; 0x1a04 <malloc>
    2078:	ec 01       	movw	r28, r24
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	21 f0       	breq	.+8      	; 0x2086 <calloc+0x28>
    207e:	a8 01       	movw	r20, r16
    2080:	60 e0       	ldi	r22, 0x00	; 0
    2082:	70 e0       	ldi	r23, 0x00	; 0
    2084:	06 d0       	rcall	.+12     	; 0x2092 <memset>
    2086:	ce 01       	movw	r24, r28
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	1f 91       	pop	r17
    208e:	0f 91       	pop	r16
    2090:	08 95       	ret

00002092 <memset>:
    2092:	dc 01       	movw	r26, r24
    2094:	01 c0       	rjmp	.+2      	; 0x2098 <memset+0x6>
    2096:	6d 93       	st	X+, r22
    2098:	41 50       	subi	r20, 0x01	; 1
    209a:	50 40       	sbci	r21, 0x00	; 0
    209c:	e0 f7       	brcc	.-8      	; 0x2096 <memset+0x4>
    209e:	08 95       	ret

000020a0 <_exit>:
    20a0:	f8 94       	cli

000020a2 <__stop_program>:
    20a2:	ff cf       	rjmp	.-2      	; 0x20a2 <__stop_program>
