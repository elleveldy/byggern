
Atmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800200  0000207a  0000210e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000207a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800290  00800290  0000219e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000219e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000428  00000000  00000000  000021fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e40  00000000  00000000  00002622  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000146b  00000000  00000000  00005462  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001f1b  00000000  00000000  000068cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000964  00000000  00000000  000087e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a94  00000000  00000000  0000914c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000016e1  00000000  00000000  00009be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000328  00000000  00000000  0000b2c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	43 c1       	rjmp	.+646    	; 0x288 <__ctors_end>
       2:	00 00       	nop
       4:	61 c1       	rjmp	.+706    	; 0x2c8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c1       	rjmp	.+702    	; 0x2c8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c1       	rjmp	.+698    	; 0x2c8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c1       	rjmp	.+694    	; 0x2c8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c1       	rjmp	.+690    	; 0x2c8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c1       	rjmp	.+686    	; 0x2c8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c1       	rjmp	.+682    	; 0x2c8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c1       	rjmp	.+678    	; 0x2c8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c1       	rjmp	.+674    	; 0x2c8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c1       	rjmp	.+670    	; 0x2c8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c1       	rjmp	.+666    	; 0x2c8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c1       	rjmp	.+662    	; 0x2c8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c1       	rjmp	.+658    	; 0x2c8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c1       	rjmp	.+654    	; 0x2c8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c1       	rjmp	.+650    	; 0x2c8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c1       	rjmp	.+646    	; 0x2c8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c1       	rjmp	.+642    	; 0x2c8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c1       	rjmp	.+638    	; 0x2c8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c1       	rjmp	.+634    	; 0x2c8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c1       	rjmp	.+630    	; 0x2c8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c1       	rjmp	.+626    	; 0x2c8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c1       	rjmp	.+622    	; 0x2c8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c1       	rjmp	.+618    	; 0x2c8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c1       	rjmp	.+614    	; 0x2c8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c1       	rjmp	.+610    	; 0x2c8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c1       	rjmp	.+606    	; 0x2c8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c1       	rjmp	.+602    	; 0x2c8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c1       	rjmp	.+598    	; 0x2c8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c1       	rjmp	.+594    	; 0x2c8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c1       	rjmp	.+590    	; 0x2c8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c1       	rjmp	.+586    	; 0x2c8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c1       	rjmp	.+582    	; 0x2c8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c1       	rjmp	.+578    	; 0x2c8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c1       	rjmp	.+574    	; 0x2c8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1d c1       	rjmp	.+570    	; 0x2c8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1b c1       	rjmp	.+566    	; 0x2c8 <__bad_interrupt>
      92:	00 00       	nop
      94:	19 c1       	rjmp	.+562    	; 0x2c8 <__bad_interrupt>
      96:	00 00       	nop
      98:	17 c1       	rjmp	.+558    	; 0x2c8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0b c3       	rjmp	.+1558   	; 0x6b4 <__vector_39>
      9e:	00 00       	nop
      a0:	13 c1       	rjmp	.+550    	; 0x2c8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	11 c1       	rjmp	.+546    	; 0x2c8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0f c1       	rjmp	.+542    	; 0x2c8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0d c1       	rjmp	.+538    	; 0x2c8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0b c1       	rjmp	.+534    	; 0x2c8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	09 c1       	rjmp	.+530    	; 0x2c8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	07 c1       	rjmp	.+526    	; 0x2c8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	05 c1       	rjmp	.+522    	; 0x2c8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	03 c1       	rjmp	.+518    	; 0x2c8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	01 c1       	rjmp	.+514    	; 0x2c8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ff c0       	rjmp	.+510    	; 0x2c8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fd c0       	rjmp	.+506    	; 0x2c8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fb c0       	rjmp	.+502    	; 0x2c8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f9 c0       	rjmp	.+498    	; 0x2c8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f7 c0       	rjmp	.+494    	; 0x2c8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f5 c0       	rjmp	.+490    	; 0x2c8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f3 c0       	rjmp	.+486    	; 0x2c8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	76 03       	mulsu	r23, r22
      e6:	c8 03       	fmulsu	r20, r16
      e8:	c8 03       	fmulsu	r20, r16
      ea:	c8 03       	fmulsu	r20, r16
      ec:	c8 03       	fmulsu	r20, r16
      ee:	c8 03       	fmulsu	r20, r16
      f0:	c8 03       	fmulsu	r20, r16
      f2:	c8 03       	fmulsu	r20, r16
      f4:	76 03       	mulsu	r23, r22
      f6:	c8 03       	fmulsu	r20, r16
      f8:	c8 03       	fmulsu	r20, r16
      fa:	c8 03       	fmulsu	r20, r16
      fc:	c8 03       	fmulsu	r20, r16
      fe:	c8 03       	fmulsu	r20, r16
     100:	c8 03       	fmulsu	r20, r16
     102:	c8 03       	fmulsu	r20, r16
     104:	78 03       	fmul	r23, r16
     106:	c8 03       	fmulsu	r20, r16
     108:	c8 03       	fmulsu	r20, r16
     10a:	c8 03       	fmulsu	r20, r16
     10c:	c8 03       	fmulsu	r20, r16
     10e:	c8 03       	fmulsu	r20, r16
     110:	c8 03       	fmulsu	r20, r16
     112:	c8 03       	fmulsu	r20, r16
     114:	c8 03       	fmulsu	r20, r16
     116:	c8 03       	fmulsu	r20, r16
     118:	c8 03       	fmulsu	r20, r16
     11a:	c8 03       	fmulsu	r20, r16
     11c:	c8 03       	fmulsu	r20, r16
     11e:	c8 03       	fmulsu	r20, r16
     120:	c8 03       	fmulsu	r20, r16
     122:	c8 03       	fmulsu	r20, r16
     124:	78 03       	fmul	r23, r16
     126:	c8 03       	fmulsu	r20, r16
     128:	c8 03       	fmulsu	r20, r16
     12a:	c8 03       	fmulsu	r20, r16
     12c:	c8 03       	fmulsu	r20, r16
     12e:	c8 03       	fmulsu	r20, r16
     130:	c8 03       	fmulsu	r20, r16
     132:	c8 03       	fmulsu	r20, r16
     134:	c8 03       	fmulsu	r20, r16
     136:	c8 03       	fmulsu	r20, r16
     138:	c8 03       	fmulsu	r20, r16
     13a:	c8 03       	fmulsu	r20, r16
     13c:	c8 03       	fmulsu	r20, r16
     13e:	c8 03       	fmulsu	r20, r16
     140:	c8 03       	fmulsu	r20, r16
     142:	c8 03       	fmulsu	r20, r16
     144:	c4 03       	fmuls	r20, r20
     146:	c8 03       	fmulsu	r20, r16
     148:	c8 03       	fmulsu	r20, r16
     14a:	c8 03       	fmulsu	r20, r16
     14c:	c8 03       	fmulsu	r20, r16
     14e:	c8 03       	fmulsu	r20, r16
     150:	c8 03       	fmulsu	r20, r16
     152:	c8 03       	fmulsu	r20, r16
     154:	a1 03       	fmuls	r18, r17
     156:	c8 03       	fmulsu	r20, r16
     158:	c8 03       	fmulsu	r20, r16
     15a:	c8 03       	fmulsu	r20, r16
     15c:	c8 03       	fmulsu	r20, r16
     15e:	c8 03       	fmulsu	r20, r16
     160:	c8 03       	fmulsu	r20, r16
     162:	c8 03       	fmulsu	r20, r16
     164:	c8 03       	fmulsu	r20, r16
     166:	c8 03       	fmulsu	r20, r16
     168:	c8 03       	fmulsu	r20, r16
     16a:	c8 03       	fmulsu	r20, r16
     16c:	c8 03       	fmulsu	r20, r16
     16e:	c8 03       	fmulsu	r20, r16
     170:	c8 03       	fmulsu	r20, r16
     172:	c8 03       	fmulsu	r20, r16
     174:	95 03       	fmuls	r17, r21
     176:	c8 03       	fmulsu	r20, r16
     178:	c8 03       	fmulsu	r20, r16
     17a:	c8 03       	fmulsu	r20, r16
     17c:	c8 03       	fmulsu	r20, r16
     17e:	c8 03       	fmulsu	r20, r16
     180:	c8 03       	fmulsu	r20, r16
     182:	c8 03       	fmulsu	r20, r16
     184:	b3 03       	fmuls	r19, r19

00000186 <__trampolines_end>:
     186:	6e 61       	ori	r22, 0x1E	; 30
     188:	6e 00       	.word	0x006e	; ????

0000018a <__c.2159>:
     18a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     19a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1aa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ba:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1ca:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1da:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1ea:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1fa:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     20a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     21a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     22a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     23a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     24a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     25a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     26a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     27a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000288 <__ctors_end>:
     288:	11 24       	eor	r1, r1
     28a:	1f be       	out	0x3f, r1	; 63
     28c:	cf ef       	ldi	r28, 0xFF	; 255
     28e:	d1 e2       	ldi	r29, 0x21	; 33
     290:	de bf       	out	0x3e, r29	; 62
     292:	cd bf       	out	0x3d, r28	; 61
     294:	00 e0       	ldi	r16, 0x00	; 0
     296:	0c bf       	out	0x3c, r16	; 60

00000298 <__do_copy_data>:
     298:	12 e0       	ldi	r17, 0x02	; 2
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b2 e0       	ldi	r27, 0x02	; 2
     29e:	ea e7       	ldi	r30, 0x7A	; 122
     2a0:	f0 e2       	ldi	r31, 0x20	; 32
     2a2:	00 e0       	ldi	r16, 0x00	; 0
     2a4:	0b bf       	out	0x3b, r16	; 59
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__do_copy_data+0x14>
     2a8:	07 90       	elpm	r0, Z+
     2aa:	0d 92       	st	X+, r0
     2ac:	a0 39       	cpi	r26, 0x90	; 144
     2ae:	b1 07       	cpc	r27, r17
     2b0:	d9 f7       	brne	.-10     	; 0x2a8 <__do_copy_data+0x10>

000002b2 <__do_clear_bss>:
     2b2:	22 e0       	ldi	r18, 0x02	; 2
     2b4:	a0 e9       	ldi	r26, 0x90	; 144
     2b6:	b2 e0       	ldi	r27, 0x02	; 2
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	ae 3a       	cpi	r26, 0xAE	; 174
     2be:	b2 07       	cpc	r27, r18
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	60 d3       	rcall	.+1728   	; 0x984 <main>
     2c4:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <_exit>

000002c8 <__bad_interrupt>:
     2c8:	9b ce       	rjmp	.-714    	; 0x0 <__vectors>

000002ca <can_init>:
#include <stdlib.h>
#include <string.h>
#include <util/delay.h>


void can_init(int mode){
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	ec 01       	movw	r28, r24

	mcp2515_init();
     2d0:	a3 d1       	rcall	.+838    	; 0x618 <mcp2515_init>
	mcp2515_bit_modify(MCP_RXB0CTRL, MCP_MASK_FILTER, 0xff);
     2d2:	4f ef       	ldi	r20, 0xFF	; 255
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	60 e6       	ldi	r22, 0x60	; 96
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	80 e6       	ldi	r24, 0x60	; 96
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	83 d1       	rcall	.+774    	; 0x5e6 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXB1CTRL, MCP_MASK_FILTER, 0xff);
     2e0:	4f ef       	ldi	r20, 0xFF	; 255
     2e2:	50 e0       	ldi	r21, 0x00	; 0
     2e4:	60 e6       	ldi	r22, 0x60	; 96
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	80 e7       	ldi	r24, 0x70	; 112
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	7c d1       	rcall	.+760    	; 0x5e6 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, mode);
     2ee:	ae 01       	movw	r20, r28
     2f0:	60 ee       	ldi	r22, 0xE0	; 224
     2f2:	70 e0       	ldi	r23, 0x00	; 0
     2f4:	8f e0       	ldi	r24, 0x0F	; 15
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	76 d1       	rcall	.+748    	; 0x5e6 <mcp2515_bit_modify>
	DDRE &= ~(1 << PE1);
     2fa:	69 98       	cbi	0x0d, 1	; 13
}
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <can_transmit>:

void can_transmit(can_message* msg, int buffer_select){
     302:	8f 92       	push	r8
     304:	9f 92       	push	r9
     306:	af 92       	push	r10
     308:	bf 92       	push	r11
     30a:	cf 92       	push	r12
     30c:	df 92       	push	r13
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	1f 92       	push	r1
     31c:	1f 92       	push	r1
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	5c 01       	movw	r10, r24
     324:	7b 01       	movw	r14, r22
	
	mcp2515_bit_modify(buffer_select, 0x08, 0xff);
     326:	4f ef       	ldi	r20, 0xFF	; 255
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	68 e0       	ldi	r22, 0x08	; 8
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	c7 01       	movw	r24, r14
     330:	5a d1       	rcall	.+692    	; 0x5e6 <mcp2515_bit_modify>
	
	while(mcp2515_read(buffer_select) & (1 << MCP_TXREQ));
     332:	c7 01       	movw	r24, r14
     334:	39 d1       	rcall	.+626    	; 0x5a8 <mcp2515_read>
     336:	83 fd       	sbrc	r24, 3
     338:	fc cf       	rjmp	.-8      	; 0x332 <can_transmit+0x30>
	
	volatile uint8_t idl = MCP2515_MASK_IDL & (msg->id << 5);
     33a:	f5 01       	movw	r30, r10
     33c:	80 81       	ld	r24, Z
     33e:	91 81       	ldd	r25, Z+1	; 0x01
     340:	28 2f       	mov	r18, r24
     342:	22 95       	swap	r18
     344:	22 0f       	add	r18, r18
     346:	20 7e       	andi	r18, 0xE0	; 224
     348:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t idh = MCP2515_MASK_IDH & (msg->id >> 3);
     34a:	96 95       	lsr	r25
     34c:	87 95       	ror	r24
     34e:	96 95       	lsr	r25
     350:	87 95       	ror	r24
     352:	96 95       	lsr	r25
     354:	87 95       	ror	r24
     356:	8a 83       	std	Y+2, r24	; 0x02
	
	mcp2515_write(buffer_select + MCP2515_IDL_OFFSET, idl); //3 LSB
     358:	69 81       	ldd	r22, Y+1	; 0x01
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	c7 01       	movw	r24, r14
     35e:	02 96       	adiw	r24, 0x02	; 2
     360:	2f d1       	rcall	.+606    	; 0x5c0 <mcp2515_write>
	mcp2515_write(buffer_select + MCP2515_IDH_OFFSET, idh); //8 MSB
     362:	6a 81       	ldd	r22, Y+2	; 0x02
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	c7 01       	movw	r24, r14
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	2a d1       	rcall	.+596    	; 0x5c0 <mcp2515_write>
	
	mcp2515_write(buffer_select + MCP2515_DLC_OFFSET, MCP2515_MASK_DLC & (msg->length));
     36c:	f5 01       	movw	r30, r10
     36e:	62 81       	ldd	r22, Z+2	; 0x02
     370:	6f 70       	andi	r22, 0x0F	; 15
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	c7 01       	movw	r24, r14
     376:	05 96       	adiw	r24, 0x05	; 5
     378:	23 d1       	rcall	.+582    	; 0x5c0 <mcp2515_write>
	
	
	for(int i = 0; i < msg->length; i++){
     37a:	f5 01       	movw	r30, r10
     37c:	82 81       	ldd	r24, Z+2	; 0x02
     37e:	88 23       	and	r24, r24
     380:	d1 f0       	breq	.+52     	; 0x3b6 <can_transmit+0xb4>
     382:	65 01       	movw	r12, r10
     384:	f3 e0       	ldi	r31, 0x03	; 3
     386:	cf 0e       	add	r12, r31
     388:	d1 1c       	adc	r13, r1
     38a:	00 e0       	ldi	r16, 0x00	; 0
     38c:	10 e0       	ldi	r17, 0x00	; 0
     38e:	47 01       	movw	r8, r14
     390:	86 e0       	ldi	r24, 0x06	; 6
     392:	88 0e       	add	r8, r24
     394:	91 1c       	adc	r9, r1
		mcp2515_write(buffer_select + MCP2515_TXB_OFFSET + i, msg->data[i]);
     396:	f6 01       	movw	r30, r12
     398:	61 91       	ld	r22, Z+
     39a:	6f 01       	movw	r12, r30
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	c4 01       	movw	r24, r8
     3a0:	80 0f       	add	r24, r16
     3a2:	91 1f       	adc	r25, r17
     3a4:	0d d1       	rcall	.+538    	; 0x5c0 <mcp2515_write>
	mcp2515_write(buffer_select + MCP2515_IDH_OFFSET, idh); //8 MSB
	
	mcp2515_write(buffer_select + MCP2515_DLC_OFFSET, MCP2515_MASK_DLC & (msg->length));
	
	
	for(int i = 0; i < msg->length; i++){
     3a6:	0f 5f       	subi	r16, 0xFF	; 255
     3a8:	1f 4f       	sbci	r17, 0xFF	; 255
     3aa:	f5 01       	movw	r30, r10
     3ac:	82 81       	ldd	r24, Z+2	; 0x02
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	08 17       	cp	r16, r24
     3b2:	19 07       	cpc	r17, r25
     3b4:	84 f3       	brlt	.-32     	; 0x396 <can_transmit+0x94>
		
	}
	
	int buffer_control;
	
	if (buffer_select == MCP_TXB0CTRL){
     3b6:	f0 e3       	ldi	r31, 0x30	; 48
     3b8:	ef 16       	cp	r14, r31
     3ba:	f1 04       	cpc	r15, r1
     3bc:	59 f0       	breq	.+22     	; 0x3d4 <can_transmit+0xd2>
		buffer_control = MCP_RTS_TX0;
	}
	else if (buffer_select == MCP_TXB1CTRL){
     3be:	80 e4       	ldi	r24, 0x40	; 64
     3c0:	e8 16       	cp	r14, r24
     3c2:	f1 04       	cpc	r15, r1
     3c4:	51 f0       	breq	.+20     	; 0x3da <can_transmit+0xd8>
		buffer_control = MCP_RTS_TX1;
	}
	else if (buffer_select == MCP_TXB2CTRL){
     3c6:	e0 e5       	ldi	r30, 0x50	; 80
     3c8:	ee 16       	cp	r14, r30
     3ca:	f1 04       	cpc	r15, r1
     3cc:	49 f4       	brne	.+18     	; 0x3e0 <can_transmit+0xde>
		buffer_control=MCP_RTS_TX2;
     3ce:	84 e8       	ldi	r24, 0x84	; 132
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	05 c0       	rjmp	.+10     	; 0x3de <can_transmit+0xdc>
	}
	
	int buffer_control;
	
	if (buffer_select == MCP_TXB0CTRL){
		buffer_control = MCP_RTS_TX0;
     3d4:	81 e8       	ldi	r24, 0x81	; 129
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <can_transmit+0xdc>
	}
	else if (buffer_select == MCP_TXB1CTRL){
		buffer_control = MCP_RTS_TX1;
     3da:	82 e8       	ldi	r24, 0x82	; 130
     3dc:	90 e0       	ldi	r25, 0x00	; 0
		return;
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
     3de:	ff d0       	rcall	.+510    	; 0x5de <mcp2515_request_to_send>
}
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	ff 90       	pop	r15
     3ee:	ef 90       	pop	r14
     3f0:	df 90       	pop	r13
     3f2:	cf 90       	pop	r12
     3f4:	bf 90       	pop	r11
     3f6:	af 90       	pop	r10
     3f8:	9f 90       	pop	r9
     3fa:	8f 90       	pop	r8
     3fc:	08 95       	ret

000003fe <can_poll_interrupt>:
}


uint8_t can_poll_interrupt(){
	
	while(!(PINE & (1 << PE1))){}
     3fe:	61 9b       	sbis	0x0c, 1	; 12
     400:	fe cf       	rjmp	.-4      	; 0x3fe <can_poll_interrupt>
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
     402:	8c e2       	ldi	r24, 0x2C	; 44
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	d0 d0       	rcall	.+416    	; 0x5a8 <mcp2515_read>
     408:	80 fd       	sbrc	r24, 0
     40a:	07 c0       	rjmp	.+14     	; 0x41a <can_poll_interrupt+0x1c>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
	}
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
     40c:	8c e2       	ldi	r24, 0x2C	; 44
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	cb d0       	rcall	.+406    	; 0x5a8 <mcp2515_read>
     412:	81 ff       	sbrs	r24, 1
     414:	04 c0       	rjmp	.+8      	; 0x41e <can_poll_interrupt+0x20>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
     416:	80 e7       	ldi	r24, 0x70	; 112
     418:	08 95       	ret
	
	while(!(PINE & (1 << PE1))){}
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
     41a:	80 e6       	ldi	r24, 0x60	; 96
     41c:	08 95       	ret
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
	}
	return -1;
     41e:	8f ef       	ldi	r24, 0xFF	; 255
}
     420:	08 95       	ret

00000422 <can_recieve>:
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
}

can_message can_recieve(can_message* msg){
     422:	7f 92       	push	r7
     424:	8f 92       	push	r8
     426:	9f 92       	push	r9
     428:	af 92       	push	r10
     42a:	bf 92       	push	r11
     42c:	cf 92       	push	r12
     42e:	df 92       	push	r13
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	cd b7       	in	r28, 0x3d	; 61
     43e:	de b7       	in	r29, 0x3e	; 62
     440:	2b 97       	sbiw	r28, 0x0b	; 11
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	f8 94       	cli
     446:	de bf       	out	0x3e, r29	; 62
     448:	0f be       	out	0x3f, r0	; 63
     44a:	cd bf       	out	0x3d, r28	; 61
     44c:	6c 01       	movw	r12, r24
	can_message m;
	
	uint8_t buffer_select = can_poll_interrupt();
     44e:	d7 df       	rcall	.-82     	; 0x3fe <can_poll_interrupt>
     450:	98 2e       	mov	r9, r24
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
     452:	08 2f       	mov	r16, r24
     454:	10 e0       	ldi	r17, 0x00	; 0
     456:	c8 01       	movw	r24, r16
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	a6 d0       	rcall	.+332    	; 0x5a8 <mcp2515_read>
     45c:	7c 01       	movw	r14, r24
     45e:	c8 01       	movw	r24, r16
     460:	02 96       	adiw	r24, 0x02	; 2
     462:	a2 d0       	rcall	.+324    	; 0x5a8 <mcp2515_read>
     464:	95 95       	asr	r25
     466:	87 95       	ror	r24
     468:	95 95       	asr	r25
     46a:	87 95       	ror	r24
     46c:	95 95       	asr	r25
     46e:	87 95       	ror	r24
     470:	95 95       	asr	r25
     472:	87 95       	ror	r24
     474:	95 95       	asr	r25
     476:	87 95       	ror	r24
     478:	ee 0c       	add	r14, r14
     47a:	ff 1c       	adc	r15, r15
     47c:	ee 0c       	add	r14, r14
     47e:	ff 1c       	adc	r15, r15
     480:	ee 0c       	add	r14, r14
     482:	ff 1c       	adc	r15, r15
     484:	5c 01       	movw	r10, r24
     486:	ae 28       	or	r10, r14
     488:	bf 28       	or	r11, r15
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
     48a:	c8 01       	movw	r24, r16
     48c:	05 96       	adiw	r24, 0x05	; 5
     48e:	8c d0       	rcall	.+280    	; 0x5a8 <mcp2515_read>
     490:	8f 70       	andi	r24, 0x0F	; 15
     492:	78 2e       	mov	r7, r24
	
	for(uint8_t i = 0; i < m.length; i++){
     494:	a9 f0       	breq	.+42     	; 0x4c0 <can_recieve+0x9e>
     496:	8e 01       	movw	r16, r28
     498:	0c 5f       	subi	r16, 0xFC	; 252
     49a:	1f 4f       	sbci	r17, 0xFF	; 255
     49c:	81 2c       	mov	r8, r1
     49e:	ce 01       	movw	r24, r28
     4a0:	80 95       	com	r24
     4a2:	90 95       	com	r25
     4a4:	03 96       	adiw	r24, 0x03	; 3
     4a6:	7c 01       	movw	r14, r24
     4a8:	e9 0c       	add	r14, r9
     4aa:	f1 1c       	adc	r15, r1
		m.data[i] = mcp2515_read(buffer_select + MCP2515_RXB_OFFSET + i);// + i, msg->data[i]);
     4ac:	c7 01       	movw	r24, r14
     4ae:	80 0f       	add	r24, r16
     4b0:	91 1f       	adc	r25, r17
     4b2:	7a d0       	rcall	.+244    	; 0x5a8 <mcp2515_read>
     4b4:	f8 01       	movw	r30, r16
     4b6:	81 93       	st	Z+, r24
     4b8:	8f 01       	movw	r16, r30
	uint8_t buffer_select = can_poll_interrupt();
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
	
	for(uint8_t i = 0; i < m.length; i++){
     4ba:	83 94       	inc	r8
     4bc:	87 10       	cpse	r8, r7
     4be:	f6 cf       	rjmp	.-20     	; 0x4ac <can_recieve+0x8a>
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	
	switch(buffer_select){
     4c0:	f0 e6       	ldi	r31, 0x60	; 96
     4c2:	9f 16       	cp	r9, r31
     4c4:	21 f0       	breq	.+8      	; 0x4ce <can_recieve+0xac>
     4c6:	80 e7       	ldi	r24, 0x70	; 112
     4c8:	98 16       	cp	r9, r24
     4ca:	49 f0       	breq	.+18     	; 0x4de <can_recieve+0xbc>
     4cc:	0f c0       	rjmp	.+30     	; 0x4ec <can_recieve+0xca>
		case MCP_RXB0CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	61 e0       	ldi	r22, 0x01	; 1
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	8c e2       	ldi	r24, 0x2C	; 44
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	85 d0       	rcall	.+266    	; 0x5e6 <mcp2515_bit_modify>
		break;
     4dc:	07 c0       	rjmp	.+14     	; 0x4ec <can_recieve+0xca>
		case MCP_RXB1CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	62 e0       	ldi	r22, 0x02	; 2
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	8c e2       	ldi	r24, 0x2C	; 44
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	7d d0       	rcall	.+250    	; 0x5e6 <mcp2515_bit_modify>
		break;
	}
	
	return m;
     4ec:	ba 82       	std	Y+2, r11	; 0x02
     4ee:	a9 82       	std	Y+1, r10	; 0x01
     4f0:	7b 82       	std	Y+3, r7	; 0x03
     4f2:	8b e0       	ldi	r24, 0x0B	; 11
     4f4:	fe 01       	movw	r30, r28
     4f6:	31 96       	adiw	r30, 0x01	; 1
     4f8:	d6 01       	movw	r26, r12
     4fa:	01 90       	ld	r0, Z+
     4fc:	0d 92       	st	X+, r0
     4fe:	8a 95       	dec	r24
     500:	e1 f7       	brne	.-8      	; 0x4fa <can_recieve+0xd8>
}
     502:	c6 01       	movw	r24, r12
     504:	2b 96       	adiw	r28, 0x0b	; 11
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	1f 91       	pop	r17
     516:	0f 91       	pop	r16
     518:	ff 90       	pop	r15
     51a:	ef 90       	pop	r14
     51c:	df 90       	pop	r13
     51e:	cf 90       	pop	r12
     520:	bf 90       	pop	r11
     522:	af 90       	pop	r10
     524:	9f 90       	pop	r9
     526:	8f 90       	pop	r8
     528:	7f 90       	pop	r7
     52a:	08 95       	ret

0000052c <input_update>:
int input_slider_right(){
	return input_msg.data[4];
}
int input_button_left(){
	return input_msg.data[5];
}
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	ec 01       	movw	r28, r24
     536:	75 df       	rcall	.-278    	; 0x422 <can_recieve>
     538:	0a 81       	ldd	r16, Y+2	; 0x02
     53a:	1b 81       	ldd	r17, Y+3	; 0x03
     53c:	7c 81       	ldd	r23, Y+4	; 0x04
     53e:	6d 81       	ldd	r22, Y+5	; 0x05
     540:	5e 81       	ldd	r21, Y+6	; 0x06
     542:	4f 81       	ldd	r20, Y+7	; 0x07
     544:	38 85       	ldd	r19, Y+8	; 0x08
     546:	29 85       	ldd	r18, Y+9	; 0x09
     548:	88 81       	ld	r24, Y
     54a:	99 81       	ldd	r25, Y+1	; 0x01
     54c:	07 97       	sbiw	r24, 0x07	; 7
     54e:	89 f4       	brne	.+34     	; 0x572 <input_update+0x46>
     550:	8b e0       	ldi	r24, 0x0B	; 11
     552:	fe 01       	movw	r30, r28
     554:	a7 e9       	ldi	r26, 0x97	; 151
     556:	b2 e0       	ldi	r27, 0x02	; 2
     558:	01 90       	ld	r0, Z+
     55a:	0d 92       	st	X+, r0
     55c:	8a 95       	dec	r24
     55e:	e1 f7       	brne	.-8      	; 0x558 <input_update+0x2c>
     560:	0a 83       	std	Y+2, r16	; 0x02
     562:	1b 83       	std	Y+3, r17	; 0x03
     564:	7c 83       	std	Y+4, r23	; 0x04
     566:	6d 83       	std	Y+5, r22	; 0x05
     568:	5e 83       	std	Y+6, r21	; 0x06
     56a:	4f 83       	std	Y+7, r20	; 0x07
     56c:	38 87       	std	Y+8, r19	; 0x08
     56e:	29 87       	std	Y+9, r18	; 0x09
     570:	0d c0       	rjmp	.+26     	; 0x58c <input_update+0x60>
     572:	80 e1       	ldi	r24, 0x10	; 16
     574:	92 e0       	ldi	r25, 0x02	; 2
     576:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts>
     57a:	87 e0       	ldi	r24, 0x07	; 7
     57c:	8a 83       	std	Y+2, r24	; 0x02
     57e:	8b 83       	std	Y+3, r24	; 0x03
     580:	1c 82       	std	Y+4, r1	; 0x04
     582:	1d 82       	std	Y+5, r1	; 0x05
     584:	1e 82       	std	Y+6, r1	; 0x06
     586:	1f 82       	std	Y+7, r1	; 0x07
     588:	18 86       	std	Y+8, r1	; 0x08
     58a:	19 86       	std	Y+9, r1	; 0x09
     58c:	ce 01       	movw	r24, r28
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	1f 91       	pop	r17
     594:	0f 91       	pop	r16
     596:	08 95       	ret

00000598 <input_joystick_x>:
     598:	80 91 9a 02 	lds	r24, 0x029A
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	08 95       	ret

000005a0 <input_button_right>:
int input_button_right(){
	return input_msg.data[6];
     5a0:	80 91 a0 02 	lds	r24, 0x02A0
}
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	08 95       	ret

000005a8 <mcp2515_read>:
	}
	return 0;
}


int mcp2515_read(int address){
     5a8:	cf 93       	push	r28
     5aa:	c8 2f       	mov	r28, r24
	
	int result;
	
	PORTB &= ~(1 << MCP2515_CS);
     5ac:	28 98       	cbi	0x05, 0	; 5
	
	spi_write(MCP_READ);
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	4e d0       	rcall	.+156    	; 0x64e <spi_write>
	spi_write(address);
     5b2:	8c 2f       	mov	r24, r28
     5b4:	4c d0       	rcall	.+152    	; 0x64e <spi_write>
	
	result = spi_write(0x00);
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	4a d0       	rcall	.+148    	; 0x64e <spi_write>
	
	PORTB |= (1 << MCP2515_CS);
     5ba:	28 9a       	sbi	0x05, 0	; 5
	return result;
}
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <mcp2515_write>:

void mcp2515_write(int address, int data){
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	d8 2f       	mov	r29, r24
     5c6:	c6 2f       	mov	r28, r22
	
	PORTB &= ~(1 << MCP2515_CS);
     5c8:	28 98       	cbi	0x05, 0	; 5
	
	spi_write(MCP_WRITE);
     5ca:	82 e0       	ldi	r24, 0x02	; 2
     5cc:	40 d0       	rcall	.+128    	; 0x64e <spi_write>
	spi_write(address);
     5ce:	8d 2f       	mov	r24, r29
     5d0:	3e d0       	rcall	.+124    	; 0x64e <spi_write>
	spi_write(data);
     5d2:	8c 2f       	mov	r24, r28
     5d4:	3c d0       	rcall	.+120    	; 0x64e <spi_write>
	
	PORTB |= (1 << MCP2515_CS);	
     5d6:	28 9a       	sbi	0x05, 0	; 5
}
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <mcp2515_request_to_send>:

void mcp2515_request_to_send(int buffer_select){
	PORTB &= ~(1 << MCP2515_CS);
     5de:	28 98       	cbi	0x05, 0	; 5
	spi_write(buffer_select);
     5e0:	36 d0       	rcall	.+108    	; 0x64e <spi_write>
	PORTB |= (1 << MCP2515_CS);
     5e2:	28 9a       	sbi	0x05, 0	; 5
     5e4:	08 95       	ret

000005e6 <mcp2515_bit_modify>:
}

void mcp2515_bit_modify(int address, int mask, int data){
     5e6:	1f 93       	push	r17
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	18 2f       	mov	r17, r24
     5ee:	d6 2f       	mov	r29, r22
     5f0:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS);
     5f2:	28 98       	cbi	0x05, 0	; 5
	
	spi_write(MCP_BITMOD);
     5f4:	85 e0       	ldi	r24, 0x05	; 5
     5f6:	2b d0       	rcall	.+86     	; 0x64e <spi_write>
	spi_write(address);
     5f8:	81 2f       	mov	r24, r17
     5fa:	29 d0       	rcall	.+82     	; 0x64e <spi_write>
	spi_write(mask);
     5fc:	8d 2f       	mov	r24, r29
     5fe:	27 d0       	rcall	.+78     	; 0x64e <spi_write>
	spi_write(data);
     600:	8c 2f       	mov	r24, r28
     602:	25 d0       	rcall	.+74     	; 0x64e <spi_write>

	PORTB |= (1 << MCP2515_CS);
     604:	28 9a       	sbi	0x05, 0	; 5
	
}
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	08 95       	ret

0000060e <mcp2515_reset>:

void mcp2515_reset(){
	PORTB &= ~(1 << MCP2515_CS);
     60e:	28 98       	cbi	0x05, 0	; 5
	spi_write(MCP_RESET);
     610:	80 ec       	ldi	r24, 0xC0	; 192
     612:	1d d0       	rcall	.+58     	; 0x64e <spi_write>
	PORTB |= (1 << MCP2515_CS);
     614:	28 9a       	sbi	0x05, 0	; 5
     616:	08 95       	ret

00000618 <mcp2515_init>:
#include "SPI.h"
#include "mcp2515_define.h"


int mcp2515_init(){
	spi_init();
     618:	13 d0       	rcall	.+38     	; 0x640 <spi_init>
	mcp2515_reset();
     61a:	f9 df       	rcall	.-14     	; 0x60e <mcp2515_reset>
	
	uint8_t val = mcp2515_read(MCP_CANSTAT);
     61c:	8e e0       	ldi	r24, 0x0E	; 14
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	c3 df       	rcall	.-122    	; 0x5a8 <mcp2515_read>
	if((val & MODE_MASK) != MODE_CONFIG){
     622:	80 7e       	andi	r24, 0xE0	; 224
     624:	99 27       	eor	r25, r25
     626:	80 38       	cpi	r24, 0x80	; 128
     628:	91 05       	cpc	r25, r1
     62a:	39 f0       	breq	.+14     	; 0x63a <mcp2515_init+0x22>
		printf("ERROR: MCP2515 is NOT in config mode after reset!\n");
     62c:	89 e1       	ldi	r24, 0x19	; 25
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts>
		return 1;
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	08 95       	ret
	}
	return 0;
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
}
     63e:	08 95       	ret

00000640 <spi_init>:
#include "SPI.h"
#include <avr/io.h>

void spi_init(){
			//SI out		SS out		SCK out
	DDRB |= ( 1 << PB2) | (1 << PB0) | (1 << PB1);
     640:	84 b1       	in	r24, 0x04	; 4
     642:	87 60       	ori	r24, 0x07	; 7
     644:	84 b9       	out	0x04, r24	; 4
	//SO in
	DDRB &= ~(1 << PB3);
     646:	23 98       	cbi	0x04, 3	; 4
	
	//								 frequency / 16
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     648:	81 e5       	ldi	r24, 0x51	; 81
     64a:	8c bd       	out	0x2c, r24	; 44
     64c:	08 95       	ret

0000064e <spi_write>:

//both read and write
int spi_write(char data){
	//SPDR = data;
	//while(!(SPSR & (1<<SPIF)));
	SPDR = data;
     64e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
     650:	0d b4       	in	r0, 0x2d	; 45
     652:	07 fe       	sbrs	r0, 7
     654:	fd cf       	rjmp	.-6      	; 0x650 <spi_write+0x2>
	return SPDR;
     656:	8e b5       	in	r24, 0x2e	; 46
}
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	08 95       	ret

0000065c <TWI_Master_Initialise>:
		{
			msg[ i ] = TWI_buf[ i ];
		}
	}
	return( TWI_statusReg.lastTransOK );
}
     65c:	8c e0       	ldi	r24, 0x0C	; 12
     65e:	80 93 b8 00 	sts	0x00B8, r24
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	80 93 bb 00 	sts	0x00BB, r24
     668:	84 e0       	ldi	r24, 0x04	; 4
     66a:	80 93 bc 00 	sts	0x00BC, r24
     66e:	08 95       	ret

00000670 <TWI_Start_Transceiver_With_Data>:
     670:	ec eb       	ldi	r30, 0xBC	; 188
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	20 81       	ld	r18, Z
     676:	20 fd       	sbrc	r18, 0
     678:	fd cf       	rjmp	.-6      	; 0x674 <TWI_Start_Transceiver_With_Data+0x4>
     67a:	60 93 92 02 	sts	0x0292, r22
     67e:	fc 01       	movw	r30, r24
     680:	20 81       	ld	r18, Z
     682:	20 93 93 02 	sts	0x0293, r18
     686:	20 fd       	sbrc	r18, 0
     688:	0c c0       	rjmp	.+24     	; 0x6a2 <TWI_Start_Transceiver_With_Data+0x32>
     68a:	62 30       	cpi	r22, 0x02	; 2
     68c:	50 f0       	brcs	.+20     	; 0x6a2 <TWI_Start_Transceiver_With_Data+0x32>
     68e:	dc 01       	movw	r26, r24
     690:	11 96       	adiw	r26, 0x01	; 1
     692:	e4 e9       	ldi	r30, 0x94	; 148
     694:	f2 e0       	ldi	r31, 0x02	; 2
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	9d 91       	ld	r25, X+
     69a:	91 93       	st	Z+, r25
     69c:	8f 5f       	subi	r24, 0xFF	; 255
     69e:	86 13       	cpse	r24, r22
     6a0:	fb cf       	rjmp	.-10     	; 0x698 <TWI_Start_Transceiver_With_Data+0x28>
     6a2:	10 92 91 02 	sts	0x0291, r1
     6a6:	88 ef       	ldi	r24, 0xF8	; 248
     6a8:	80 93 06 02 	sts	0x0206, r24
     6ac:	85 ea       	ldi	r24, 0xA5	; 165
     6ae:	80 93 bc 00 	sts	0x00BC, r24
     6b2:	08 95       	ret

000006b4 <__vector_39>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
     6b4:	1f 92       	push	r1
     6b6:	0f 92       	push	r0
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	0f 92       	push	r0
     6bc:	11 24       	eor	r1, r1
     6be:	0b b6       	in	r0, 0x3b	; 59
     6c0:	0f 92       	push	r0
     6c2:	2f 93       	push	r18
     6c4:	3f 93       	push	r19
     6c6:	8f 93       	push	r24
     6c8:	9f 93       	push	r25
     6ca:	af 93       	push	r26
     6cc:	bf 93       	push	r27
     6ce:	ef 93       	push	r30
     6d0:	ff 93       	push	r31
	static unsigned char TWI_bufPtr;
	
	switch (TWSR)
     6d2:	80 91 b9 00 	lds	r24, 0x00B9
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	fc 01       	movw	r30, r24
     6da:	38 97       	sbiw	r30, 0x08	; 8
     6dc:	e1 35       	cpi	r30, 0x51	; 81
     6de:	f1 05       	cpc	r31, r1
     6e0:	08 f0       	brcs	.+2      	; 0x6e4 <__vector_39+0x30>
     6e2:	56 c0       	rjmp	.+172    	; 0x790 <__vector_39+0xdc>
     6e4:	ee 58       	subi	r30, 0x8E	; 142
     6e6:	ff 4f       	sbci	r31, 0xFF	; 255
     6e8:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <__tablejump2__>
	{
		case TWI_START:             // START has been transmitted
		case TWI_REP_START:         // Repeated START has been transmitted
		TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
     6ec:	10 92 90 02 	sts	0x0290, r1
		case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
		case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
		if (TWI_bufPtr < TWI_msgSize)
     6f0:	e0 91 90 02 	lds	r30, 0x0290
     6f4:	80 91 92 02 	lds	r24, 0x0292
     6f8:	e8 17       	cp	r30, r24
     6fa:	70 f4       	brcc	.+28     	; 0x718 <__vector_39+0x64>
		{
			TWDR = TWI_buf[TWI_bufPtr++];
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	8e 0f       	add	r24, r30
     700:	80 93 90 02 	sts	0x0290, r24
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	ed 56       	subi	r30, 0x6D	; 109
     708:	fd 4f       	sbci	r31, 0xFD	; 253
     70a:	80 81       	ld	r24, Z
     70c:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     710:	85 e8       	ldi	r24, 0x85	; 133
     712:	80 93 bc 00 	sts	0x00BC, r24
     716:	43 c0       	rjmp	.+134    	; 0x79e <__vector_39+0xea>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
			(0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
			TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     718:	80 91 91 02 	lds	r24, 0x0291
     71c:	81 60       	ori	r24, 0x01	; 1
     71e:	80 93 91 02 	sts	0x0291, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     722:	84 e9       	ldi	r24, 0x94	; 148
     724:	80 93 bc 00 	sts	0x00BC, r24
     728:	3a c0       	rjmp	.+116    	; 0x79e <__vector_39+0xea>
			(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
		TWI_buf[TWI_bufPtr++] = TWDR;
     72a:	e0 91 90 02 	lds	r30, 0x0290
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	8e 0f       	add	r24, r30
     732:	80 93 90 02 	sts	0x0290, r24
     736:	80 91 bb 00 	lds	r24, 0x00BB
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	ed 56       	subi	r30, 0x6D	; 109
     73e:	fd 4f       	sbci	r31, 0xFD	; 253
     740:	80 83       	st	Z, r24
		case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
		if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
     742:	20 91 90 02 	lds	r18, 0x0290
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	80 91 92 02 	lds	r24, 0x0292
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	28 17       	cp	r18, r24
     752:	39 07       	cpc	r19, r25
     754:	24 f4       	brge	.+8      	; 0x75e <__vector_39+0xaa>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     756:	85 ec       	ldi	r24, 0xC5	; 197
     758:	80 93 bc 00 	sts	0x00BC, r24
     75c:	20 c0       	rjmp	.+64     	; 0x79e <__vector_39+0xea>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
			(0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     75e:	85 e8       	ldi	r24, 0x85	; 133
     760:	80 93 bc 00 	sts	0x00BC, r24
     764:	1c c0       	rjmp	.+56     	; 0x79e <__vector_39+0xea>
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
		TWI_buf[TWI_bufPtr] = TWDR;
     766:	80 91 bb 00 	lds	r24, 0x00BB
     76a:	e0 91 90 02 	lds	r30, 0x0290
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	ed 56       	subi	r30, 0x6D	; 109
     772:	fd 4f       	sbci	r31, 0xFD	; 253
     774:	80 83       	st	Z, r24
		TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     776:	80 91 91 02 	lds	r24, 0x0291
     77a:	81 60       	ori	r24, 0x01	; 1
     77c:	80 93 91 02 	sts	0x0291, r24
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     780:	84 e9       	ldi	r24, 0x94	; 148
     782:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
		(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
		(0<<TWWC);                                 //
		break;
     786:	0b c0       	rjmp	.+22     	; 0x79e <__vector_39+0xea>
		case TWI_ARB_LOST:          // Arbitration lost
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     788:	85 ea       	ldi	r24, 0xA5	; 165
     78a:	80 93 bc 00 	sts	0x00BC, r24
		(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
		(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
		(0<<TWWC);                                 //
		break;
     78e:	07 c0       	rjmp	.+14     	; 0x79e <__vector_39+0xea>
		case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received
		case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
		//    case TWI_NO_STATE              // No relevant state information available; TWINT = ?0?
		case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
		default:
		TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     790:	80 91 b9 00 	lds	r24, 0x00B9
     794:	80 93 06 02 	sts	0x0206, r24
		// Reset TWI Interface
		TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     798:	84 e0       	ldi	r24, 0x04	; 4
     79a:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
		(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
		(0<<TWWC);                                 //
	}
     79e:	ff 91       	pop	r31
     7a0:	ef 91       	pop	r30
     7a2:	bf 91       	pop	r27
     7a4:	af 91       	pop	r26
     7a6:	9f 91       	pop	r25
     7a8:	8f 91       	pop	r24
     7aa:	3f 91       	pop	r19
     7ac:	2f 91       	pop	r18
     7ae:	0f 90       	pop	r0
     7b0:	0b be       	out	0x3b, r0	; 59
     7b2:	0f 90       	pop	r0
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	0f 90       	pop	r0
     7b8:	1f 90       	pop	r1
     7ba:	18 95       	reti

000007bc <uart_Transmit>:
}

void uart_Transmit( unsigned char data ){
	
	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     7bc:	e0 ec       	ldi	r30, 0xC0	; 192
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	90 81       	ld	r25, Z
     7c2:	95 ff       	sbrs	r25, 5
     7c4:	fd cf       	rjmp	.-6      	; 0x7c0 <uart_Transmit+0x4>
	
	//Put data into buffer, sends the data
	UDR0 = data;
     7c6:	80 93 c6 00 	sts	0x00C6, r24
     7ca:	08 95       	ret

000007cc <uart_Receive>:

unsigned char uart_Receive(void){
	
	//Wait for data to be received
	
	while( !(UCSR0A & (1<<RXC0)) );
     7cc:	e0 ec       	ldi	r30, 0xC0	; 192
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	80 81       	ld	r24, Z
     7d2:	88 23       	and	r24, r24
     7d4:	ec f7       	brge	.-6      	; 0x7d0 <uart_Receive+0x4>
	
	//Get and return received data from buffer
	
	return UDR0;
     7d6:	80 91 c6 00 	lds	r24, 0x00C6
}
     7da:	08 95       	ret

000007dc <uart_Init>:
#include "uart.h"

void uart_Init(unsigned int ubrr){
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     7dc:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     7e0:	80 93 c4 00 	sts	0x00C4, r24
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     7e4:	88 e1       	ldi	r24, 0x18	; 24
     7e6:	80 93 c1 00 	sts	0x00C1, r24
	
	//Set frame format: 8data, 1stop bit
	UCSR0C = (1 << 7)|(3<<UCSZ00);//here, 7 replaces URSEL0 from ATmega162 project
     7ea:	86 e8       	ldi	r24, 0x86	; 134
     7ec:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(uart_Transmit, uart_Receive);
     7f0:	66 ee       	ldi	r22, 0xE6	; 230
     7f2:	73 e0       	ldi	r23, 0x03	; 3
     7f4:	8e ed       	ldi	r24, 0xDE	; 222
     7f6:	93 e0       	ldi	r25, 0x03	; 3
     7f8:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <fdevopen>
     7fc:	08 95       	ret

000007fe <adc_init>:
#include "adc.h"

void adc_init(){
	
	// Division factor 128
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     7fe:	ea e7       	ldi	r30, 0x7A	; 122
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	80 81       	ld	r24, Z
     804:	87 68       	ori	r24, 0x87	; 135
     806:	80 83       	st	Z, r24
	
	/*We find max voltage to be 1.1 V
	Internal 1.1 V Voltage Reference with external capacitor at AREF pin  ->  REFS1 = 1 REFS0 = 0 
	*/  
	ADMUX |= (1 << REFS0);
     808:	ec e7       	ldi	r30, 0x7C	; 124
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	80 81       	ld	r24, Z
     80e:	80 64       	ori	r24, 0x40	; 64
     810:	80 83       	st	Z, r24
	//ADMUX &= ~(1 << REFS1);
	ADMUX |= (1 << REFS1);
     812:	80 81       	ld	r24, Z
     814:	80 68       	ori	r24, 0x80	; 128
     816:	80 83       	st	Z, r24
     818:	08 95       	ret

0000081a <adc_read>:
	
	
}

uint16_t adc_read(uint8_t ch){
	ADMUX |= (ch & 0x03);
     81a:	ec e7       	ldi	r30, 0x7C	; 124
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	90 81       	ld	r25, Z
     820:	83 70       	andi	r24, 0x03	; 3
     822:	98 2b       	or	r25, r24
     824:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADSC);
     826:	ea e7       	ldi	r30, 0x7A	; 122
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
     82c:	80 64       	ori	r24, 0x40	; 64
     82e:	80 83       	st	Z, r24
	
	while((ADCSRA & (1 << ADSC))){}
     830:	80 81       	ld	r24, Z
     832:	86 fd       	sbrc	r24, 6
     834:	fd cf       	rjmp	.-6      	; 0x830 <adc_read+0x16>

	return ADC; 
     836:	80 91 78 00 	lds	r24, 0x0078
     83a:	90 91 79 00 	lds	r25, 0x0079
     83e:	08 95       	ret

00000840 <max520_init>:
#define MAX520_TWI_ADDR 0b01011110



void max520_init(){
	TWI_Master_Initialise();
     840:	0d df       	rcall	.-486    	; 0x65c <TWI_Master_Initialise>
	sei();//interrupts on
     842:	78 94       	sei
     844:	08 95       	ret

00000846 <max520_send>:
}


void max520_send(uint8_t val)
{
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	00 d0       	rcall	.+0      	; 0x84c <max520_send+0x6>
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
	//printf("In max520_send\n");
	uint8_t message[3] = {MAX520_TWI_ADDR, 0, val};
     850:	9e e5       	ldi	r25, 0x5E	; 94
     852:	99 83       	std	Y+1, r25	; 0x01
     854:	1a 82       	std	Y+2, r1	; 0x02
     856:	8b 83       	std	Y+3, r24	; 0x03
	
	TWI_Start_Transceiver_With_Data(message, 3);
     858:	63 e0       	ldi	r22, 0x03	; 3
     85a:	ce 01       	movw	r24, r28
     85c:	01 96       	adiw	r24, 0x01	; 1
     85e:	08 df       	rcall	.-496    	; 0x670 <TWI_Start_Transceiver_With_Data>
	
}
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	08 95       	ret

0000086c <pwm_init>:




void pwm_init(uint16_t pulse_period, uint16_t initial_pulse_width){
	DDRE |= (1<<PE3);
     86c:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE |= (1<<PE3);
     86e:	73 9a       	sbi	0x0e, 3	; 14
	
	TCCR3A = 0;
     870:	a0 e9       	ldi	r26, 0x90	; 144
     872:	b0 e0       	ldi	r27, 0x00	; 0
     874:	1c 92       	st	X, r1
	TCCR3B = 0;
     876:	e1 e9       	ldi	r30, 0x91	; 145
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	10 82       	st	Z, r1
	TCCR3C = 0;
     87c:	10 92 92 00 	sts	0x0092, r1
	
	//16 bit, fast pwm, top: ICR, update OCRnx at bottom, TOVn Flag set on TOP
	TCCR3A &= ~(1<< WGM30);
     880:	2c 91       	ld	r18, X
     882:	2e 7f       	andi	r18, 0xFE	; 254
     884:	2c 93       	st	X, r18
	TCCR3A |= (1<<WGM31);
     886:	2c 91       	ld	r18, X
     888:	22 60       	ori	r18, 0x02	; 2
     88a:	2c 93       	st	X, r18
	TCCR3B |= (1<<WGM32);
     88c:	20 81       	ld	r18, Z
     88e:	28 60       	ori	r18, 0x08	; 8
     890:	20 83       	st	Z, r18
	TCCR3B |= (1<<WGM33);
     892:	20 81       	ld	r18, Z
     894:	20 61       	ori	r18, 0x10	; 16
     896:	20 83       	st	Z, r18
	
	//inverting		
	TCCR3A |= (0<<COM3A0);
     898:	2c 91       	ld	r18, X
     89a:	2c 93       	st	X, r18
	TCCR3A |= (1<<COM3A1);
     89c:	2c 91       	ld	r18, X
     89e:	20 68       	ori	r18, 0x80	; 128
     8a0:	2c 93       	st	X, r18
	
	//prescaler,	CLK / 64
	TCCR3B |= (1<<CS30) | (1<<CS31);
     8a2:	20 81       	ld	r18, Z
     8a4:	23 60       	ori	r18, 0x03	; 3
     8a6:	20 83       	st	Z, r18
	TCCR3B &= ~(1<<CS32);
     8a8:	20 81       	ld	r18, Z
     8aa:	2b 7f       	andi	r18, 0xFB	; 251
     8ac:	20 83       	st	Z, r18
	
	//20 ms
	ICR3 = pulse_period;
     8ae:	90 93 97 00 	sts	0x0097, r25
     8b2:	80 93 96 00 	sts	0x0096, r24
	
	OCR3A = initial_pulse_width; //should be P_MID
     8b6:	70 93 99 00 	sts	0x0099, r23
     8ba:	60 93 98 00 	sts	0x0098, r22
     8be:	08 95       	ret

000008c0 <pwm_set_pulse_width>:
	//printf("PWM init done:\n\tTCCRA: %02X\n\tTCCRB: %02X\n\tICR: %02X\n\tOCR: %02X\n", TCCR3A, TCCR3B, ICR3, OCR3A);
}


void pwm_set_pulse_width(uint16_t pulse){
	OCR3A = pulse;
     8c0:	90 93 99 00 	sts	0x0099, r25
     8c4:	80 93 98 00 	sts	0x0098, r24
     8c8:	08 95       	ret

000008ca <timer_init>:
}
void timer3_reset(){
	TCNT3 = 0;
}
void timer4_reset(){
	TCNT4 = 0;
     8ca:	10 92 a0 00 	sts	0x00A0, r1
     8ce:	e1 ea       	ldi	r30, 0xA1	; 161
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	10 82       	st	Z, r1
     8d4:	80 81       	ld	r24, Z
     8d6:	85 60       	ori	r24, 0x05	; 5
     8d8:	80 83       	st	Z, r24
     8da:	80 81       	ld	r24, Z
     8dc:	8d 7f       	andi	r24, 0xFD	; 253
     8de:	80 83       	st	Z, r24
     8e0:	10 92 20 01 	sts	0x0120, r1
     8e4:	e1 e2       	ldi	r30, 0x21	; 33
     8e6:	f1 e0       	ldi	r31, 0x01	; 1
     8e8:	10 82       	st	Z, r1
     8ea:	80 81       	ld	r24, Z
     8ec:	85 60       	ori	r24, 0x05	; 5
     8ee:	80 83       	st	Z, r24
     8f0:	80 81       	ld	r24, Z
     8f2:	8d 7f       	andi	r24, 0xFD	; 253
     8f4:	80 83       	st	Z, r24
     8f6:	08 95       	ret

000008f8 <timer_read>:
     8f8:	81 30       	cpi	r24, 0x01	; 1
     8fa:	29 f4       	brne	.+10     	; 0x906 <timer_read+0xe>
     8fc:	20 91 84 00 	lds	r18, 0x0084
     900:	30 91 85 00 	lds	r19, 0x0085
     904:	16 c0       	rjmp	.+44     	; 0x932 <timer_read+0x3a>
     906:	83 30       	cpi	r24, 0x03	; 3
     908:	29 f4       	brne	.+10     	; 0x914 <timer_read+0x1c>
     90a:	20 91 94 00 	lds	r18, 0x0094
     90e:	30 91 95 00 	lds	r19, 0x0095
     912:	0f c0       	rjmp	.+30     	; 0x932 <timer_read+0x3a>
     914:	84 30       	cpi	r24, 0x04	; 4
     916:	29 f4       	brne	.+10     	; 0x922 <timer_read+0x2a>
     918:	20 91 a4 00 	lds	r18, 0x00A4
     91c:	30 91 a5 00 	lds	r19, 0x00A5
     920:	08 c0       	rjmp	.+16     	; 0x932 <timer_read+0x3a>
     922:	85 30       	cpi	r24, 0x05	; 5
     924:	29 f4       	brne	.+10     	; 0x930 <timer_read+0x38>
     926:	20 91 24 01 	lds	r18, 0x0124
     92a:	30 91 25 01 	lds	r19, 0x0125
     92e:	01 c0       	rjmp	.+2      	; 0x932 <timer_read+0x3a>
     930:	08 95       	ret
     932:	82 2f       	mov	r24, r18
     934:	93 2f       	mov	r25, r19
     936:	08 95       	ret

00000938 <timer5_read>:
     938:	80 91 24 01 	lds	r24, 0x0124
     93c:	90 91 25 01 	lds	r25, 0x0125
     940:	08 95       	ret

00000942 <timer_reset>:
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	29 f4       	brne	.+10     	; 0x950 <timer_reset+0xe>
     946:	10 92 85 00 	sts	0x0085, r1
     94a:	10 92 84 00 	sts	0x0084, r1
     94e:	08 95       	ret
     950:	83 30       	cpi	r24, 0x03	; 3
     952:	29 f4       	brne	.+10     	; 0x95e <timer_reset+0x1c>
     954:	10 92 95 00 	sts	0x0095, r1
     958:	10 92 94 00 	sts	0x0094, r1
     95c:	08 95       	ret
     95e:	84 30       	cpi	r24, 0x04	; 4
     960:	29 f4       	brne	.+10     	; 0x96c <timer_reset+0x2a>
     962:	10 92 a5 00 	sts	0x00A5, r1
     966:	10 92 a4 00 	sts	0x00A4, r1
     96a:	08 95       	ret
     96c:	85 30       	cpi	r24, 0x05	; 5
     96e:	21 f4       	brne	.+8      	; 0x978 <timer_reset+0x36>
     970:	10 92 25 01 	sts	0x0125, r1
     974:	10 92 24 01 	sts	0x0124, r1
     978:	08 95       	ret

0000097a <timer5_reset>:
}
void timer5_reset(){
	TCNT5 = 0;
     97a:	10 92 25 01 	sts	0x0125, r1
     97e:	10 92 24 01 	sts	0x0124, r1
     982:	08 95       	ret

00000984 <main>:

*/



int main(void){
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
     98c:	66 97       	sbiw	r28, 0x16	; 22
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
	

	MCUCR |= (1 << SRE);
     998:	85 b7       	in	r24, 0x35	; 53
     99a:	80 68       	ori	r24, 0x80	; 128
     99c:	85 bf       	out	0x35, r24	; 53
	uart_Init(MYUBRR);
     99e:	87 e6       	ldi	r24, 0x67	; 103
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	1c df       	rcall	.-456    	; 0x7dc <uart_Init>
	//
	
	can_init(MODE_NORMAL);
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	90 dc       	rcall	.-1760   	; 0x2ca <can_init>
	/*adc_init();*/
	ir_init();
     9aa:	9d d0       	rcall	.+314    	; 0xae6 <ir_init>
	
	
	DDRE |= (1 << 3); //studass PWM bandaid that can be removed? 
     9ac:	6b 9a       	sbi	0x0d, 3	; 13



	timer_init();
     9ae:	8d df       	rcall	.-230    	; 0x8ca <timer_init>
	
	solenoid_init();
     9b0:	71 d2       	rcall	.+1250   	; 0xe94 <solenoid_init>
	motor_init();
     9b2:	e1 d0       	rcall	.+450    	; 0xb76 <motor_init>
	pwm_init(SERVO_PERIOD, P_MID);
     9b4:	67 e7       	ldi	r22, 0x77	; 119
     9b6:	71 e0       	ldi	r23, 0x01	; 1
     9b8:	88 e8       	ldi	r24, 0x88	; 136
     9ba:	93 e1       	ldi	r25, 0x13	; 19
     9bc:	57 df       	rcall	.-338    	; 0x86c <pwm_init>
	

	PI_controller* sliders = PI_controller_new(0.02, 0.05);
     9be:	2d ec       	ldi	r18, 0xCD	; 205
     9c0:	3c ec       	ldi	r19, 0xCC	; 204
     9c2:	4c e4       	ldi	r20, 0x4C	; 76
     9c4:	5d e3       	ldi	r21, 0x3D	; 61
     9c6:	6a e0       	ldi	r22, 0x0A	; 10
     9c8:	77 ed       	ldi	r23, 0xD7	; 215
     9ca:	83 ea       	ldi	r24, 0xA3	; 163
     9cc:	9c e3       	ldi	r25, 0x3C	; 60
     9ce:	ac d1       	rcall	.+856    	; 0xd28 <PI_controller_new>
     9d0:	5c 01       	movw	r10, r24
	
	uint16_t position;
	uint16_t reference;
	float output;
	
	motor_controller_calibrate_by_reset();
     9d2:	12 d1       	rcall	.+548    	; 0xbf8 <motor_controller_calibrate_by_reset>
				
				position = motor_encoder_read();
				output =  PI_controller_output(sliders, position, reference);
				motor_speed_direction(output);
				
				printf("Output: %d\n", abs(output));
     9d4:	0f 2e       	mov	r0, r31
     9d6:	fb e4       	ldi	r31, 0x4B	; 75
     9d8:	ef 2e       	mov	r14, r31
     9da:	f2 e0       	ldi	r31, 0x02	; 2
     9dc:	ff 2e       	mov	r15, r31
     9de:	f0 2d       	mov	r31, r0
				servo_set_pulse_by_input(input_joystick_x());

				
				//use timer for this, to avoid spamming?
				if(timer5_read() > 100){//somewhat arbitrary time
					game_status.id = CAN_GAME_STATE_RUNNING;
     9e0:	0f 2e       	mov	r0, r31
     9e2:	f1 e9       	ldi	r31, 0x91	; 145
     9e4:	8f 2e       	mov	r8, r31
     9e6:	99 24       	eor	r9, r9
     9e8:	93 94       	inc	r9
     9ea:	f0 2d       	mov	r31, r0
					game_status.data[0] = 0; // game over

					if(ir_blocked()){
						game_status.id = CAN_GAME_STATE_OVER;
     9ec:	0f 2e       	mov	r0, r31
     9ee:	f0 e9       	ldi	r31, 0x90	; 144
     9f0:	2f 2e       	mov	r2, r31
     9f2:	33 24       	eor	r3, r3
     9f4:	33 94       	inc	r3
     9f6:	f0 2d       	mov	r31, r0
	can_message game_status;
	while(1){
		
		/*switch(message_node1.id){
			case(GAME_ID):*/
				input_update();
     9f8:	ce 01       	movw	r24, r28
     9fa:	0c 96       	adiw	r24, 0x0c	; 12
     9fc:	97 dd       	rcall	.-1234   	; 0x52c <input_update>
				
				//printf("stuff: %u\n", input_joystick_x());
				
				//inverts and multiplies 8 bit input to board game domain
				reference = abs(input_joystick_x() - 255) * (float)(max_left) / 255.0;
     9fe:	cc dd       	rcall	.-1128   	; 0x598 <input_joystick_x>
     a00:	8f 5f       	subi	r24, 0xFF	; 255
     a02:	91 09       	sbc	r25, r1
     a04:	bc 01       	movw	r22, r24
     a06:	99 23       	and	r25, r25
     a08:	24 f4       	brge	.+8      	; 0xa12 <main+0x8e>
     a0a:	66 27       	eor	r22, r22
     a0c:	77 27       	eor	r23, r23
     a0e:	68 1b       	sub	r22, r24
     a10:	79 0b       	sbc	r23, r25
     a12:	88 27       	eor	r24, r24
     a14:	77 fd       	sbrc	r23, 7
     a16:	80 95       	com	r24
     a18:	98 2f       	mov	r25, r24
     a1a:	63 d3       	rcall	.+1734   	; 0x10e2 <__floatsisf>
     a1c:	2b 01       	movw	r4, r22
     a1e:	3c 01       	movw	r6, r24
     a20:	60 91 a2 02 	lds	r22, 0x02A2
     a24:	70 91 a3 02 	lds	r23, 0x02A3
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	58 d3       	rcall	.+1712   	; 0x10de <__floatunsisf>
     a2e:	9b 01       	movw	r18, r22
     a30:	ac 01       	movw	r20, r24
     a32:	c3 01       	movw	r24, r6
     a34:	b2 01       	movw	r22, r4
     a36:	e1 d3       	rcall	.+1986   	; 0x11fa <__mulsf3>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	4f e7       	ldi	r20, 0x7F	; 127
     a3e:	53 e4       	ldi	r21, 0x43	; 67
     a40:	b5 d2       	rcall	.+1386   	; 0xfac <__divsf3>
     a42:	21 d3       	rcall	.+1602   	; 0x1086 <__fixunssfsi>
     a44:	2b 01       	movw	r4, r22
     a46:	3c 01       	movw	r6, r24
     a48:	6b 01       	movw	r12, r22
				
				position = motor_encoder_read();
     a4a:	b3 d0       	rcall	.+358    	; 0xbb2 <motor_encoder_read>
     a4c:	8c 01       	movw	r16, r24
				output =  PI_controller_output(sliders, position, reference);
     a4e:	a2 01       	movw	r20, r4
     a50:	bc 01       	movw	r22, r24
     a52:	c5 01       	movw	r24, r10
     a54:	8f d1       	rcall	.+798    	; 0xd74 <PI_controller_output>
     a56:	3c 01       	movw	r6, r24
				motor_speed_direction(output);
     a58:	70 d0       	rcall	.+224    	; 0xb3a <motor_speed_direction>
				
				printf("Output: %d\n", abs(output));
     a5a:	c3 01       	movw	r24, r6
     a5c:	99 23       	and	r25, r25
     a5e:	24 f4       	brge	.+8      	; 0xa68 <main+0xe4>
     a60:	88 27       	eor	r24, r24
     a62:	99 27       	eor	r25, r25
     a64:	86 19       	sub	r24, r6
     a66:	97 09       	sbc	r25, r7
     a68:	9f 93       	push	r25
     a6a:	8f 93       	push	r24
     a6c:	ff 92       	push	r15
     a6e:	ef 92       	push	r14
     a70:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <printf>
				
				//clockblock spinning at either wall
				if((position > max_left) && (reference < 127)){
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	80 91 a2 02 	lds	r24, 0x02A2
     a80:	90 91 a3 02 	lds	r25, 0x02A3
     a84:	80 17       	cp	r24, r16
     a86:	91 07       	cpc	r25, r17
     a88:	20 f4       	brcc	.+8      	; 0xa92 <main+0x10e>
     a8a:	8f e7       	ldi	r24, 0x7F	; 127
     a8c:	c8 16       	cp	r12, r24
     a8e:	d1 04       	cpc	r13, r1
     a90:	20 f0       	brcs	.+8      	; 0xa9a <main+0x116>
					output = 0;
				}//if negative overflow
				else if(position > 60000){
     a92:	01 36       	cpi	r16, 0x61	; 97
     a94:	1a 4e       	sbci	r17, 0xEA	; 234
     a96:	08 f0       	brcs	.+2      	; 0xa9a <main+0x116>
					motor_encoder_reset();
     a98:	67 d0       	rcall	.+206    	; 0xb68 <motor_encoder_reset>
				}
				
				//allows shooting solonoid, with 50ms pulse, without "burst mode"
				if(input_button_right() && solenoid_is_shooting_allowed()){
     a9a:	82 dd       	rcall	.-1276   	; 0x5a0 <input_button_right>
     a9c:	89 2b       	or	r24, r25
     a9e:	31 f0       	breq	.+12     	; 0xaac <main+0x128>
     aa0:	1d d2       	rcall	.+1082   	; 0xedc <solenoid_is_shooting_allowed>
     aa2:	88 23       	and	r24, r24
     aa4:	19 f0       	breq	.+6      	; 0xaac <main+0x128>
					solenoid_shoot();
     aa6:	01 d2       	rcall	.+1026   	; 0xeaa <solenoid_shoot>
					solenoid_disallow_shooting();
     aa8:	12 d2       	rcall	.+1060   	; 0xece <solenoid_disallow_shooting>
     aaa:	04 c0       	rjmp	.+8      	; 0xab4 <main+0x130>
				}
				else if(input_button_right()){}
     aac:	79 dd       	rcall	.-1294   	; 0x5a0 <input_button_right>
     aae:	89 2b       	or	r24, r25
     ab0:	09 f4       	brne	.+2      	; 0xab4 <main+0x130>
				else{
					solenoid_allow_shooting();
     ab2:	10 d2       	rcall	.+1056   	; 0xed4 <solenoid_allow_shooting>
				}
				
				//controll servo
				servo_set_pulse_by_input(input_joystick_x());
     ab4:	71 dd       	rcall	.-1310   	; 0x598 <input_joystick_x>
     ab6:	d2 d1       	rcall	.+932    	; 0xe5c <servo_set_pulse_by_input>

				
				//use timer for this, to avoid spamming?
				if(timer5_read() > 100){//somewhat arbitrary time
     ab8:	3f df       	rcall	.-386    	; 0x938 <timer5_read>
     aba:	85 36       	cpi	r24, 0x65	; 101
     abc:	91 05       	cpc	r25, r1
     abe:	08 f4       	brcc	.+2      	; 0xac2 <main+0x13e>
     ac0:	9b cf       	rjmp	.-202    	; 0x9f8 <main+0x74>
					game_status.id = CAN_GAME_STATE_RUNNING;
     ac2:	9a 82       	std	Y+2, r9	; 0x02
     ac4:	89 82       	std	Y+1, r8	; 0x01
					game_status.data[0] = 0; // game over
     ac6:	1c 82       	std	Y+4, r1	; 0x04

					if(ir_blocked()){
     ac8:	10 d0       	rcall	.+32     	; 0xaea <ir_blocked>
     aca:	89 2b       	or	r24, r25
     acc:	19 f0       	breq	.+6      	; 0xad4 <main+0x150>
						game_status.id = CAN_GAME_STATE_OVER;
     ace:	3a 82       	std	Y+2, r3	; 0x02
     ad0:	29 82       	std	Y+1, r2	; 0x01
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <main+0x154>

					}
					else{
						game_status.id = CAN_GAME_STATE_RUNNING; // game over
     ad4:	9a 82       	std	Y+2, r9	; 0x02
     ad6:	89 82       	std	Y+1, r8	; 0x01

					}
					can_transmit(&game_status, 0x30);
     ad8:	60 e3       	ldi	r22, 0x30	; 48
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	ce 01       	movw	r24, r28
     ade:	01 96       	adiw	r24, 0x01	; 1
     ae0:	10 dc       	rcall	.-2016   	; 0x302 <can_transmit>
					timer5_reset();
     ae2:	4b df       	rcall	.-362    	; 0x97a <timer5_reset>
     ae4:	89 cf       	rjmp	.-238    	; 0x9f8 <main+0x74>

00000ae6 <ir_init>:


uint8_t ir_score = 0;

void ir_init(){
	adc_init();
     ae6:	8b ce       	rjmp	.-746    	; 0x7fe <adc_init>
     ae8:	08 95       	ret

00000aea <ir_blocked>:



int ir_blocked(){
	
	if(adc_read(IR_PIN) > MID){
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	96 de       	rcall	.-724    	; 0x81a <adc_read>
     aee:	21 e0       	ldi	r18, 0x01	; 1
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	8d 32       	cpi	r24, 0x2D	; 45
     af4:	91 40       	sbci	r25, 0x01	; 1
     af6:	10 f0       	brcs	.+4      	; 0xafc <ir_blocked+0x12>
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
		return 1;
	
	
}
     afc:	c9 01       	movw	r24, r18
     afe:	08 95       	ret

00000b00 <motor_encoder_select_byte>:

uint8_t motor_encoder_byte_read(){
	uint8_t byte = PINK;
	return byte;

}
     b00:	88 23       	and	r24, r24
     b02:	11 f0       	breq	.+4      	; 0xb08 <motor_encoder_select_byte+0x8>
     b04:	8d 9a       	sbi	0x11, 5	; 17
     b06:	08 95       	ret
     b08:	8d 98       	cbi	0x11, 5	; 17
     b0a:	08 95       	ret

00000b0c <motor_encoder_output_enable>:
     b0c:	88 23       	and	r24, r24
     b0e:	11 f0       	breq	.+4      	; 0xb14 <motor_encoder_output_enable+0x8>
     b10:	8c 98       	cbi	0x11, 4	; 17
     b12:	08 95       	ret
     b14:	8c 9a       	sbi	0x11, 4	; 17
     b16:	08 95       	ret

00000b18 <motor_direction>:
     b18:	00 97       	sbiw	r24, 0x00	; 0
     b1a:	11 f4       	brne	.+4      	; 0xb20 <motor_direction+0x8>
     b1c:	8b 9a       	sbi	0x11, 3	; 17
     b1e:	08 95       	ret
     b20:	01 97       	sbiw	r24, 0x01	; 1
     b22:	09 f4       	brne	.+2      	; 0xb26 <motor_direction+0xe>
     b24:	8b 98       	cbi	0x11, 3	; 17
     b26:	08 95       	ret

00000b28 <motor_speed>:
     b28:	8f 3f       	cpi	r24, 0xFF	; 255
     b2a:	91 05       	cpc	r25, r1
     b2c:	21 f0       	breq	.+8      	; 0xb36 <motor_speed+0xe>
     b2e:	18 f0       	brcs	.+6      	; 0xb36 <motor_speed+0xe>
     b30:	8f ef       	ldi	r24, 0xFF	; 255
     b32:	89 ce       	rjmp	.-750    	; 0x846 <max520_send>
     b34:	08 95       	ret
     b36:	87 ce       	rjmp	.-754    	; 0x846 <max520_send>
     b38:	08 95       	ret

00000b3a <motor_speed_direction>:
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	ec 01       	movw	r28, r24
     b40:	99 23       	and	r25, r25
     b42:	24 f4       	brge	.+8      	; 0xb4c <motor_speed_direction+0x12>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	e7 df       	rcall	.-50     	; 0xb18 <motor_direction>
     b4a:	03 c0       	rjmp	.+6      	; 0xb52 <motor_speed_direction+0x18>
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	e3 df       	rcall	.-58     	; 0xb18 <motor_direction>
     b52:	ce 01       	movw	r24, r28
     b54:	dd 23       	and	r29, r29
     b56:	24 f4       	brge	.+8      	; 0xb60 <motor_speed_direction+0x26>
     b58:	88 27       	eor	r24, r24
     b5a:	99 27       	eor	r25, r25
     b5c:	8c 1b       	sub	r24, r28
     b5e:	9d 0b       	sbc	r25, r29
     b60:	e3 df       	rcall	.-58     	; 0xb28 <motor_speed>
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <motor_encoder_reset>:
     b68:	8e 98       	cbi	0x11, 6	; 17
     b6a:	8a e6       	ldi	r24, 0x6A	; 106
     b6c:	8a 95       	dec	r24
     b6e:	f1 f7       	brne	.-4      	; 0xb6c <motor_encoder_reset+0x4>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <motor_encoder_reset+0xa>
     b72:	8e 9a       	sbi	0x11, 6	; 17
     b74:	08 95       	ret

00000b76 <motor_init>:
     b76:	64 de       	rcall	.-824    	; 0x840 <max520_init>
     b78:	80 b3       	in	r24, 0x10	; 16
     b7a:	88 6f       	ori	r24, 0xF8	; 248
     b7c:	80 bb       	out	0x10, r24	; 16
     b7e:	81 b3       	in	r24, 0x11	; 17
     b80:	88 63       	ori	r24, 0x38	; 56
     b82:	81 bb       	out	0x11, r24	; 17
     b84:	8f 98       	cbi	0x11, 7	; 17
     b86:	10 92 07 01 	sts	0x0107, r1
     b8a:	ee cf       	rjmp	.-36     	; 0xb68 <motor_encoder_reset>
     b8c:	08 95       	ret

00000b8e <reverse_bits>:
	
}


uint8_t reverse_bits(uint8_t byte){
	byte = ((byte & 0b01010101) << 1) | ((byte & 0b10101010) >> 1);
     b8e:	28 2f       	mov	r18, r24
     b90:	2a 7a       	andi	r18, 0xAA	; 170
     b92:	26 95       	lsr	r18
     b94:	98 2f       	mov	r25, r24
     b96:	95 75       	andi	r25, 0x55	; 85
     b98:	99 0f       	add	r25, r25
     b9a:	92 2b       	or	r25, r18
	byte = ((byte & 0b00110011) << 2) | ((byte & 0b11001100) >> 2);
     b9c:	29 2f       	mov	r18, r25
     b9e:	2c 7c       	andi	r18, 0xCC	; 204
     ba0:	26 95       	lsr	r18
     ba2:	26 95       	lsr	r18
     ba4:	89 2f       	mov	r24, r25
     ba6:	83 73       	andi	r24, 0x33	; 51
     ba8:	88 0f       	add	r24, r24
     baa:	88 0f       	add	r24, r24
     bac:	82 2b       	or	r24, r18
	byte = ((byte & 0b00001111) << 4) | ((byte & 0b11110000) >> 4);
	return byte;
}
     bae:	82 95       	swap	r24
     bb0:	08 95       	ret

00000bb2 <motor_encoder_read>:

}



uint16_t motor_encoder_read(){
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
	uint8_t msb;
	uint8_t lsb;
	
	
	//enable output
	motor_encoder_output_enable(1);
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	a9 df       	rcall	.-174    	; 0xb0c <motor_encoder_output_enable>
	
	//read MSB to data
	motor_encoder_select_byte(0);
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	a1 df       	rcall	.-190    	; 0xb00 <motor_encoder_select_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bbe:	8a e6       	ldi	r24, 0x6A	; 106
     bc0:	8a 95       	dec	r24
     bc2:	f1 f7       	brne	.-4      	; 0xbc0 <motor_encoder_read+0xe>
     bc4:	00 c0       	rjmp	.+0      	; 0xbc6 <motor_encoder_read+0x14>
}



uint8_t motor_encoder_byte_read(){
	uint8_t byte = PINK;
     bc6:	80 91 06 01 	lds	r24, 0x0106
	motor_encoder_output_enable(1);
	
	//read MSB to data
	motor_encoder_select_byte(0);
	_delay_us(20);
	msb = reverse_bits(motor_encoder_byte_read());
     bca:	e1 df       	rcall	.-62     	; 0xb8e <reverse_bits>
     bcc:	d8 2f       	mov	r29, r24
	
	//read LSB to data
	motor_encoder_select_byte(1);
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	97 df       	rcall	.-210    	; 0xb00 <motor_encoder_select_byte>
     bd2:	8a e6       	ldi	r24, 0x6A	; 106
     bd4:	8a 95       	dec	r24
     bd6:	f1 f7       	brne	.-4      	; 0xbd4 <motor_encoder_read+0x22>
     bd8:	00 c0       	rjmp	.+0      	; 0xbda <motor_encoder_read+0x28>
}



uint8_t motor_encoder_byte_read(){
	uint8_t byte = PINK;
     bda:	80 91 06 01 	lds	r24, 0x0106
	msb = reverse_bits(motor_encoder_byte_read());
	
	//read LSB to data
	motor_encoder_select_byte(1);
	_delay_us(20);
	lsb = reverse_bits(motor_encoder_byte_read());
     bde:	d7 df       	rcall	.-82     	; 0xb8e <reverse_bits>
     be0:	c8 2f       	mov	r28, r24
	
	//disable output
	motor_encoder_output_enable(0);
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	93 df       	rcall	.-218    	; 0xb0c <motor_encoder_output_enable>
	
	
	uint16_t data = (msb << 8) + lsb;
     be6:	2d 2f       	mov	r18, r29
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	92 2f       	mov	r25, r18
     bec:	88 27       	eor	r24, r24
	
	return data;

	
}
     bee:	8c 0f       	add	r24, r28
     bf0:	91 1d       	adc	r25, r1
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <motor_controller_calibrate_by_reset>:
	
}


//MOTOR SPEED NEEDS TO BE TUNED FOR INDIVIDUAL GAME BOARD
void motor_controller_calibrate_by_reset(){
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
	
	uint8_t speed = 65;
	
	motor_init();
     c04:	b8 df       	rcall	.-144    	; 0xb76 <motor_init>
	
	uint16_t position;
	uint16_t prev_position;
	
	motor_speed(speed);
     c06:	81 e4       	ldi	r24, 0x41	; 65
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	8e df       	rcall	.-228    	; 0xb28 <motor_speed>
	motor_direction(right);
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	83 df       	rcall	.-250    	; 0xb18 <motor_direction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c12:	2f ef       	ldi	r18, 0xFF	; 255
     c14:	82 e5       	ldi	r24, 0x52	; 82
     c16:	97 e0       	ldi	r25, 0x07	; 7
     c18:	21 50       	subi	r18, 0x01	; 1
     c1a:	80 40       	sbci	r24, 0x00	; 0
     c1c:	90 40       	sbci	r25, 0x00	; 0
     c1e:	e1 f7       	brne	.-8      	; 0xc18 <motor_controller_calibrate_by_reset+0x20>
     c20:	00 c0       	rjmp	.+0      	; 0xc22 <motor_controller_calibrate_by_reset+0x2a>
     c22:	00 00       	nop
	_delay_ms(150);
	
	position =  motor_encoder_read();
     c24:	c6 df       	rcall	.-116    	; 0xbb2 <motor_encoder_read>
	
	//go right until stopped, then set encoder to zero
	while(position != prev_position){
     c26:	89 2b       	or	r24, r25
     c28:	21 f1       	breq	.+72     	; 0xc72 <motor_controller_calibrate_by_reset+0x7a>
		
		position =  motor_encoder_read();
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
		printf("position: %u\tPrev: %u\n", position, prev_position);
     c2a:	0f 2e       	mov	r0, r31
     c2c:	fa e6       	ldi	r31, 0x6A	; 106
     c2e:	ef 2e       	mov	r14, r31
     c30:	f2 e0       	ldi	r31, 0x02	; 2
     c32:	ff 2e       	mov	r15, r31
     c34:	f0 2d       	mov	r31, r0
	
	//go right until stopped, then set encoder to zero
	while(position != prev_position){
		
		
		position =  motor_encoder_read();
     c36:	bd df       	rcall	.-134    	; 0xbb2 <motor_encoder_read>
     c38:	ec 01       	movw	r28, r24
     c3a:	2f ef       	ldi	r18, 0xFF	; 255
     c3c:	81 ee       	ldi	r24, 0xE1	; 225
     c3e:	94 e0       	ldi	r25, 0x04	; 4
     c40:	21 50       	subi	r18, 0x01	; 1
     c42:	80 40       	sbci	r24, 0x00	; 0
     c44:	90 40       	sbci	r25, 0x00	; 0
     c46:	e1 f7       	brne	.-8      	; 0xc40 <motor_controller_calibrate_by_reset+0x48>
     c48:	00 c0       	rjmp	.+0      	; 0xc4a <motor_controller_calibrate_by_reset+0x52>
     c4a:	00 00       	nop
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
     c4c:	b2 df       	rcall	.-156    	; 0xbb2 <motor_encoder_read>
     c4e:	8c 01       	movw	r16, r24
		printf("position: %u\tPrev: %u\n", position, prev_position);
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	1f 93       	push	r17
     c56:	0f 93       	push	r16
     c58:	ff 92       	push	r15
     c5a:	ef 92       	push	r14
     c5c:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <printf>
	_delay_ms(150);
	
	position =  motor_encoder_read();
	
	//go right until stopped, then set encoder to zero
	while(position != prev_position){
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	0f 90       	pop	r0
     c6c:	c0 17       	cp	r28, r16
     c6e:	d1 07       	cpc	r29, r17
     c70:	11 f7       	brne	.-60     	; 0xc36 <motor_controller_calibrate_by_reset+0x3e>
		position = motor_encoder_read();
		printf("position: %u\tPrev: %u\n", position, prev_position);

		
	}
	motor_encoder_reset();
     c72:	7a df       	rcall	.-268    	; 0xb68 <motor_encoder_reset>
	
	motor_speed(speed);
     c74:	81 e4       	ldi	r24, 0x41	; 65
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	57 df       	rcall	.-338    	; 0xb28 <motor_speed>
	motor_direction(left);
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	4c df       	rcall	.-360    	; 0xb18 <motor_direction>
     c80:	9f ef       	ldi	r25, 0xFF	; 255
     c82:	22 e5       	ldi	r18, 0x52	; 82
     c84:	87 e0       	ldi	r24, 0x07	; 7
     c86:	91 50       	subi	r25, 0x01	; 1
     c88:	20 40       	sbci	r18, 0x00	; 0
     c8a:	80 40       	sbci	r24, 0x00	; 0
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <motor_controller_calibrate_by_reset+0x8e>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <motor_controller_calibrate_by_reset+0x98>
     c90:	00 00       	nop
		
		position =  motor_encoder_read();
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
		printf("position: %d\n", position);
     c92:	0f 2e       	mov	r0, r31
     c94:	f1 e8       	ldi	r31, 0x81	; 129
     c96:	ef 2e       	mov	r14, r31
     c98:	f2 e0       	ldi	r31, 0x02	; 2
     c9a:	ff 2e       	mov	r15, r31
     c9c:	f0 2d       	mov	r31, r0
	
	//go left until stopped, set max left to current position
	do{
		
		
		position =  motor_encoder_read();
     c9e:	89 df       	rcall	.-238    	; 0xbb2 <motor_encoder_read>
     ca0:	8c 01       	movw	r16, r24
     ca2:	9f ef       	ldi	r25, 0xFF	; 255
     ca4:	21 ee       	ldi	r18, 0xE1	; 225
     ca6:	84 e0       	ldi	r24, 0x04	; 4
     ca8:	91 50       	subi	r25, 0x01	; 1
     caa:	20 40       	sbci	r18, 0x00	; 0
     cac:	80 40       	sbci	r24, 0x00	; 0
     cae:	e1 f7       	brne	.-8      	; 0xca8 <motor_controller_calibrate_by_reset+0xb0>
     cb0:	00 c0       	rjmp	.+0      	; 0xcb2 <motor_controller_calibrate_by_reset+0xba>
     cb2:	00 00       	nop
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
     cb4:	7e df       	rcall	.-260    	; 0xbb2 <motor_encoder_read>
     cb6:	ec 01       	movw	r28, r24
		printf("position: %d\n", position);
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	ff 92       	push	r15
     cbe:	ef 92       	push	r14
     cc0:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <printf>
		
		
	} while(position != prev_position);
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0c 17       	cp	r16, r28
     cce:	1d 07       	cpc	r17, r29
     cd0:	31 f7       	brne	.-52     	; 0xc9e <motor_controller_calibrate_by_reset+0xa6>
	
	max_left = position;
     cd2:	10 93 a3 02 	sts	0x02A3, r17
     cd6:	00 93 a2 02 	sts	0x02A2, r16
	motor_speed(0);
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	24 df       	rcall	.-440    	; 0xb28 <motor_speed>
	
	motor_speed(speed);
     ce0:	81 e4       	ldi	r24, 0x41	; 65
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	21 df       	rcall	.-446    	; 0xb28 <motor_speed>
	motor_direction(right);
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	16 df       	rcall	.-468    	; 0xb18 <motor_direction>
     cec:	8f ef       	ldi	r24, 0xFF	; 255
     cee:	91 ee       	ldi	r25, 0xE1	; 225
     cf0:	24 e0       	ldi	r18, 0x04	; 4
     cf2:	81 50       	subi	r24, 0x01	; 1
     cf4:	90 40       	sbci	r25, 0x00	; 0
     cf6:	20 40       	sbci	r18, 0x00	; 0
     cf8:	e1 f7       	brne	.-8      	; 0xcf2 <motor_controller_calibrate_by_reset+0xfa>
     cfa:	00 c0       	rjmp	.+0      	; 0xcfc <motor_controller_calibrate_by_reset+0x104>
     cfc:	00 00       	nop
     cfe:	09 c0       	rjmp	.+18     	; 0xd12 <motor_controller_calibrate_by_reset+0x11a>
     d00:	8f ef       	ldi	r24, 0xFF	; 255
     d02:	91 ee       	ldi	r25, 0xE1	; 225
     d04:	24 e0       	ldi	r18, 0x04	; 4
     d06:	81 50       	subi	r24, 0x01	; 1
     d08:	90 40       	sbci	r25, 0x00	; 0
     d0a:	20 40       	sbci	r18, 0x00	; 0
     d0c:	e1 f7       	brne	.-8      	; 0xd06 <motor_controller_calibrate_by_reset+0x10e>
     d0e:	00 c0       	rjmp	.+0      	; 0xd10 <motor_controller_calibrate_by_reset+0x118>
     d10:	00 00       	nop
	_delay_ms(100);
	while(motor_encoder_read() > 4500){
     d12:	4f df       	rcall	.-354    	; 0xbb2 <motor_encoder_read>
     d14:	85 39       	cpi	r24, 0x95	; 149
     d16:	91 41       	sbci	r25, 0x11	; 17
     d18:	98 f7       	brcc	.-26     	; 0xd00 <motor_controller_calibrate_by_reset+0x108>
		_delay_ms(100);
	}
}
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	ff 90       	pop	r15
     d24:	ef 90       	pop	r14
     d26:	08 95       	ret

00000d28 <PI_controller_new>:
	float error;
	float integral;
};


PI_controller* PI_controller_new(float kp, float ki){
     d28:	8f 92       	push	r8
     d2a:	9f 92       	push	r9
     d2c:	af 92       	push	r10
     d2e:	bf 92       	push	r11
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	4b 01       	movw	r8, r22
     d3a:	5c 01       	movw	r10, r24
     d3c:	69 01       	movw	r12, r18
     d3e:	7a 01       	movw	r14, r20
	PI_controller* this = malloc(sizeof(PI_controller));
     d40:	82 e1       	ldi	r24, 0x12	; 18
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	4a d6       	rcall	.+3220   	; 0x19da <malloc>
	
	//initialized variables of controller type to 0
	memset(this, 0, sizeof(PI_controller));
     d46:	22 e1       	ldi	r18, 0x12	; 18
     d48:	fc 01       	movw	r30, r24
     d4a:	11 92       	st	Z+, r1
     d4c:	2a 95       	dec	r18
     d4e:	e9 f7       	brne	.-6      	; 0xd4a <PI_controller_new+0x22>
	
	this->Ki = ki;
     d50:	fc 01       	movw	r30, r24
     d52:	c4 82       	std	Z+4, r12	; 0x04
     d54:	d5 82       	std	Z+5, r13	; 0x05
     d56:	e6 82       	std	Z+6, r14	; 0x06
     d58:	f7 82       	std	Z+7, r15	; 0x07
	this->Kp = kp;
     d5a:	80 82       	st	Z, r8
     d5c:	91 82       	std	Z+1, r9	; 0x01
     d5e:	a2 82       	std	Z+2, r10	; 0x02
     d60:	b3 82       	std	Z+3, r11	; 0x03
	
	return this;
}
     d62:	ff 90       	pop	r15
     d64:	ef 90       	pop	r14
     d66:	df 90       	pop	r13
     d68:	cf 90       	pop	r12
     d6a:	bf 90       	pop	r11
     d6c:	af 90       	pop	r10
     d6e:	9f 90       	pop	r9
     d70:	8f 90       	pop	r8
     d72:	08 95       	ret

00000d74 <PI_controller_output>:

int16_t PI_controller_output(PI_controller* ctrl, uint16_t y, uint16_t x){
     d74:	8f 92       	push	r8
     d76:	9f 92       	push	r9
     d78:	af 92       	push	r10
     d7a:	bf 92       	push	r11
     d7c:	cf 92       	push	r12
     d7e:	df 92       	push	r13
     d80:	ef 92       	push	r14
     d82:	ff 92       	push	r15
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	ec 01       	movw	r28, r24
     d8a:	5b 01       	movw	r10, r22
     d8c:	4a 01       	movw	r8, r20


	float dt = (float)(timer_read(4) * prescaler / fcpu);	// dt time [seconds]
     d8e:	84 e0       	ldi	r24, 0x04	; 4
     d90:	b3 dd       	rcall	.-1178   	; 0x8f8 <timer_read>
     d92:	bc 01       	movw	r22, r24
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	a2 d1       	rcall	.+836    	; 0x10de <__floatunsisf>
     d9a:	20 91 07 02 	lds	r18, 0x0207
     d9e:	30 91 08 02 	lds	r19, 0x0208
     da2:	40 91 09 02 	lds	r20, 0x0209
     da6:	50 91 0a 02 	lds	r21, 0x020A
     daa:	27 d2       	rcall	.+1102   	; 0x11fa <__mulsf3>
     dac:	20 91 0b 02 	lds	r18, 0x020B
     db0:	30 91 0c 02 	lds	r19, 0x020C
     db4:	40 91 0d 02 	lds	r20, 0x020D
     db8:	50 91 0e 02 	lds	r21, 0x020E
     dbc:	f7 d0       	rcall	.+494    	; 0xfac <__divsf3>
     dbe:	6b 01       	movw	r12, r22
     dc0:	7c 01       	movw	r14, r24
	timer_reset(4);
     dc2:	84 e0       	ldi	r24, 0x04	; 4
     dc4:	be dd       	rcall	.-1156   	; 0x942 <timer_reset>
	
	int16_t error = x - y;
     dc6:	b4 01       	movw	r22, r8
     dc8:	6a 19       	sub	r22, r10
     dca:	7b 09       	sbc	r23, r11
	ctrl->integral += error * dt;
     dcc:	88 27       	eor	r24, r24
     dce:	77 fd       	sbrc	r23, 7
     dd0:	80 95       	com	r24
     dd2:	98 2f       	mov	r25, r24
     dd4:	86 d1       	rcall	.+780    	; 0x10e2 <__floatsisf>
     dd6:	4b 01       	movw	r8, r22
     dd8:	5c 01       	movw	r10, r24
     dda:	a7 01       	movw	r20, r14
     ddc:	96 01       	movw	r18, r12
     dde:	0d d2       	rcall	.+1050   	; 0x11fa <__mulsf3>
     de0:	2e 85       	ldd	r18, Y+14	; 0x0e
     de2:	3f 85       	ldd	r19, Y+15	; 0x0f
     de4:	48 89       	ldd	r20, Y+16	; 0x10
     de6:	59 89       	ldd	r21, Y+17	; 0x11
     de8:	7d d0       	rcall	.+250    	; 0xee4 <__addsf3>
     dea:	6b 01       	movw	r12, r22
     dec:	7c 01       	movw	r14, r24
     dee:	6e 87       	std	Y+14, r22	; 0x0e
     df0:	7f 87       	std	Y+15, r23	; 0x0f
     df2:	88 8b       	std	Y+16, r24	; 0x10
     df4:	99 8b       	std	Y+17, r25	; 0x11
	
	return ctrl->Kp * error + ctrl->Ki * ctrl->integral;
     df6:	28 81       	ld	r18, Y
     df8:	39 81       	ldd	r19, Y+1	; 0x01
     dfa:	4a 81       	ldd	r20, Y+2	; 0x02
     dfc:	5b 81       	ldd	r21, Y+3	; 0x03
     dfe:	c5 01       	movw	r24, r10
     e00:	b4 01       	movw	r22, r8
     e02:	fb d1       	rcall	.+1014   	; 0x11fa <__mulsf3>
     e04:	4b 01       	movw	r8, r22
     e06:	5c 01       	movw	r10, r24
     e08:	2c 81       	ldd	r18, Y+4	; 0x04
     e0a:	3d 81       	ldd	r19, Y+5	; 0x05
     e0c:	4e 81       	ldd	r20, Y+6	; 0x06
     e0e:	5f 81       	ldd	r21, Y+7	; 0x07
     e10:	c7 01       	movw	r24, r14
     e12:	b6 01       	movw	r22, r12
     e14:	f2 d1       	rcall	.+996    	; 0x11fa <__mulsf3>
     e16:	9b 01       	movw	r18, r22
     e18:	ac 01       	movw	r20, r24
     e1a:	c5 01       	movw	r24, r10
     e1c:	b4 01       	movw	r22, r8
     e1e:	62 d0       	rcall	.+196    	; 0xee4 <__addsf3>
     e20:	2d d1       	rcall	.+602    	; 0x107c <__fixsfsi>
				

}
     e22:	cb 01       	movw	r24, r22
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	ff 90       	pop	r15
     e2a:	ef 90       	pop	r14
     e2c:	df 90       	pop	r13
     e2e:	cf 90       	pop	r12
     e30:	bf 90       	pop	r11
     e32:	af 90       	pop	r10
     e34:	9f 90       	pop	r9
     e36:	8f 90       	pop	r8
     e38:	08 95       	ret

00000e3a <servo_set_pulse>:
}


void servo_set_pulse(int16_t pulse_width){
	
	if(pulse_width >= P_MAX){
     e3a:	8d 30       	cpi	r24, 0x0D	; 13
     e3c:	22 e0       	ldi	r18, 0x02	; 2
     e3e:	92 07       	cpc	r25, r18
     e40:	24 f0       	brlt	.+8      	; 0xe4a <servo_set_pulse+0x10>
		pwm_set_pulse_width(P_MAX);
     e42:	8d e0       	ldi	r24, 0x0D	; 13
     e44:	92 e0       	ldi	r25, 0x02	; 2
     e46:	3c cd       	rjmp	.-1416   	; 0x8c0 <pwm_set_pulse_width>
     e48:	08 95       	ret
	}
	else if(pulse_width < P_MIN){
     e4a:	81 3e       	cpi	r24, 0xE1	; 225
     e4c:	91 05       	cpc	r25, r1
     e4e:	24 f4       	brge	.+8      	; 0xe58 <servo_set_pulse+0x1e>
		pwm_set_pulse_width(P_MIN);
     e50:	81 ee       	ldi	r24, 0xE1	; 225
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	35 cd       	rjmp	.-1430   	; 0x8c0 <pwm_set_pulse_width>
     e56:	08 95       	ret
	}
	else{
		pwm_set_pulse_width(pulse_width);
     e58:	33 cd       	rjmp	.-1434   	; 0x8c0 <pwm_set_pulse_width>
     e5a:	08 95       	ret

00000e5c <servo_set_pulse_by_input>:
}

void servo_set_pulse_by_input(int16_t val){
	
	//reverses control, more intuitive width our hardware
	val = abs(val - 255);
     e5c:	8f 5f       	subi	r24, 0xFF	; 255
     e5e:	91 09       	sbc	r25, r1
     e60:	bc 01       	movw	r22, r24
     e62:	99 23       	and	r25, r25
     e64:	24 f4       	brge	.+8      	; 0xe6e <servo_set_pulse_by_input+0x12>
     e66:	66 27       	eor	r22, r22
     e68:	77 27       	eor	r23, r23
     e6a:	68 1b       	sub	r22, r24
     e6c:	79 0b       	sbc	r23, r25
	
	
	uint16_t pulse_width = (float)(val * (300/255.0)) + P_MIN;
     e6e:	88 27       	eor	r24, r24
     e70:	77 fd       	sbrc	r23, 7
     e72:	80 95       	com	r24
     e74:	98 2f       	mov	r25, r24
     e76:	35 d1       	rcall	.+618    	; 0x10e2 <__floatsisf>
     e78:	27 e9       	ldi	r18, 0x97	; 151
     e7a:	36 e9       	ldi	r19, 0x96	; 150
     e7c:	46 e9       	ldi	r20, 0x96	; 150
     e7e:	5f e3       	ldi	r21, 0x3F	; 63
     e80:	bc d1       	rcall	.+888    	; 0x11fa <__mulsf3>
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	41 e6       	ldi	r20, 0x61	; 97
     e88:	53 e4       	ldi	r21, 0x43	; 67
     e8a:	2c d0       	rcall	.+88     	; 0xee4 <__addsf3>
     e8c:	fc d0       	rcall	.+504    	; 0x1086 <__fixunssfsi>
	servo_set_pulse(pulse_width);
     e8e:	cb 01       	movw	r24, r22
     e90:	d4 cf       	rjmp	.-88     	; 0xe3a <servo_set_pulse>
     e92:	08 95       	ret

00000e94 <solenoid_init>:
void solenoid_extend(){
	PORTH &= ~(1<<PH3);
}

void solenoid_retract(){
	PORTH |= (1<<PH3);	
     e94:	e1 e0       	ldi	r30, 0x01	; 1
     e96:	f1 e0       	ldi	r31, 0x01	; 1
     e98:	80 81       	ld	r24, Z
     e9a:	88 60       	ori	r24, 0x08	; 8
     e9c:	80 83       	st	Z, r24
     e9e:	e2 e0       	ldi	r30, 0x02	; 2
     ea0:	f1 e0       	ldi	r31, 0x01	; 1
     ea2:	80 81       	ld	r24, Z
     ea4:	88 60       	ori	r24, 0x08	; 8
     ea6:	80 83       	st	Z, r24
     ea8:	08 95       	ret

00000eaa <solenoid_shoot>:
     eaa:	e2 e0       	ldi	r30, 0x02	; 2
     eac:	f1 e0       	ldi	r31, 0x01	; 1
     eae:	80 81       	ld	r24, Z
     eb0:	87 7f       	andi	r24, 0xF7	; 247
     eb2:	80 83       	st	Z, r24
     eb4:	2f ef       	ldi	r18, 0xFF	; 255
     eb6:	82 e5       	ldi	r24, 0x52	; 82
     eb8:	97 e0       	ldi	r25, 0x07	; 7
     eba:	21 50       	subi	r18, 0x01	; 1
     ebc:	80 40       	sbci	r24, 0x00	; 0
     ebe:	90 40       	sbci	r25, 0x00	; 0
     ec0:	e1 f7       	brne	.-8      	; 0xeba <solenoid_shoot+0x10>
     ec2:	00 c0       	rjmp	.+0      	; 0xec4 <solenoid_shoot+0x1a>
     ec4:	00 00       	nop
     ec6:	80 81       	ld	r24, Z
     ec8:	88 60       	ori	r24, 0x08	; 8
     eca:	80 83       	st	Z, r24
     ecc:	08 95       	ret

00000ece <solenoid_disallow_shooting>:
}

void solenoid_disallow_shooting(){
	shoot = 0;
     ece:	10 92 0f 02 	sts	0x020F, r1
     ed2:	08 95       	ret

00000ed4 <solenoid_allow_shooting>:
}
void solenoid_allow_shooting(){
	shoot = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	80 93 0f 02 	sts	0x020F, r24
     eda:	08 95       	ret

00000edc <solenoid_is_shooting_allowed>:
}
uint8_t solenoid_is_shooting_allowed(){
	return shoot;
}
     edc:	80 91 0f 02 	lds	r24, 0x020F
     ee0:	08 95       	ret

00000ee2 <__subsf3>:
     ee2:	50 58       	subi	r21, 0x80	; 128

00000ee4 <__addsf3>:
     ee4:	bb 27       	eor	r27, r27
     ee6:	aa 27       	eor	r26, r26
     ee8:	0e d0       	rcall	.+28     	; 0xf06 <__addsf3x>
     eea:	4d c1       	rjmp	.+666    	; 0x1186 <__fp_round>
     eec:	3e d1       	rcall	.+636    	; 0x116a <__fp_pscA>
     eee:	30 f0       	brcs	.+12     	; 0xefc <__addsf3+0x18>
     ef0:	43 d1       	rcall	.+646    	; 0x1178 <__fp_pscB>
     ef2:	20 f0       	brcs	.+8      	; 0xefc <__addsf3+0x18>
     ef4:	31 f4       	brne	.+12     	; 0xf02 <__addsf3+0x1e>
     ef6:	9f 3f       	cpi	r25, 0xFF	; 255
     ef8:	11 f4       	brne	.+4      	; 0xefe <__addsf3+0x1a>
     efa:	1e f4       	brtc	.+6      	; 0xf02 <__addsf3+0x1e>
     efc:	33 c1       	rjmp	.+614    	; 0x1164 <__fp_nan>
     efe:	0e f4       	brtc	.+2      	; 0xf02 <__addsf3+0x1e>
     f00:	e0 95       	com	r30
     f02:	e7 fb       	bst	r30, 7
     f04:	29 c1       	rjmp	.+594    	; 0x1158 <__fp_inf>

00000f06 <__addsf3x>:
     f06:	e9 2f       	mov	r30, r25
     f08:	4f d1       	rcall	.+670    	; 0x11a8 <__fp_split3>
     f0a:	80 f3       	brcs	.-32     	; 0xeec <__addsf3+0x8>
     f0c:	ba 17       	cp	r27, r26
     f0e:	62 07       	cpc	r22, r18
     f10:	73 07       	cpc	r23, r19
     f12:	84 07       	cpc	r24, r20
     f14:	95 07       	cpc	r25, r21
     f16:	18 f0       	brcs	.+6      	; 0xf1e <__addsf3x+0x18>
     f18:	71 f4       	brne	.+28     	; 0xf36 <__addsf3x+0x30>
     f1a:	9e f5       	brtc	.+102    	; 0xf82 <__addsf3x+0x7c>
     f1c:	67 c1       	rjmp	.+718    	; 0x11ec <__fp_zero>
     f1e:	0e f4       	brtc	.+2      	; 0xf22 <__addsf3x+0x1c>
     f20:	e0 95       	com	r30
     f22:	0b 2e       	mov	r0, r27
     f24:	ba 2f       	mov	r27, r26
     f26:	a0 2d       	mov	r26, r0
     f28:	0b 01       	movw	r0, r22
     f2a:	b9 01       	movw	r22, r18
     f2c:	90 01       	movw	r18, r0
     f2e:	0c 01       	movw	r0, r24
     f30:	ca 01       	movw	r24, r20
     f32:	a0 01       	movw	r20, r0
     f34:	11 24       	eor	r1, r1
     f36:	ff 27       	eor	r31, r31
     f38:	59 1b       	sub	r21, r25
     f3a:	99 f0       	breq	.+38     	; 0xf62 <__addsf3x+0x5c>
     f3c:	59 3f       	cpi	r21, 0xF9	; 249
     f3e:	50 f4       	brcc	.+20     	; 0xf54 <__addsf3x+0x4e>
     f40:	50 3e       	cpi	r21, 0xE0	; 224
     f42:	68 f1       	brcs	.+90     	; 0xf9e <__addsf3x+0x98>
     f44:	1a 16       	cp	r1, r26
     f46:	f0 40       	sbci	r31, 0x00	; 0
     f48:	a2 2f       	mov	r26, r18
     f4a:	23 2f       	mov	r18, r19
     f4c:	34 2f       	mov	r19, r20
     f4e:	44 27       	eor	r20, r20
     f50:	58 5f       	subi	r21, 0xF8	; 248
     f52:	f3 cf       	rjmp	.-26     	; 0xf3a <__addsf3x+0x34>
     f54:	46 95       	lsr	r20
     f56:	37 95       	ror	r19
     f58:	27 95       	ror	r18
     f5a:	a7 95       	ror	r26
     f5c:	f0 40       	sbci	r31, 0x00	; 0
     f5e:	53 95       	inc	r21
     f60:	c9 f7       	brne	.-14     	; 0xf54 <__addsf3x+0x4e>
     f62:	7e f4       	brtc	.+30     	; 0xf82 <__addsf3x+0x7c>
     f64:	1f 16       	cp	r1, r31
     f66:	ba 0b       	sbc	r27, r26
     f68:	62 0b       	sbc	r22, r18
     f6a:	73 0b       	sbc	r23, r19
     f6c:	84 0b       	sbc	r24, r20
     f6e:	ba f0       	brmi	.+46     	; 0xf9e <__addsf3x+0x98>
     f70:	91 50       	subi	r25, 0x01	; 1
     f72:	a1 f0       	breq	.+40     	; 0xf9c <__addsf3x+0x96>
     f74:	ff 0f       	add	r31, r31
     f76:	bb 1f       	adc	r27, r27
     f78:	66 1f       	adc	r22, r22
     f7a:	77 1f       	adc	r23, r23
     f7c:	88 1f       	adc	r24, r24
     f7e:	c2 f7       	brpl	.-16     	; 0xf70 <__addsf3x+0x6a>
     f80:	0e c0       	rjmp	.+28     	; 0xf9e <__addsf3x+0x98>
     f82:	ba 0f       	add	r27, r26
     f84:	62 1f       	adc	r22, r18
     f86:	73 1f       	adc	r23, r19
     f88:	84 1f       	adc	r24, r20
     f8a:	48 f4       	brcc	.+18     	; 0xf9e <__addsf3x+0x98>
     f8c:	87 95       	ror	r24
     f8e:	77 95       	ror	r23
     f90:	67 95       	ror	r22
     f92:	b7 95       	ror	r27
     f94:	f7 95       	ror	r31
     f96:	9e 3f       	cpi	r25, 0xFE	; 254
     f98:	08 f0       	brcs	.+2      	; 0xf9c <__addsf3x+0x96>
     f9a:	b3 cf       	rjmp	.-154    	; 0xf02 <__addsf3+0x1e>
     f9c:	93 95       	inc	r25
     f9e:	88 0f       	add	r24, r24
     fa0:	08 f0       	brcs	.+2      	; 0xfa4 <__addsf3x+0x9e>
     fa2:	99 27       	eor	r25, r25
     fa4:	ee 0f       	add	r30, r30
     fa6:	97 95       	ror	r25
     fa8:	87 95       	ror	r24
     faa:	08 95       	ret

00000fac <__divsf3>:
     fac:	0c d0       	rcall	.+24     	; 0xfc6 <__divsf3x>
     fae:	eb c0       	rjmp	.+470    	; 0x1186 <__fp_round>
     fb0:	e3 d0       	rcall	.+454    	; 0x1178 <__fp_pscB>
     fb2:	40 f0       	brcs	.+16     	; 0xfc4 <__divsf3+0x18>
     fb4:	da d0       	rcall	.+436    	; 0x116a <__fp_pscA>
     fb6:	30 f0       	brcs	.+12     	; 0xfc4 <__divsf3+0x18>
     fb8:	21 f4       	brne	.+8      	; 0xfc2 <__divsf3+0x16>
     fba:	5f 3f       	cpi	r21, 0xFF	; 255
     fbc:	19 f0       	breq	.+6      	; 0xfc4 <__divsf3+0x18>
     fbe:	cc c0       	rjmp	.+408    	; 0x1158 <__fp_inf>
     fc0:	51 11       	cpse	r21, r1
     fc2:	15 c1       	rjmp	.+554    	; 0x11ee <__fp_szero>
     fc4:	cf c0       	rjmp	.+414    	; 0x1164 <__fp_nan>

00000fc6 <__divsf3x>:
     fc6:	f0 d0       	rcall	.+480    	; 0x11a8 <__fp_split3>
     fc8:	98 f3       	brcs	.-26     	; 0xfb0 <__divsf3+0x4>

00000fca <__divsf3_pse>:
     fca:	99 23       	and	r25, r25
     fcc:	c9 f3       	breq	.-14     	; 0xfc0 <__divsf3+0x14>
     fce:	55 23       	and	r21, r21
     fd0:	b1 f3       	breq	.-20     	; 0xfbe <__divsf3+0x12>
     fd2:	95 1b       	sub	r25, r21
     fd4:	55 0b       	sbc	r21, r21
     fd6:	bb 27       	eor	r27, r27
     fd8:	aa 27       	eor	r26, r26
     fda:	62 17       	cp	r22, r18
     fdc:	73 07       	cpc	r23, r19
     fde:	84 07       	cpc	r24, r20
     fe0:	38 f0       	brcs	.+14     	; 0xff0 <__divsf3_pse+0x26>
     fe2:	9f 5f       	subi	r25, 0xFF	; 255
     fe4:	5f 4f       	sbci	r21, 0xFF	; 255
     fe6:	22 0f       	add	r18, r18
     fe8:	33 1f       	adc	r19, r19
     fea:	44 1f       	adc	r20, r20
     fec:	aa 1f       	adc	r26, r26
     fee:	a9 f3       	breq	.-22     	; 0xfda <__divsf3_pse+0x10>
     ff0:	33 d0       	rcall	.+102    	; 0x1058 <__divsf3_pse+0x8e>
     ff2:	0e 2e       	mov	r0, r30
     ff4:	3a f0       	brmi	.+14     	; 0x1004 <__divsf3_pse+0x3a>
     ff6:	e0 e8       	ldi	r30, 0x80	; 128
     ff8:	30 d0       	rcall	.+96     	; 0x105a <__divsf3_pse+0x90>
     ffa:	91 50       	subi	r25, 0x01	; 1
     ffc:	50 40       	sbci	r21, 0x00	; 0
     ffe:	e6 95       	lsr	r30
    1000:	00 1c       	adc	r0, r0
    1002:	ca f7       	brpl	.-14     	; 0xff6 <__divsf3_pse+0x2c>
    1004:	29 d0       	rcall	.+82     	; 0x1058 <__divsf3_pse+0x8e>
    1006:	fe 2f       	mov	r31, r30
    1008:	27 d0       	rcall	.+78     	; 0x1058 <__divsf3_pse+0x8e>
    100a:	66 0f       	add	r22, r22
    100c:	77 1f       	adc	r23, r23
    100e:	88 1f       	adc	r24, r24
    1010:	bb 1f       	adc	r27, r27
    1012:	26 17       	cp	r18, r22
    1014:	37 07       	cpc	r19, r23
    1016:	48 07       	cpc	r20, r24
    1018:	ab 07       	cpc	r26, r27
    101a:	b0 e8       	ldi	r27, 0x80	; 128
    101c:	09 f0       	breq	.+2      	; 0x1020 <__divsf3_pse+0x56>
    101e:	bb 0b       	sbc	r27, r27
    1020:	80 2d       	mov	r24, r0
    1022:	bf 01       	movw	r22, r30
    1024:	ff 27       	eor	r31, r31
    1026:	93 58       	subi	r25, 0x83	; 131
    1028:	5f 4f       	sbci	r21, 0xFF	; 255
    102a:	2a f0       	brmi	.+10     	; 0x1036 <__divsf3_pse+0x6c>
    102c:	9e 3f       	cpi	r25, 0xFE	; 254
    102e:	51 05       	cpc	r21, r1
    1030:	68 f0       	brcs	.+26     	; 0x104c <__divsf3_pse+0x82>
    1032:	92 c0       	rjmp	.+292    	; 0x1158 <__fp_inf>
    1034:	dc c0       	rjmp	.+440    	; 0x11ee <__fp_szero>
    1036:	5f 3f       	cpi	r21, 0xFF	; 255
    1038:	ec f3       	brlt	.-6      	; 0x1034 <__divsf3_pse+0x6a>
    103a:	98 3e       	cpi	r25, 0xE8	; 232
    103c:	dc f3       	brlt	.-10     	; 0x1034 <__divsf3_pse+0x6a>
    103e:	86 95       	lsr	r24
    1040:	77 95       	ror	r23
    1042:	67 95       	ror	r22
    1044:	b7 95       	ror	r27
    1046:	f7 95       	ror	r31
    1048:	9f 5f       	subi	r25, 0xFF	; 255
    104a:	c9 f7       	brne	.-14     	; 0x103e <__divsf3_pse+0x74>
    104c:	88 0f       	add	r24, r24
    104e:	91 1d       	adc	r25, r1
    1050:	96 95       	lsr	r25
    1052:	87 95       	ror	r24
    1054:	97 f9       	bld	r25, 7
    1056:	08 95       	ret
    1058:	e1 e0       	ldi	r30, 0x01	; 1
    105a:	66 0f       	add	r22, r22
    105c:	77 1f       	adc	r23, r23
    105e:	88 1f       	adc	r24, r24
    1060:	bb 1f       	adc	r27, r27
    1062:	62 17       	cp	r22, r18
    1064:	73 07       	cpc	r23, r19
    1066:	84 07       	cpc	r24, r20
    1068:	ba 07       	cpc	r27, r26
    106a:	20 f0       	brcs	.+8      	; 0x1074 <__divsf3_pse+0xaa>
    106c:	62 1b       	sub	r22, r18
    106e:	73 0b       	sbc	r23, r19
    1070:	84 0b       	sbc	r24, r20
    1072:	ba 0b       	sbc	r27, r26
    1074:	ee 1f       	adc	r30, r30
    1076:	88 f7       	brcc	.-30     	; 0x105a <__divsf3_pse+0x90>
    1078:	e0 95       	com	r30
    107a:	08 95       	ret

0000107c <__fixsfsi>:
    107c:	04 d0       	rcall	.+8      	; 0x1086 <__fixunssfsi>
    107e:	68 94       	set
    1080:	b1 11       	cpse	r27, r1
    1082:	b5 c0       	rjmp	.+362    	; 0x11ee <__fp_szero>
    1084:	08 95       	ret

00001086 <__fixunssfsi>:
    1086:	98 d0       	rcall	.+304    	; 0x11b8 <__fp_splitA>
    1088:	88 f0       	brcs	.+34     	; 0x10ac <__fixunssfsi+0x26>
    108a:	9f 57       	subi	r25, 0x7F	; 127
    108c:	90 f0       	brcs	.+36     	; 0x10b2 <__fixunssfsi+0x2c>
    108e:	b9 2f       	mov	r27, r25
    1090:	99 27       	eor	r25, r25
    1092:	b7 51       	subi	r27, 0x17	; 23
    1094:	a0 f0       	brcs	.+40     	; 0x10be <__fixunssfsi+0x38>
    1096:	d1 f0       	breq	.+52     	; 0x10cc <__fixunssfsi+0x46>
    1098:	66 0f       	add	r22, r22
    109a:	77 1f       	adc	r23, r23
    109c:	88 1f       	adc	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	1a f0       	brmi	.+6      	; 0x10a8 <__fixunssfsi+0x22>
    10a2:	ba 95       	dec	r27
    10a4:	c9 f7       	brne	.-14     	; 0x1098 <__fixunssfsi+0x12>
    10a6:	12 c0       	rjmp	.+36     	; 0x10cc <__fixunssfsi+0x46>
    10a8:	b1 30       	cpi	r27, 0x01	; 1
    10aa:	81 f0       	breq	.+32     	; 0x10cc <__fixunssfsi+0x46>
    10ac:	9f d0       	rcall	.+318    	; 0x11ec <__fp_zero>
    10ae:	b1 e0       	ldi	r27, 0x01	; 1
    10b0:	08 95       	ret
    10b2:	9c c0       	rjmp	.+312    	; 0x11ec <__fp_zero>
    10b4:	67 2f       	mov	r22, r23
    10b6:	78 2f       	mov	r23, r24
    10b8:	88 27       	eor	r24, r24
    10ba:	b8 5f       	subi	r27, 0xF8	; 248
    10bc:	39 f0       	breq	.+14     	; 0x10cc <__fixunssfsi+0x46>
    10be:	b9 3f       	cpi	r27, 0xF9	; 249
    10c0:	cc f3       	brlt	.-14     	; 0x10b4 <__fixunssfsi+0x2e>
    10c2:	86 95       	lsr	r24
    10c4:	77 95       	ror	r23
    10c6:	67 95       	ror	r22
    10c8:	b3 95       	inc	r27
    10ca:	d9 f7       	brne	.-10     	; 0x10c2 <__fixunssfsi+0x3c>
    10cc:	3e f4       	brtc	.+14     	; 0x10dc <__fixunssfsi+0x56>
    10ce:	90 95       	com	r25
    10d0:	80 95       	com	r24
    10d2:	70 95       	com	r23
    10d4:	61 95       	neg	r22
    10d6:	7f 4f       	sbci	r23, 0xFF	; 255
    10d8:	8f 4f       	sbci	r24, 0xFF	; 255
    10da:	9f 4f       	sbci	r25, 0xFF	; 255
    10dc:	08 95       	ret

000010de <__floatunsisf>:
    10de:	e8 94       	clt
    10e0:	09 c0       	rjmp	.+18     	; 0x10f4 <__floatsisf+0x12>

000010e2 <__floatsisf>:
    10e2:	97 fb       	bst	r25, 7
    10e4:	3e f4       	brtc	.+14     	; 0x10f4 <__floatsisf+0x12>
    10e6:	90 95       	com	r25
    10e8:	80 95       	com	r24
    10ea:	70 95       	com	r23
    10ec:	61 95       	neg	r22
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	8f 4f       	sbci	r24, 0xFF	; 255
    10f2:	9f 4f       	sbci	r25, 0xFF	; 255
    10f4:	99 23       	and	r25, r25
    10f6:	a9 f0       	breq	.+42     	; 0x1122 <__floatsisf+0x40>
    10f8:	f9 2f       	mov	r31, r25
    10fa:	96 e9       	ldi	r25, 0x96	; 150
    10fc:	bb 27       	eor	r27, r27
    10fe:	93 95       	inc	r25
    1100:	f6 95       	lsr	r31
    1102:	87 95       	ror	r24
    1104:	77 95       	ror	r23
    1106:	67 95       	ror	r22
    1108:	b7 95       	ror	r27
    110a:	f1 11       	cpse	r31, r1
    110c:	f8 cf       	rjmp	.-16     	; 0x10fe <__floatsisf+0x1c>
    110e:	fa f4       	brpl	.+62     	; 0x114e <__floatsisf+0x6c>
    1110:	bb 0f       	add	r27, r27
    1112:	11 f4       	brne	.+4      	; 0x1118 <__floatsisf+0x36>
    1114:	60 ff       	sbrs	r22, 0
    1116:	1b c0       	rjmp	.+54     	; 0x114e <__floatsisf+0x6c>
    1118:	6f 5f       	subi	r22, 0xFF	; 255
    111a:	7f 4f       	sbci	r23, 0xFF	; 255
    111c:	8f 4f       	sbci	r24, 0xFF	; 255
    111e:	9f 4f       	sbci	r25, 0xFF	; 255
    1120:	16 c0       	rjmp	.+44     	; 0x114e <__floatsisf+0x6c>
    1122:	88 23       	and	r24, r24
    1124:	11 f0       	breq	.+4      	; 0x112a <__floatsisf+0x48>
    1126:	96 e9       	ldi	r25, 0x96	; 150
    1128:	11 c0       	rjmp	.+34     	; 0x114c <__floatsisf+0x6a>
    112a:	77 23       	and	r23, r23
    112c:	21 f0       	breq	.+8      	; 0x1136 <__floatsisf+0x54>
    112e:	9e e8       	ldi	r25, 0x8E	; 142
    1130:	87 2f       	mov	r24, r23
    1132:	76 2f       	mov	r23, r22
    1134:	05 c0       	rjmp	.+10     	; 0x1140 <__floatsisf+0x5e>
    1136:	66 23       	and	r22, r22
    1138:	71 f0       	breq	.+28     	; 0x1156 <__floatsisf+0x74>
    113a:	96 e8       	ldi	r25, 0x86	; 134
    113c:	86 2f       	mov	r24, r22
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	2a f0       	brmi	.+10     	; 0x114e <__floatsisf+0x6c>
    1144:	9a 95       	dec	r25
    1146:	66 0f       	add	r22, r22
    1148:	77 1f       	adc	r23, r23
    114a:	88 1f       	adc	r24, r24
    114c:	da f7       	brpl	.-10     	; 0x1144 <__floatsisf+0x62>
    114e:	88 0f       	add	r24, r24
    1150:	96 95       	lsr	r25
    1152:	87 95       	ror	r24
    1154:	97 f9       	bld	r25, 7
    1156:	08 95       	ret

00001158 <__fp_inf>:
    1158:	97 f9       	bld	r25, 7
    115a:	9f 67       	ori	r25, 0x7F	; 127
    115c:	80 e8       	ldi	r24, 0x80	; 128
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	08 95       	ret

00001164 <__fp_nan>:
    1164:	9f ef       	ldi	r25, 0xFF	; 255
    1166:	80 ec       	ldi	r24, 0xC0	; 192
    1168:	08 95       	ret

0000116a <__fp_pscA>:
    116a:	00 24       	eor	r0, r0
    116c:	0a 94       	dec	r0
    116e:	16 16       	cp	r1, r22
    1170:	17 06       	cpc	r1, r23
    1172:	18 06       	cpc	r1, r24
    1174:	09 06       	cpc	r0, r25
    1176:	08 95       	ret

00001178 <__fp_pscB>:
    1178:	00 24       	eor	r0, r0
    117a:	0a 94       	dec	r0
    117c:	12 16       	cp	r1, r18
    117e:	13 06       	cpc	r1, r19
    1180:	14 06       	cpc	r1, r20
    1182:	05 06       	cpc	r0, r21
    1184:	08 95       	ret

00001186 <__fp_round>:
    1186:	09 2e       	mov	r0, r25
    1188:	03 94       	inc	r0
    118a:	00 0c       	add	r0, r0
    118c:	11 f4       	brne	.+4      	; 0x1192 <__fp_round+0xc>
    118e:	88 23       	and	r24, r24
    1190:	52 f0       	brmi	.+20     	; 0x11a6 <__fp_round+0x20>
    1192:	bb 0f       	add	r27, r27
    1194:	40 f4       	brcc	.+16     	; 0x11a6 <__fp_round+0x20>
    1196:	bf 2b       	or	r27, r31
    1198:	11 f4       	brne	.+4      	; 0x119e <__fp_round+0x18>
    119a:	60 ff       	sbrs	r22, 0
    119c:	04 c0       	rjmp	.+8      	; 0x11a6 <__fp_round+0x20>
    119e:	6f 5f       	subi	r22, 0xFF	; 255
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	8f 4f       	sbci	r24, 0xFF	; 255
    11a4:	9f 4f       	sbci	r25, 0xFF	; 255
    11a6:	08 95       	ret

000011a8 <__fp_split3>:
    11a8:	57 fd       	sbrc	r21, 7
    11aa:	90 58       	subi	r25, 0x80	; 128
    11ac:	44 0f       	add	r20, r20
    11ae:	55 1f       	adc	r21, r21
    11b0:	59 f0       	breq	.+22     	; 0x11c8 <__fp_splitA+0x10>
    11b2:	5f 3f       	cpi	r21, 0xFF	; 255
    11b4:	71 f0       	breq	.+28     	; 0x11d2 <__fp_splitA+0x1a>
    11b6:	47 95       	ror	r20

000011b8 <__fp_splitA>:
    11b8:	88 0f       	add	r24, r24
    11ba:	97 fb       	bst	r25, 7
    11bc:	99 1f       	adc	r25, r25
    11be:	61 f0       	breq	.+24     	; 0x11d8 <__fp_splitA+0x20>
    11c0:	9f 3f       	cpi	r25, 0xFF	; 255
    11c2:	79 f0       	breq	.+30     	; 0x11e2 <__fp_splitA+0x2a>
    11c4:	87 95       	ror	r24
    11c6:	08 95       	ret
    11c8:	12 16       	cp	r1, r18
    11ca:	13 06       	cpc	r1, r19
    11cc:	14 06       	cpc	r1, r20
    11ce:	55 1f       	adc	r21, r21
    11d0:	f2 cf       	rjmp	.-28     	; 0x11b6 <__fp_split3+0xe>
    11d2:	46 95       	lsr	r20
    11d4:	f1 df       	rcall	.-30     	; 0x11b8 <__fp_splitA>
    11d6:	08 c0       	rjmp	.+16     	; 0x11e8 <__fp_splitA+0x30>
    11d8:	16 16       	cp	r1, r22
    11da:	17 06       	cpc	r1, r23
    11dc:	18 06       	cpc	r1, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	f1 cf       	rjmp	.-30     	; 0x11c4 <__fp_splitA+0xc>
    11e2:	86 95       	lsr	r24
    11e4:	71 05       	cpc	r23, r1
    11e6:	61 05       	cpc	r22, r1
    11e8:	08 94       	sec
    11ea:	08 95       	ret

000011ec <__fp_zero>:
    11ec:	e8 94       	clt

000011ee <__fp_szero>:
    11ee:	bb 27       	eor	r27, r27
    11f0:	66 27       	eor	r22, r22
    11f2:	77 27       	eor	r23, r23
    11f4:	cb 01       	movw	r24, r22
    11f6:	97 f9       	bld	r25, 7
    11f8:	08 95       	ret

000011fa <__mulsf3>:
    11fa:	0b d0       	rcall	.+22     	; 0x1212 <__mulsf3x>
    11fc:	c4 cf       	rjmp	.-120    	; 0x1186 <__fp_round>
    11fe:	b5 df       	rcall	.-150    	; 0x116a <__fp_pscA>
    1200:	28 f0       	brcs	.+10     	; 0x120c <__mulsf3+0x12>
    1202:	ba df       	rcall	.-140    	; 0x1178 <__fp_pscB>
    1204:	18 f0       	brcs	.+6      	; 0x120c <__mulsf3+0x12>
    1206:	95 23       	and	r25, r21
    1208:	09 f0       	breq	.+2      	; 0x120c <__mulsf3+0x12>
    120a:	a6 cf       	rjmp	.-180    	; 0x1158 <__fp_inf>
    120c:	ab cf       	rjmp	.-170    	; 0x1164 <__fp_nan>
    120e:	11 24       	eor	r1, r1
    1210:	ee cf       	rjmp	.-36     	; 0x11ee <__fp_szero>

00001212 <__mulsf3x>:
    1212:	ca df       	rcall	.-108    	; 0x11a8 <__fp_split3>
    1214:	a0 f3       	brcs	.-24     	; 0x11fe <__mulsf3+0x4>

00001216 <__mulsf3_pse>:
    1216:	95 9f       	mul	r25, r21
    1218:	d1 f3       	breq	.-12     	; 0x120e <__mulsf3+0x14>
    121a:	95 0f       	add	r25, r21
    121c:	50 e0       	ldi	r21, 0x00	; 0
    121e:	55 1f       	adc	r21, r21
    1220:	62 9f       	mul	r22, r18
    1222:	f0 01       	movw	r30, r0
    1224:	72 9f       	mul	r23, r18
    1226:	bb 27       	eor	r27, r27
    1228:	f0 0d       	add	r31, r0
    122a:	b1 1d       	adc	r27, r1
    122c:	63 9f       	mul	r22, r19
    122e:	aa 27       	eor	r26, r26
    1230:	f0 0d       	add	r31, r0
    1232:	b1 1d       	adc	r27, r1
    1234:	aa 1f       	adc	r26, r26
    1236:	64 9f       	mul	r22, r20
    1238:	66 27       	eor	r22, r22
    123a:	b0 0d       	add	r27, r0
    123c:	a1 1d       	adc	r26, r1
    123e:	66 1f       	adc	r22, r22
    1240:	82 9f       	mul	r24, r18
    1242:	22 27       	eor	r18, r18
    1244:	b0 0d       	add	r27, r0
    1246:	a1 1d       	adc	r26, r1
    1248:	62 1f       	adc	r22, r18
    124a:	73 9f       	mul	r23, r19
    124c:	b0 0d       	add	r27, r0
    124e:	a1 1d       	adc	r26, r1
    1250:	62 1f       	adc	r22, r18
    1252:	83 9f       	mul	r24, r19
    1254:	a0 0d       	add	r26, r0
    1256:	61 1d       	adc	r22, r1
    1258:	22 1f       	adc	r18, r18
    125a:	74 9f       	mul	r23, r20
    125c:	33 27       	eor	r19, r19
    125e:	a0 0d       	add	r26, r0
    1260:	61 1d       	adc	r22, r1
    1262:	23 1f       	adc	r18, r19
    1264:	84 9f       	mul	r24, r20
    1266:	60 0d       	add	r22, r0
    1268:	21 1d       	adc	r18, r1
    126a:	82 2f       	mov	r24, r18
    126c:	76 2f       	mov	r23, r22
    126e:	6a 2f       	mov	r22, r26
    1270:	11 24       	eor	r1, r1
    1272:	9f 57       	subi	r25, 0x7F	; 127
    1274:	50 40       	sbci	r21, 0x00	; 0
    1276:	8a f0       	brmi	.+34     	; 0x129a <__mulsf3_pse+0x84>
    1278:	e1 f0       	breq	.+56     	; 0x12b2 <__mulsf3_pse+0x9c>
    127a:	88 23       	and	r24, r24
    127c:	4a f0       	brmi	.+18     	; 0x1290 <__mulsf3_pse+0x7a>
    127e:	ee 0f       	add	r30, r30
    1280:	ff 1f       	adc	r31, r31
    1282:	bb 1f       	adc	r27, r27
    1284:	66 1f       	adc	r22, r22
    1286:	77 1f       	adc	r23, r23
    1288:	88 1f       	adc	r24, r24
    128a:	91 50       	subi	r25, 0x01	; 1
    128c:	50 40       	sbci	r21, 0x00	; 0
    128e:	a9 f7       	brne	.-22     	; 0x127a <__mulsf3_pse+0x64>
    1290:	9e 3f       	cpi	r25, 0xFE	; 254
    1292:	51 05       	cpc	r21, r1
    1294:	70 f0       	brcs	.+28     	; 0x12b2 <__mulsf3_pse+0x9c>
    1296:	60 cf       	rjmp	.-320    	; 0x1158 <__fp_inf>
    1298:	aa cf       	rjmp	.-172    	; 0x11ee <__fp_szero>
    129a:	5f 3f       	cpi	r21, 0xFF	; 255
    129c:	ec f3       	brlt	.-6      	; 0x1298 <__mulsf3_pse+0x82>
    129e:	98 3e       	cpi	r25, 0xE8	; 232
    12a0:	dc f3       	brlt	.-10     	; 0x1298 <__mulsf3_pse+0x82>
    12a2:	86 95       	lsr	r24
    12a4:	77 95       	ror	r23
    12a6:	67 95       	ror	r22
    12a8:	b7 95       	ror	r27
    12aa:	f7 95       	ror	r31
    12ac:	e7 95       	ror	r30
    12ae:	9f 5f       	subi	r25, 0xFF	; 255
    12b0:	c1 f7       	brne	.-16     	; 0x12a2 <__mulsf3_pse+0x8c>
    12b2:	fe 2b       	or	r31, r30
    12b4:	88 0f       	add	r24, r24
    12b6:	91 1d       	adc	r25, r1
    12b8:	96 95       	lsr	r25
    12ba:	87 95       	ror	r24
    12bc:	97 f9       	bld	r25, 7
    12be:	08 95       	ret

000012c0 <vfprintf>:
    12c0:	2f 92       	push	r2
    12c2:	3f 92       	push	r3
    12c4:	4f 92       	push	r4
    12c6:	5f 92       	push	r5
    12c8:	6f 92       	push	r6
    12ca:	7f 92       	push	r7
    12cc:	8f 92       	push	r8
    12ce:	9f 92       	push	r9
    12d0:	af 92       	push	r10
    12d2:	bf 92       	push	r11
    12d4:	cf 92       	push	r12
    12d6:	df 92       	push	r13
    12d8:	ef 92       	push	r14
    12da:	ff 92       	push	r15
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	63 97       	sbiw	r28, 0x13	; 19
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	7c 01       	movw	r14, r24
    12f6:	1b 01       	movw	r2, r22
    12f8:	6a 01       	movw	r12, r20
    12fa:	fc 01       	movw	r30, r24
    12fc:	17 82       	std	Z+7, r1	; 0x07
    12fe:	16 82       	std	Z+6, r1	; 0x06
    1300:	83 81       	ldd	r24, Z+3	; 0x03
    1302:	81 ff       	sbrs	r24, 1
    1304:	49 c3       	rjmp	.+1682   	; 0x1998 <vfprintf+0x6d8>
    1306:	be 01       	movw	r22, r28
    1308:	6f 5f       	subi	r22, 0xFF	; 255
    130a:	7f 4f       	sbci	r23, 0xFF	; 255
    130c:	4b 01       	movw	r8, r22
    130e:	f7 01       	movw	r30, r14
    1310:	93 81       	ldd	r25, Z+3	; 0x03
    1312:	f1 01       	movw	r30, r2
    1314:	93 fd       	sbrc	r25, 3
    1316:	85 91       	lpm	r24, Z+
    1318:	93 ff       	sbrs	r25, 3
    131a:	81 91       	ld	r24, Z+
    131c:	1f 01       	movw	r2, r30
    131e:	88 23       	and	r24, r24
    1320:	09 f4       	brne	.+2      	; 0x1324 <vfprintf+0x64>
    1322:	36 c3       	rjmp	.+1644   	; 0x1990 <vfprintf+0x6d0>
    1324:	85 32       	cpi	r24, 0x25	; 37
    1326:	39 f4       	brne	.+14     	; 0x1336 <vfprintf+0x76>
    1328:	93 fd       	sbrc	r25, 3
    132a:	85 91       	lpm	r24, Z+
    132c:	93 ff       	sbrs	r25, 3
    132e:	81 91       	ld	r24, Z+
    1330:	1f 01       	movw	r2, r30
    1332:	85 32       	cpi	r24, 0x25	; 37
    1334:	31 f4       	brne	.+12     	; 0x1342 <vfprintf+0x82>
    1336:	b7 01       	movw	r22, r14
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	ae d5       	rcall	.+2908   	; 0x1e98 <fputc>
    133c:	56 01       	movw	r10, r12
    133e:	65 01       	movw	r12, r10
    1340:	e6 cf       	rjmp	.-52     	; 0x130e <vfprintf+0x4e>
    1342:	10 e0       	ldi	r17, 0x00	; 0
    1344:	51 2c       	mov	r5, r1
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	20 32       	cpi	r18, 0x20	; 32
    134a:	a0 f4       	brcc	.+40     	; 0x1374 <vfprintf+0xb4>
    134c:	8b 32       	cpi	r24, 0x2B	; 43
    134e:	69 f0       	breq	.+26     	; 0x136a <vfprintf+0xaa>
    1350:	30 f4       	brcc	.+12     	; 0x135e <vfprintf+0x9e>
    1352:	80 32       	cpi	r24, 0x20	; 32
    1354:	59 f0       	breq	.+22     	; 0x136c <vfprintf+0xac>
    1356:	83 32       	cpi	r24, 0x23	; 35
    1358:	69 f4       	brne	.+26     	; 0x1374 <vfprintf+0xb4>
    135a:	20 61       	ori	r18, 0x10	; 16
    135c:	2c c0       	rjmp	.+88     	; 0x13b6 <vfprintf+0xf6>
    135e:	8d 32       	cpi	r24, 0x2D	; 45
    1360:	39 f0       	breq	.+14     	; 0x1370 <vfprintf+0xb0>
    1362:	80 33       	cpi	r24, 0x30	; 48
    1364:	39 f4       	brne	.+14     	; 0x1374 <vfprintf+0xb4>
    1366:	21 60       	ori	r18, 0x01	; 1
    1368:	26 c0       	rjmp	.+76     	; 0x13b6 <vfprintf+0xf6>
    136a:	22 60       	ori	r18, 0x02	; 2
    136c:	24 60       	ori	r18, 0x04	; 4
    136e:	23 c0       	rjmp	.+70     	; 0x13b6 <vfprintf+0xf6>
    1370:	28 60       	ori	r18, 0x08	; 8
    1372:	21 c0       	rjmp	.+66     	; 0x13b6 <vfprintf+0xf6>
    1374:	27 fd       	sbrc	r18, 7
    1376:	27 c0       	rjmp	.+78     	; 0x13c6 <vfprintf+0x106>
    1378:	30 ed       	ldi	r19, 0xD0	; 208
    137a:	38 0f       	add	r19, r24
    137c:	3a 30       	cpi	r19, 0x0A	; 10
    137e:	78 f4       	brcc	.+30     	; 0x139e <vfprintf+0xde>
    1380:	26 ff       	sbrs	r18, 6
    1382:	06 c0       	rjmp	.+12     	; 0x1390 <vfprintf+0xd0>
    1384:	fa e0       	ldi	r31, 0x0A	; 10
    1386:	1f 9f       	mul	r17, r31
    1388:	30 0d       	add	r19, r0
    138a:	11 24       	eor	r1, r1
    138c:	13 2f       	mov	r17, r19
    138e:	13 c0       	rjmp	.+38     	; 0x13b6 <vfprintf+0xf6>
    1390:	6a e0       	ldi	r22, 0x0A	; 10
    1392:	56 9e       	mul	r5, r22
    1394:	30 0d       	add	r19, r0
    1396:	11 24       	eor	r1, r1
    1398:	53 2e       	mov	r5, r19
    139a:	20 62       	ori	r18, 0x20	; 32
    139c:	0c c0       	rjmp	.+24     	; 0x13b6 <vfprintf+0xf6>
    139e:	8e 32       	cpi	r24, 0x2E	; 46
    13a0:	21 f4       	brne	.+8      	; 0x13aa <vfprintf+0xea>
    13a2:	26 fd       	sbrc	r18, 6
    13a4:	f5 c2       	rjmp	.+1514   	; 0x1990 <vfprintf+0x6d0>
    13a6:	20 64       	ori	r18, 0x40	; 64
    13a8:	06 c0       	rjmp	.+12     	; 0x13b6 <vfprintf+0xf6>
    13aa:	8c 36       	cpi	r24, 0x6C	; 108
    13ac:	11 f4       	brne	.+4      	; 0x13b2 <vfprintf+0xf2>
    13ae:	20 68       	ori	r18, 0x80	; 128
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <vfprintf+0xf6>
    13b2:	88 36       	cpi	r24, 0x68	; 104
    13b4:	41 f4       	brne	.+16     	; 0x13c6 <vfprintf+0x106>
    13b6:	f1 01       	movw	r30, r2
    13b8:	93 fd       	sbrc	r25, 3
    13ba:	85 91       	lpm	r24, Z+
    13bc:	93 ff       	sbrs	r25, 3
    13be:	81 91       	ld	r24, Z+
    13c0:	1f 01       	movw	r2, r30
    13c2:	81 11       	cpse	r24, r1
    13c4:	c1 cf       	rjmp	.-126    	; 0x1348 <vfprintf+0x88>
    13c6:	9b eb       	ldi	r25, 0xBB	; 187
    13c8:	98 0f       	add	r25, r24
    13ca:	93 30       	cpi	r25, 0x03	; 3
    13cc:	18 f4       	brcc	.+6      	; 0x13d4 <vfprintf+0x114>
    13ce:	20 61       	ori	r18, 0x10	; 16
    13d0:	80 5e       	subi	r24, 0xE0	; 224
    13d2:	06 c0       	rjmp	.+12     	; 0x13e0 <vfprintf+0x120>
    13d4:	9b e9       	ldi	r25, 0x9B	; 155
    13d6:	98 0f       	add	r25, r24
    13d8:	93 30       	cpi	r25, 0x03	; 3
    13da:	08 f0       	brcs	.+2      	; 0x13de <vfprintf+0x11e>
    13dc:	9a c1       	rjmp	.+820    	; 0x1712 <vfprintf+0x452>
    13de:	2f 7e       	andi	r18, 0xEF	; 239
    13e0:	26 ff       	sbrs	r18, 6
    13e2:	16 e0       	ldi	r17, 0x06	; 6
    13e4:	2f 73       	andi	r18, 0x3F	; 63
    13e6:	72 2e       	mov	r7, r18
    13e8:	85 36       	cpi	r24, 0x65	; 101
    13ea:	21 f4       	brne	.+8      	; 0x13f4 <vfprintf+0x134>
    13ec:	f2 2f       	mov	r31, r18
    13ee:	f0 64       	ori	r31, 0x40	; 64
    13f0:	7f 2e       	mov	r7, r31
    13f2:	08 c0       	rjmp	.+16     	; 0x1404 <vfprintf+0x144>
    13f4:	86 36       	cpi	r24, 0x66	; 102
    13f6:	21 f4       	brne	.+8      	; 0x1400 <vfprintf+0x140>
    13f8:	62 2f       	mov	r22, r18
    13fa:	60 68       	ori	r22, 0x80	; 128
    13fc:	76 2e       	mov	r7, r22
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <vfprintf+0x144>
    1400:	11 11       	cpse	r17, r1
    1402:	11 50       	subi	r17, 0x01	; 1
    1404:	77 fe       	sbrs	r7, 7
    1406:	07 c0       	rjmp	.+14     	; 0x1416 <vfprintf+0x156>
    1408:	1c 33       	cpi	r17, 0x3C	; 60
    140a:	48 f4       	brcc	.+18     	; 0x141e <vfprintf+0x15e>
    140c:	44 24       	eor	r4, r4
    140e:	43 94       	inc	r4
    1410:	41 0e       	add	r4, r17
    1412:	27 e0       	ldi	r18, 0x07	; 7
    1414:	0b c0       	rjmp	.+22     	; 0x142c <vfprintf+0x16c>
    1416:	18 30       	cpi	r17, 0x08	; 8
    1418:	30 f4       	brcc	.+12     	; 0x1426 <vfprintf+0x166>
    141a:	21 2f       	mov	r18, r17
    141c:	06 c0       	rjmp	.+12     	; 0x142a <vfprintf+0x16a>
    141e:	27 e0       	ldi	r18, 0x07	; 7
    1420:	4c e3       	ldi	r20, 0x3C	; 60
    1422:	44 2e       	mov	r4, r20
    1424:	03 c0       	rjmp	.+6      	; 0x142c <vfprintf+0x16c>
    1426:	27 e0       	ldi	r18, 0x07	; 7
    1428:	17 e0       	ldi	r17, 0x07	; 7
    142a:	41 2c       	mov	r4, r1
    142c:	56 01       	movw	r10, r12
    142e:	74 e0       	ldi	r23, 0x04	; 4
    1430:	a7 0e       	add	r10, r23
    1432:	b1 1c       	adc	r11, r1
    1434:	f6 01       	movw	r30, r12
    1436:	60 81       	ld	r22, Z
    1438:	71 81       	ldd	r23, Z+1	; 0x01
    143a:	82 81       	ldd	r24, Z+2	; 0x02
    143c:	93 81       	ldd	r25, Z+3	; 0x03
    143e:	04 2d       	mov	r16, r4
    1440:	a4 01       	movw	r20, r8
    1442:	f2 d3       	rcall	.+2020   	; 0x1c28 <__ftoa_engine>
    1444:	6c 01       	movw	r12, r24
    1446:	09 81       	ldd	r16, Y+1	; 0x01
    1448:	00 ff       	sbrs	r16, 0
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <vfprintf+0x190>
    144c:	03 ff       	sbrs	r16, 3
    144e:	06 c0       	rjmp	.+12     	; 0x145c <vfprintf+0x19c>
    1450:	71 fc       	sbrc	r7, 1
    1452:	07 c0       	rjmp	.+14     	; 0x1462 <vfprintf+0x1a2>
    1454:	72 fc       	sbrc	r7, 2
    1456:	08 c0       	rjmp	.+16     	; 0x1468 <vfprintf+0x1a8>
    1458:	61 2c       	mov	r6, r1
    145a:	08 c0       	rjmp	.+16     	; 0x146c <vfprintf+0x1ac>
    145c:	3d e2       	ldi	r19, 0x2D	; 45
    145e:	63 2e       	mov	r6, r19
    1460:	05 c0       	rjmp	.+10     	; 0x146c <vfprintf+0x1ac>
    1462:	2b e2       	ldi	r18, 0x2B	; 43
    1464:	62 2e       	mov	r6, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <vfprintf+0x1ac>
    1468:	90 e2       	ldi	r25, 0x20	; 32
    146a:	69 2e       	mov	r6, r25
    146c:	80 2f       	mov	r24, r16
    146e:	8c 70       	andi	r24, 0x0C	; 12
    1470:	81 f1       	breq	.+96     	; 0x14d2 <vfprintf+0x212>
    1472:	66 20       	and	r6, r6
    1474:	11 f0       	breq	.+4      	; 0x147a <vfprintf+0x1ba>
    1476:	84 e0       	ldi	r24, 0x04	; 4
    1478:	01 c0       	rjmp	.+2      	; 0x147c <vfprintf+0x1bc>
    147a:	83 e0       	ldi	r24, 0x03	; 3
    147c:	85 15       	cp	r24, r5
    147e:	10 f0       	brcs	.+4      	; 0x1484 <vfprintf+0x1c4>
    1480:	51 2c       	mov	r5, r1
    1482:	0a c0       	rjmp	.+20     	; 0x1498 <vfprintf+0x1d8>
    1484:	58 1a       	sub	r5, r24
    1486:	73 fc       	sbrc	r7, 3
    1488:	07 c0       	rjmp	.+14     	; 0x1498 <vfprintf+0x1d8>
    148a:	b7 01       	movw	r22, r14
    148c:	80 e2       	ldi	r24, 0x20	; 32
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	03 d5       	rcall	.+2566   	; 0x1e98 <fputc>
    1492:	5a 94       	dec	r5
    1494:	d1 f7       	brne	.-12     	; 0x148a <vfprintf+0x1ca>
    1496:	f4 cf       	rjmp	.-24     	; 0x1480 <vfprintf+0x1c0>
    1498:	66 20       	and	r6, r6
    149a:	21 f0       	breq	.+8      	; 0x14a4 <vfprintf+0x1e4>
    149c:	b7 01       	movw	r22, r14
    149e:	86 2d       	mov	r24, r6
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	fa d4       	rcall	.+2548   	; 0x1e98 <fputc>
    14a4:	03 fd       	sbrc	r16, 3
    14a6:	03 c0       	rjmp	.+6      	; 0x14ae <vfprintf+0x1ee>
    14a8:	0a e8       	ldi	r16, 0x8A	; 138
    14aa:	11 e0       	ldi	r17, 0x01	; 1
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <vfprintf+0x1f2>
    14ae:	06 e8       	ldi	r16, 0x86	; 134
    14b0:	11 e0       	ldi	r17, 0x01	; 1
    14b2:	f7 2d       	mov	r31, r7
    14b4:	f0 71       	andi	r31, 0x10	; 16
    14b6:	7f 2e       	mov	r7, r31
    14b8:	f8 01       	movw	r30, r16
    14ba:	84 91       	lpm	r24, Z
    14bc:	88 23       	and	r24, r24
    14be:	09 f4       	brne	.+2      	; 0x14c2 <vfprintf+0x202>
    14c0:	5e c2       	rjmp	.+1212   	; 0x197e <vfprintf+0x6be>
    14c2:	71 10       	cpse	r7, r1
    14c4:	80 52       	subi	r24, 0x20	; 32
    14c6:	b7 01       	movw	r22, r14
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	e6 d4       	rcall	.+2508   	; 0x1e98 <fputc>
    14cc:	0f 5f       	subi	r16, 0xFF	; 255
    14ce:	1f 4f       	sbci	r17, 0xFF	; 255
    14d0:	f3 cf       	rjmp	.-26     	; 0x14b8 <vfprintf+0x1f8>
    14d2:	77 fe       	sbrs	r7, 7
    14d4:	0f c0       	rjmp	.+30     	; 0x14f4 <vfprintf+0x234>
    14d6:	4c 0c       	add	r4, r12
    14d8:	04 ff       	sbrs	r16, 4
    14da:	04 c0       	rjmp	.+8      	; 0x14e4 <vfprintf+0x224>
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	81 33       	cpi	r24, 0x31	; 49
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <vfprintf+0x224>
    14e2:	4a 94       	dec	r4
    14e4:	14 14       	cp	r1, r4
    14e6:	74 f5       	brge	.+92     	; 0x1544 <vfprintf+0x284>
    14e8:	f8 e0       	ldi	r31, 0x08	; 8
    14ea:	f4 15       	cp	r31, r4
    14ec:	78 f5       	brcc	.+94     	; 0x154c <vfprintf+0x28c>
    14ee:	88 e0       	ldi	r24, 0x08	; 8
    14f0:	48 2e       	mov	r4, r24
    14f2:	2c c0       	rjmp	.+88     	; 0x154c <vfprintf+0x28c>
    14f4:	76 fc       	sbrc	r7, 6
    14f6:	2a c0       	rjmp	.+84     	; 0x154c <vfprintf+0x28c>
    14f8:	81 2f       	mov	r24, r17
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	8c 15       	cp	r24, r12
    14fe:	9d 05       	cpc	r25, r13
    1500:	9c f0       	brlt	.+38     	; 0x1528 <vfprintf+0x268>
    1502:	6c ef       	ldi	r22, 0xFC	; 252
    1504:	c6 16       	cp	r12, r22
    1506:	6f ef       	ldi	r22, 0xFF	; 255
    1508:	d6 06       	cpc	r13, r22
    150a:	74 f0       	brlt	.+28     	; 0x1528 <vfprintf+0x268>
    150c:	77 2d       	mov	r23, r7
    150e:	70 68       	ori	r23, 0x80	; 128
    1510:	77 2e       	mov	r7, r23
    1512:	0a c0       	rjmp	.+20     	; 0x1528 <vfprintf+0x268>
    1514:	e2 e0       	ldi	r30, 0x02	; 2
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	ec 0f       	add	r30, r28
    151a:	fd 1f       	adc	r31, r29
    151c:	e1 0f       	add	r30, r17
    151e:	f1 1d       	adc	r31, r1
    1520:	80 81       	ld	r24, Z
    1522:	80 33       	cpi	r24, 0x30	; 48
    1524:	19 f4       	brne	.+6      	; 0x152c <vfprintf+0x26c>
    1526:	11 50       	subi	r17, 0x01	; 1
    1528:	11 11       	cpse	r17, r1
    152a:	f4 cf       	rjmp	.-24     	; 0x1514 <vfprintf+0x254>
    152c:	77 fe       	sbrs	r7, 7
    152e:	0e c0       	rjmp	.+28     	; 0x154c <vfprintf+0x28c>
    1530:	44 24       	eor	r4, r4
    1532:	43 94       	inc	r4
    1534:	41 0e       	add	r4, r17
    1536:	81 2f       	mov	r24, r17
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	c8 16       	cp	r12, r24
    153c:	d9 06       	cpc	r13, r25
    153e:	2c f4       	brge	.+10     	; 0x154a <vfprintf+0x28a>
    1540:	1c 19       	sub	r17, r12
    1542:	04 c0       	rjmp	.+8      	; 0x154c <vfprintf+0x28c>
    1544:	44 24       	eor	r4, r4
    1546:	43 94       	inc	r4
    1548:	01 c0       	rjmp	.+2      	; 0x154c <vfprintf+0x28c>
    154a:	10 e0       	ldi	r17, 0x00	; 0
    154c:	77 fe       	sbrs	r7, 7
    154e:	07 c0       	rjmp	.+14     	; 0x155e <vfprintf+0x29e>
    1550:	1c 14       	cp	r1, r12
    1552:	1d 04       	cpc	r1, r13
    1554:	3c f4       	brge	.+14     	; 0x1564 <vfprintf+0x2a4>
    1556:	96 01       	movw	r18, r12
    1558:	2f 5f       	subi	r18, 0xFF	; 255
    155a:	3f 4f       	sbci	r19, 0xFF	; 255
    155c:	05 c0       	rjmp	.+10     	; 0x1568 <vfprintf+0x2a8>
    155e:	25 e0       	ldi	r18, 0x05	; 5
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <vfprintf+0x2a8>
    1564:	21 e0       	ldi	r18, 0x01	; 1
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	66 20       	and	r6, r6
    156a:	11 f0       	breq	.+4      	; 0x1570 <vfprintf+0x2b0>
    156c:	2f 5f       	subi	r18, 0xFF	; 255
    156e:	3f 4f       	sbci	r19, 0xFF	; 255
    1570:	11 23       	and	r17, r17
    1572:	31 f0       	breq	.+12     	; 0x1580 <vfprintf+0x2c0>
    1574:	41 2f       	mov	r20, r17
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	4f 5f       	subi	r20, 0xFF	; 255
    157a:	5f 4f       	sbci	r21, 0xFF	; 255
    157c:	24 0f       	add	r18, r20
    157e:	35 1f       	adc	r19, r21
    1580:	45 2d       	mov	r20, r5
    1582:	50 e0       	ldi	r21, 0x00	; 0
    1584:	24 17       	cp	r18, r20
    1586:	35 07       	cpc	r19, r21
    1588:	14 f4       	brge	.+4      	; 0x158e <vfprintf+0x2ce>
    158a:	52 1a       	sub	r5, r18
    158c:	01 c0       	rjmp	.+2      	; 0x1590 <vfprintf+0x2d0>
    158e:	51 2c       	mov	r5, r1
    1590:	87 2d       	mov	r24, r7
    1592:	89 70       	andi	r24, 0x09	; 9
    1594:	41 f4       	brne	.+16     	; 0x15a6 <vfprintf+0x2e6>
    1596:	55 20       	and	r5, r5
    1598:	31 f0       	breq	.+12     	; 0x15a6 <vfprintf+0x2e6>
    159a:	b7 01       	movw	r22, r14
    159c:	80 e2       	ldi	r24, 0x20	; 32
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	7b d4       	rcall	.+2294   	; 0x1e98 <fputc>
    15a2:	5a 94       	dec	r5
    15a4:	f8 cf       	rjmp	.-16     	; 0x1596 <vfprintf+0x2d6>
    15a6:	66 20       	and	r6, r6
    15a8:	21 f0       	breq	.+8      	; 0x15b2 <vfprintf+0x2f2>
    15aa:	b7 01       	movw	r22, r14
    15ac:	86 2d       	mov	r24, r6
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	73 d4       	rcall	.+2278   	; 0x1e98 <fputc>
    15b2:	73 fc       	sbrc	r7, 3
    15b4:	08 c0       	rjmp	.+16     	; 0x15c6 <vfprintf+0x306>
    15b6:	55 20       	and	r5, r5
    15b8:	31 f0       	breq	.+12     	; 0x15c6 <vfprintf+0x306>
    15ba:	b7 01       	movw	r22, r14
    15bc:	80 e3       	ldi	r24, 0x30	; 48
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	6b d4       	rcall	.+2262   	; 0x1e98 <fputc>
    15c2:	5a 94       	dec	r5
    15c4:	f8 cf       	rjmp	.-16     	; 0x15b6 <vfprintf+0x2f6>
    15c6:	77 fe       	sbrs	r7, 7
    15c8:	5d c0       	rjmp	.+186    	; 0x1684 <vfprintf+0x3c4>
    15ca:	9c 2d       	mov	r25, r12
    15cc:	8d 2d       	mov	r24, r13
    15ce:	d7 fe       	sbrs	r13, 7
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <vfprintf+0x316>
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	69 2e       	mov	r6, r25
    15d8:	78 2e       	mov	r7, r24
    15da:	40 e0       	ldi	r20, 0x00	; 0
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	c6 01       	movw	r24, r12
    15e0:	84 19       	sub	r24, r4
    15e2:	91 09       	sbc	r25, r1
    15e4:	9d 87       	std	Y+13, r25	; 0x0d
    15e6:	8c 87       	std	Y+12, r24	; 0x0c
    15e8:	96 01       	movw	r18, r12
    15ea:	26 19       	sub	r18, r6
    15ec:	37 09       	sbc	r19, r7
    15ee:	28 0d       	add	r18, r8
    15f0:	39 1d       	adc	r19, r9
    15f2:	81 2f       	mov	r24, r17
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	ee 27       	eor	r30, r30
    15f8:	ff 27       	eor	r31, r31
    15fa:	e8 1b       	sub	r30, r24
    15fc:	f9 0b       	sbc	r31, r25
    15fe:	ff 87       	std	Y+15, r31	; 0x0f
    1600:	ee 87       	std	Y+14, r30	; 0x0e
    1602:	ff ef       	ldi	r31, 0xFF	; 255
    1604:	6f 16       	cp	r6, r31
    1606:	7f 06       	cpc	r7, r31
    1608:	61 f4       	brne	.+24     	; 0x1622 <vfprintf+0x362>
    160a:	b7 01       	movw	r22, r14
    160c:	8e e2       	ldi	r24, 0x2E	; 46
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	2b 8b       	std	Y+19, r18	; 0x13
    1612:	3a 8b       	std	Y+18, r19	; 0x12
    1614:	48 8b       	std	Y+16, r20	; 0x10
    1616:	59 8b       	std	Y+17, r21	; 0x11
    1618:	3f d4       	rcall	.+2174   	; 0x1e98 <fputc>
    161a:	59 89       	ldd	r21, Y+17	; 0x11
    161c:	48 89       	ldd	r20, Y+16	; 0x10
    161e:	3a 89       	ldd	r19, Y+18	; 0x12
    1620:	2b 89       	ldd	r18, Y+19	; 0x13
    1622:	c6 14       	cp	r12, r6
    1624:	d7 04       	cpc	r13, r7
    1626:	54 f0       	brlt	.+20     	; 0x163c <vfprintf+0x37c>
    1628:	6c 85       	ldd	r22, Y+12	; 0x0c
    162a:	7d 85       	ldd	r23, Y+13	; 0x0d
    162c:	66 15       	cp	r22, r6
    162e:	77 05       	cpc	r23, r7
    1630:	2c f4       	brge	.+10     	; 0x163c <vfprintf+0x37c>
    1632:	f9 01       	movw	r30, r18
    1634:	e4 0f       	add	r30, r20
    1636:	f5 1f       	adc	r31, r21
    1638:	81 81       	ldd	r24, Z+1	; 0x01
    163a:	01 c0       	rjmp	.+2      	; 0x163e <vfprintf+0x37e>
    163c:	80 e3       	ldi	r24, 0x30	; 48
    163e:	71 e0       	ldi	r23, 0x01	; 1
    1640:	67 1a       	sub	r6, r23
    1642:	71 08       	sbc	r7, r1
    1644:	4f 5f       	subi	r20, 0xFF	; 255
    1646:	5f 4f       	sbci	r21, 0xFF	; 255
    1648:	ee 85       	ldd	r30, Y+14	; 0x0e
    164a:	ff 85       	ldd	r31, Y+15	; 0x0f
    164c:	6e 16       	cp	r6, r30
    164e:	7f 06       	cpc	r7, r31
    1650:	64 f0       	brlt	.+24     	; 0x166a <vfprintf+0x3aa>
    1652:	b7 01       	movw	r22, r14
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	2b 8b       	std	Y+19, r18	; 0x13
    1658:	3a 8b       	std	Y+18, r19	; 0x12
    165a:	48 8b       	std	Y+16, r20	; 0x10
    165c:	59 8b       	std	Y+17, r21	; 0x11
    165e:	1c d4       	rcall	.+2104   	; 0x1e98 <fputc>
    1660:	2b 89       	ldd	r18, Y+19	; 0x13
    1662:	3a 89       	ldd	r19, Y+18	; 0x12
    1664:	48 89       	ldd	r20, Y+16	; 0x10
    1666:	59 89       	ldd	r21, Y+17	; 0x11
    1668:	cc cf       	rjmp	.-104    	; 0x1602 <vfprintf+0x342>
    166a:	6c 14       	cp	r6, r12
    166c:	7d 04       	cpc	r7, r13
    166e:	39 f4       	brne	.+14     	; 0x167e <vfprintf+0x3be>
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	96 33       	cpi	r25, 0x36	; 54
    1674:	18 f4       	brcc	.+6      	; 0x167c <vfprintf+0x3bc>
    1676:	95 33       	cpi	r25, 0x35	; 53
    1678:	11 f4       	brne	.+4      	; 0x167e <vfprintf+0x3be>
    167a:	04 ff       	sbrs	r16, 4
    167c:	81 e3       	ldi	r24, 0x31	; 49
    167e:	b7 01       	movw	r22, r14
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	45 c0       	rjmp	.+138    	; 0x170e <vfprintf+0x44e>
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	81 33       	cpi	r24, 0x31	; 49
    1688:	09 f0       	breq	.+2      	; 0x168c <vfprintf+0x3cc>
    168a:	0f 7e       	andi	r16, 0xEF	; 239
    168c:	b7 01       	movw	r22, r14
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	03 d4       	rcall	.+2054   	; 0x1e98 <fputc>
    1692:	11 11       	cpse	r17, r1
    1694:	05 c0       	rjmp	.+10     	; 0x16a0 <vfprintf+0x3e0>
    1696:	74 fe       	sbrs	r7, 4
    1698:	16 c0       	rjmp	.+44     	; 0x16c6 <vfprintf+0x406>
    169a:	85 e4       	ldi	r24, 0x45	; 69
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	15 c0       	rjmp	.+42     	; 0x16ca <vfprintf+0x40a>
    16a0:	b7 01       	movw	r22, r14
    16a2:	8e e2       	ldi	r24, 0x2E	; 46
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	f8 d3       	rcall	.+2032   	; 0x1e98 <fputc>
    16a8:	82 e0       	ldi	r24, 0x02	; 2
    16aa:	66 24       	eor	r6, r6
    16ac:	63 94       	inc	r6
    16ae:	68 0e       	add	r6, r24
    16b0:	f4 01       	movw	r30, r8
    16b2:	e8 0f       	add	r30, r24
    16b4:	f1 1d       	adc	r31, r1
    16b6:	80 81       	ld	r24, Z
    16b8:	b7 01       	movw	r22, r14
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	ed d3       	rcall	.+2010   	; 0x1e98 <fputc>
    16be:	11 50       	subi	r17, 0x01	; 1
    16c0:	51 f3       	breq	.-44     	; 0x1696 <vfprintf+0x3d6>
    16c2:	86 2d       	mov	r24, r6
    16c4:	f2 cf       	rjmp	.-28     	; 0x16aa <vfprintf+0x3ea>
    16c6:	85 e6       	ldi	r24, 0x65	; 101
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	b7 01       	movw	r22, r14
    16cc:	e5 d3       	rcall	.+1994   	; 0x1e98 <fputc>
    16ce:	d7 fc       	sbrc	r13, 7
    16d0:	05 c0       	rjmp	.+10     	; 0x16dc <vfprintf+0x41c>
    16d2:	c1 14       	cp	r12, r1
    16d4:	d1 04       	cpc	r13, r1
    16d6:	39 f4       	brne	.+14     	; 0x16e6 <vfprintf+0x426>
    16d8:	04 ff       	sbrs	r16, 4
    16da:	05 c0       	rjmp	.+10     	; 0x16e6 <vfprintf+0x426>
    16dc:	d1 94       	neg	r13
    16de:	c1 94       	neg	r12
    16e0:	d1 08       	sbc	r13, r1
    16e2:	8d e2       	ldi	r24, 0x2D	; 45
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <vfprintf+0x428>
    16e6:	8b e2       	ldi	r24, 0x2B	; 43
    16e8:	b7 01       	movw	r22, r14
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	d5 d3       	rcall	.+1962   	; 0x1e98 <fputc>
    16ee:	80 e3       	ldi	r24, 0x30	; 48
    16f0:	6a e0       	ldi	r22, 0x0A	; 10
    16f2:	c6 16       	cp	r12, r22
    16f4:	d1 04       	cpc	r13, r1
    16f6:	2c f0       	brlt	.+10     	; 0x1702 <vfprintf+0x442>
    16f8:	8f 5f       	subi	r24, 0xFF	; 255
    16fa:	fa e0       	ldi	r31, 0x0A	; 10
    16fc:	cf 1a       	sub	r12, r31
    16fe:	d1 08       	sbc	r13, r1
    1700:	f7 cf       	rjmp	.-18     	; 0x16f0 <vfprintf+0x430>
    1702:	b7 01       	movw	r22, r14
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	c8 d3       	rcall	.+1936   	; 0x1e98 <fputc>
    1708:	b7 01       	movw	r22, r14
    170a:	c6 01       	movw	r24, r12
    170c:	c0 96       	adiw	r24, 0x30	; 48
    170e:	c4 d3       	rcall	.+1928   	; 0x1e98 <fputc>
    1710:	36 c1       	rjmp	.+620    	; 0x197e <vfprintf+0x6be>
    1712:	83 36       	cpi	r24, 0x63	; 99
    1714:	31 f0       	breq	.+12     	; 0x1722 <vfprintf+0x462>
    1716:	83 37       	cpi	r24, 0x73	; 115
    1718:	79 f0       	breq	.+30     	; 0x1738 <vfprintf+0x478>
    171a:	83 35       	cpi	r24, 0x53	; 83
    171c:	09 f0       	breq	.+2      	; 0x1720 <vfprintf+0x460>
    171e:	54 c0       	rjmp	.+168    	; 0x17c8 <vfprintf+0x508>
    1720:	20 c0       	rjmp	.+64     	; 0x1762 <vfprintf+0x4a2>
    1722:	56 01       	movw	r10, r12
    1724:	72 e0       	ldi	r23, 0x02	; 2
    1726:	a7 0e       	add	r10, r23
    1728:	b1 1c       	adc	r11, r1
    172a:	f6 01       	movw	r30, r12
    172c:	80 81       	ld	r24, Z
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	01 e0       	ldi	r16, 0x01	; 1
    1732:	10 e0       	ldi	r17, 0x00	; 0
    1734:	64 01       	movw	r12, r8
    1736:	13 c0       	rjmp	.+38     	; 0x175e <vfprintf+0x49e>
    1738:	56 01       	movw	r10, r12
    173a:	f2 e0       	ldi	r31, 0x02	; 2
    173c:	af 0e       	add	r10, r31
    173e:	b1 1c       	adc	r11, r1
    1740:	f6 01       	movw	r30, r12
    1742:	c0 80       	ld	r12, Z
    1744:	d1 80       	ldd	r13, Z+1	; 0x01
    1746:	26 ff       	sbrs	r18, 6
    1748:	03 c0       	rjmp	.+6      	; 0x1750 <vfprintf+0x490>
    174a:	61 2f       	mov	r22, r17
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <vfprintf+0x494>
    1750:	6f ef       	ldi	r22, 0xFF	; 255
    1752:	7f ef       	ldi	r23, 0xFF	; 255
    1754:	c6 01       	movw	r24, r12
    1756:	2b 8b       	std	Y+19, r18	; 0x13
    1758:	4a d3       	rcall	.+1684   	; 0x1dee <strnlen>
    175a:	8c 01       	movw	r16, r24
    175c:	2b 89       	ldd	r18, Y+19	; 0x13
    175e:	2f 77       	andi	r18, 0x7F	; 127
    1760:	14 c0       	rjmp	.+40     	; 0x178a <vfprintf+0x4ca>
    1762:	56 01       	movw	r10, r12
    1764:	f2 e0       	ldi	r31, 0x02	; 2
    1766:	af 0e       	add	r10, r31
    1768:	b1 1c       	adc	r11, r1
    176a:	f6 01       	movw	r30, r12
    176c:	c0 80       	ld	r12, Z
    176e:	d1 80       	ldd	r13, Z+1	; 0x01
    1770:	26 ff       	sbrs	r18, 6
    1772:	03 c0       	rjmp	.+6      	; 0x177a <vfprintf+0x4ba>
    1774:	61 2f       	mov	r22, r17
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	02 c0       	rjmp	.+4      	; 0x177e <vfprintf+0x4be>
    177a:	6f ef       	ldi	r22, 0xFF	; 255
    177c:	7f ef       	ldi	r23, 0xFF	; 255
    177e:	c6 01       	movw	r24, r12
    1780:	2b 8b       	std	Y+19, r18	; 0x13
    1782:	2a d3       	rcall	.+1620   	; 0x1dd8 <strnlen_P>
    1784:	8c 01       	movw	r16, r24
    1786:	2b 89       	ldd	r18, Y+19	; 0x13
    1788:	20 68       	ori	r18, 0x80	; 128
    178a:	72 2e       	mov	r7, r18
    178c:	23 fd       	sbrc	r18, 3
    178e:	18 c0       	rjmp	.+48     	; 0x17c0 <vfprintf+0x500>
    1790:	85 2d       	mov	r24, r5
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	08 17       	cp	r16, r24
    1796:	19 07       	cpc	r17, r25
    1798:	98 f4       	brcc	.+38     	; 0x17c0 <vfprintf+0x500>
    179a:	b7 01       	movw	r22, r14
    179c:	80 e2       	ldi	r24, 0x20	; 32
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	7b d3       	rcall	.+1782   	; 0x1e98 <fputc>
    17a2:	5a 94       	dec	r5
    17a4:	f5 cf       	rjmp	.-22     	; 0x1790 <vfprintf+0x4d0>
    17a6:	f6 01       	movw	r30, r12
    17a8:	77 fc       	sbrc	r7, 7
    17aa:	85 91       	lpm	r24, Z+
    17ac:	77 fe       	sbrs	r7, 7
    17ae:	81 91       	ld	r24, Z+
    17b0:	6f 01       	movw	r12, r30
    17b2:	b7 01       	movw	r22, r14
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	70 d3       	rcall	.+1760   	; 0x1e98 <fputc>
    17b8:	51 10       	cpse	r5, r1
    17ba:	5a 94       	dec	r5
    17bc:	01 50       	subi	r16, 0x01	; 1
    17be:	11 09       	sbc	r17, r1
    17c0:	01 15       	cp	r16, r1
    17c2:	11 05       	cpc	r17, r1
    17c4:	81 f7       	brne	.-32     	; 0x17a6 <vfprintf+0x4e6>
    17c6:	db c0       	rjmp	.+438    	; 0x197e <vfprintf+0x6be>
    17c8:	84 36       	cpi	r24, 0x64	; 100
    17ca:	11 f0       	breq	.+4      	; 0x17d0 <vfprintf+0x510>
    17cc:	89 36       	cpi	r24, 0x69	; 105
    17ce:	49 f5       	brne	.+82     	; 0x1822 <vfprintf+0x562>
    17d0:	56 01       	movw	r10, r12
    17d2:	27 ff       	sbrs	r18, 7
    17d4:	09 c0       	rjmp	.+18     	; 0x17e8 <vfprintf+0x528>
    17d6:	f4 e0       	ldi	r31, 0x04	; 4
    17d8:	af 0e       	add	r10, r31
    17da:	b1 1c       	adc	r11, r1
    17dc:	f6 01       	movw	r30, r12
    17de:	60 81       	ld	r22, Z
    17e0:	71 81       	ldd	r23, Z+1	; 0x01
    17e2:	82 81       	ldd	r24, Z+2	; 0x02
    17e4:	93 81       	ldd	r25, Z+3	; 0x03
    17e6:	0a c0       	rjmp	.+20     	; 0x17fc <vfprintf+0x53c>
    17e8:	f2 e0       	ldi	r31, 0x02	; 2
    17ea:	af 0e       	add	r10, r31
    17ec:	b1 1c       	adc	r11, r1
    17ee:	f6 01       	movw	r30, r12
    17f0:	60 81       	ld	r22, Z
    17f2:	71 81       	ldd	r23, Z+1	; 0x01
    17f4:	88 27       	eor	r24, r24
    17f6:	77 fd       	sbrc	r23, 7
    17f8:	80 95       	com	r24
    17fa:	98 2f       	mov	r25, r24
    17fc:	02 2f       	mov	r16, r18
    17fe:	0f 76       	andi	r16, 0x6F	; 111
    1800:	97 ff       	sbrs	r25, 7
    1802:	08 c0       	rjmp	.+16     	; 0x1814 <vfprintf+0x554>
    1804:	90 95       	com	r25
    1806:	80 95       	com	r24
    1808:	70 95       	com	r23
    180a:	61 95       	neg	r22
    180c:	7f 4f       	sbci	r23, 0xFF	; 255
    180e:	8f 4f       	sbci	r24, 0xFF	; 255
    1810:	9f 4f       	sbci	r25, 0xFF	; 255
    1812:	00 68       	ori	r16, 0x80	; 128
    1814:	2a e0       	ldi	r18, 0x0A	; 10
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	a4 01       	movw	r20, r8
    181a:	ae d3       	rcall	.+1884   	; 0x1f78 <__ultoa_invert>
    181c:	c8 2e       	mov	r12, r24
    181e:	c8 18       	sub	r12, r8
    1820:	3d c0       	rjmp	.+122    	; 0x189c <vfprintf+0x5dc>
    1822:	02 2f       	mov	r16, r18
    1824:	85 37       	cpi	r24, 0x75	; 117
    1826:	21 f4       	brne	.+8      	; 0x1830 <vfprintf+0x570>
    1828:	0f 7e       	andi	r16, 0xEF	; 239
    182a:	2a e0       	ldi	r18, 0x0A	; 10
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	1d c0       	rjmp	.+58     	; 0x186a <vfprintf+0x5aa>
    1830:	09 7f       	andi	r16, 0xF9	; 249
    1832:	8f 36       	cpi	r24, 0x6F	; 111
    1834:	91 f0       	breq	.+36     	; 0x185a <vfprintf+0x59a>
    1836:	18 f4       	brcc	.+6      	; 0x183e <vfprintf+0x57e>
    1838:	88 35       	cpi	r24, 0x58	; 88
    183a:	59 f0       	breq	.+22     	; 0x1852 <vfprintf+0x592>
    183c:	a9 c0       	rjmp	.+338    	; 0x1990 <vfprintf+0x6d0>
    183e:	80 37       	cpi	r24, 0x70	; 112
    1840:	19 f0       	breq	.+6      	; 0x1848 <vfprintf+0x588>
    1842:	88 37       	cpi	r24, 0x78	; 120
    1844:	11 f0       	breq	.+4      	; 0x184a <vfprintf+0x58a>
    1846:	a4 c0       	rjmp	.+328    	; 0x1990 <vfprintf+0x6d0>
    1848:	00 61       	ori	r16, 0x10	; 16
    184a:	04 ff       	sbrs	r16, 4
    184c:	09 c0       	rjmp	.+18     	; 0x1860 <vfprintf+0x5a0>
    184e:	04 60       	ori	r16, 0x04	; 4
    1850:	07 c0       	rjmp	.+14     	; 0x1860 <vfprintf+0x5a0>
    1852:	24 ff       	sbrs	r18, 4
    1854:	08 c0       	rjmp	.+16     	; 0x1866 <vfprintf+0x5a6>
    1856:	06 60       	ori	r16, 0x06	; 6
    1858:	06 c0       	rjmp	.+12     	; 0x1866 <vfprintf+0x5a6>
    185a:	28 e0       	ldi	r18, 0x08	; 8
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	05 c0       	rjmp	.+10     	; 0x186a <vfprintf+0x5aa>
    1860:	20 e1       	ldi	r18, 0x10	; 16
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	02 c0       	rjmp	.+4      	; 0x186a <vfprintf+0x5aa>
    1866:	20 e1       	ldi	r18, 0x10	; 16
    1868:	32 e0       	ldi	r19, 0x02	; 2
    186a:	56 01       	movw	r10, r12
    186c:	07 ff       	sbrs	r16, 7
    186e:	09 c0       	rjmp	.+18     	; 0x1882 <vfprintf+0x5c2>
    1870:	f4 e0       	ldi	r31, 0x04	; 4
    1872:	af 0e       	add	r10, r31
    1874:	b1 1c       	adc	r11, r1
    1876:	f6 01       	movw	r30, r12
    1878:	60 81       	ld	r22, Z
    187a:	71 81       	ldd	r23, Z+1	; 0x01
    187c:	82 81       	ldd	r24, Z+2	; 0x02
    187e:	93 81       	ldd	r25, Z+3	; 0x03
    1880:	08 c0       	rjmp	.+16     	; 0x1892 <vfprintf+0x5d2>
    1882:	f2 e0       	ldi	r31, 0x02	; 2
    1884:	af 0e       	add	r10, r31
    1886:	b1 1c       	adc	r11, r1
    1888:	f6 01       	movw	r30, r12
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a4 01       	movw	r20, r8
    1894:	71 d3       	rcall	.+1762   	; 0x1f78 <__ultoa_invert>
    1896:	c8 2e       	mov	r12, r24
    1898:	c8 18       	sub	r12, r8
    189a:	0f 77       	andi	r16, 0x7F	; 127
    189c:	06 ff       	sbrs	r16, 6
    189e:	0b c0       	rjmp	.+22     	; 0x18b6 <vfprintf+0x5f6>
    18a0:	20 2f       	mov	r18, r16
    18a2:	2e 7f       	andi	r18, 0xFE	; 254
    18a4:	c1 16       	cp	r12, r17
    18a6:	50 f4       	brcc	.+20     	; 0x18bc <vfprintf+0x5fc>
    18a8:	04 ff       	sbrs	r16, 4
    18aa:	0a c0       	rjmp	.+20     	; 0x18c0 <vfprintf+0x600>
    18ac:	02 fd       	sbrc	r16, 2
    18ae:	08 c0       	rjmp	.+16     	; 0x18c0 <vfprintf+0x600>
    18b0:	20 2f       	mov	r18, r16
    18b2:	2e 7e       	andi	r18, 0xEE	; 238
    18b4:	05 c0       	rjmp	.+10     	; 0x18c0 <vfprintf+0x600>
    18b6:	dc 2c       	mov	r13, r12
    18b8:	20 2f       	mov	r18, r16
    18ba:	03 c0       	rjmp	.+6      	; 0x18c2 <vfprintf+0x602>
    18bc:	dc 2c       	mov	r13, r12
    18be:	01 c0       	rjmp	.+2      	; 0x18c2 <vfprintf+0x602>
    18c0:	d1 2e       	mov	r13, r17
    18c2:	24 ff       	sbrs	r18, 4
    18c4:	0d c0       	rjmp	.+26     	; 0x18e0 <vfprintf+0x620>
    18c6:	fe 01       	movw	r30, r28
    18c8:	ec 0d       	add	r30, r12
    18ca:	f1 1d       	adc	r31, r1
    18cc:	80 81       	ld	r24, Z
    18ce:	80 33       	cpi	r24, 0x30	; 48
    18d0:	11 f4       	brne	.+4      	; 0x18d6 <vfprintf+0x616>
    18d2:	29 7e       	andi	r18, 0xE9	; 233
    18d4:	09 c0       	rjmp	.+18     	; 0x18e8 <vfprintf+0x628>
    18d6:	22 ff       	sbrs	r18, 2
    18d8:	06 c0       	rjmp	.+12     	; 0x18e6 <vfprintf+0x626>
    18da:	d3 94       	inc	r13
    18dc:	d3 94       	inc	r13
    18de:	04 c0       	rjmp	.+8      	; 0x18e8 <vfprintf+0x628>
    18e0:	82 2f       	mov	r24, r18
    18e2:	86 78       	andi	r24, 0x86	; 134
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <vfprintf+0x628>
    18e6:	d3 94       	inc	r13
    18e8:	23 fd       	sbrc	r18, 3
    18ea:	12 c0       	rjmp	.+36     	; 0x1910 <vfprintf+0x650>
    18ec:	20 ff       	sbrs	r18, 0
    18ee:	06 c0       	rjmp	.+12     	; 0x18fc <vfprintf+0x63c>
    18f0:	1c 2d       	mov	r17, r12
    18f2:	d5 14       	cp	r13, r5
    18f4:	18 f4       	brcc	.+6      	; 0x18fc <vfprintf+0x63c>
    18f6:	15 0d       	add	r17, r5
    18f8:	1d 19       	sub	r17, r13
    18fa:	d5 2c       	mov	r13, r5
    18fc:	d5 14       	cp	r13, r5
    18fe:	60 f4       	brcc	.+24     	; 0x1918 <vfprintf+0x658>
    1900:	b7 01       	movw	r22, r14
    1902:	80 e2       	ldi	r24, 0x20	; 32
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	2b 8b       	std	Y+19, r18	; 0x13
    1908:	c7 d2       	rcall	.+1422   	; 0x1e98 <fputc>
    190a:	d3 94       	inc	r13
    190c:	2b 89       	ldd	r18, Y+19	; 0x13
    190e:	f6 cf       	rjmp	.-20     	; 0x18fc <vfprintf+0x63c>
    1910:	d5 14       	cp	r13, r5
    1912:	10 f4       	brcc	.+4      	; 0x1918 <vfprintf+0x658>
    1914:	5d 18       	sub	r5, r13
    1916:	01 c0       	rjmp	.+2      	; 0x191a <vfprintf+0x65a>
    1918:	51 2c       	mov	r5, r1
    191a:	24 ff       	sbrs	r18, 4
    191c:	11 c0       	rjmp	.+34     	; 0x1940 <vfprintf+0x680>
    191e:	b7 01       	movw	r22, r14
    1920:	80 e3       	ldi	r24, 0x30	; 48
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	2b 8b       	std	Y+19, r18	; 0x13
    1926:	b8 d2       	rcall	.+1392   	; 0x1e98 <fputc>
    1928:	2b 89       	ldd	r18, Y+19	; 0x13
    192a:	22 ff       	sbrs	r18, 2
    192c:	16 c0       	rjmp	.+44     	; 0x195a <vfprintf+0x69a>
    192e:	21 ff       	sbrs	r18, 1
    1930:	03 c0       	rjmp	.+6      	; 0x1938 <vfprintf+0x678>
    1932:	88 e5       	ldi	r24, 0x58	; 88
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 c0       	rjmp	.+4      	; 0x193c <vfprintf+0x67c>
    1938:	88 e7       	ldi	r24, 0x78	; 120
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	b7 01       	movw	r22, r14
    193e:	0c c0       	rjmp	.+24     	; 0x1958 <vfprintf+0x698>
    1940:	82 2f       	mov	r24, r18
    1942:	86 78       	andi	r24, 0x86	; 134
    1944:	51 f0       	breq	.+20     	; 0x195a <vfprintf+0x69a>
    1946:	21 fd       	sbrc	r18, 1
    1948:	02 c0       	rjmp	.+4      	; 0x194e <vfprintf+0x68e>
    194a:	80 e2       	ldi	r24, 0x20	; 32
    194c:	01 c0       	rjmp	.+2      	; 0x1950 <vfprintf+0x690>
    194e:	8b e2       	ldi	r24, 0x2B	; 43
    1950:	27 fd       	sbrc	r18, 7
    1952:	8d e2       	ldi	r24, 0x2D	; 45
    1954:	b7 01       	movw	r22, r14
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9f d2       	rcall	.+1342   	; 0x1e98 <fputc>
    195a:	c1 16       	cp	r12, r17
    195c:	30 f4       	brcc	.+12     	; 0x196a <vfprintf+0x6aa>
    195e:	b7 01       	movw	r22, r14
    1960:	80 e3       	ldi	r24, 0x30	; 48
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	99 d2       	rcall	.+1330   	; 0x1e98 <fputc>
    1966:	11 50       	subi	r17, 0x01	; 1
    1968:	f8 cf       	rjmp	.-16     	; 0x195a <vfprintf+0x69a>
    196a:	ca 94       	dec	r12
    196c:	f4 01       	movw	r30, r8
    196e:	ec 0d       	add	r30, r12
    1970:	f1 1d       	adc	r31, r1
    1972:	80 81       	ld	r24, Z
    1974:	b7 01       	movw	r22, r14
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	8f d2       	rcall	.+1310   	; 0x1e98 <fputc>
    197a:	c1 10       	cpse	r12, r1
    197c:	f6 cf       	rjmp	.-20     	; 0x196a <vfprintf+0x6aa>
    197e:	55 20       	and	r5, r5
    1980:	09 f4       	brne	.+2      	; 0x1984 <vfprintf+0x6c4>
    1982:	dd cc       	rjmp	.-1606   	; 0x133e <vfprintf+0x7e>
    1984:	b7 01       	movw	r22, r14
    1986:	80 e2       	ldi	r24, 0x20	; 32
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	86 d2       	rcall	.+1292   	; 0x1e98 <fputc>
    198c:	5a 94       	dec	r5
    198e:	f7 cf       	rjmp	.-18     	; 0x197e <vfprintf+0x6be>
    1990:	f7 01       	movw	r30, r14
    1992:	86 81       	ldd	r24, Z+6	; 0x06
    1994:	97 81       	ldd	r25, Z+7	; 0x07
    1996:	02 c0       	rjmp	.+4      	; 0x199c <vfprintf+0x6dc>
    1998:	8f ef       	ldi	r24, 0xFF	; 255
    199a:	9f ef       	ldi	r25, 0xFF	; 255
    199c:	63 96       	adiw	r28, 0x13	; 19
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	cf 90       	pop	r12
    19b8:	bf 90       	pop	r11
    19ba:	af 90       	pop	r10
    19bc:	9f 90       	pop	r9
    19be:	8f 90       	pop	r8
    19c0:	7f 90       	pop	r7
    19c2:	6f 90       	pop	r6
    19c4:	5f 90       	pop	r5
    19c6:	4f 90       	pop	r4
    19c8:	3f 90       	pop	r3
    19ca:	2f 90       	pop	r2
    19cc:	08 95       	ret

000019ce <__tablejump2__>:
    19ce:	ee 0f       	add	r30, r30
    19d0:	ff 1f       	adc	r31, r31

000019d2 <__tablejump__>:
    19d2:	05 90       	lpm	r0, Z+
    19d4:	f4 91       	lpm	r31, Z
    19d6:	e0 2d       	mov	r30, r0
    19d8:	19 94       	eijmp

000019da <malloc>:
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	82 30       	cpi	r24, 0x02	; 2
    19e0:	91 05       	cpc	r25, r1
    19e2:	10 f4       	brcc	.+4      	; 0x19e8 <malloc+0xe>
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	e0 91 a6 02 	lds	r30, 0x02A6
    19ec:	f0 91 a7 02 	lds	r31, 0x02A7
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	a0 e0       	ldi	r26, 0x00	; 0
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	30 97       	sbiw	r30, 0x00	; 0
    19fa:	39 f1       	breq	.+78     	; 0x1a4a <malloc+0x70>
    19fc:	40 81       	ld	r20, Z
    19fe:	51 81       	ldd	r21, Z+1	; 0x01
    1a00:	48 17       	cp	r20, r24
    1a02:	59 07       	cpc	r21, r25
    1a04:	b8 f0       	brcs	.+46     	; 0x1a34 <malloc+0x5a>
    1a06:	48 17       	cp	r20, r24
    1a08:	59 07       	cpc	r21, r25
    1a0a:	71 f4       	brne	.+28     	; 0x1a28 <malloc+0x4e>
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	10 97       	sbiw	r26, 0x00	; 0
    1a12:	29 f0       	breq	.+10     	; 0x1a1e <malloc+0x44>
    1a14:	13 96       	adiw	r26, 0x03	; 3
    1a16:	9c 93       	st	X, r25
    1a18:	8e 93       	st	-X, r24
    1a1a:	12 97       	sbiw	r26, 0x02	; 2
    1a1c:	2c c0       	rjmp	.+88     	; 0x1a76 <malloc+0x9c>
    1a1e:	90 93 a7 02 	sts	0x02A7, r25
    1a22:	80 93 a6 02 	sts	0x02A6, r24
    1a26:	27 c0       	rjmp	.+78     	; 0x1a76 <malloc+0x9c>
    1a28:	21 15       	cp	r18, r1
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	31 f0       	breq	.+12     	; 0x1a3a <malloc+0x60>
    1a2e:	42 17       	cp	r20, r18
    1a30:	53 07       	cpc	r21, r19
    1a32:	18 f0       	brcs	.+6      	; 0x1a3a <malloc+0x60>
    1a34:	a9 01       	movw	r20, r18
    1a36:	db 01       	movw	r26, r22
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <malloc+0x62>
    1a3a:	ef 01       	movw	r28, r30
    1a3c:	9a 01       	movw	r18, r20
    1a3e:	bd 01       	movw	r22, r26
    1a40:	df 01       	movw	r26, r30
    1a42:	02 80       	ldd	r0, Z+2	; 0x02
    1a44:	f3 81       	ldd	r31, Z+3	; 0x03
    1a46:	e0 2d       	mov	r30, r0
    1a48:	d7 cf       	rjmp	.-82     	; 0x19f8 <malloc+0x1e>
    1a4a:	21 15       	cp	r18, r1
    1a4c:	31 05       	cpc	r19, r1
    1a4e:	f9 f0       	breq	.+62     	; 0x1a8e <malloc+0xb4>
    1a50:	28 1b       	sub	r18, r24
    1a52:	39 0b       	sbc	r19, r25
    1a54:	24 30       	cpi	r18, 0x04	; 4
    1a56:	31 05       	cpc	r19, r1
    1a58:	80 f4       	brcc	.+32     	; 0x1a7a <malloc+0xa0>
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5e:	61 15       	cp	r22, r1
    1a60:	71 05       	cpc	r23, r1
    1a62:	21 f0       	breq	.+8      	; 0x1a6c <malloc+0x92>
    1a64:	fb 01       	movw	r30, r22
    1a66:	93 83       	std	Z+3, r25	; 0x03
    1a68:	82 83       	std	Z+2, r24	; 0x02
    1a6a:	04 c0       	rjmp	.+8      	; 0x1a74 <malloc+0x9a>
    1a6c:	90 93 a7 02 	sts	0x02A7, r25
    1a70:	80 93 a6 02 	sts	0x02A6, r24
    1a74:	fe 01       	movw	r30, r28
    1a76:	32 96       	adiw	r30, 0x02	; 2
    1a78:	44 c0       	rjmp	.+136    	; 0x1b02 <malloc+0x128>
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e2 0f       	add	r30, r18
    1a7e:	f3 1f       	adc	r31, r19
    1a80:	81 93       	st	Z+, r24
    1a82:	91 93       	st	Z+, r25
    1a84:	22 50       	subi	r18, 0x02	; 2
    1a86:	31 09       	sbc	r19, r1
    1a88:	39 83       	std	Y+1, r19	; 0x01
    1a8a:	28 83       	st	Y, r18
    1a8c:	3a c0       	rjmp	.+116    	; 0x1b02 <malloc+0x128>
    1a8e:	20 91 a4 02 	lds	r18, 0x02A4
    1a92:	30 91 a5 02 	lds	r19, 0x02A5
    1a96:	23 2b       	or	r18, r19
    1a98:	41 f4       	brne	.+16     	; 0x1aaa <malloc+0xd0>
    1a9a:	20 91 02 02 	lds	r18, 0x0202
    1a9e:	30 91 03 02 	lds	r19, 0x0203
    1aa2:	30 93 a5 02 	sts	0x02A5, r19
    1aa6:	20 93 a4 02 	sts	0x02A4, r18
    1aaa:	20 91 00 02 	lds	r18, 0x0200
    1aae:	30 91 01 02 	lds	r19, 0x0201
    1ab2:	21 15       	cp	r18, r1
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	41 f4       	brne	.+16     	; 0x1ac8 <malloc+0xee>
    1ab8:	2d b7       	in	r18, 0x3d	; 61
    1aba:	3e b7       	in	r19, 0x3e	; 62
    1abc:	40 91 04 02 	lds	r20, 0x0204
    1ac0:	50 91 05 02 	lds	r21, 0x0205
    1ac4:	24 1b       	sub	r18, r20
    1ac6:	35 0b       	sbc	r19, r21
    1ac8:	e0 91 a4 02 	lds	r30, 0x02A4
    1acc:	f0 91 a5 02 	lds	r31, 0x02A5
    1ad0:	e2 17       	cp	r30, r18
    1ad2:	f3 07       	cpc	r31, r19
    1ad4:	a0 f4       	brcc	.+40     	; 0x1afe <malloc+0x124>
    1ad6:	2e 1b       	sub	r18, r30
    1ad8:	3f 0b       	sbc	r19, r31
    1ada:	28 17       	cp	r18, r24
    1adc:	39 07       	cpc	r19, r25
    1ade:	78 f0       	brcs	.+30     	; 0x1afe <malloc+0x124>
    1ae0:	ac 01       	movw	r20, r24
    1ae2:	4e 5f       	subi	r20, 0xFE	; 254
    1ae4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae6:	24 17       	cp	r18, r20
    1ae8:	35 07       	cpc	r19, r21
    1aea:	48 f0       	brcs	.+18     	; 0x1afe <malloc+0x124>
    1aec:	4e 0f       	add	r20, r30
    1aee:	5f 1f       	adc	r21, r31
    1af0:	50 93 a5 02 	sts	0x02A5, r21
    1af4:	40 93 a4 02 	sts	0x02A4, r20
    1af8:	81 93       	st	Z+, r24
    1afa:	91 93       	st	Z+, r25
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <malloc+0x128>
    1afe:	e0 e0       	ldi	r30, 0x00	; 0
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	cf 01       	movw	r24, r30
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	08 95       	ret

00001b0a <free>:
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	09 f4       	brne	.+2      	; 0x1b14 <free+0xa>
    1b12:	87 c0       	rjmp	.+270    	; 0x1c22 <free+0x118>
    1b14:	fc 01       	movw	r30, r24
    1b16:	32 97       	sbiw	r30, 0x02	; 2
    1b18:	13 82       	std	Z+3, r1	; 0x03
    1b1a:	12 82       	std	Z+2, r1	; 0x02
    1b1c:	c0 91 a6 02 	lds	r28, 0x02A6
    1b20:	d0 91 a7 02 	lds	r29, 0x02A7
    1b24:	20 97       	sbiw	r28, 0x00	; 0
    1b26:	81 f4       	brne	.+32     	; 0x1b48 <free+0x3e>
    1b28:	20 81       	ld	r18, Z
    1b2a:	31 81       	ldd	r19, Z+1	; 0x01
    1b2c:	28 0f       	add	r18, r24
    1b2e:	39 1f       	adc	r19, r25
    1b30:	80 91 a4 02 	lds	r24, 0x02A4
    1b34:	90 91 a5 02 	lds	r25, 0x02A5
    1b38:	82 17       	cp	r24, r18
    1b3a:	93 07       	cpc	r25, r19
    1b3c:	79 f5       	brne	.+94     	; 0x1b9c <free+0x92>
    1b3e:	f0 93 a5 02 	sts	0x02A5, r31
    1b42:	e0 93 a4 02 	sts	0x02A4, r30
    1b46:	6d c0       	rjmp	.+218    	; 0x1c22 <free+0x118>
    1b48:	de 01       	movw	r26, r28
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	ae 17       	cp	r26, r30
    1b50:	bf 07       	cpc	r27, r31
    1b52:	50 f4       	brcc	.+20     	; 0x1b68 <free+0x5e>
    1b54:	12 96       	adiw	r26, 0x02	; 2
    1b56:	4d 91       	ld	r20, X+
    1b58:	5c 91       	ld	r21, X
    1b5a:	13 97       	sbiw	r26, 0x03	; 3
    1b5c:	9d 01       	movw	r18, r26
    1b5e:	41 15       	cp	r20, r1
    1b60:	51 05       	cpc	r21, r1
    1b62:	09 f1       	breq	.+66     	; 0x1ba6 <free+0x9c>
    1b64:	da 01       	movw	r26, r20
    1b66:	f3 cf       	rjmp	.-26     	; 0x1b4e <free+0x44>
    1b68:	b3 83       	std	Z+3, r27	; 0x03
    1b6a:	a2 83       	std	Z+2, r26	; 0x02
    1b6c:	40 81       	ld	r20, Z
    1b6e:	51 81       	ldd	r21, Z+1	; 0x01
    1b70:	84 0f       	add	r24, r20
    1b72:	95 1f       	adc	r25, r21
    1b74:	8a 17       	cp	r24, r26
    1b76:	9b 07       	cpc	r25, r27
    1b78:	71 f4       	brne	.+28     	; 0x1b96 <free+0x8c>
    1b7a:	8d 91       	ld	r24, X+
    1b7c:	9c 91       	ld	r25, X
    1b7e:	11 97       	sbiw	r26, 0x01	; 1
    1b80:	84 0f       	add	r24, r20
    1b82:	95 1f       	adc	r25, r21
    1b84:	02 96       	adiw	r24, 0x02	; 2
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	80 83       	st	Z, r24
    1b8a:	12 96       	adiw	r26, 0x02	; 2
    1b8c:	8d 91       	ld	r24, X+
    1b8e:	9c 91       	ld	r25, X
    1b90:	13 97       	sbiw	r26, 0x03	; 3
    1b92:	93 83       	std	Z+3, r25	; 0x03
    1b94:	82 83       	std	Z+2, r24	; 0x02
    1b96:	21 15       	cp	r18, r1
    1b98:	31 05       	cpc	r19, r1
    1b9a:	29 f4       	brne	.+10     	; 0x1ba6 <free+0x9c>
    1b9c:	f0 93 a7 02 	sts	0x02A7, r31
    1ba0:	e0 93 a6 02 	sts	0x02A6, r30
    1ba4:	3e c0       	rjmp	.+124    	; 0x1c22 <free+0x118>
    1ba6:	d9 01       	movw	r26, r18
    1ba8:	13 96       	adiw	r26, 0x03	; 3
    1baa:	fc 93       	st	X, r31
    1bac:	ee 93       	st	-X, r30
    1bae:	12 97       	sbiw	r26, 0x02	; 2
    1bb0:	4d 91       	ld	r20, X+
    1bb2:	5d 91       	ld	r21, X+
    1bb4:	a4 0f       	add	r26, r20
    1bb6:	b5 1f       	adc	r27, r21
    1bb8:	ea 17       	cp	r30, r26
    1bba:	fb 07       	cpc	r31, r27
    1bbc:	79 f4       	brne	.+30     	; 0x1bdc <free+0xd2>
    1bbe:	80 81       	ld	r24, Z
    1bc0:	91 81       	ldd	r25, Z+1	; 0x01
    1bc2:	84 0f       	add	r24, r20
    1bc4:	95 1f       	adc	r25, r21
    1bc6:	02 96       	adiw	r24, 0x02	; 2
    1bc8:	d9 01       	movw	r26, r18
    1bca:	11 96       	adiw	r26, 0x01	; 1
    1bcc:	9c 93       	st	X, r25
    1bce:	8e 93       	st	-X, r24
    1bd0:	82 81       	ldd	r24, Z+2	; 0x02
    1bd2:	93 81       	ldd	r25, Z+3	; 0x03
    1bd4:	13 96       	adiw	r26, 0x03	; 3
    1bd6:	9c 93       	st	X, r25
    1bd8:	8e 93       	st	-X, r24
    1bda:	12 97       	sbiw	r26, 0x02	; 2
    1bdc:	e0 e0       	ldi	r30, 0x00	; 0
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	9b 81       	ldd	r25, Y+3	; 0x03
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	19 f0       	breq	.+6      	; 0x1bee <free+0xe4>
    1be8:	fe 01       	movw	r30, r28
    1bea:	ec 01       	movw	r28, r24
    1bec:	f9 cf       	rjmp	.-14     	; 0x1be0 <free+0xd6>
    1bee:	ce 01       	movw	r24, r28
    1bf0:	02 96       	adiw	r24, 0x02	; 2
    1bf2:	28 81       	ld	r18, Y
    1bf4:	39 81       	ldd	r19, Y+1	; 0x01
    1bf6:	82 0f       	add	r24, r18
    1bf8:	93 1f       	adc	r25, r19
    1bfa:	20 91 a4 02 	lds	r18, 0x02A4
    1bfe:	30 91 a5 02 	lds	r19, 0x02A5
    1c02:	28 17       	cp	r18, r24
    1c04:	39 07       	cpc	r19, r25
    1c06:	69 f4       	brne	.+26     	; 0x1c22 <free+0x118>
    1c08:	30 97       	sbiw	r30, 0x00	; 0
    1c0a:	29 f4       	brne	.+10     	; 0x1c16 <free+0x10c>
    1c0c:	10 92 a7 02 	sts	0x02A7, r1
    1c10:	10 92 a6 02 	sts	0x02A6, r1
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <free+0x110>
    1c16:	13 82       	std	Z+3, r1	; 0x03
    1c18:	12 82       	std	Z+2, r1	; 0x02
    1c1a:	d0 93 a5 02 	sts	0x02A5, r29
    1c1e:	c0 93 a4 02 	sts	0x02A4, r28
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	08 95       	ret

00001c28 <__ftoa_engine>:
    1c28:	28 30       	cpi	r18, 0x08	; 8
    1c2a:	08 f0       	brcs	.+2      	; 0x1c2e <__ftoa_engine+0x6>
    1c2c:	27 e0       	ldi	r18, 0x07	; 7
    1c2e:	33 27       	eor	r19, r19
    1c30:	da 01       	movw	r26, r20
    1c32:	99 0f       	add	r25, r25
    1c34:	31 1d       	adc	r19, r1
    1c36:	87 fd       	sbrc	r24, 7
    1c38:	91 60       	ori	r25, 0x01	; 1
    1c3a:	00 96       	adiw	r24, 0x00	; 0
    1c3c:	61 05       	cpc	r22, r1
    1c3e:	71 05       	cpc	r23, r1
    1c40:	39 f4       	brne	.+14     	; 0x1c50 <__ftoa_engine+0x28>
    1c42:	32 60       	ori	r19, 0x02	; 2
    1c44:	2e 5f       	subi	r18, 0xFE	; 254
    1c46:	3d 93       	st	X+, r19
    1c48:	30 e3       	ldi	r19, 0x30	; 48
    1c4a:	2a 95       	dec	r18
    1c4c:	e1 f7       	brne	.-8      	; 0x1c46 <__ftoa_engine+0x1e>
    1c4e:	08 95       	ret
    1c50:	9f 3f       	cpi	r25, 0xFF	; 255
    1c52:	30 f0       	brcs	.+12     	; 0x1c60 <__ftoa_engine+0x38>
    1c54:	80 38       	cpi	r24, 0x80	; 128
    1c56:	71 05       	cpc	r23, r1
    1c58:	61 05       	cpc	r22, r1
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <__ftoa_engine+0x36>
    1c5c:	3c 5f       	subi	r19, 0xFC	; 252
    1c5e:	3c 5f       	subi	r19, 0xFC	; 252
    1c60:	3d 93       	st	X+, r19
    1c62:	91 30       	cpi	r25, 0x01	; 1
    1c64:	08 f0       	brcs	.+2      	; 0x1c68 <__ftoa_engine+0x40>
    1c66:	80 68       	ori	r24, 0x80	; 128
    1c68:	91 1d       	adc	r25, r1
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	1f 93       	push	r17
    1c70:	0f 93       	push	r16
    1c72:	ff 92       	push	r15
    1c74:	ef 92       	push	r14
    1c76:	19 2f       	mov	r17, r25
    1c78:	98 7f       	andi	r25, 0xF8	; 248
    1c7a:	96 95       	lsr	r25
    1c7c:	e9 2f       	mov	r30, r25
    1c7e:	96 95       	lsr	r25
    1c80:	96 95       	lsr	r25
    1c82:	e9 0f       	add	r30, r25
    1c84:	ff 27       	eor	r31, r31
    1c86:	e8 51       	subi	r30, 0x18	; 24
    1c88:	fe 4f       	sbci	r31, 0xFE	; 254
    1c8a:	99 27       	eor	r25, r25
    1c8c:	33 27       	eor	r19, r19
    1c8e:	ee 24       	eor	r14, r14
    1c90:	ff 24       	eor	r15, r15
    1c92:	a7 01       	movw	r20, r14
    1c94:	e7 01       	movw	r28, r14
    1c96:	05 90       	lpm	r0, Z+
    1c98:	08 94       	sec
    1c9a:	07 94       	ror	r0
    1c9c:	28 f4       	brcc	.+10     	; 0x1ca8 <__ftoa_engine+0x80>
    1c9e:	36 0f       	add	r19, r22
    1ca0:	e7 1e       	adc	r14, r23
    1ca2:	f8 1e       	adc	r15, r24
    1ca4:	49 1f       	adc	r20, r25
    1ca6:	51 1d       	adc	r21, r1
    1ca8:	66 0f       	add	r22, r22
    1caa:	77 1f       	adc	r23, r23
    1cac:	88 1f       	adc	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	06 94       	lsr	r0
    1cb2:	a1 f7       	brne	.-24     	; 0x1c9c <__ftoa_engine+0x74>
    1cb4:	05 90       	lpm	r0, Z+
    1cb6:	07 94       	ror	r0
    1cb8:	28 f4       	brcc	.+10     	; 0x1cc4 <__ftoa_engine+0x9c>
    1cba:	e7 0e       	add	r14, r23
    1cbc:	f8 1e       	adc	r15, r24
    1cbe:	49 1f       	adc	r20, r25
    1cc0:	56 1f       	adc	r21, r22
    1cc2:	c1 1d       	adc	r28, r1
    1cc4:	77 0f       	add	r23, r23
    1cc6:	88 1f       	adc	r24, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	66 1f       	adc	r22, r22
    1ccc:	06 94       	lsr	r0
    1cce:	a1 f7       	brne	.-24     	; 0x1cb8 <__ftoa_engine+0x90>
    1cd0:	05 90       	lpm	r0, Z+
    1cd2:	07 94       	ror	r0
    1cd4:	28 f4       	brcc	.+10     	; 0x1ce0 <__ftoa_engine+0xb8>
    1cd6:	f8 0e       	add	r15, r24
    1cd8:	49 1f       	adc	r20, r25
    1cda:	56 1f       	adc	r21, r22
    1cdc:	c7 1f       	adc	r28, r23
    1cde:	d1 1d       	adc	r29, r1
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	66 1f       	adc	r22, r22
    1ce6:	77 1f       	adc	r23, r23
    1ce8:	06 94       	lsr	r0
    1cea:	a1 f7       	brne	.-24     	; 0x1cd4 <__ftoa_engine+0xac>
    1cec:	05 90       	lpm	r0, Z+
    1cee:	07 94       	ror	r0
    1cf0:	20 f4       	brcc	.+8      	; 0x1cfa <__ftoa_engine+0xd2>
    1cf2:	49 0f       	add	r20, r25
    1cf4:	56 1f       	adc	r21, r22
    1cf6:	c7 1f       	adc	r28, r23
    1cf8:	d8 1f       	adc	r29, r24
    1cfa:	99 0f       	add	r25, r25
    1cfc:	66 1f       	adc	r22, r22
    1cfe:	77 1f       	adc	r23, r23
    1d00:	88 1f       	adc	r24, r24
    1d02:	06 94       	lsr	r0
    1d04:	a9 f7       	brne	.-22     	; 0x1cf0 <__ftoa_engine+0xc8>
    1d06:	84 91       	lpm	r24, Z
    1d08:	10 95       	com	r17
    1d0a:	17 70       	andi	r17, 0x07	; 7
    1d0c:	41 f0       	breq	.+16     	; 0x1d1e <__ftoa_engine+0xf6>
    1d0e:	d6 95       	lsr	r29
    1d10:	c7 95       	ror	r28
    1d12:	57 95       	ror	r21
    1d14:	47 95       	ror	r20
    1d16:	f7 94       	ror	r15
    1d18:	e7 94       	ror	r14
    1d1a:	1a 95       	dec	r17
    1d1c:	c1 f7       	brne	.-16     	; 0x1d0e <__ftoa_engine+0xe6>
    1d1e:	ee e8       	ldi	r30, 0x8E	; 142
    1d20:	f1 e0       	ldi	r31, 0x01	; 1
    1d22:	68 94       	set
    1d24:	15 90       	lpm	r1, Z+
    1d26:	15 91       	lpm	r17, Z+
    1d28:	35 91       	lpm	r19, Z+
    1d2a:	65 91       	lpm	r22, Z+
    1d2c:	95 91       	lpm	r25, Z+
    1d2e:	05 90       	lpm	r0, Z+
    1d30:	7f e2       	ldi	r23, 0x2F	; 47
    1d32:	73 95       	inc	r23
    1d34:	e1 18       	sub	r14, r1
    1d36:	f1 0a       	sbc	r15, r17
    1d38:	43 0b       	sbc	r20, r19
    1d3a:	56 0b       	sbc	r21, r22
    1d3c:	c9 0b       	sbc	r28, r25
    1d3e:	d0 09       	sbc	r29, r0
    1d40:	c0 f7       	brcc	.-16     	; 0x1d32 <__ftoa_engine+0x10a>
    1d42:	e1 0c       	add	r14, r1
    1d44:	f1 1e       	adc	r15, r17
    1d46:	43 1f       	adc	r20, r19
    1d48:	56 1f       	adc	r21, r22
    1d4a:	c9 1f       	adc	r28, r25
    1d4c:	d0 1d       	adc	r29, r0
    1d4e:	7e f4       	brtc	.+30     	; 0x1d6e <__ftoa_engine+0x146>
    1d50:	70 33       	cpi	r23, 0x30	; 48
    1d52:	11 f4       	brne	.+4      	; 0x1d58 <__ftoa_engine+0x130>
    1d54:	8a 95       	dec	r24
    1d56:	e6 cf       	rjmp	.-52     	; 0x1d24 <__ftoa_engine+0xfc>
    1d58:	e8 94       	clt
    1d5a:	01 50       	subi	r16, 0x01	; 1
    1d5c:	30 f0       	brcs	.+12     	; 0x1d6a <__ftoa_engine+0x142>
    1d5e:	08 0f       	add	r16, r24
    1d60:	0a f4       	brpl	.+2      	; 0x1d64 <__ftoa_engine+0x13c>
    1d62:	00 27       	eor	r16, r16
    1d64:	02 17       	cp	r16, r18
    1d66:	08 f4       	brcc	.+2      	; 0x1d6a <__ftoa_engine+0x142>
    1d68:	20 2f       	mov	r18, r16
    1d6a:	23 95       	inc	r18
    1d6c:	02 2f       	mov	r16, r18
    1d6e:	7a 33       	cpi	r23, 0x3A	; 58
    1d70:	28 f0       	brcs	.+10     	; 0x1d7c <__ftoa_engine+0x154>
    1d72:	79 e3       	ldi	r23, 0x39	; 57
    1d74:	7d 93       	st	X+, r23
    1d76:	2a 95       	dec	r18
    1d78:	e9 f7       	brne	.-6      	; 0x1d74 <__ftoa_engine+0x14c>
    1d7a:	10 c0       	rjmp	.+32     	; 0x1d9c <__ftoa_engine+0x174>
    1d7c:	7d 93       	st	X+, r23
    1d7e:	2a 95       	dec	r18
    1d80:	89 f6       	brne	.-94     	; 0x1d24 <__ftoa_engine+0xfc>
    1d82:	06 94       	lsr	r0
    1d84:	97 95       	ror	r25
    1d86:	67 95       	ror	r22
    1d88:	37 95       	ror	r19
    1d8a:	17 95       	ror	r17
    1d8c:	17 94       	ror	r1
    1d8e:	e1 18       	sub	r14, r1
    1d90:	f1 0a       	sbc	r15, r17
    1d92:	43 0b       	sbc	r20, r19
    1d94:	56 0b       	sbc	r21, r22
    1d96:	c9 0b       	sbc	r28, r25
    1d98:	d0 09       	sbc	r29, r0
    1d9a:	98 f0       	brcs	.+38     	; 0x1dc2 <__ftoa_engine+0x19a>
    1d9c:	23 95       	inc	r18
    1d9e:	7e 91       	ld	r23, -X
    1da0:	73 95       	inc	r23
    1da2:	7a 33       	cpi	r23, 0x3A	; 58
    1da4:	08 f0       	brcs	.+2      	; 0x1da8 <__ftoa_engine+0x180>
    1da6:	70 e3       	ldi	r23, 0x30	; 48
    1da8:	7c 93       	st	X, r23
    1daa:	20 13       	cpse	r18, r16
    1dac:	b8 f7       	brcc	.-18     	; 0x1d9c <__ftoa_engine+0x174>
    1dae:	7e 91       	ld	r23, -X
    1db0:	70 61       	ori	r23, 0x10	; 16
    1db2:	7d 93       	st	X+, r23
    1db4:	30 f0       	brcs	.+12     	; 0x1dc2 <__ftoa_engine+0x19a>
    1db6:	83 95       	inc	r24
    1db8:	71 e3       	ldi	r23, 0x31	; 49
    1dba:	7d 93       	st	X+, r23
    1dbc:	70 e3       	ldi	r23, 0x30	; 48
    1dbe:	2a 95       	dec	r18
    1dc0:	e1 f7       	brne	.-8      	; 0x1dba <__ftoa_engine+0x192>
    1dc2:	11 24       	eor	r1, r1
    1dc4:	ef 90       	pop	r14
    1dc6:	ff 90       	pop	r15
    1dc8:	0f 91       	pop	r16
    1dca:	1f 91       	pop	r17
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	99 27       	eor	r25, r25
    1dd2:	87 fd       	sbrc	r24, 7
    1dd4:	90 95       	com	r25
    1dd6:	08 95       	ret

00001dd8 <strnlen_P>:
    1dd8:	fc 01       	movw	r30, r24
    1dda:	05 90       	lpm	r0, Z+
    1ddc:	61 50       	subi	r22, 0x01	; 1
    1dde:	70 40       	sbci	r23, 0x00	; 0
    1de0:	01 10       	cpse	r0, r1
    1de2:	d8 f7       	brcc	.-10     	; 0x1dda <strnlen_P+0x2>
    1de4:	80 95       	com	r24
    1de6:	90 95       	com	r25
    1de8:	8e 0f       	add	r24, r30
    1dea:	9f 1f       	adc	r25, r31
    1dec:	08 95       	ret

00001dee <strnlen>:
    1dee:	fc 01       	movw	r30, r24
    1df0:	61 50       	subi	r22, 0x01	; 1
    1df2:	70 40       	sbci	r23, 0x00	; 0
    1df4:	01 90       	ld	r0, Z+
    1df6:	01 10       	cpse	r0, r1
    1df8:	d8 f7       	brcc	.-10     	; 0x1df0 <strnlen+0x2>
    1dfa:	80 95       	com	r24
    1dfc:	90 95       	com	r25
    1dfe:	8e 0f       	add	r24, r30
    1e00:	9f 1f       	adc	r25, r31
    1e02:	08 95       	ret

00001e04 <fdevopen>:
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	ec 01       	movw	r28, r24
    1e0e:	8b 01       	movw	r16, r22
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	31 f4       	brne	.+12     	; 0x1e20 <fdevopen+0x1c>
    1e14:	61 15       	cp	r22, r1
    1e16:	71 05       	cpc	r23, r1
    1e18:	19 f4       	brne	.+6      	; 0x1e20 <fdevopen+0x1c>
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	37 c0       	rjmp	.+110    	; 0x1e8e <fdevopen+0x8a>
    1e20:	6e e0       	ldi	r22, 0x0E	; 14
    1e22:	70 e0       	ldi	r23, 0x00	; 0
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	05 d1       	rcall	.+522    	; 0x2034 <calloc>
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	a9 f3       	breq	.-22     	; 0x1e1a <fdevopen+0x16>
    1e30:	80 e8       	ldi	r24, 0x80	; 128
    1e32:	83 83       	std	Z+3, r24	; 0x03
    1e34:	01 15       	cp	r16, r1
    1e36:	11 05       	cpc	r17, r1
    1e38:	71 f0       	breq	.+28     	; 0x1e56 <fdevopen+0x52>
    1e3a:	13 87       	std	Z+11, r17	; 0x0b
    1e3c:	02 87       	std	Z+10, r16	; 0x0a
    1e3e:	81 e8       	ldi	r24, 0x81	; 129
    1e40:	83 83       	std	Z+3, r24	; 0x03
    1e42:	80 91 a8 02 	lds	r24, 0x02A8
    1e46:	90 91 a9 02 	lds	r25, 0x02A9
    1e4a:	89 2b       	or	r24, r25
    1e4c:	21 f4       	brne	.+8      	; 0x1e56 <fdevopen+0x52>
    1e4e:	f0 93 a9 02 	sts	0x02A9, r31
    1e52:	e0 93 a8 02 	sts	0x02A8, r30
    1e56:	20 97       	sbiw	r28, 0x00	; 0
    1e58:	c9 f0       	breq	.+50     	; 0x1e8c <fdevopen+0x88>
    1e5a:	d1 87       	std	Z+9, r29	; 0x09
    1e5c:	c0 87       	std	Z+8, r28	; 0x08
    1e5e:	83 81       	ldd	r24, Z+3	; 0x03
    1e60:	82 60       	ori	r24, 0x02	; 2
    1e62:	83 83       	std	Z+3, r24	; 0x03
    1e64:	80 91 aa 02 	lds	r24, 0x02AA
    1e68:	90 91 ab 02 	lds	r25, 0x02AB
    1e6c:	89 2b       	or	r24, r25
    1e6e:	71 f4       	brne	.+28     	; 0x1e8c <fdevopen+0x88>
    1e70:	f0 93 ab 02 	sts	0x02AB, r31
    1e74:	e0 93 aa 02 	sts	0x02AA, r30
    1e78:	80 91 ac 02 	lds	r24, 0x02AC
    1e7c:	90 91 ad 02 	lds	r25, 0x02AD
    1e80:	89 2b       	or	r24, r25
    1e82:	21 f4       	brne	.+8      	; 0x1e8c <fdevopen+0x88>
    1e84:	f0 93 ad 02 	sts	0x02AD, r31
    1e88:	e0 93 ac 02 	sts	0x02AC, r30
    1e8c:	cf 01       	movw	r24, r30
    1e8e:	df 91       	pop	r29
    1e90:	cf 91       	pop	r28
    1e92:	1f 91       	pop	r17
    1e94:	0f 91       	pop	r16
    1e96:	08 95       	ret

00001e98 <fputc>:
    1e98:	0f 93       	push	r16
    1e9a:	1f 93       	push	r17
    1e9c:	cf 93       	push	r28
    1e9e:	df 93       	push	r29
    1ea0:	18 2f       	mov	r17, r24
    1ea2:	09 2f       	mov	r16, r25
    1ea4:	eb 01       	movw	r28, r22
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	81 fd       	sbrc	r24, 1
    1eaa:	03 c0       	rjmp	.+6      	; 0x1eb2 <fputc+0x1a>
    1eac:	8f ef       	ldi	r24, 0xFF	; 255
    1eae:	9f ef       	ldi	r25, 0xFF	; 255
    1eb0:	20 c0       	rjmp	.+64     	; 0x1ef2 <fputc+0x5a>
    1eb2:	82 ff       	sbrs	r24, 2
    1eb4:	10 c0       	rjmp	.+32     	; 0x1ed6 <fputc+0x3e>
    1eb6:	4e 81       	ldd	r20, Y+6	; 0x06
    1eb8:	5f 81       	ldd	r21, Y+7	; 0x07
    1eba:	2c 81       	ldd	r18, Y+4	; 0x04
    1ebc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ebe:	42 17       	cp	r20, r18
    1ec0:	53 07       	cpc	r21, r19
    1ec2:	7c f4       	brge	.+30     	; 0x1ee2 <fputc+0x4a>
    1ec4:	e8 81       	ld	r30, Y
    1ec6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ec8:	9f 01       	movw	r18, r30
    1eca:	2f 5f       	subi	r18, 0xFF	; 255
    1ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ece:	39 83       	std	Y+1, r19	; 0x01
    1ed0:	28 83       	st	Y, r18
    1ed2:	10 83       	st	Z, r17
    1ed4:	06 c0       	rjmp	.+12     	; 0x1ee2 <fputc+0x4a>
    1ed6:	e8 85       	ldd	r30, Y+8	; 0x08
    1ed8:	f9 85       	ldd	r31, Y+9	; 0x09
    1eda:	81 2f       	mov	r24, r17
    1edc:	19 95       	eicall
    1ede:	89 2b       	or	r24, r25
    1ee0:	29 f7       	brne	.-54     	; 0x1eac <fputc+0x14>
    1ee2:	2e 81       	ldd	r18, Y+6	; 0x06
    1ee4:	3f 81       	ldd	r19, Y+7	; 0x07
    1ee6:	2f 5f       	subi	r18, 0xFF	; 255
    1ee8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eea:	3f 83       	std	Y+7, r19	; 0x07
    1eec:	2e 83       	std	Y+6, r18	; 0x06
    1eee:	81 2f       	mov	r24, r17
    1ef0:	90 2f       	mov	r25, r16
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	08 95       	ret

00001efc <printf>:
    1efc:	cf 93       	push	r28
    1efe:	df 93       	push	r29
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	fe 01       	movw	r30, r28
    1f06:	36 96       	adiw	r30, 0x06	; 6
    1f08:	61 91       	ld	r22, Z+
    1f0a:	71 91       	ld	r23, Z+
    1f0c:	af 01       	movw	r20, r30
    1f0e:	80 91 aa 02 	lds	r24, 0x02AA
    1f12:	90 91 ab 02 	lds	r25, 0x02AB
    1f16:	d4 d9       	rcall	.-3160   	; 0x12c0 <vfprintf>
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	08 95       	ret

00001f1e <puts>:
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	cf 93       	push	r28
    1f24:	df 93       	push	r29
    1f26:	e0 91 aa 02 	lds	r30, 0x02AA
    1f2a:	f0 91 ab 02 	lds	r31, 0x02AB
    1f2e:	23 81       	ldd	r18, Z+3	; 0x03
    1f30:	21 ff       	sbrs	r18, 1
    1f32:	1b c0       	rjmp	.+54     	; 0x1f6a <puts+0x4c>
    1f34:	ec 01       	movw	r28, r24
    1f36:	00 e0       	ldi	r16, 0x00	; 0
    1f38:	10 e0       	ldi	r17, 0x00	; 0
    1f3a:	89 91       	ld	r24, Y+
    1f3c:	60 91 aa 02 	lds	r22, 0x02AA
    1f40:	70 91 ab 02 	lds	r23, 0x02AB
    1f44:	db 01       	movw	r26, r22
    1f46:	18 96       	adiw	r26, 0x08	; 8
    1f48:	ed 91       	ld	r30, X+
    1f4a:	fc 91       	ld	r31, X
    1f4c:	19 97       	sbiw	r26, 0x09	; 9
    1f4e:	88 23       	and	r24, r24
    1f50:	31 f0       	breq	.+12     	; 0x1f5e <puts+0x40>
    1f52:	19 95       	eicall
    1f54:	89 2b       	or	r24, r25
    1f56:	89 f3       	breq	.-30     	; 0x1f3a <puts+0x1c>
    1f58:	0f ef       	ldi	r16, 0xFF	; 255
    1f5a:	1f ef       	ldi	r17, 0xFF	; 255
    1f5c:	ee cf       	rjmp	.-36     	; 0x1f3a <puts+0x1c>
    1f5e:	8a e0       	ldi	r24, 0x0A	; 10
    1f60:	19 95       	eicall
    1f62:	89 2b       	or	r24, r25
    1f64:	11 f4       	brne	.+4      	; 0x1f6a <puts+0x4c>
    1f66:	c8 01       	movw	r24, r16
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <puts+0x50>
    1f6a:	8f ef       	ldi	r24, 0xFF	; 255
    1f6c:	9f ef       	ldi	r25, 0xFF	; 255
    1f6e:	df 91       	pop	r29
    1f70:	cf 91       	pop	r28
    1f72:	1f 91       	pop	r17
    1f74:	0f 91       	pop	r16
    1f76:	08 95       	ret

00001f78 <__ultoa_invert>:
    1f78:	fa 01       	movw	r30, r20
    1f7a:	aa 27       	eor	r26, r26
    1f7c:	28 30       	cpi	r18, 0x08	; 8
    1f7e:	51 f1       	breq	.+84     	; 0x1fd4 <__ultoa_invert+0x5c>
    1f80:	20 31       	cpi	r18, 0x10	; 16
    1f82:	81 f1       	breq	.+96     	; 0x1fe4 <__ultoa_invert+0x6c>
    1f84:	e8 94       	clt
    1f86:	6f 93       	push	r22
    1f88:	6e 7f       	andi	r22, 0xFE	; 254
    1f8a:	6e 5f       	subi	r22, 0xFE	; 254
    1f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f90:	9f 4f       	sbci	r25, 0xFF	; 255
    1f92:	af 4f       	sbci	r26, 0xFF	; 255
    1f94:	b1 e0       	ldi	r27, 0x01	; 1
    1f96:	3e d0       	rcall	.+124    	; 0x2014 <__ultoa_invert+0x9c>
    1f98:	b4 e0       	ldi	r27, 0x04	; 4
    1f9a:	3c d0       	rcall	.+120    	; 0x2014 <__ultoa_invert+0x9c>
    1f9c:	67 0f       	add	r22, r23
    1f9e:	78 1f       	adc	r23, r24
    1fa0:	89 1f       	adc	r24, r25
    1fa2:	9a 1f       	adc	r25, r26
    1fa4:	a1 1d       	adc	r26, r1
    1fa6:	68 0f       	add	r22, r24
    1fa8:	79 1f       	adc	r23, r25
    1faa:	8a 1f       	adc	r24, r26
    1fac:	91 1d       	adc	r25, r1
    1fae:	a1 1d       	adc	r26, r1
    1fb0:	6a 0f       	add	r22, r26
    1fb2:	71 1d       	adc	r23, r1
    1fb4:	81 1d       	adc	r24, r1
    1fb6:	91 1d       	adc	r25, r1
    1fb8:	a1 1d       	adc	r26, r1
    1fba:	20 d0       	rcall	.+64     	; 0x1ffc <__ultoa_invert+0x84>
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <__ultoa_invert+0x48>
    1fbe:	68 94       	set
    1fc0:	3f 91       	pop	r19
    1fc2:	2a e0       	ldi	r18, 0x0A	; 10
    1fc4:	26 9f       	mul	r18, r22
    1fc6:	11 24       	eor	r1, r1
    1fc8:	30 19       	sub	r19, r0
    1fca:	30 5d       	subi	r19, 0xD0	; 208
    1fcc:	31 93       	st	Z+, r19
    1fce:	de f6       	brtc	.-74     	; 0x1f86 <__ultoa_invert+0xe>
    1fd0:	cf 01       	movw	r24, r30
    1fd2:	08 95       	ret
    1fd4:	46 2f       	mov	r20, r22
    1fd6:	47 70       	andi	r20, 0x07	; 7
    1fd8:	40 5d       	subi	r20, 0xD0	; 208
    1fda:	41 93       	st	Z+, r20
    1fdc:	b3 e0       	ldi	r27, 0x03	; 3
    1fde:	0f d0       	rcall	.+30     	; 0x1ffe <__ultoa_invert+0x86>
    1fe0:	c9 f7       	brne	.-14     	; 0x1fd4 <__ultoa_invert+0x5c>
    1fe2:	f6 cf       	rjmp	.-20     	; 0x1fd0 <__ultoa_invert+0x58>
    1fe4:	46 2f       	mov	r20, r22
    1fe6:	4f 70       	andi	r20, 0x0F	; 15
    1fe8:	40 5d       	subi	r20, 0xD0	; 208
    1fea:	4a 33       	cpi	r20, 0x3A	; 58
    1fec:	18 f0       	brcs	.+6      	; 0x1ff4 <__ultoa_invert+0x7c>
    1fee:	49 5d       	subi	r20, 0xD9	; 217
    1ff0:	31 fd       	sbrc	r19, 1
    1ff2:	40 52       	subi	r20, 0x20	; 32
    1ff4:	41 93       	st	Z+, r20
    1ff6:	02 d0       	rcall	.+4      	; 0x1ffc <__ultoa_invert+0x84>
    1ff8:	a9 f7       	brne	.-22     	; 0x1fe4 <__ultoa_invert+0x6c>
    1ffa:	ea cf       	rjmp	.-44     	; 0x1fd0 <__ultoa_invert+0x58>
    1ffc:	b4 e0       	ldi	r27, 0x04	; 4
    1ffe:	a6 95       	lsr	r26
    2000:	97 95       	ror	r25
    2002:	87 95       	ror	r24
    2004:	77 95       	ror	r23
    2006:	67 95       	ror	r22
    2008:	ba 95       	dec	r27
    200a:	c9 f7       	brne	.-14     	; 0x1ffe <__ultoa_invert+0x86>
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	61 05       	cpc	r22, r1
    2010:	71 05       	cpc	r23, r1
    2012:	08 95       	ret
    2014:	9b 01       	movw	r18, r22
    2016:	ac 01       	movw	r20, r24
    2018:	0a 2e       	mov	r0, r26
    201a:	06 94       	lsr	r0
    201c:	57 95       	ror	r21
    201e:	47 95       	ror	r20
    2020:	37 95       	ror	r19
    2022:	27 95       	ror	r18
    2024:	ba 95       	dec	r27
    2026:	c9 f7       	brne	.-14     	; 0x201a <__ultoa_invert+0xa2>
    2028:	62 0f       	add	r22, r18
    202a:	73 1f       	adc	r23, r19
    202c:	84 1f       	adc	r24, r20
    202e:	95 1f       	adc	r25, r21
    2030:	a0 1d       	adc	r26, r0
    2032:	08 95       	ret

00002034 <calloc>:
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	86 9f       	mul	r24, r22
    203e:	80 01       	movw	r16, r0
    2040:	87 9f       	mul	r24, r23
    2042:	10 0d       	add	r17, r0
    2044:	96 9f       	mul	r25, r22
    2046:	10 0d       	add	r17, r0
    2048:	11 24       	eor	r1, r1
    204a:	c8 01       	movw	r24, r16
    204c:	c6 dc       	rcall	.-1652   	; 0x19da <malloc>
    204e:	ec 01       	movw	r28, r24
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	21 f0       	breq	.+8      	; 0x205c <calloc+0x28>
    2054:	a8 01       	movw	r20, r16
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	06 d0       	rcall	.+12     	; 0x2068 <memset>
    205c:	ce 01       	movw	r24, r28
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	08 95       	ret

00002068 <memset>:
    2068:	dc 01       	movw	r26, r24
    206a:	01 c0       	rjmp	.+2      	; 0x206e <memset+0x6>
    206c:	6d 93       	st	X+, r22
    206e:	41 50       	subi	r20, 0x01	; 1
    2070:	50 40       	sbci	r21, 0x00	; 0
    2072:	e0 f7       	brcc	.-8      	; 0x206c <memset+0x4>
    2074:	08 95       	ret

00002076 <_exit>:
    2076:	f8 94       	cli

00002078 <__stop_program>:
    2078:	ff cf       	rjmp	.-2      	; 0x2078 <__stop_program>
