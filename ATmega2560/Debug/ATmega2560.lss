
ATmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800200  00001e3a  00001ece  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  008002ae  008002ae  00001f7c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000410  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002f38  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001481  00000000  00000000  00005320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e3f  00000000  00000000  000067a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000988  00000000  00000000  000085e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a96  00000000  00000000  00008f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000191c  00000000  00000000  000099fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000320  00000000  00000000  0000b31a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	43 c1       	rjmp	.+646    	; 0x288 <__ctors_end>
       2:	00 00       	nop
       4:	61 c1       	rjmp	.+706    	; 0x2c8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c1       	rjmp	.+702    	; 0x2c8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c1       	rjmp	.+698    	; 0x2c8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c1       	rjmp	.+694    	; 0x2c8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c1       	rjmp	.+690    	; 0x2c8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c1       	rjmp	.+686    	; 0x2c8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c1       	rjmp	.+682    	; 0x2c8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c1       	rjmp	.+678    	; 0x2c8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c1       	rjmp	.+674    	; 0x2c8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c1       	rjmp	.+670    	; 0x2c8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c1       	rjmp	.+666    	; 0x2c8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c1       	rjmp	.+662    	; 0x2c8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c1       	rjmp	.+658    	; 0x2c8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c1       	rjmp	.+654    	; 0x2c8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c1       	rjmp	.+650    	; 0x2c8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c1       	rjmp	.+646    	; 0x2c8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c1       	rjmp	.+642    	; 0x2c8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c1       	rjmp	.+638    	; 0x2c8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c1       	rjmp	.+634    	; 0x2c8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c1       	rjmp	.+630    	; 0x2c8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c1       	rjmp	.+626    	; 0x2c8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c1       	rjmp	.+622    	; 0x2c8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c1       	rjmp	.+618    	; 0x2c8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c1       	rjmp	.+614    	; 0x2c8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c1       	rjmp	.+610    	; 0x2c8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c1       	rjmp	.+606    	; 0x2c8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c1       	rjmp	.+602    	; 0x2c8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c1       	rjmp	.+598    	; 0x2c8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c1       	rjmp	.+594    	; 0x2c8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c1       	rjmp	.+590    	; 0x2c8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c1       	rjmp	.+586    	; 0x2c8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c1       	rjmp	.+582    	; 0x2c8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c1       	rjmp	.+578    	; 0x2c8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c1       	rjmp	.+574    	; 0x2c8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1d c1       	rjmp	.+570    	; 0x2c8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1b c1       	rjmp	.+566    	; 0x2c8 <__bad_interrupt>
      92:	00 00       	nop
      94:	19 c1       	rjmp	.+562    	; 0x2c8 <__bad_interrupt>
      96:	00 00       	nop
      98:	17 c1       	rjmp	.+558    	; 0x2c8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5f c5       	rjmp	.+2750   	; 0xb5c <__vector_39>
      9e:	00 00       	nop
      a0:	13 c1       	rjmp	.+550    	; 0x2c8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	11 c1       	rjmp	.+546    	; 0x2c8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0f c1       	rjmp	.+542    	; 0x2c8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0d c1       	rjmp	.+538    	; 0x2c8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0b c1       	rjmp	.+534    	; 0x2c8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	09 c1       	rjmp	.+530    	; 0x2c8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	07 c1       	rjmp	.+526    	; 0x2c8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	05 c1       	rjmp	.+522    	; 0x2c8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	03 c1       	rjmp	.+518    	; 0x2c8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	01 c1       	rjmp	.+514    	; 0x2c8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ff c0       	rjmp	.+510    	; 0x2c8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fd c0       	rjmp	.+506    	; 0x2c8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fb c0       	rjmp	.+502    	; 0x2c8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f9 c0       	rjmp	.+498    	; 0x2c8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f7 c0       	rjmp	.+494    	; 0x2c8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f5 c0       	rjmp	.+490    	; 0x2c8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f3 c0       	rjmp	.+486    	; 0x2c8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c9 05       	cpc	r28, r9
      e6:	1b 06       	cpc	r1, r27
      e8:	1b 06       	cpc	r1, r27
      ea:	1b 06       	cpc	r1, r27
      ec:	1b 06       	cpc	r1, r27
      ee:	1b 06       	cpc	r1, r27
      f0:	1b 06       	cpc	r1, r27
      f2:	1b 06       	cpc	r1, r27
      f4:	c9 05       	cpc	r28, r9
      f6:	1b 06       	cpc	r1, r27
      f8:	1b 06       	cpc	r1, r27
      fa:	1b 06       	cpc	r1, r27
      fc:	1b 06       	cpc	r1, r27
      fe:	1b 06       	cpc	r1, r27
     100:	1b 06       	cpc	r1, r27
     102:	1b 06       	cpc	r1, r27
     104:	cb 05       	cpc	r28, r11
     106:	1b 06       	cpc	r1, r27
     108:	1b 06       	cpc	r1, r27
     10a:	1b 06       	cpc	r1, r27
     10c:	1b 06       	cpc	r1, r27
     10e:	1b 06       	cpc	r1, r27
     110:	1b 06       	cpc	r1, r27
     112:	1b 06       	cpc	r1, r27
     114:	1b 06       	cpc	r1, r27
     116:	1b 06       	cpc	r1, r27
     118:	1b 06       	cpc	r1, r27
     11a:	1b 06       	cpc	r1, r27
     11c:	1b 06       	cpc	r1, r27
     11e:	1b 06       	cpc	r1, r27
     120:	1b 06       	cpc	r1, r27
     122:	1b 06       	cpc	r1, r27
     124:	cb 05       	cpc	r28, r11
     126:	1b 06       	cpc	r1, r27
     128:	1b 06       	cpc	r1, r27
     12a:	1b 06       	cpc	r1, r27
     12c:	1b 06       	cpc	r1, r27
     12e:	1b 06       	cpc	r1, r27
     130:	1b 06       	cpc	r1, r27
     132:	1b 06       	cpc	r1, r27
     134:	1b 06       	cpc	r1, r27
     136:	1b 06       	cpc	r1, r27
     138:	1b 06       	cpc	r1, r27
     13a:	1b 06       	cpc	r1, r27
     13c:	1b 06       	cpc	r1, r27
     13e:	1b 06       	cpc	r1, r27
     140:	1b 06       	cpc	r1, r27
     142:	1b 06       	cpc	r1, r27
     144:	17 06       	cpc	r1, r23
     146:	1b 06       	cpc	r1, r27
     148:	1b 06       	cpc	r1, r27
     14a:	1b 06       	cpc	r1, r27
     14c:	1b 06       	cpc	r1, r27
     14e:	1b 06       	cpc	r1, r27
     150:	1b 06       	cpc	r1, r27
     152:	1b 06       	cpc	r1, r27
     154:	f4 05       	cpc	r31, r4
     156:	1b 06       	cpc	r1, r27
     158:	1b 06       	cpc	r1, r27
     15a:	1b 06       	cpc	r1, r27
     15c:	1b 06       	cpc	r1, r27
     15e:	1b 06       	cpc	r1, r27
     160:	1b 06       	cpc	r1, r27
     162:	1b 06       	cpc	r1, r27
     164:	1b 06       	cpc	r1, r27
     166:	1b 06       	cpc	r1, r27
     168:	1b 06       	cpc	r1, r27
     16a:	1b 06       	cpc	r1, r27
     16c:	1b 06       	cpc	r1, r27
     16e:	1b 06       	cpc	r1, r27
     170:	1b 06       	cpc	r1, r27
     172:	1b 06       	cpc	r1, r27
     174:	e8 05       	cpc	r30, r8
     176:	1b 06       	cpc	r1, r27
     178:	1b 06       	cpc	r1, r27
     17a:	1b 06       	cpc	r1, r27
     17c:	1b 06       	cpc	r1, r27
     17e:	1b 06       	cpc	r1, r27
     180:	1b 06       	cpc	r1, r27
     182:	1b 06       	cpc	r1, r27
     184:	06 06       	cpc	r0, r22

00000186 <__trampolines_end>:
     186:	6e 61       	ori	r22, 0x1E	; 30
     188:	6e 00       	.word	0x006e	; ????

0000018a <__c.2159>:
     18a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     19a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1aa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ba:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1ca:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1da:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1ea:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1fa:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     20a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     21a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     22a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     23a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     24a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     25a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     26a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     27a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000288 <__ctors_end>:
     288:	11 24       	eor	r1, r1
     28a:	1f be       	out	0x3f, r1	; 63
     28c:	cf ef       	ldi	r28, 0xFF	; 255
     28e:	d1 e2       	ldi	r29, 0x21	; 33
     290:	de bf       	out	0x3e, r29	; 62
     292:	cd bf       	out	0x3d, r28	; 61
     294:	00 e0       	ldi	r16, 0x00	; 0
     296:	0c bf       	out	0x3c, r16	; 60

00000298 <__do_copy_data>:
     298:	12 e0       	ldi	r17, 0x02	; 2
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b2 e0       	ldi	r27, 0x02	; 2
     29e:	ea e3       	ldi	r30, 0x3A	; 58
     2a0:	fe e1       	ldi	r31, 0x1E	; 30
     2a2:	00 e0       	ldi	r16, 0x00	; 0
     2a4:	0b bf       	out	0x3b, r16	; 59
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__do_copy_data+0x14>
     2a8:	07 90       	elpm	r0, Z+
     2aa:	0d 92       	st	X+, r0
     2ac:	ae 3a       	cpi	r26, 0xAE	; 174
     2ae:	b1 07       	cpc	r27, r17
     2b0:	d9 f7       	brne	.-10     	; 0x2a8 <__do_copy_data+0x10>

000002b2 <__do_clear_bss>:
     2b2:	22 e0       	ldi	r18, 0x02	; 2
     2b4:	ae ea       	ldi	r26, 0xAE	; 174
     2b6:	b2 e0       	ldi	r27, 0x02	; 2
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	ac 3c       	cpi	r26, 0xCC	; 204
     2be:	b2 07       	cpc	r27, r18
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	11 d0       	rcall	.+34     	; 0x2e6 <main>
     2c4:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <_exit>

000002c8 <__bad_interrupt>:
     2c8:	9b ce       	rjmp	.-714    	; 0x0 <__vectors>

000002ca <adc_init>:
#include "adc.h"

void adc_init(){
	
	// Division factor 128
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     2ca:	ea e7       	ldi	r30, 0x7A	; 122
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	87 68       	ori	r24, 0x87	; 135
     2d2:	80 83       	st	Z, r24
	
	/*We find max voltage to be 1.1 V
	Internal 1.1 V Voltage Reference with external capacitor at AREF pin  ->  REFS1 = 1 REFS0 = 0 
	*/  
	ADMUX |= (1 << REFS0);
     2d4:	ec e7       	ldi	r30, 0x7C	; 124
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	80 81       	ld	r24, Z
     2da:	80 64       	ori	r24, 0x40	; 64
     2dc:	80 83       	st	Z, r24
	//ADMUX &= ~(1 << REFS1);
	ADMUX |= (1 << REFS1);
     2de:	80 81       	ld	r24, Z
     2e0:	80 68       	ori	r24, 0x80	; 128
     2e2:	80 83       	st	Z, r24
     2e4:	08 95       	ret

000002e6 <main>:

*/



int main(void){
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	2b 97       	sbiw	r28, 0x0b	; 11
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
		PORTB = 0;
		_delay_ms(500);
	}*/
	
	
	MCUCR |= (1 << SRE);
     2fa:	85 b7       	in	r24, 0x35	; 53
     2fc:	80 68       	ori	r24, 0x80	; 128
     2fe:	85 bf       	out	0x35, r24	; 53
	uart_Init(MYUBRR);
     300:	87 e6       	ldi	r24, 0x67	; 103
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	be d4       	rcall	.+2428   	; 0xc82 <uart_Init>
	//
	
	
	can_init(MODE_NORMAL);
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	79 d0       	rcall	.+242    	; 0x3fe <can_init>
	servo_init();
     30c:	72 d3       	rcall	.+1764   	; 0x9f2 <servo_init>
	adc_init();
     30e:	dd df       	rcall	.-70     	; 0x2ca <adc_init>
	
	DDRE |= (1 << 3); //studass PWM bandaid that can be removed? 
     310:	6b 9a       	sbi	0x0d, 3	; 13



	timer_init();
     312:	d7 d3       	rcall	.+1966   	; 0xac2 <timer_init>
	
	solenoid_init();
     314:	a1 d3       	rcall	.+1858   	; 0xa58 <solenoid_init>
	motor_init();
     316:	0d d2       	rcall	.+1050   	; 0x732 <motor_init>
	

	PI_controller* sliders = PI_controller_new(0.02, 0.05);
     318:	2d ec       	ldi	r18, 0xCD	; 205
     31a:	3c ec       	ldi	r19, 0xCC	; 204
     31c:	4c e4       	ldi	r20, 0x4C	; 76
     31e:	5d e3       	ldi	r21, 0x3D	; 61
     320:	6a e0       	ldi	r22, 0x0A	; 10
     322:	77 ed       	ldi	r23, 0xD7	; 215
     324:	83 ea       	ldi	r24, 0xA3	; 163
     326:	9c e3       	ldi	r25, 0x3C	; 60
     328:	ae d2       	rcall	.+1372   	; 0x886 <PI_controller_new>
     32a:	8c 01       	movw	r16, r24
	
	uint16_t y;
	uint16_t x;
	float output;
	
	motor_controller_calibrate_by_reset();
     32c:	31 d2       	rcall	.+1122   	; 0x790 <motor_controller_calibrate_by_reset>
		
		
		output = -PI_controller_set_output(sliders, x, y);
		
		if(y > max_left | y < 0){
			output = 0;
     32e:	61 2c       	mov	r6, r1
     330:	71 2c       	mov	r7, r1
     332:	81 2c       	mov	r8, r1
     334:	91 2c       	mov	r9, r1
	
	while(1){


		
		canjoy_recieve();
     336:	ce 01       	movw	r24, r28
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	14 d1       	rcall	.+552    	; 0x564 <canjoy_recieve>
		
		x = abs(canjoy_joystick_x() - 255) * (float)(max_left) / 255.0;		
     33c:	52 d1       	rcall	.+676    	; 0x5e2 <canjoy_joystick_x>
     33e:	8f 5f       	subi	r24, 0xFF	; 255
     340:	91 09       	sbc	r25, r1
     342:	bc 01       	movw	r22, r24
     344:	99 23       	and	r25, r25
     346:	24 f4       	brge	.+8      	; 0x350 <main+0x6a>
     348:	66 27       	eor	r22, r22
     34a:	77 27       	eor	r23, r23
     34c:	68 1b       	sub	r22, r24
     34e:	79 0b       	sbc	r23, r25
     350:	88 27       	eor	r24, r24
     352:	77 fd       	sbrc	r23, 7
     354:	80 95       	com	r24
     356:	98 2f       	mov	r25, r24
     358:	a4 d5       	rcall	.+2888   	; 0xea2 <__floatsisf>
     35a:	6b 01       	movw	r12, r22
     35c:	7c 01       	movw	r14, r24
     35e:	60 91 b5 02 	lds	r22, 0x02B5
     362:	70 91 b6 02 	lds	r23, 0x02B6
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	99 d5       	rcall	.+2866   	; 0xe9e <__floatunsisf>
     36c:	9b 01       	movw	r18, r22
     36e:	ac 01       	movw	r20, r24
     370:	c7 01       	movw	r24, r14
     372:	b6 01       	movw	r22, r12
     374:	22 d6       	rcall	.+3140   	; 0xfba <__mulsf3>
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	4f e7       	ldi	r20, 0x7F	; 127
     37c:	53 e4       	ldi	r21, 0x43	; 67
     37e:	f6 d4       	rcall	.+2540   	; 0xd6c <__divsf3>
     380:	62 d5       	rcall	.+2756   	; 0xe46 <__fixunssfsi>
     382:	6b 01       	movw	r12, r22
     384:	7c 01       	movw	r14, r24
		y = motor_encoder_read();
     386:	e1 d1       	rcall	.+962    	; 0x74a <motor_encoder_read>
     388:	5c 01       	movw	r10, r24
		
		
		
		output = -PI_controller_set_output(sliders, x, y);
     38a:	ac 01       	movw	r20, r24
     38c:	b6 01       	movw	r22, r12
     38e:	c8 01       	movw	r24, r16
     390:	a0 d2       	rcall	.+1344   	; 0x8d2 <PI_controller_set_output>
		
		if(y > max_left | y < 0){
     392:	20 91 b5 02 	lds	r18, 0x02B5
     396:	30 91 b6 02 	lds	r19, 0x02B6
     39a:	2a 15       	cp	r18, r10
     39c:	3b 05       	cpc	r19, r11
     39e:	70 f0       	brcs	.+28     	; 0x3bc <main+0xd6>
		x = abs(canjoy_joystick_x() - 255) * (float)(max_left) / 255.0;		
		y = motor_encoder_read();
		
		
		
		output = -PI_controller_set_output(sliders, x, y);
     3a0:	66 27       	eor	r22, r22
     3a2:	77 27       	eor	r23, r23
     3a4:	68 1b       	sub	r22, r24
     3a6:	79 0b       	sbc	r23, r25
     3a8:	88 27       	eor	r24, r24
     3aa:	77 fd       	sbrc	r23, 7
     3ac:	80 95       	com	r24
     3ae:	98 2f       	mov	r25, r24
     3b0:	78 d5       	rcall	.+2800   	; 0xea2 <__floatsisf>
     3b2:	c6 2e       	mov	r12, r22
     3b4:	d7 2e       	mov	r13, r23
     3b6:	e8 2e       	mov	r14, r24
     3b8:	f9 2e       	mov	r15, r25
     3ba:	04 c0       	rjmp	.+8      	; 0x3c4 <main+0xde>
		
		if(y > max_left | y < 0){
			output = 0;
     3bc:	c6 2c       	mov	r12, r6
     3be:	d7 2c       	mov	r13, r7
     3c0:	e8 2c       	mov	r14, r8
     3c2:	f9 2c       	mov	r15, r9
		}
		if(y > 65000){
     3c4:	89 ee       	ldi	r24, 0xE9	; 233
     3c6:	a8 16       	cp	r10, r24
     3c8:	8d ef       	ldi	r24, 0xFD	; 253
     3ca:	b8 06       	cpc	r11, r24
     3cc:	08 f0       	brcs	.+2      	; 0x3d0 <main+0xea>
			motor_encoder_reset();
     3ce:	aa d1       	rcall	.+852    	; 0x724 <motor_encoder_reset>
		}
		
		
		//allows shooting solonoid, with 50ms pulse, without "burst mode"
		if(canjoy_button_right() && solenoid_is_shooting_allowed()){
     3d0:	10 d1       	rcall	.+544    	; 0x5f2 <canjoy_button_right>
     3d2:	89 2b       	or	r24, r25
     3d4:	31 f0       	breq	.+12     	; 0x3e2 <main+0xfc>
     3d6:	64 d3       	rcall	.+1736   	; 0xaa0 <solenoid_is_shooting_allowed>
     3d8:	88 23       	and	r24, r24
     3da:	19 f0       	breq	.+6      	; 0x3e2 <main+0xfc>
			solenoid_shoot();
     3dc:	48 d3       	rcall	.+1680   	; 0xa6e <solenoid_shoot>
			solenoid_disallow_shooting();
     3de:	59 d3       	rcall	.+1714   	; 0xa92 <solenoid_disallow_shooting>
     3e0:	04 c0       	rjmp	.+8      	; 0x3ea <main+0x104>
		}
		else if(canjoy_button_right()){}
     3e2:	07 d1       	rcall	.+526    	; 0x5f2 <canjoy_button_right>
     3e4:	89 2b       	or	r24, r25
     3e6:	09 f4       	brne	.+2      	; 0x3ea <main+0x104>
		else{
			solenoid_allow_shooting();			
     3e8:	57 d3       	rcall	.+1710   	; 0xa98 <solenoid_allow_shooting>
		}
		
		servo_set_pulse_by_input(canjoy_slider_right());
     3ea:	ff d0       	rcall	.+510    	; 0x5ea <canjoy_slider_right>
     3ec:	19 d3       	rcall	.+1586   	; 0xa20 <servo_set_pulse_by_input>
		
		//motor_speed_direction_cap(output, 150);
		motor_speed_direction(output);
     3ee:	6c 2d       	mov	r22, r12
     3f0:	7d 2d       	mov	r23, r13
     3f2:	8e 2d       	mov	r24, r14
     3f4:	9f 2d       	mov	r25, r15
     3f6:	22 d5       	rcall	.+2628   	; 0xe3c <__fixsfsi>
     3f8:	cb 01       	movw	r24, r22
     3fa:	7d d1       	rcall	.+762    	; 0x6f6 <motor_speed_direction>
		
		
		//printf("Pos: %u\tRef: %u\toutput: %f\n", y, x, output);
		
		
	}
     3fc:	9c cf       	rjmp	.-200    	; 0x336 <main+0x50>

000003fe <can_init>:
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
}
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	ec 01       	movw	r28, r24
     404:	35 d1       	rcall	.+618    	; 0x670 <mcp2515_init>
     406:	4f ef       	ldi	r20, 0xFF	; 255
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	60 e6       	ldi	r22, 0x60	; 96
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	80 e6       	ldi	r24, 0x60	; 96
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	15 d1       	rcall	.+554    	; 0x63e <mcp2515_bit_modify>
     414:	4f ef       	ldi	r20, 0xFF	; 255
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	60 e6       	ldi	r22, 0x60	; 96
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	80 e7       	ldi	r24, 0x70	; 112
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	0e d1       	rcall	.+540    	; 0x63e <mcp2515_bit_modify>
     422:	ae 01       	movw	r20, r28
     424:	60 ee       	ldi	r22, 0xE0	; 224
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	8f e0       	ldi	r24, 0x0F	; 15
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	08 d1       	rcall	.+528    	; 0x63e <mcp2515_bit_modify>
     42e:	69 98       	cbi	0x0d, 1	; 13
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <can_poll_interrupt>:
}


uint8_t can_poll_interrupt(){
	
	while(!(PINE & (1 << PE1))){}
     436:	61 9b       	sbis	0x0c, 1	; 12
     438:	fe cf       	rjmp	.-4      	; 0x436 <can_poll_interrupt>
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
     43a:	8c e2       	ldi	r24, 0x2C	; 44
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	f3 d0       	rcall	.+486    	; 0x626 <mcp2515_read>
     440:	80 fd       	sbrc	r24, 0
     442:	07 c0       	rjmp	.+14     	; 0x452 <can_poll_interrupt+0x1c>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
	}
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
     444:	8c e2       	ldi	r24, 0x2C	; 44
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	ee d0       	rcall	.+476    	; 0x626 <mcp2515_read>
     44a:	81 ff       	sbrs	r24, 1
     44c:	04 c0       	rjmp	.+8      	; 0x456 <can_poll_interrupt+0x20>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
     44e:	80 e7       	ldi	r24, 0x70	; 112
     450:	08 95       	ret
	
	while(!(PINE & (1 << PE1))){}
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
     452:	80 e6       	ldi	r24, 0x60	; 96
     454:	08 95       	ret
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
	}
	return -1;
     456:	8f ef       	ldi	r24, 0xFF	; 255
}
     458:	08 95       	ret

0000045a <can_recieve>:
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
}

can_message can_recieve(can_message* msg){
     45a:	7f 92       	push	r7
     45c:	8f 92       	push	r8
     45e:	9f 92       	push	r9
     460:	af 92       	push	r10
     462:	bf 92       	push	r11
     464:	cf 92       	push	r12
     466:	df 92       	push	r13
     468:	ef 92       	push	r14
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	2b 97       	sbiw	r28, 0x0b	; 11
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
     484:	6c 01       	movw	r12, r24
	can_message m;
	
	uint8_t buffer_select = can_poll_interrupt();
     486:	d7 df       	rcall	.-82     	; 0x436 <can_poll_interrupt>
     488:	98 2e       	mov	r9, r24
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
     48a:	08 2f       	mov	r16, r24
     48c:	10 e0       	ldi	r17, 0x00	; 0
     48e:	c8 01       	movw	r24, r16
     490:	01 96       	adiw	r24, 0x01	; 1
     492:	c9 d0       	rcall	.+402    	; 0x626 <mcp2515_read>
     494:	7c 01       	movw	r14, r24
     496:	c8 01       	movw	r24, r16
     498:	02 96       	adiw	r24, 0x02	; 2
     49a:	c5 d0       	rcall	.+394    	; 0x626 <mcp2515_read>
     49c:	95 95       	asr	r25
     49e:	87 95       	ror	r24
     4a0:	95 95       	asr	r25
     4a2:	87 95       	ror	r24
     4a4:	95 95       	asr	r25
     4a6:	87 95       	ror	r24
     4a8:	95 95       	asr	r25
     4aa:	87 95       	ror	r24
     4ac:	95 95       	asr	r25
     4ae:	87 95       	ror	r24
     4b0:	ee 0c       	add	r14, r14
     4b2:	ff 1c       	adc	r15, r15
     4b4:	ee 0c       	add	r14, r14
     4b6:	ff 1c       	adc	r15, r15
     4b8:	ee 0c       	add	r14, r14
     4ba:	ff 1c       	adc	r15, r15
     4bc:	5c 01       	movw	r10, r24
     4be:	ae 28       	or	r10, r14
     4c0:	bf 28       	or	r11, r15
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
     4c2:	c8 01       	movw	r24, r16
     4c4:	05 96       	adiw	r24, 0x05	; 5
     4c6:	af d0       	rcall	.+350    	; 0x626 <mcp2515_read>
     4c8:	8f 70       	andi	r24, 0x0F	; 15
     4ca:	78 2e       	mov	r7, r24
	
	for(uint8_t i = 0; i < m.length; i++){
     4cc:	a9 f0       	breq	.+42     	; 0x4f8 <can_recieve+0x9e>
     4ce:	8e 01       	movw	r16, r28
     4d0:	0c 5f       	subi	r16, 0xFC	; 252
     4d2:	1f 4f       	sbci	r17, 0xFF	; 255
     4d4:	81 2c       	mov	r8, r1
     4d6:	ce 01       	movw	r24, r28
     4d8:	80 95       	com	r24
     4da:	90 95       	com	r25
     4dc:	03 96       	adiw	r24, 0x03	; 3
     4de:	7c 01       	movw	r14, r24
     4e0:	e9 0c       	add	r14, r9
     4e2:	f1 1c       	adc	r15, r1
		m.data[i] = mcp2515_read(buffer_select + MCP2515_RXB_OFFSET + i);// + i, msg->data[i]);
     4e4:	c7 01       	movw	r24, r14
     4e6:	80 0f       	add	r24, r16
     4e8:	91 1f       	adc	r25, r17
     4ea:	9d d0       	rcall	.+314    	; 0x626 <mcp2515_read>
     4ec:	f8 01       	movw	r30, r16
     4ee:	81 93       	st	Z+, r24
     4f0:	8f 01       	movw	r16, r30
	uint8_t buffer_select = can_poll_interrupt();
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
	
	for(uint8_t i = 0; i < m.length; i++){
     4f2:	83 94       	inc	r8
     4f4:	87 10       	cpse	r8, r7
     4f6:	f6 cf       	rjmp	.-20     	; 0x4e4 <can_recieve+0x8a>
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	
	switch(buffer_select){
     4f8:	f0 e6       	ldi	r31, 0x60	; 96
     4fa:	9f 16       	cp	r9, r31
     4fc:	21 f0       	breq	.+8      	; 0x506 <can_recieve+0xac>
     4fe:	80 e7       	ldi	r24, 0x70	; 112
     500:	98 16       	cp	r9, r24
     502:	49 f0       	breq	.+18     	; 0x516 <can_recieve+0xbc>
     504:	0f c0       	rjmp	.+30     	; 0x524 <can_recieve+0xca>
		case MCP_RXB0CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	61 e0       	ldi	r22, 0x01	; 1
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	8c e2       	ldi	r24, 0x2C	; 44
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	95 d0       	rcall	.+298    	; 0x63e <mcp2515_bit_modify>
		break;
     514:	07 c0       	rjmp	.+14     	; 0x524 <can_recieve+0xca>
		case MCP_RXB1CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	62 e0       	ldi	r22, 0x02	; 2
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	8c e2       	ldi	r24, 0x2C	; 44
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	8d d0       	rcall	.+282    	; 0x63e <mcp2515_bit_modify>
		break;
	}
	
	return m;
     524:	ba 82       	std	Y+2, r11	; 0x02
     526:	a9 82       	std	Y+1, r10	; 0x01
     528:	7b 82       	std	Y+3, r7	; 0x03
     52a:	8b e0       	ldi	r24, 0x0B	; 11
     52c:	fe 01       	movw	r30, r28
     52e:	31 96       	adiw	r30, 0x01	; 1
     530:	d6 01       	movw	r26, r12
     532:	01 90       	ld	r0, Z+
     534:	0d 92       	st	X+, r0
     536:	8a 95       	dec	r24
     538:	e1 f7       	brne	.-8      	; 0x532 <can_recieve+0xd8>
}
     53a:	c6 01       	movw	r24, r12
     53c:	2b 96       	adiw	r28, 0x0b	; 11
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	ef 90       	pop	r14
     554:	df 90       	pop	r13
     556:	cf 90       	pop	r12
     558:	bf 90       	pop	r11
     55a:	af 90       	pop	r10
     55c:	9f 90       	pop	r9
     55e:	8f 90       	pop	r8
     560:	7f 90       	pop	r7
     562:	08 95       	ret

00000564 <canjoy_recieve>:
int canjoy_slider_right(){
	return canjoy_msg.data[4];
}
int canjoy_button_left(){
	return canjoy_msg.data[5];
}
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	ec 01       	movw	r28, r24
     572:	73 df       	rcall	.-282    	; 0x45a <can_recieve>
     574:	ea 80       	ldd	r14, Y+2	; 0x02
     576:	fb 80       	ldd	r15, Y+3	; 0x03
     578:	0c 81       	ldd	r16, Y+4	; 0x04
     57a:	1d 81       	ldd	r17, Y+5	; 0x05
     57c:	7e 81       	ldd	r23, Y+6	; 0x06
     57e:	6f 81       	ldd	r22, Y+7	; 0x07
     580:	58 85       	ldd	r21, Y+8	; 0x08
     582:	49 85       	ldd	r20, Y+9	; 0x09
     584:	28 81       	ld	r18, Y
     586:	39 81       	ldd	r19, Y+1	; 0x01
     588:	80 91 06 02 	lds	r24, 0x0206
     58c:	90 91 07 02 	lds	r25, 0x0207
     590:	28 17       	cp	r18, r24
     592:	39 07       	cpc	r19, r25
     594:	89 f4       	brne	.+34     	; 0x5b8 <canjoy_recieve+0x54>
     596:	8b e0       	ldi	r24, 0x0B	; 11
     598:	fe 01       	movw	r30, r28
     59a:	a7 eb       	ldi	r26, 0xB7	; 183
     59c:	b2 e0       	ldi	r27, 0x02	; 2
     59e:	01 90       	ld	r0, Z+
     5a0:	0d 92       	st	X+, r0
     5a2:	8a 95       	dec	r24
     5a4:	e1 f7       	brne	.-8      	; 0x59e <canjoy_recieve+0x3a>
     5a6:	ea 82       	std	Y+2, r14	; 0x02
     5a8:	fb 82       	std	Y+3, r15	; 0x03
     5aa:	0c 83       	std	Y+4, r16	; 0x04
     5ac:	1d 83       	std	Y+5, r17	; 0x05
     5ae:	7e 83       	std	Y+6, r23	; 0x06
     5b0:	6f 83       	std	Y+7, r22	; 0x07
     5b2:	58 87       	std	Y+8, r21	; 0x08
     5b4:	49 87       	std	Y+9, r20	; 0x09
     5b6:	0d c0       	rjmp	.+26     	; 0x5d2 <canjoy_recieve+0x6e>
     5b8:	82 e1       	ldi	r24, 0x12	; 18
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <puts>
     5c0:	87 e0       	ldi	r24, 0x07	; 7
     5c2:	8a 83       	std	Y+2, r24	; 0x02
     5c4:	8b 83       	std	Y+3, r24	; 0x03
     5c6:	1c 82       	std	Y+4, r1	; 0x04
     5c8:	1d 82       	std	Y+5, r1	; 0x05
     5ca:	1e 82       	std	Y+6, r1	; 0x06
     5cc:	1f 82       	std	Y+7, r1	; 0x07
     5ce:	18 86       	std	Y+8, r1	; 0x08
     5d0:	19 86       	std	Y+9, r1	; 0x09
     5d2:	ce 01       	movw	r24, r28
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	08 95       	ret

000005e2 <canjoy_joystick_x>:
     5e2:	80 91 ba 02 	lds	r24, 0x02BA
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	08 95       	ret

000005ea <canjoy_slider_right>:
     5ea:	80 91 be 02 	lds	r24, 0x02BE
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	08 95       	ret

000005f2 <canjoy_button_right>:
int canjoy_button_right(){
	return canjoy_msg.data[6];
     5f2:	80 91 c0 02 	lds	r24, 0x02C0
}
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	08 95       	ret

000005fa <max520_init>:
#define MAX520_TWI_ADDR 0b01011110



void max520_init(){
	TWI_Master_Initialise();
     5fa:	84 d2       	rcall	.+1288   	; 0xb04 <TWI_Master_Initialise>
	sei();//interrupts on
     5fc:	78 94       	sei
     5fe:	08 95       	ret

00000600 <max520_send>:
}


void max520_send(uint8_t val)
{
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	00 d0       	rcall	.+0      	; 0x606 <max520_send+0x6>
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
	//printf("In max520_send\n");
	uint8_t message[3] = {MAX520_TWI_ADDR, 0, val};
     60a:	9e e5       	ldi	r25, 0x5E	; 94
     60c:	99 83       	std	Y+1, r25	; 0x01
     60e:	1a 82       	std	Y+2, r1	; 0x02
     610:	8b 83       	std	Y+3, r24	; 0x03
	
	TWI_Start_Transceiver_With_Data(message, 3);
     612:	63 e0       	ldi	r22, 0x03	; 3
     614:	ce 01       	movw	r24, r28
     616:	01 96       	adiw	r24, 0x01	; 1
     618:	7f d2       	rcall	.+1278   	; 0xb18 <TWI_Start_Transceiver_With_Data>
	
}
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <mcp2515_read>:
}

void mcp2515_request_to_send(int buffer_select){
	PORTB &= ~(1 << MCP2515_CS);
	spi_write(buffer_select);
	PORTB |= (1 << MCP2515_CS);
     626:	cf 93       	push	r28
     628:	c8 2f       	mov	r28, r24
     62a:	28 98       	cbi	0x05, 0	; 5
     62c:	83 e0       	ldi	r24, 0x03	; 3
     62e:	42 d2       	rcall	.+1156   	; 0xab4 <spi_write>
     630:	8c 2f       	mov	r24, r28
     632:	40 d2       	rcall	.+1152   	; 0xab4 <spi_write>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	3e d2       	rcall	.+1148   	; 0xab4 <spi_write>
     638:	28 9a       	sbi	0x05, 0	; 5
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <mcp2515_bit_modify>:
}

void mcp2515_bit_modify(int address, int mask, int data){
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	18 2f       	mov	r17, r24
     646:	d6 2f       	mov	r29, r22
     648:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS);
     64a:	28 98       	cbi	0x05, 0	; 5
	
	spi_write(MCP_BITMOD);
     64c:	85 e0       	ldi	r24, 0x05	; 5
     64e:	32 d2       	rcall	.+1124   	; 0xab4 <spi_write>
	spi_write(address);
     650:	81 2f       	mov	r24, r17
     652:	30 d2       	rcall	.+1120   	; 0xab4 <spi_write>
	spi_write(mask);
     654:	8d 2f       	mov	r24, r29
     656:	2e d2       	rcall	.+1116   	; 0xab4 <spi_write>
	spi_write(data);
     658:	8c 2f       	mov	r24, r28
     65a:	2c d2       	rcall	.+1112   	; 0xab4 <spi_write>

	PORTB |= (1 << MCP2515_CS);
     65c:	28 9a       	sbi	0x05, 0	; 5
	
}
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	1f 91       	pop	r17
     664:	08 95       	ret

00000666 <mcp2515_reset>:

void mcp2515_reset(){
	PORTB &= ~(1 << MCP2515_CS);
     666:	28 98       	cbi	0x05, 0	; 5
	spi_write(MCP_RESET);
     668:	80 ec       	ldi	r24, 0xC0	; 192
     66a:	24 d2       	rcall	.+1096   	; 0xab4 <spi_write>
	PORTB |= (1 << MCP2515_CS);
     66c:	28 9a       	sbi	0x05, 0	; 5
     66e:	08 95       	ret

00000670 <mcp2515_init>:
#include "SPI.h"
#include "mcp2515_define.h"


int mcp2515_init(){
	spi_init();
     670:	1a d2       	rcall	.+1076   	; 0xaa6 <spi_init>
	mcp2515_reset();
     672:	f9 df       	rcall	.-14     	; 0x666 <mcp2515_reset>
	
	uint8_t val = mcp2515_read(MCP_CANSTAT);
     674:	8e e0       	ldi	r24, 0x0E	; 14
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	d6 df       	rcall	.-84     	; 0x626 <mcp2515_read>
	if((val & MODE_MASK) != MODE_CONFIG){
     67a:	80 7e       	andi	r24, 0xE0	; 224
     67c:	99 27       	eor	r25, r25
     67e:	80 38       	cpi	r24, 0x80	; 128
     680:	91 05       	cpc	r25, r1
     682:	39 f0       	breq	.+14     	; 0x692 <mcp2515_init+0x22>
		printf("ERROR: MCP2515 is NOT in config mode after reset!\n");
     684:	8b e1       	ldi	r24, 0x1B	; 27
     686:	92 e0       	ldi	r25, 0x02	; 2
     688:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <puts>
		return 1;
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	08 95       	ret
	}
	return 0;
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
}
     696:	08 95       	ret

00000698 <reverse_bits>:
		ir = ir_alt_blocked();
		
		printf("Ir blocked: %d\t\tEncoder: %d\n", ir, motor_encoder_read());
		
		
	}
     698:	28 2f       	mov	r18, r24
     69a:	2a 7a       	andi	r18, 0xAA	; 170
     69c:	26 95       	lsr	r18
     69e:	98 2f       	mov	r25, r24
     6a0:	95 75       	andi	r25, 0x55	; 85
     6a2:	99 0f       	add	r25, r25
     6a4:	92 2b       	or	r25, r18
     6a6:	29 2f       	mov	r18, r25
     6a8:	2c 7c       	andi	r18, 0xCC	; 204
     6aa:	26 95       	lsr	r18
     6ac:	26 95       	lsr	r18
     6ae:	89 2f       	mov	r24, r25
     6b0:	83 73       	andi	r24, 0x33	; 51
     6b2:	88 0f       	add	r24, r24
     6b4:	88 0f       	add	r24, r24
     6b6:	82 2b       	or	r24, r18
     6b8:	82 95       	swap	r24
     6ba:	08 95       	ret

000006bc <motor_encoder_select_byte>:
     6bc:	88 23       	and	r24, r24
     6be:	11 f0       	breq	.+4      	; 0x6c4 <motor_encoder_select_byte+0x8>
     6c0:	8d 9a       	sbi	0x11, 5	; 17
     6c2:	08 95       	ret
     6c4:	8d 98       	cbi	0x11, 5	; 17
     6c6:	08 95       	ret

000006c8 <motor_encoder_output_enable>:
     6c8:	88 23       	and	r24, r24
     6ca:	11 f0       	breq	.+4      	; 0x6d0 <motor_encoder_output_enable+0x8>
     6cc:	8c 98       	cbi	0x11, 4	; 17
     6ce:	08 95       	ret
     6d0:	8c 9a       	sbi	0x11, 4	; 17
     6d2:	08 95       	ret

000006d4 <motor_direction>:
     6d4:	00 97       	sbiw	r24, 0x00	; 0
     6d6:	11 f4       	brne	.+4      	; 0x6dc <motor_direction+0x8>
     6d8:	8b 9a       	sbi	0x11, 3	; 17
     6da:	08 95       	ret
     6dc:	01 97       	sbiw	r24, 0x01	; 1
     6de:	09 f4       	brne	.+2      	; 0x6e2 <motor_direction+0xe>
     6e0:	8b 98       	cbi	0x11, 3	; 17
     6e2:	08 95       	ret

000006e4 <motor_speed>:
     6e4:	8f 3f       	cpi	r24, 0xFF	; 255
     6e6:	91 05       	cpc	r25, r1
     6e8:	21 f0       	breq	.+8      	; 0x6f2 <motor_speed+0xe>
     6ea:	18 f0       	brcs	.+6      	; 0x6f2 <motor_speed+0xe>
     6ec:	8f ef       	ldi	r24, 0xFF	; 255
     6ee:	88 cf       	rjmp	.-240    	; 0x600 <max520_send>
     6f0:	08 95       	ret
     6f2:	86 cf       	rjmp	.-244    	; 0x600 <max520_send>
     6f4:	08 95       	ret

000006f6 <motor_speed_direction>:
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	ec 01       	movw	r28, r24
     6fc:	99 23       	and	r25, r25
     6fe:	24 f4       	brge	.+8      	; 0x708 <motor_speed_direction+0x12>
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	e7 df       	rcall	.-50     	; 0x6d4 <motor_direction>
     706:	03 c0       	rjmp	.+6      	; 0x70e <motor_speed_direction+0x18>
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	e3 df       	rcall	.-58     	; 0x6d4 <motor_direction>
     70e:	ce 01       	movw	r24, r28
     710:	dd 23       	and	r29, r29
     712:	24 f4       	brge	.+8      	; 0x71c <motor_speed_direction+0x26>
     714:	88 27       	eor	r24, r24
     716:	99 27       	eor	r25, r25
     718:	8c 1b       	sub	r24, r28
     71a:	9d 0b       	sbc	r25, r29
     71c:	e3 df       	rcall	.-58     	; 0x6e4 <motor_speed>
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	08 95       	ret

00000724 <motor_encoder_reset>:
     724:	8e 98       	cbi	0x11, 6	; 17
     726:	8a e6       	ldi	r24, 0x6A	; 106
     728:	8a 95       	dec	r24
     72a:	f1 f7       	brne	.-4      	; 0x728 <motor_encoder_reset+0x4>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <motor_encoder_reset+0xa>
     72e:	8e 9a       	sbi	0x11, 6	; 17
     730:	08 95       	ret

00000732 <motor_init>:
     732:	63 df       	rcall	.-314    	; 0x5fa <max520_init>
     734:	80 b3       	in	r24, 0x10	; 16
     736:	88 6f       	ori	r24, 0xF8	; 248
     738:	80 bb       	out	0x10, r24	; 16
     73a:	81 b3       	in	r24, 0x11	; 17
     73c:	88 63       	ori	r24, 0x38	; 56
     73e:	81 bb       	out	0x11, r24	; 17
     740:	8f 98       	cbi	0x11, 7	; 17
     742:	10 92 07 01 	sts	0x0107, r1
     746:	ee cf       	rjmp	.-36     	; 0x724 <motor_encoder_reset>
     748:	08 95       	ret

0000074a <motor_encoder_read>:
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	bb df       	rcall	.-138    	; 0x6c8 <motor_encoder_output_enable>
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	b3 df       	rcall	.-154    	; 0x6bc <motor_encoder_select_byte>
     756:	8a e6       	ldi	r24, 0x6A	; 106
     758:	8a 95       	dec	r24
     75a:	f1 f7       	brne	.-4      	; 0x758 <motor_encoder_read+0xe>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <motor_encoder_read+0x14>
     75e:	80 91 06 01 	lds	r24, 0x0106
     762:	9a df       	rcall	.-204    	; 0x698 <reverse_bits>
     764:	d8 2f       	mov	r29, r24
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	a9 df       	rcall	.-174    	; 0x6bc <motor_encoder_select_byte>
     76a:	8a e6       	ldi	r24, 0x6A	; 106
     76c:	8a 95       	dec	r24
     76e:	f1 f7       	brne	.-4      	; 0x76c <motor_encoder_read+0x22>
     770:	00 c0       	rjmp	.+0      	; 0x772 <motor_encoder_read+0x28>
     772:	80 91 06 01 	lds	r24, 0x0106
     776:	90 df       	rcall	.-224    	; 0x698 <reverse_bits>
     778:	c8 2f       	mov	r28, r24
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	a5 df       	rcall	.-182    	; 0x6c8 <motor_encoder_output_enable>
     77e:	2d 2f       	mov	r18, r29
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	92 2f       	mov	r25, r18
     784:	88 27       	eor	r24, r24
     786:	8c 0f       	add	r24, r28
     788:	91 1d       	adc	r25, r1
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	08 95       	ret

00000790 <motor_controller_calibrate_by_reset>:
	
}



void motor_controller_calibrate_by_reset(){
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
	printf("start calibration\n");
     79c:	8d e7       	ldi	r24, 0x7D	; 125
     79e:	92 e0       	ldi	r25, 0x02	; 2
     7a0:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <puts>
	
	motor_init();
     7a4:	c6 df       	rcall	.-116    	; 0x732 <motor_init>
	
	
	uint16_t position;
	uint16_t prev_position;
	
	motor_speed(100);
     7a6:	84 e6       	ldi	r24, 0x64	; 100
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	9c df       	rcall	.-200    	; 0x6e4 <motor_speed>
	motor_direction(right);
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	91 df       	rcall	.-222    	; 0x6d4 <motor_direction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7b2:	2f ef       	ldi	r18, 0xFF	; 255
     7b4:	82 e5       	ldi	r24, 0x52	; 82
     7b6:	97 e0       	ldi	r25, 0x07	; 7
     7b8:	21 50       	subi	r18, 0x01	; 1
     7ba:	80 40       	sbci	r24, 0x00	; 0
     7bc:	90 40       	sbci	r25, 0x00	; 0
     7be:	e1 f7       	brne	.-8      	; 0x7b8 <motor_controller_calibrate_by_reset+0x28>
     7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <motor_controller_calibrate_by_reset+0x32>
     7c2:	00 00       	nop
	_delay_ms(150);
	position =  motor_encoder_read();
     7c4:	c2 df       	rcall	.-124    	; 0x74a <motor_encoder_read>
	
	//go right until stopped, then set encoder to zero
	while(position != prev_position){
     7c6:	89 2b       	or	r24, r25
     7c8:	e1 f0       	breq	.+56     	; 0x802 <motor_controller_calibrate_by_reset+0x72>
		
		position =  motor_encoder_read();
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
		printf("position: %d\n", position);
     7ca:	0f e8       	ldi	r16, 0x8F	; 143
     7cc:	12 e0       	ldi	r17, 0x02	; 2
	
	//go right until stopped, then set encoder to zero
	while(position != prev_position){
		
		
		position =  motor_encoder_read();
     7ce:	bd df       	rcall	.-134    	; 0x74a <motor_encoder_read>
     7d0:	7c 01       	movw	r14, r24
     7d2:	2f ef       	ldi	r18, 0xFF	; 255
     7d4:	81 ee       	ldi	r24, 0xE1	; 225
     7d6:	94 e0       	ldi	r25, 0x04	; 4
     7d8:	21 50       	subi	r18, 0x01	; 1
     7da:	80 40       	sbci	r24, 0x00	; 0
     7dc:	90 40       	sbci	r25, 0x00	; 0
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <motor_controller_calibrate_by_reset+0x48>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <motor_controller_calibrate_by_reset+0x52>
     7e2:	00 00       	nop
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
     7e4:	b2 df       	rcall	.-156    	; 0x74a <motor_encoder_read>
     7e6:	ec 01       	movw	r28, r24
		printf("position: %d\n", position);
     7e8:	df 93       	push	r29
     7ea:	8f 93       	push	r24
     7ec:	1f 93       	push	r17
     7ee:	0f 93       	push	r16
     7f0:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <printf>
	motor_direction(right);
	_delay_ms(150);
	position =  motor_encoder_read();
	
	//go right until stopped, then set encoder to zero
	while(position != prev_position){
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	ec 16       	cp	r14, r28
     7fe:	fd 06       	cpc	r15, r29
     800:	31 f7       	brne	.-52     	; 0x7ce <motor_controller_calibrate_by_reset+0x3e>
		position = motor_encoder_read();
		printf("position: %d\n", position);

		
	}
	motor_encoder_reset();
     802:	90 df       	rcall	.-224    	; 0x724 <motor_encoder_reset>
	
	motor_speed(100);
     804:	84 e6       	ldi	r24, 0x64	; 100
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	6d df       	rcall	.-294    	; 0x6e4 <motor_speed>
	motor_direction(left);
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	62 df       	rcall	.-316    	; 0x6d4 <motor_direction>
     810:	9f ef       	ldi	r25, 0xFF	; 255
     812:	22 e5       	ldi	r18, 0x52	; 82
     814:	87 e0       	ldi	r24, 0x07	; 7
     816:	91 50       	subi	r25, 0x01	; 1
     818:	20 40       	sbci	r18, 0x00	; 0
     81a:	80 40       	sbci	r24, 0x00	; 0
     81c:	e1 f7       	brne	.-8      	; 0x816 <motor_controller_calibrate_by_reset+0x86>
     81e:	00 c0       	rjmp	.+0      	; 0x820 <motor_controller_calibrate_by_reset+0x90>
     820:	00 00       	nop
		
		position =  motor_encoder_read();
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
		printf("position: %d\n", position);
     822:	0f 2e       	mov	r0, r31
     824:	ff e8       	ldi	r31, 0x8F	; 143
     826:	ef 2e       	mov	r14, r31
     828:	f2 e0       	ldi	r31, 0x02	; 2
     82a:	ff 2e       	mov	r15, r31
     82c:	f0 2d       	mov	r31, r0
	
	//go left until stopped, set max left to current position
	do{
		
		
		position =  motor_encoder_read();
     82e:	8d df       	rcall	.-230    	; 0x74a <motor_encoder_read>
     830:	8c 01       	movw	r16, r24
     832:	9f ef       	ldi	r25, 0xFF	; 255
     834:	21 ee       	ldi	r18, 0xE1	; 225
     836:	84 e0       	ldi	r24, 0x04	; 4
     838:	91 50       	subi	r25, 0x01	; 1
     83a:	20 40       	sbci	r18, 0x00	; 0
     83c:	80 40       	sbci	r24, 0x00	; 0
     83e:	e1 f7       	brne	.-8      	; 0x838 <motor_controller_calibrate_by_reset+0xa8>
     840:	00 c0       	rjmp	.+0      	; 0x842 <motor_controller_calibrate_by_reset+0xb2>
     842:	00 00       	nop
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
     844:	82 df       	rcall	.-252    	; 0x74a <motor_encoder_read>
     846:	ec 01       	movw	r28, r24
		printf("position: %d\n", position);
     848:	df 93       	push	r29
     84a:	cf 93       	push	r28
     84c:	ff 92       	push	r15
     84e:	ef 92       	push	r14
     850:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <printf>
		
		
	} while(position != prev_position);
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0c 17       	cp	r16, r28
     85e:	1d 07       	cpc	r17, r29
     860:	31 f7       	brne	.-52     	; 0x82e <motor_controller_calibrate_by_reset+0x9e>
	max_left = position;
     862:	10 93 b6 02 	sts	0x02B6, r17
     866:	00 93 b5 02 	sts	0x02B5, r16
	motor_speed(0);
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	3a df       	rcall	.-396    	; 0x6e4 <motor_speed>


	printf("end calibration\n");
     870:	8d e9       	ldi	r24, 0x9D	; 157
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <puts>
	
}
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	ff 90       	pop	r15
     882:	ef 90       	pop	r14
     884:	08 95       	ret

00000886 <PI_controller_new>:
	float error;
	float integral;
};


PI_controller* PI_controller_new(float kp, float ki){
     886:	8f 92       	push	r8
     888:	9f 92       	push	r9
     88a:	af 92       	push	r10
     88c:	bf 92       	push	r11
     88e:	cf 92       	push	r12
     890:	df 92       	push	r13
     892:	ef 92       	push	r14
     894:	ff 92       	push	r15
     896:	4b 01       	movw	r8, r22
     898:	5c 01       	movw	r10, r24
     89a:	69 01       	movw	r12, r18
     89c:	7a 01       	movw	r14, r20
	PI_controller* this = malloc(sizeof(PI_controller));
     89e:	82 e1       	ldi	r24, 0x12	; 18
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	7b d7       	rcall	.+3830   	; 0x179a <malloc>
	
	//initialized variables of controller type to 0
	memset(this, 0, sizeof(PI_controller));
     8a4:	22 e1       	ldi	r18, 0x12	; 18
     8a6:	fc 01       	movw	r30, r24
     8a8:	11 92       	st	Z+, r1
     8aa:	2a 95       	dec	r18
     8ac:	e9 f7       	brne	.-6      	; 0x8a8 <PI_controller_new+0x22>
	
	this->Ki = ki;
     8ae:	fc 01       	movw	r30, r24
     8b0:	c4 82       	std	Z+4, r12	; 0x04
     8b2:	d5 82       	std	Z+5, r13	; 0x05
     8b4:	e6 82       	std	Z+6, r14	; 0x06
     8b6:	f7 82       	std	Z+7, r15	; 0x07
	this->Kp = kp;
     8b8:	80 82       	st	Z, r8
     8ba:	91 82       	std	Z+1, r9	; 0x01
     8bc:	a2 82       	std	Z+2, r10	; 0x02
     8be:	b3 82       	std	Z+3, r11	; 0x03
	
	return this;
}
     8c0:	ff 90       	pop	r15
     8c2:	ef 90       	pop	r14
     8c4:	df 90       	pop	r13
     8c6:	cf 90       	pop	r12
     8c8:	bf 90       	pop	r11
     8ca:	af 90       	pop	r10
     8cc:	9f 90       	pop	r9
     8ce:	8f 90       	pop	r8
     8d0:	08 95       	ret

000008d2 <PI_controller_set_output>:

int16_t PI_controller_set_output(PI_controller* ctrl, uint16_t position, uint16_t reference){
     8d2:	8f 92       	push	r8
     8d4:	9f 92       	push	r9
     8d6:	af 92       	push	r10
     8d8:	bf 92       	push	r11
     8da:	cf 92       	push	r12
     8dc:	df 92       	push	r13
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	ec 01       	movw	r28, r24
     8e8:	5b 01       	movw	r10, r22
     8ea:	4a 01       	movw	r8, r20
	//copy pasta ish
	float dt = (float)(timer_read() * prescaler / fcpu);	
     8ec:	01 d1       	rcall	.+514    	; 0xaf0 <timer_read>
     8ee:	bc 01       	movw	r22, r24
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	d4 d2       	rcall	.+1448   	; 0xe9e <__floatunsisf>
     8f6:	20 91 08 02 	lds	r18, 0x0208
     8fa:	30 91 09 02 	lds	r19, 0x0209
     8fe:	40 91 0a 02 	lds	r20, 0x020A
     902:	50 91 0b 02 	lds	r21, 0x020B
     906:	59 d3       	rcall	.+1714   	; 0xfba <__mulsf3>
     908:	20 91 0c 02 	lds	r18, 0x020C
     90c:	30 91 0d 02 	lds	r19, 0x020D
     910:	40 91 0e 02 	lds	r20, 0x020E
     914:	50 91 0f 02 	lds	r21, 0x020F
     918:	29 d2       	rcall	.+1106   	; 0xd6c <__divsf3>
     91a:	6b 01       	movw	r12, r22
     91c:	7c 01       	movw	r14, r24
	timer_reset();
     91e:	ed d0       	rcall	.+474    	; 0xafa <timer_reset>
	
	int16_t error			= reference - position;
     920:	b4 01       	movw	r22, r8
     922:	6a 19       	sub	r22, r10
     924:	7b 09       	sbc	r23, r11
	ctrl->integral		+= error * dt;
     926:	88 27       	eor	r24, r24
     928:	77 fd       	sbrc	r23, 7
     92a:	80 95       	com	r24
     92c:	98 2f       	mov	r25, r24
     92e:	b9 d2       	rcall	.+1394   	; 0xea2 <__floatsisf>
     930:	4b 01       	movw	r8, r22
     932:	5c 01       	movw	r10, r24
     934:	a7 01       	movw	r20, r14
     936:	96 01       	movw	r18, r12
     938:	40 d3       	rcall	.+1664   	; 0xfba <__mulsf3>
     93a:	2e 85       	ldd	r18, Y+14	; 0x0e
     93c:	3f 85       	ldd	r19, Y+15	; 0x0f
     93e:	48 89       	ldd	r20, Y+16	; 0x10
     940:	59 89       	ldd	r21, Y+17	; 0x11
     942:	b0 d1       	rcall	.+864    	; 0xca4 <__addsf3>
     944:	6b 01       	movw	r12, r22
     946:	7c 01       	movw	r14, r24
     948:	6e 87       	std	Y+14, r22	; 0x0e
     94a:	7f 87       	std	Y+15, r23	; 0x0f
     94c:	88 8b       	std	Y+16, r24	; 0x10
     94e:	99 8b       	std	Y+17, r25	; 0x11
	
	return		ctrl->Kp * error +
     950:	28 81       	ld	r18, Y
     952:	39 81       	ldd	r19, Y+1	; 0x01
     954:	4a 81       	ldd	r20, Y+2	; 0x02
     956:	5b 81       	ldd	r21, Y+3	; 0x03
     958:	c5 01       	movw	r24, r10
     95a:	b4 01       	movw	r22, r8
     95c:	2e d3       	rcall	.+1628   	; 0xfba <__mulsf3>
     95e:	4b 01       	movw	r8, r22
     960:	5c 01       	movw	r10, r24
				ctrl->Ki * ctrl->integral;
     962:	2c 81       	ldd	r18, Y+4	; 0x04
     964:	3d 81       	ldd	r19, Y+5	; 0x05
     966:	4e 81       	ldd	r20, Y+6	; 0x06
     968:	5f 81       	ldd	r21, Y+7	; 0x07
     96a:	c7 01       	movw	r24, r14
     96c:	b6 01       	movw	r22, r12
     96e:	25 d3       	rcall	.+1610   	; 0xfba <__mulsf3>
     970:	9b 01       	movw	r18, r22
     972:	ac 01       	movw	r20, r24
	timer_reset();
	
	int16_t error			= reference - position;
	ctrl->integral		+= error * dt;
	
	return		ctrl->Kp * error +
     974:	c5 01       	movw	r24, r10
     976:	b4 01       	movw	r22, r8
     978:	95 d1       	rcall	.+810    	; 0xca4 <__addsf3>
     97a:	60 d2       	rcall	.+1216   	; 0xe3c <__fixsfsi>
	//printf("dt: %f\terror: %f\toutput: %f\n", dt, ctrl->error, output);
	
	return output;
	*/
	
}
     97c:	cb 01       	movw	r24, r22
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	df 90       	pop	r13
     988:	cf 90       	pop	r12
     98a:	bf 90       	pop	r11
     98c:	af 90       	pop	r10
     98e:	9f 90       	pop	r9
     990:	8f 90       	pop	r8
     992:	08 95       	ret

00000994 <pwm_init>:
#define P_RESOLUTION P_MAX - P_MIN // = 300



void pwm_init(uint16_t pulse_period, uint16_t initial_pulse_width){
	DDRE |= (1<<PE3);
     994:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE |= (1<<PE3);
     996:	73 9a       	sbi	0x0e, 3	; 14
	
	TCCR3A = 0;
     998:	a0 e9       	ldi	r26, 0x90	; 144
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	1c 92       	st	X, r1
	TCCR3B = 0;
     99e:	e1 e9       	ldi	r30, 0x91	; 145
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	10 82       	st	Z, r1
	TCCR3C = 0;
     9a4:	10 92 92 00 	sts	0x0092, r1
	
	//16 bit, fast pwm, top: ICR, update OCRnx at bottom, TOVn Flag set on TOP
	TCCR3A &= ~(1<< WGM30);
     9a8:	2c 91       	ld	r18, X
     9aa:	2e 7f       	andi	r18, 0xFE	; 254
     9ac:	2c 93       	st	X, r18
	TCCR3A |= (1<<WGM31);
     9ae:	2c 91       	ld	r18, X
     9b0:	22 60       	ori	r18, 0x02	; 2
     9b2:	2c 93       	st	X, r18
	TCCR3B |= (1<<WGM32);
     9b4:	20 81       	ld	r18, Z
     9b6:	28 60       	ori	r18, 0x08	; 8
     9b8:	20 83       	st	Z, r18
	TCCR3B |= (1<<WGM33);
     9ba:	20 81       	ld	r18, Z
     9bc:	20 61       	ori	r18, 0x10	; 16
     9be:	20 83       	st	Z, r18
	
	//inverting		
	TCCR3A |= (0<<COM3A0);
     9c0:	2c 91       	ld	r18, X
     9c2:	2c 93       	st	X, r18
	TCCR3A |= (1<<COM3A1);
     9c4:	2c 91       	ld	r18, X
     9c6:	20 68       	ori	r18, 0x80	; 128
     9c8:	2c 93       	st	X, r18
	
	//prescaler,	CLK / 64
	TCCR3B |= (1<<CS30) | (1<<CS31);
     9ca:	20 81       	ld	r18, Z
     9cc:	23 60       	ori	r18, 0x03	; 3
     9ce:	20 83       	st	Z, r18
	TCCR3B &= ~(1<<CS32);
     9d0:	20 81       	ld	r18, Z
     9d2:	2b 7f       	andi	r18, 0xFB	; 251
     9d4:	20 83       	st	Z, r18
	
	//20 ms
	ICR3 = pulse_period;
     9d6:	90 93 97 00 	sts	0x0097, r25
     9da:	80 93 96 00 	sts	0x0096, r24
	
	OCR3A = initial_pulse_width; //should be P_MID
     9de:	70 93 99 00 	sts	0x0099, r23
     9e2:	60 93 98 00 	sts	0x0098, r22
     9e6:	08 95       	ret

000009e8 <pwm_set_pulse_width>:
	//printf("PWM init done:\n\tTCCRA: %02X\n\tTCCRB: %02X\n\tICR: %02X\n\tOCR: %02X\n", TCCR3A, TCCR3B, ICR3, OCR3A);
}


void pwm_set_pulse_width(uint16_t pulse){
	OCR3A = pulse;
     9e8:	90 93 99 00 	sts	0x0099, r25
     9ec:	80 93 98 00 	sts	0x0098, r24
     9f0:	08 95       	ret

000009f2 <servo_init>:
#define P_RESOLUTION P_MAX - P_MIN // = 300



void servo_init(){
	pwm_init(PULSE_PERIOD, P_MID);
     9f2:	67 e7       	ldi	r22, 0x77	; 119
     9f4:	71 e0       	ldi	r23, 0x01	; 1
     9f6:	88 e8       	ldi	r24, 0x88	; 136
     9f8:	93 e1       	ldi	r25, 0x13	; 19
     9fa:	cc cf       	rjmp	.-104    	; 0x994 <pwm_init>
     9fc:	08 95       	ret

000009fe <servo_set_pulse>:
}

void servo_set_pulse(int16_t pulse_width){
	
	if(pulse_width >= P_MAX)
     9fe:	8d 30       	cpi	r24, 0x0D	; 13
     a00:	22 e0       	ldi	r18, 0x02	; 2
     a02:	92 07       	cpc	r25, r18
     a04:	24 f0       	brlt	.+8      	; 0xa0e <servo_set_pulse+0x10>
		pwm_set_pulse_width(P_MAX);
     a06:	8d e0       	ldi	r24, 0x0D	; 13
     a08:	92 e0       	ldi	r25, 0x02	; 2
     a0a:	ee cf       	rjmp	.-36     	; 0x9e8 <pwm_set_pulse_width>
     a0c:	08 95       	ret
	else if(pulse_width < P_MIN)
     a0e:	81 3e       	cpi	r24, 0xE1	; 225
     a10:	91 05       	cpc	r25, r1
     a12:	24 f4       	brge	.+8      	; 0xa1c <servo_set_pulse+0x1e>
		pwm_set_pulse_width(P_MIN);
     a14:	81 ee       	ldi	r24, 0xE1	; 225
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	e7 cf       	rjmp	.-50     	; 0x9e8 <pwm_set_pulse_width>
     a1a:	08 95       	ret
	else
		pwm_set_pulse_width(pulse_width);
     a1c:	e5 cf       	rjmp	.-54     	; 0x9e8 <pwm_set_pulse_width>
     a1e:	08 95       	ret

00000a20 <servo_set_pulse_by_input>:
	return;
}

void servo_set_pulse_by_input(int16_t val){
	//reverses the input-output correlation
	val = abs(val - 255);
     a20:	8f 5f       	subi	r24, 0xFF	; 255
     a22:	91 09       	sbc	r25, r1
     a24:	bc 01       	movw	r22, r24
     a26:	99 23       	and	r25, r25
     a28:	24 f4       	brge	.+8      	; 0xa32 <servo_set_pulse_by_input+0x12>
     a2a:	66 27       	eor	r22, r22
     a2c:	77 27       	eor	r23, r23
     a2e:	68 1b       	sub	r22, r24
     a30:	79 0b       	sbc	r23, r25
	
	
	uint16_t pulse_width = (float)(val * (300/255.0)) + P_MIN;
     a32:	88 27       	eor	r24, r24
     a34:	77 fd       	sbrc	r23, 7
     a36:	80 95       	com	r24
     a38:	98 2f       	mov	r25, r24
     a3a:	33 d2       	rcall	.+1126   	; 0xea2 <__floatsisf>
     a3c:	27 e9       	ldi	r18, 0x97	; 151
     a3e:	36 e9       	ldi	r19, 0x96	; 150
     a40:	46 e9       	ldi	r20, 0x96	; 150
     a42:	5f e3       	ldi	r21, 0x3F	; 63
     a44:	ba d2       	rcall	.+1396   	; 0xfba <__mulsf3>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	41 e6       	ldi	r20, 0x61	; 97
     a4c:	53 e4       	ldi	r21, 0x43	; 67
     a4e:	2a d1       	rcall	.+596    	; 0xca4 <__addsf3>
     a50:	fa d1       	rcall	.+1012   	; 0xe46 <__fixunssfsi>
	
	servo_set_pulse(pulse_width); //reverses the controll
     a52:	cb 01       	movw	r24, r22
     a54:	d4 cf       	rjmp	.-88     	; 0x9fe <servo_set_pulse>
     a56:	08 95       	ret

00000a58 <solenoid_init>:
void solenoid_extend(){
	PORTH &= ~(1<<PH3);
}

void solenoid_retract(){
	PORTH |= (1<<PH3);	
     a58:	e1 e0       	ldi	r30, 0x01	; 1
     a5a:	f1 e0       	ldi	r31, 0x01	; 1
     a5c:	80 81       	ld	r24, Z
     a5e:	88 60       	ori	r24, 0x08	; 8
     a60:	80 83       	st	Z, r24
     a62:	e2 e0       	ldi	r30, 0x02	; 2
     a64:	f1 e0       	ldi	r31, 0x01	; 1
     a66:	80 81       	ld	r24, Z
     a68:	88 60       	ori	r24, 0x08	; 8
     a6a:	80 83       	st	Z, r24
     a6c:	08 95       	ret

00000a6e <solenoid_shoot>:
     a6e:	e2 e0       	ldi	r30, 0x02	; 2
     a70:	f1 e0       	ldi	r31, 0x01	; 1
     a72:	80 81       	ld	r24, Z
     a74:	87 7f       	andi	r24, 0xF7	; 247
     a76:	80 83       	st	Z, r24
     a78:	2f ef       	ldi	r18, 0xFF	; 255
     a7a:	82 e5       	ldi	r24, 0x52	; 82
     a7c:	97 e0       	ldi	r25, 0x07	; 7
     a7e:	21 50       	subi	r18, 0x01	; 1
     a80:	80 40       	sbci	r24, 0x00	; 0
     a82:	90 40       	sbci	r25, 0x00	; 0
     a84:	e1 f7       	brne	.-8      	; 0xa7e <solenoid_shoot+0x10>
     a86:	00 c0       	rjmp	.+0      	; 0xa88 <solenoid_shoot+0x1a>
     a88:	00 00       	nop
     a8a:	80 81       	ld	r24, Z
     a8c:	88 60       	ori	r24, 0x08	; 8
     a8e:	80 83       	st	Z, r24
     a90:	08 95       	ret

00000a92 <solenoid_disallow_shooting>:
}

void solenoid_disallow_shooting(){
	shoot = 0;
     a92:	10 92 10 02 	sts	0x0210, r1
     a96:	08 95       	ret

00000a98 <solenoid_allow_shooting>:
}
void solenoid_allow_shooting(){
	shoot = 1;
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	80 93 10 02 	sts	0x0210, r24
     a9e:	08 95       	ret

00000aa0 <solenoid_is_shooting_allowed>:
}
uint8_t solenoid_is_shooting_allowed(){
	return shoot;
}
     aa0:	80 91 10 02 	lds	r24, 0x0210
     aa4:	08 95       	ret

00000aa6 <spi_init>:
#include "SPI.h"
#include <avr/io.h>

void spi_init(){
			//SI out		SS out		SCK out
	DDRB |= ( 1 << PB2) | (1 << PB0) | (1 << PB1);
     aa6:	84 b1       	in	r24, 0x04	; 4
     aa8:	87 60       	ori	r24, 0x07	; 7
     aaa:	84 b9       	out	0x04, r24	; 4
	//SO in
	DDRB &= ~(1 << PB3);
     aac:	23 98       	cbi	0x04, 3	; 4
	
	//								 frequency / 16
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     aae:	81 e5       	ldi	r24, 0x51	; 81
     ab0:	8c bd       	out	0x2c, r24	; 44
     ab2:	08 95       	ret

00000ab4 <spi_write>:

//both read and write
int spi_write(char data){
	//SPDR = data;
	//while(!(SPSR & (1<<SPIF)));
	SPDR = data;
     ab4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
     ab6:	0d b4       	in	r0, 0x2d	; 45
     ab8:	07 fe       	sbrs	r0, 7
     aba:	fd cf       	rjmp	.-6      	; 0xab6 <spi_write+0x2>
	return SPDR;
     abc:	8e b5       	in	r24, 0x2e	; 46
}
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	08 95       	ret

00000ac2 <timer_init>:
	else if(timer == 3)
		TCNT3 = 0;
	else if(timer == 4)
		TCNT4 = 0;
	else if(timer == 5)
		TCNT5 = 0;
     ac2:	10 92 a0 00 	sts	0x00A0, r1
     ac6:	e1 ea       	ldi	r30, 0xA1	; 161
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	10 82       	st	Z, r1
     acc:	80 81       	ld	r24, Z
     ace:	85 60       	ori	r24, 0x05	; 5
     ad0:	80 83       	st	Z, r24
     ad2:	80 81       	ld	r24, Z
     ad4:	8d 7f       	andi	r24, 0xFD	; 253
     ad6:	80 83       	st	Z, r24
     ad8:	10 92 20 01 	sts	0x0120, r1
     adc:	e1 e2       	ldi	r30, 0x21	; 33
     ade:	f1 e0       	ldi	r31, 0x01	; 1
     ae0:	10 82       	st	Z, r1
     ae2:	80 81       	ld	r24, Z
     ae4:	81 60       	ori	r24, 0x01	; 1
     ae6:	80 83       	st	Z, r24
     ae8:	80 81       	ld	r24, Z
     aea:	8d 7f       	andi	r24, 0xFD	; 253
     aec:	80 83       	st	Z, r24
     aee:	08 95       	ret

00000af0 <timer_read>:
}

uint16_t timer_read(){
	return TCNT4;
     af0:	80 91 a4 00 	lds	r24, 0x00A4
     af4:	90 91 a5 00 	lds	r25, 0x00A5
}
     af8:	08 95       	ret

00000afa <timer_reset>:

void timer_reset(){
	TCNT4 = 0;
     afa:	10 92 a5 00 	sts	0x00A5, r1
     afe:	10 92 a4 00 	sts	0x00A4, r1
     b02:	08 95       	ret

00000b04 <TWI_Master_Initialise>:
		{
			msg[ i ] = TWI_buf[ i ];
		}
	}
	return( TWI_statusReg.lastTransOK );
}
     b04:	8c e0       	ldi	r24, 0x0C	; 12
     b06:	80 93 b8 00 	sts	0x00B8, r24
     b0a:	8f ef       	ldi	r24, 0xFF	; 255
     b0c:	80 93 bb 00 	sts	0x00BB, r24
     b10:	84 e0       	ldi	r24, 0x04	; 4
     b12:	80 93 bc 00 	sts	0x00BC, r24
     b16:	08 95       	ret

00000b18 <TWI_Start_Transceiver_With_Data>:
     b18:	ec eb       	ldi	r30, 0xBC	; 188
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 81       	ld	r18, Z
     b1e:	20 fd       	sbrc	r18, 0
     b20:	fd cf       	rjmp	.-6      	; 0xb1c <TWI_Start_Transceiver_With_Data+0x4>
     b22:	60 93 b0 02 	sts	0x02B0, r22
     b26:	fc 01       	movw	r30, r24
     b28:	20 81       	ld	r18, Z
     b2a:	20 93 b1 02 	sts	0x02B1, r18
     b2e:	20 fd       	sbrc	r18, 0
     b30:	0c c0       	rjmp	.+24     	; 0xb4a <TWI_Start_Transceiver_With_Data+0x32>
     b32:	62 30       	cpi	r22, 0x02	; 2
     b34:	50 f0       	brcs	.+20     	; 0xb4a <TWI_Start_Transceiver_With_Data+0x32>
     b36:	dc 01       	movw	r26, r24
     b38:	11 96       	adiw	r26, 0x01	; 1
     b3a:	e2 eb       	ldi	r30, 0xB2	; 178
     b3c:	f2 e0       	ldi	r31, 0x02	; 2
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	9d 91       	ld	r25, X+
     b42:	91 93       	st	Z+, r25
     b44:	8f 5f       	subi	r24, 0xFF	; 255
     b46:	86 13       	cpse	r24, r22
     b48:	fb cf       	rjmp	.-10     	; 0xb40 <TWI_Start_Transceiver_With_Data+0x28>
     b4a:	10 92 af 02 	sts	0x02AF, r1
     b4e:	88 ef       	ldi	r24, 0xF8	; 248
     b50:	80 93 11 02 	sts	0x0211, r24
     b54:	85 ea       	ldi	r24, 0xA5	; 165
     b56:	80 93 bc 00 	sts	0x00BC, r24
     b5a:	08 95       	ret

00000b5c <__vector_39>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
     b5c:	1f 92       	push	r1
     b5e:	0f 92       	push	r0
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	0f 92       	push	r0
     b64:	11 24       	eor	r1, r1
     b66:	0b b6       	in	r0, 0x3b	; 59
     b68:	0f 92       	push	r0
     b6a:	2f 93       	push	r18
     b6c:	3f 93       	push	r19
     b6e:	8f 93       	push	r24
     b70:	9f 93       	push	r25
     b72:	af 93       	push	r26
     b74:	bf 93       	push	r27
     b76:	ef 93       	push	r30
     b78:	ff 93       	push	r31
	static unsigned char TWI_bufPtr;
	
	switch (TWSR)
     b7a:	80 91 b9 00 	lds	r24, 0x00B9
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	fc 01       	movw	r30, r24
     b82:	38 97       	sbiw	r30, 0x08	; 8
     b84:	e1 35       	cpi	r30, 0x51	; 81
     b86:	f1 05       	cpc	r31, r1
     b88:	08 f0       	brcs	.+2      	; 0xb8c <__vector_39+0x30>
     b8a:	55 c0       	rjmp	.+170    	; 0xc36 <__vector_39+0xda>
     b8c:	ee 58       	subi	r30, 0x8E	; 142
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	fe c5       	rjmp	.+3068   	; 0x178e <__tablejump2__>
	{
		case TWI_START:             // START has been transmitted
		case TWI_REP_START:         // Repeated START has been transmitted
		TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
     b92:	10 92 ae 02 	sts	0x02AE, r1
		case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
		case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
		if (TWI_bufPtr < TWI_msgSize)
     b96:	e0 91 ae 02 	lds	r30, 0x02AE
     b9a:	80 91 b0 02 	lds	r24, 0x02B0
     b9e:	e8 17       	cp	r30, r24
     ba0:	70 f4       	brcc	.+28     	; 0xbbe <__vector_39+0x62>
		{
			TWDR = TWI_buf[TWI_bufPtr++];
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	8e 0f       	add	r24, r30
     ba6:	80 93 ae 02 	sts	0x02AE, r24
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	ef 54       	subi	r30, 0x4F	; 79
     bae:	fd 4f       	sbci	r31, 0xFD	; 253
     bb0:	80 81       	ld	r24, Z
     bb2:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     bb6:	85 e8       	ldi	r24, 0x85	; 133
     bb8:	80 93 bc 00 	sts	0x00BC, r24
     bbc:	43 c0       	rjmp	.+134    	; 0xc44 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
			(0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
			TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     bbe:	80 91 af 02 	lds	r24, 0x02AF
     bc2:	81 60       	ori	r24, 0x01	; 1
     bc4:	80 93 af 02 	sts	0x02AF, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     bc8:	84 e9       	ldi	r24, 0x94	; 148
     bca:	80 93 bc 00 	sts	0x00BC, r24
     bce:	3a c0       	rjmp	.+116    	; 0xc44 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
		TWI_buf[TWI_bufPtr++] = TWDR;
     bd0:	e0 91 ae 02 	lds	r30, 0x02AE
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	8e 0f       	add	r24, r30
     bd8:	80 93 ae 02 	sts	0x02AE, r24
     bdc:	80 91 bb 00 	lds	r24, 0x00BB
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	ef 54       	subi	r30, 0x4F	; 79
     be4:	fd 4f       	sbci	r31, 0xFD	; 253
     be6:	80 83       	st	Z, r24
		case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
		if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
     be8:	20 91 ae 02 	lds	r18, 0x02AE
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	80 91 b0 02 	lds	r24, 0x02B0
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	01 97       	sbiw	r24, 0x01	; 1
     bf6:	28 17       	cp	r18, r24
     bf8:	39 07       	cpc	r19, r25
     bfa:	24 f4       	brge	.+8      	; 0xc04 <__vector_39+0xa8>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     bfc:	85 ec       	ldi	r24, 0xC5	; 197
     bfe:	80 93 bc 00 	sts	0x00BC, r24
     c02:	20 c0       	rjmp	.+64     	; 0xc44 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
			(0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     c04:	85 e8       	ldi	r24, 0x85	; 133
     c06:	80 93 bc 00 	sts	0x00BC, r24
     c0a:	1c c0       	rjmp	.+56     	; 0xc44 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
		TWI_buf[TWI_bufPtr] = TWDR;
     c0c:	80 91 bb 00 	lds	r24, 0x00BB
     c10:	e0 91 ae 02 	lds	r30, 0x02AE
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	ef 54       	subi	r30, 0x4F	; 79
     c18:	fd 4f       	sbci	r31, 0xFD	; 253
     c1a:	80 83       	st	Z, r24
		TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     c1c:	80 91 af 02 	lds	r24, 0x02AF
     c20:	81 60       	ori	r24, 0x01	; 1
     c22:	80 93 af 02 	sts	0x02AF, r24
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     c26:	84 e9       	ldi	r24, 0x94	; 148
     c28:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
		(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
		(0<<TWWC);                                 //
		break;
     c2c:	0b c0       	rjmp	.+22     	; 0xc44 <__vector_39+0xe8>
		case TWI_ARB_LOST:          // Arbitration lost
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     c2e:	85 ea       	ldi	r24, 0xA5	; 165
     c30:	80 93 bc 00 	sts	0x00BC, r24
		(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
		(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
		(0<<TWWC);                                 //
		break;
     c34:	07 c0       	rjmp	.+14     	; 0xc44 <__vector_39+0xe8>
		case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received
		case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
		//    case TWI_NO_STATE              // No relevant state information available; TWINT = ?0?
		case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
		default:
		TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     c36:	80 91 b9 00 	lds	r24, 0x00B9
     c3a:	80 93 11 02 	sts	0x0211, r24
		// Reset TWI Interface
		TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     c3e:	84 e0       	ldi	r24, 0x04	; 4
     c40:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
		(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
		(0<<TWWC);                                 //
	}
     c44:	ff 91       	pop	r31
     c46:	ef 91       	pop	r30
     c48:	bf 91       	pop	r27
     c4a:	af 91       	pop	r26
     c4c:	9f 91       	pop	r25
     c4e:	8f 91       	pop	r24
     c50:	3f 91       	pop	r19
     c52:	2f 91       	pop	r18
     c54:	0f 90       	pop	r0
     c56:	0b be       	out	0x3b, r0	; 59
     c58:	0f 90       	pop	r0
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	0f 90       	pop	r0
     c5e:	1f 90       	pop	r1
     c60:	18 95       	reti

00000c62 <uart_Transmit>:
}

void uart_Transmit( unsigned char data ){
	
	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     c62:	e0 ec       	ldi	r30, 0xC0	; 192
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	90 81       	ld	r25, Z
     c68:	95 ff       	sbrs	r25, 5
     c6a:	fd cf       	rjmp	.-6      	; 0xc66 <uart_Transmit+0x4>
	
	//Put data into buffer, sends the data
	UDR0 = data;
     c6c:	80 93 c6 00 	sts	0x00C6, r24
     c70:	08 95       	ret

00000c72 <uart_Receive>:

unsigned char uart_Receive(void){
	
	//Wait for data to be received
	
	while( !(UCSR0A & (1<<RXC0)) );
     c72:	e0 ec       	ldi	r30, 0xC0	; 192
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	88 23       	and	r24, r24
     c7a:	ec f7       	brge	.-6      	; 0xc76 <uart_Receive+0x4>
	
	//Get and return received data from buffer
	
	return UDR0;
     c7c:	80 91 c6 00 	lds	r24, 0x00C6
}
     c80:	08 95       	ret

00000c82 <uart_Init>:
#include "uart.h"

void uart_Init(unsigned int ubrr){
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     c82:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     c86:	80 93 c4 00 	sts	0x00C4, r24
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     c8a:	88 e1       	ldi	r24, 0x18	; 24
     c8c:	80 93 c1 00 	sts	0x00C1, r24
	
	//Set frame format: 8data, 1stop bit
	UCSR0C = (1 << 7)|(3<<UCSZ00);//here, 7 replaces URSEL0 from ATmega162 project
     c90:	86 e8       	ldi	r24, 0x86	; 134
     c92:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(uart_Transmit, uart_Receive);
     c96:	69 e3       	ldi	r22, 0x39	; 57
     c98:	76 e0       	ldi	r23, 0x06	; 6
     c9a:	81 e3       	ldi	r24, 0x31	; 49
     c9c:	96 e0       	ldi	r25, 0x06	; 6
     c9e:	92 c7       	rjmp	.+3876   	; 0x1bc4 <fdevopen>
     ca0:	08 95       	ret

00000ca2 <__subsf3>:
     ca2:	50 58       	subi	r21, 0x80	; 128

00000ca4 <__addsf3>:
     ca4:	bb 27       	eor	r27, r27
     ca6:	aa 27       	eor	r26, r26
     ca8:	0e d0       	rcall	.+28     	; 0xcc6 <__addsf3x>
     caa:	4d c1       	rjmp	.+666    	; 0xf46 <__fp_round>
     cac:	3e d1       	rcall	.+636    	; 0xf2a <__fp_pscA>
     cae:	30 f0       	brcs	.+12     	; 0xcbc <__addsf3+0x18>
     cb0:	43 d1       	rcall	.+646    	; 0xf38 <__fp_pscB>
     cb2:	20 f0       	brcs	.+8      	; 0xcbc <__addsf3+0x18>
     cb4:	31 f4       	brne	.+12     	; 0xcc2 <__addsf3+0x1e>
     cb6:	9f 3f       	cpi	r25, 0xFF	; 255
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__addsf3+0x1a>
     cba:	1e f4       	brtc	.+6      	; 0xcc2 <__addsf3+0x1e>
     cbc:	33 c1       	rjmp	.+614    	; 0xf24 <__fp_nan>
     cbe:	0e f4       	brtc	.+2      	; 0xcc2 <__addsf3+0x1e>
     cc0:	e0 95       	com	r30
     cc2:	e7 fb       	bst	r30, 7
     cc4:	29 c1       	rjmp	.+594    	; 0xf18 <__fp_inf>

00000cc6 <__addsf3x>:
     cc6:	e9 2f       	mov	r30, r25
     cc8:	4f d1       	rcall	.+670    	; 0xf68 <__fp_split3>
     cca:	80 f3       	brcs	.-32     	; 0xcac <__addsf3+0x8>
     ccc:	ba 17       	cp	r27, r26
     cce:	62 07       	cpc	r22, r18
     cd0:	73 07       	cpc	r23, r19
     cd2:	84 07       	cpc	r24, r20
     cd4:	95 07       	cpc	r25, r21
     cd6:	18 f0       	brcs	.+6      	; 0xcde <__addsf3x+0x18>
     cd8:	71 f4       	brne	.+28     	; 0xcf6 <__addsf3x+0x30>
     cda:	9e f5       	brtc	.+102    	; 0xd42 <__addsf3x+0x7c>
     cdc:	67 c1       	rjmp	.+718    	; 0xfac <__fp_zero>
     cde:	0e f4       	brtc	.+2      	; 0xce2 <__addsf3x+0x1c>
     ce0:	e0 95       	com	r30
     ce2:	0b 2e       	mov	r0, r27
     ce4:	ba 2f       	mov	r27, r26
     ce6:	a0 2d       	mov	r26, r0
     ce8:	0b 01       	movw	r0, r22
     cea:	b9 01       	movw	r22, r18
     cec:	90 01       	movw	r18, r0
     cee:	0c 01       	movw	r0, r24
     cf0:	ca 01       	movw	r24, r20
     cf2:	a0 01       	movw	r20, r0
     cf4:	11 24       	eor	r1, r1
     cf6:	ff 27       	eor	r31, r31
     cf8:	59 1b       	sub	r21, r25
     cfa:	99 f0       	breq	.+38     	; 0xd22 <__addsf3x+0x5c>
     cfc:	59 3f       	cpi	r21, 0xF9	; 249
     cfe:	50 f4       	brcc	.+20     	; 0xd14 <__addsf3x+0x4e>
     d00:	50 3e       	cpi	r21, 0xE0	; 224
     d02:	68 f1       	brcs	.+90     	; 0xd5e <__addsf3x+0x98>
     d04:	1a 16       	cp	r1, r26
     d06:	f0 40       	sbci	r31, 0x00	; 0
     d08:	a2 2f       	mov	r26, r18
     d0a:	23 2f       	mov	r18, r19
     d0c:	34 2f       	mov	r19, r20
     d0e:	44 27       	eor	r20, r20
     d10:	58 5f       	subi	r21, 0xF8	; 248
     d12:	f3 cf       	rjmp	.-26     	; 0xcfa <__addsf3x+0x34>
     d14:	46 95       	lsr	r20
     d16:	37 95       	ror	r19
     d18:	27 95       	ror	r18
     d1a:	a7 95       	ror	r26
     d1c:	f0 40       	sbci	r31, 0x00	; 0
     d1e:	53 95       	inc	r21
     d20:	c9 f7       	brne	.-14     	; 0xd14 <__addsf3x+0x4e>
     d22:	7e f4       	brtc	.+30     	; 0xd42 <__addsf3x+0x7c>
     d24:	1f 16       	cp	r1, r31
     d26:	ba 0b       	sbc	r27, r26
     d28:	62 0b       	sbc	r22, r18
     d2a:	73 0b       	sbc	r23, r19
     d2c:	84 0b       	sbc	r24, r20
     d2e:	ba f0       	brmi	.+46     	; 0xd5e <__addsf3x+0x98>
     d30:	91 50       	subi	r25, 0x01	; 1
     d32:	a1 f0       	breq	.+40     	; 0xd5c <__addsf3x+0x96>
     d34:	ff 0f       	add	r31, r31
     d36:	bb 1f       	adc	r27, r27
     d38:	66 1f       	adc	r22, r22
     d3a:	77 1f       	adc	r23, r23
     d3c:	88 1f       	adc	r24, r24
     d3e:	c2 f7       	brpl	.-16     	; 0xd30 <__addsf3x+0x6a>
     d40:	0e c0       	rjmp	.+28     	; 0xd5e <__addsf3x+0x98>
     d42:	ba 0f       	add	r27, r26
     d44:	62 1f       	adc	r22, r18
     d46:	73 1f       	adc	r23, r19
     d48:	84 1f       	adc	r24, r20
     d4a:	48 f4       	brcc	.+18     	; 0xd5e <__addsf3x+0x98>
     d4c:	87 95       	ror	r24
     d4e:	77 95       	ror	r23
     d50:	67 95       	ror	r22
     d52:	b7 95       	ror	r27
     d54:	f7 95       	ror	r31
     d56:	9e 3f       	cpi	r25, 0xFE	; 254
     d58:	08 f0       	brcs	.+2      	; 0xd5c <__addsf3x+0x96>
     d5a:	b3 cf       	rjmp	.-154    	; 0xcc2 <__addsf3+0x1e>
     d5c:	93 95       	inc	r25
     d5e:	88 0f       	add	r24, r24
     d60:	08 f0       	brcs	.+2      	; 0xd64 <__addsf3x+0x9e>
     d62:	99 27       	eor	r25, r25
     d64:	ee 0f       	add	r30, r30
     d66:	97 95       	ror	r25
     d68:	87 95       	ror	r24
     d6a:	08 95       	ret

00000d6c <__divsf3>:
     d6c:	0c d0       	rcall	.+24     	; 0xd86 <__divsf3x>
     d6e:	eb c0       	rjmp	.+470    	; 0xf46 <__fp_round>
     d70:	e3 d0       	rcall	.+454    	; 0xf38 <__fp_pscB>
     d72:	40 f0       	brcs	.+16     	; 0xd84 <__divsf3+0x18>
     d74:	da d0       	rcall	.+436    	; 0xf2a <__fp_pscA>
     d76:	30 f0       	brcs	.+12     	; 0xd84 <__divsf3+0x18>
     d78:	21 f4       	brne	.+8      	; 0xd82 <__divsf3+0x16>
     d7a:	5f 3f       	cpi	r21, 0xFF	; 255
     d7c:	19 f0       	breq	.+6      	; 0xd84 <__divsf3+0x18>
     d7e:	cc c0       	rjmp	.+408    	; 0xf18 <__fp_inf>
     d80:	51 11       	cpse	r21, r1
     d82:	15 c1       	rjmp	.+554    	; 0xfae <__fp_szero>
     d84:	cf c0       	rjmp	.+414    	; 0xf24 <__fp_nan>

00000d86 <__divsf3x>:
     d86:	f0 d0       	rcall	.+480    	; 0xf68 <__fp_split3>
     d88:	98 f3       	brcs	.-26     	; 0xd70 <__divsf3+0x4>

00000d8a <__divsf3_pse>:
     d8a:	99 23       	and	r25, r25
     d8c:	c9 f3       	breq	.-14     	; 0xd80 <__divsf3+0x14>
     d8e:	55 23       	and	r21, r21
     d90:	b1 f3       	breq	.-20     	; 0xd7e <__divsf3+0x12>
     d92:	95 1b       	sub	r25, r21
     d94:	55 0b       	sbc	r21, r21
     d96:	bb 27       	eor	r27, r27
     d98:	aa 27       	eor	r26, r26
     d9a:	62 17       	cp	r22, r18
     d9c:	73 07       	cpc	r23, r19
     d9e:	84 07       	cpc	r24, r20
     da0:	38 f0       	brcs	.+14     	; 0xdb0 <__divsf3_pse+0x26>
     da2:	9f 5f       	subi	r25, 0xFF	; 255
     da4:	5f 4f       	sbci	r21, 0xFF	; 255
     da6:	22 0f       	add	r18, r18
     da8:	33 1f       	adc	r19, r19
     daa:	44 1f       	adc	r20, r20
     dac:	aa 1f       	adc	r26, r26
     dae:	a9 f3       	breq	.-22     	; 0xd9a <__divsf3_pse+0x10>
     db0:	33 d0       	rcall	.+102    	; 0xe18 <__divsf3_pse+0x8e>
     db2:	0e 2e       	mov	r0, r30
     db4:	3a f0       	brmi	.+14     	; 0xdc4 <__divsf3_pse+0x3a>
     db6:	e0 e8       	ldi	r30, 0x80	; 128
     db8:	30 d0       	rcall	.+96     	; 0xe1a <__divsf3_pse+0x90>
     dba:	91 50       	subi	r25, 0x01	; 1
     dbc:	50 40       	sbci	r21, 0x00	; 0
     dbe:	e6 95       	lsr	r30
     dc0:	00 1c       	adc	r0, r0
     dc2:	ca f7       	brpl	.-14     	; 0xdb6 <__divsf3_pse+0x2c>
     dc4:	29 d0       	rcall	.+82     	; 0xe18 <__divsf3_pse+0x8e>
     dc6:	fe 2f       	mov	r31, r30
     dc8:	27 d0       	rcall	.+78     	; 0xe18 <__divsf3_pse+0x8e>
     dca:	66 0f       	add	r22, r22
     dcc:	77 1f       	adc	r23, r23
     dce:	88 1f       	adc	r24, r24
     dd0:	bb 1f       	adc	r27, r27
     dd2:	26 17       	cp	r18, r22
     dd4:	37 07       	cpc	r19, r23
     dd6:	48 07       	cpc	r20, r24
     dd8:	ab 07       	cpc	r26, r27
     dda:	b0 e8       	ldi	r27, 0x80	; 128
     ddc:	09 f0       	breq	.+2      	; 0xde0 <__divsf3_pse+0x56>
     dde:	bb 0b       	sbc	r27, r27
     de0:	80 2d       	mov	r24, r0
     de2:	bf 01       	movw	r22, r30
     de4:	ff 27       	eor	r31, r31
     de6:	93 58       	subi	r25, 0x83	; 131
     de8:	5f 4f       	sbci	r21, 0xFF	; 255
     dea:	2a f0       	brmi	.+10     	; 0xdf6 <__divsf3_pse+0x6c>
     dec:	9e 3f       	cpi	r25, 0xFE	; 254
     dee:	51 05       	cpc	r21, r1
     df0:	68 f0       	brcs	.+26     	; 0xe0c <__divsf3_pse+0x82>
     df2:	92 c0       	rjmp	.+292    	; 0xf18 <__fp_inf>
     df4:	dc c0       	rjmp	.+440    	; 0xfae <__fp_szero>
     df6:	5f 3f       	cpi	r21, 0xFF	; 255
     df8:	ec f3       	brlt	.-6      	; 0xdf4 <__divsf3_pse+0x6a>
     dfa:	98 3e       	cpi	r25, 0xE8	; 232
     dfc:	dc f3       	brlt	.-10     	; 0xdf4 <__divsf3_pse+0x6a>
     dfe:	86 95       	lsr	r24
     e00:	77 95       	ror	r23
     e02:	67 95       	ror	r22
     e04:	b7 95       	ror	r27
     e06:	f7 95       	ror	r31
     e08:	9f 5f       	subi	r25, 0xFF	; 255
     e0a:	c9 f7       	brne	.-14     	; 0xdfe <__divsf3_pse+0x74>
     e0c:	88 0f       	add	r24, r24
     e0e:	91 1d       	adc	r25, r1
     e10:	96 95       	lsr	r25
     e12:	87 95       	ror	r24
     e14:	97 f9       	bld	r25, 7
     e16:	08 95       	ret
     e18:	e1 e0       	ldi	r30, 0x01	; 1
     e1a:	66 0f       	add	r22, r22
     e1c:	77 1f       	adc	r23, r23
     e1e:	88 1f       	adc	r24, r24
     e20:	bb 1f       	adc	r27, r27
     e22:	62 17       	cp	r22, r18
     e24:	73 07       	cpc	r23, r19
     e26:	84 07       	cpc	r24, r20
     e28:	ba 07       	cpc	r27, r26
     e2a:	20 f0       	brcs	.+8      	; 0xe34 <__divsf3_pse+0xaa>
     e2c:	62 1b       	sub	r22, r18
     e2e:	73 0b       	sbc	r23, r19
     e30:	84 0b       	sbc	r24, r20
     e32:	ba 0b       	sbc	r27, r26
     e34:	ee 1f       	adc	r30, r30
     e36:	88 f7       	brcc	.-30     	; 0xe1a <__divsf3_pse+0x90>
     e38:	e0 95       	com	r30
     e3a:	08 95       	ret

00000e3c <__fixsfsi>:
     e3c:	04 d0       	rcall	.+8      	; 0xe46 <__fixunssfsi>
     e3e:	68 94       	set
     e40:	b1 11       	cpse	r27, r1
     e42:	b5 c0       	rjmp	.+362    	; 0xfae <__fp_szero>
     e44:	08 95       	ret

00000e46 <__fixunssfsi>:
     e46:	98 d0       	rcall	.+304    	; 0xf78 <__fp_splitA>
     e48:	88 f0       	brcs	.+34     	; 0xe6c <__fixunssfsi+0x26>
     e4a:	9f 57       	subi	r25, 0x7F	; 127
     e4c:	90 f0       	brcs	.+36     	; 0xe72 <__fixunssfsi+0x2c>
     e4e:	b9 2f       	mov	r27, r25
     e50:	99 27       	eor	r25, r25
     e52:	b7 51       	subi	r27, 0x17	; 23
     e54:	a0 f0       	brcs	.+40     	; 0xe7e <__fixunssfsi+0x38>
     e56:	d1 f0       	breq	.+52     	; 0xe8c <__fixunssfsi+0x46>
     e58:	66 0f       	add	r22, r22
     e5a:	77 1f       	adc	r23, r23
     e5c:	88 1f       	adc	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	1a f0       	brmi	.+6      	; 0xe68 <__fixunssfsi+0x22>
     e62:	ba 95       	dec	r27
     e64:	c9 f7       	brne	.-14     	; 0xe58 <__fixunssfsi+0x12>
     e66:	12 c0       	rjmp	.+36     	; 0xe8c <__fixunssfsi+0x46>
     e68:	b1 30       	cpi	r27, 0x01	; 1
     e6a:	81 f0       	breq	.+32     	; 0xe8c <__fixunssfsi+0x46>
     e6c:	9f d0       	rcall	.+318    	; 0xfac <__fp_zero>
     e6e:	b1 e0       	ldi	r27, 0x01	; 1
     e70:	08 95       	ret
     e72:	9c c0       	rjmp	.+312    	; 0xfac <__fp_zero>
     e74:	67 2f       	mov	r22, r23
     e76:	78 2f       	mov	r23, r24
     e78:	88 27       	eor	r24, r24
     e7a:	b8 5f       	subi	r27, 0xF8	; 248
     e7c:	39 f0       	breq	.+14     	; 0xe8c <__fixunssfsi+0x46>
     e7e:	b9 3f       	cpi	r27, 0xF9	; 249
     e80:	cc f3       	brlt	.-14     	; 0xe74 <__fixunssfsi+0x2e>
     e82:	86 95       	lsr	r24
     e84:	77 95       	ror	r23
     e86:	67 95       	ror	r22
     e88:	b3 95       	inc	r27
     e8a:	d9 f7       	brne	.-10     	; 0xe82 <__fixunssfsi+0x3c>
     e8c:	3e f4       	brtc	.+14     	; 0xe9c <__fixunssfsi+0x56>
     e8e:	90 95       	com	r25
     e90:	80 95       	com	r24
     e92:	70 95       	com	r23
     e94:	61 95       	neg	r22
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	8f 4f       	sbci	r24, 0xFF	; 255
     e9a:	9f 4f       	sbci	r25, 0xFF	; 255
     e9c:	08 95       	ret

00000e9e <__floatunsisf>:
     e9e:	e8 94       	clt
     ea0:	09 c0       	rjmp	.+18     	; 0xeb4 <__floatsisf+0x12>

00000ea2 <__floatsisf>:
     ea2:	97 fb       	bst	r25, 7
     ea4:	3e f4       	brtc	.+14     	; 0xeb4 <__floatsisf+0x12>
     ea6:	90 95       	com	r25
     ea8:	80 95       	com	r24
     eaa:	70 95       	com	r23
     eac:	61 95       	neg	r22
     eae:	7f 4f       	sbci	r23, 0xFF	; 255
     eb0:	8f 4f       	sbci	r24, 0xFF	; 255
     eb2:	9f 4f       	sbci	r25, 0xFF	; 255
     eb4:	99 23       	and	r25, r25
     eb6:	a9 f0       	breq	.+42     	; 0xee2 <__floatsisf+0x40>
     eb8:	f9 2f       	mov	r31, r25
     eba:	96 e9       	ldi	r25, 0x96	; 150
     ebc:	bb 27       	eor	r27, r27
     ebe:	93 95       	inc	r25
     ec0:	f6 95       	lsr	r31
     ec2:	87 95       	ror	r24
     ec4:	77 95       	ror	r23
     ec6:	67 95       	ror	r22
     ec8:	b7 95       	ror	r27
     eca:	f1 11       	cpse	r31, r1
     ecc:	f8 cf       	rjmp	.-16     	; 0xebe <__floatsisf+0x1c>
     ece:	fa f4       	brpl	.+62     	; 0xf0e <__floatsisf+0x6c>
     ed0:	bb 0f       	add	r27, r27
     ed2:	11 f4       	brne	.+4      	; 0xed8 <__floatsisf+0x36>
     ed4:	60 ff       	sbrs	r22, 0
     ed6:	1b c0       	rjmp	.+54     	; 0xf0e <__floatsisf+0x6c>
     ed8:	6f 5f       	subi	r22, 0xFF	; 255
     eda:	7f 4f       	sbci	r23, 0xFF	; 255
     edc:	8f 4f       	sbci	r24, 0xFF	; 255
     ede:	9f 4f       	sbci	r25, 0xFF	; 255
     ee0:	16 c0       	rjmp	.+44     	; 0xf0e <__floatsisf+0x6c>
     ee2:	88 23       	and	r24, r24
     ee4:	11 f0       	breq	.+4      	; 0xeea <__floatsisf+0x48>
     ee6:	96 e9       	ldi	r25, 0x96	; 150
     ee8:	11 c0       	rjmp	.+34     	; 0xf0c <__floatsisf+0x6a>
     eea:	77 23       	and	r23, r23
     eec:	21 f0       	breq	.+8      	; 0xef6 <__floatsisf+0x54>
     eee:	9e e8       	ldi	r25, 0x8E	; 142
     ef0:	87 2f       	mov	r24, r23
     ef2:	76 2f       	mov	r23, r22
     ef4:	05 c0       	rjmp	.+10     	; 0xf00 <__floatsisf+0x5e>
     ef6:	66 23       	and	r22, r22
     ef8:	71 f0       	breq	.+28     	; 0xf16 <__floatsisf+0x74>
     efa:	96 e8       	ldi	r25, 0x86	; 134
     efc:	86 2f       	mov	r24, r22
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	2a f0       	brmi	.+10     	; 0xf0e <__floatsisf+0x6c>
     f04:	9a 95       	dec	r25
     f06:	66 0f       	add	r22, r22
     f08:	77 1f       	adc	r23, r23
     f0a:	88 1f       	adc	r24, r24
     f0c:	da f7       	brpl	.-10     	; 0xf04 <__floatsisf+0x62>
     f0e:	88 0f       	add	r24, r24
     f10:	96 95       	lsr	r25
     f12:	87 95       	ror	r24
     f14:	97 f9       	bld	r25, 7
     f16:	08 95       	ret

00000f18 <__fp_inf>:
     f18:	97 f9       	bld	r25, 7
     f1a:	9f 67       	ori	r25, 0x7F	; 127
     f1c:	80 e8       	ldi	r24, 0x80	; 128
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	08 95       	ret

00000f24 <__fp_nan>:
     f24:	9f ef       	ldi	r25, 0xFF	; 255
     f26:	80 ec       	ldi	r24, 0xC0	; 192
     f28:	08 95       	ret

00000f2a <__fp_pscA>:
     f2a:	00 24       	eor	r0, r0
     f2c:	0a 94       	dec	r0
     f2e:	16 16       	cp	r1, r22
     f30:	17 06       	cpc	r1, r23
     f32:	18 06       	cpc	r1, r24
     f34:	09 06       	cpc	r0, r25
     f36:	08 95       	ret

00000f38 <__fp_pscB>:
     f38:	00 24       	eor	r0, r0
     f3a:	0a 94       	dec	r0
     f3c:	12 16       	cp	r1, r18
     f3e:	13 06       	cpc	r1, r19
     f40:	14 06       	cpc	r1, r20
     f42:	05 06       	cpc	r0, r21
     f44:	08 95       	ret

00000f46 <__fp_round>:
     f46:	09 2e       	mov	r0, r25
     f48:	03 94       	inc	r0
     f4a:	00 0c       	add	r0, r0
     f4c:	11 f4       	brne	.+4      	; 0xf52 <__fp_round+0xc>
     f4e:	88 23       	and	r24, r24
     f50:	52 f0       	brmi	.+20     	; 0xf66 <__fp_round+0x20>
     f52:	bb 0f       	add	r27, r27
     f54:	40 f4       	brcc	.+16     	; 0xf66 <__fp_round+0x20>
     f56:	bf 2b       	or	r27, r31
     f58:	11 f4       	brne	.+4      	; 0xf5e <__fp_round+0x18>
     f5a:	60 ff       	sbrs	r22, 0
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <__fp_round+0x20>
     f5e:	6f 5f       	subi	r22, 0xFF	; 255
     f60:	7f 4f       	sbci	r23, 0xFF	; 255
     f62:	8f 4f       	sbci	r24, 0xFF	; 255
     f64:	9f 4f       	sbci	r25, 0xFF	; 255
     f66:	08 95       	ret

00000f68 <__fp_split3>:
     f68:	57 fd       	sbrc	r21, 7
     f6a:	90 58       	subi	r25, 0x80	; 128
     f6c:	44 0f       	add	r20, r20
     f6e:	55 1f       	adc	r21, r21
     f70:	59 f0       	breq	.+22     	; 0xf88 <__fp_splitA+0x10>
     f72:	5f 3f       	cpi	r21, 0xFF	; 255
     f74:	71 f0       	breq	.+28     	; 0xf92 <__fp_splitA+0x1a>
     f76:	47 95       	ror	r20

00000f78 <__fp_splitA>:
     f78:	88 0f       	add	r24, r24
     f7a:	97 fb       	bst	r25, 7
     f7c:	99 1f       	adc	r25, r25
     f7e:	61 f0       	breq	.+24     	; 0xf98 <__fp_splitA+0x20>
     f80:	9f 3f       	cpi	r25, 0xFF	; 255
     f82:	79 f0       	breq	.+30     	; 0xfa2 <__fp_splitA+0x2a>
     f84:	87 95       	ror	r24
     f86:	08 95       	ret
     f88:	12 16       	cp	r1, r18
     f8a:	13 06       	cpc	r1, r19
     f8c:	14 06       	cpc	r1, r20
     f8e:	55 1f       	adc	r21, r21
     f90:	f2 cf       	rjmp	.-28     	; 0xf76 <__fp_split3+0xe>
     f92:	46 95       	lsr	r20
     f94:	f1 df       	rcall	.-30     	; 0xf78 <__fp_splitA>
     f96:	08 c0       	rjmp	.+16     	; 0xfa8 <__fp_splitA+0x30>
     f98:	16 16       	cp	r1, r22
     f9a:	17 06       	cpc	r1, r23
     f9c:	18 06       	cpc	r1, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	f1 cf       	rjmp	.-30     	; 0xf84 <__fp_splitA+0xc>
     fa2:	86 95       	lsr	r24
     fa4:	71 05       	cpc	r23, r1
     fa6:	61 05       	cpc	r22, r1
     fa8:	08 94       	sec
     faa:	08 95       	ret

00000fac <__fp_zero>:
     fac:	e8 94       	clt

00000fae <__fp_szero>:
     fae:	bb 27       	eor	r27, r27
     fb0:	66 27       	eor	r22, r22
     fb2:	77 27       	eor	r23, r23
     fb4:	cb 01       	movw	r24, r22
     fb6:	97 f9       	bld	r25, 7
     fb8:	08 95       	ret

00000fba <__mulsf3>:
     fba:	0b d0       	rcall	.+22     	; 0xfd2 <__mulsf3x>
     fbc:	c4 cf       	rjmp	.-120    	; 0xf46 <__fp_round>
     fbe:	b5 df       	rcall	.-150    	; 0xf2a <__fp_pscA>
     fc0:	28 f0       	brcs	.+10     	; 0xfcc <__mulsf3+0x12>
     fc2:	ba df       	rcall	.-140    	; 0xf38 <__fp_pscB>
     fc4:	18 f0       	brcs	.+6      	; 0xfcc <__mulsf3+0x12>
     fc6:	95 23       	and	r25, r21
     fc8:	09 f0       	breq	.+2      	; 0xfcc <__mulsf3+0x12>
     fca:	a6 cf       	rjmp	.-180    	; 0xf18 <__fp_inf>
     fcc:	ab cf       	rjmp	.-170    	; 0xf24 <__fp_nan>
     fce:	11 24       	eor	r1, r1
     fd0:	ee cf       	rjmp	.-36     	; 0xfae <__fp_szero>

00000fd2 <__mulsf3x>:
     fd2:	ca df       	rcall	.-108    	; 0xf68 <__fp_split3>
     fd4:	a0 f3       	brcs	.-24     	; 0xfbe <__mulsf3+0x4>

00000fd6 <__mulsf3_pse>:
     fd6:	95 9f       	mul	r25, r21
     fd8:	d1 f3       	breq	.-12     	; 0xfce <__mulsf3+0x14>
     fda:	95 0f       	add	r25, r21
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	55 1f       	adc	r21, r21
     fe0:	62 9f       	mul	r22, r18
     fe2:	f0 01       	movw	r30, r0
     fe4:	72 9f       	mul	r23, r18
     fe6:	bb 27       	eor	r27, r27
     fe8:	f0 0d       	add	r31, r0
     fea:	b1 1d       	adc	r27, r1
     fec:	63 9f       	mul	r22, r19
     fee:	aa 27       	eor	r26, r26
     ff0:	f0 0d       	add	r31, r0
     ff2:	b1 1d       	adc	r27, r1
     ff4:	aa 1f       	adc	r26, r26
     ff6:	64 9f       	mul	r22, r20
     ff8:	66 27       	eor	r22, r22
     ffa:	b0 0d       	add	r27, r0
     ffc:	a1 1d       	adc	r26, r1
     ffe:	66 1f       	adc	r22, r22
    1000:	82 9f       	mul	r24, r18
    1002:	22 27       	eor	r18, r18
    1004:	b0 0d       	add	r27, r0
    1006:	a1 1d       	adc	r26, r1
    1008:	62 1f       	adc	r22, r18
    100a:	73 9f       	mul	r23, r19
    100c:	b0 0d       	add	r27, r0
    100e:	a1 1d       	adc	r26, r1
    1010:	62 1f       	adc	r22, r18
    1012:	83 9f       	mul	r24, r19
    1014:	a0 0d       	add	r26, r0
    1016:	61 1d       	adc	r22, r1
    1018:	22 1f       	adc	r18, r18
    101a:	74 9f       	mul	r23, r20
    101c:	33 27       	eor	r19, r19
    101e:	a0 0d       	add	r26, r0
    1020:	61 1d       	adc	r22, r1
    1022:	23 1f       	adc	r18, r19
    1024:	84 9f       	mul	r24, r20
    1026:	60 0d       	add	r22, r0
    1028:	21 1d       	adc	r18, r1
    102a:	82 2f       	mov	r24, r18
    102c:	76 2f       	mov	r23, r22
    102e:	6a 2f       	mov	r22, r26
    1030:	11 24       	eor	r1, r1
    1032:	9f 57       	subi	r25, 0x7F	; 127
    1034:	50 40       	sbci	r21, 0x00	; 0
    1036:	8a f0       	brmi	.+34     	; 0x105a <__mulsf3_pse+0x84>
    1038:	e1 f0       	breq	.+56     	; 0x1072 <__mulsf3_pse+0x9c>
    103a:	88 23       	and	r24, r24
    103c:	4a f0       	brmi	.+18     	; 0x1050 <__mulsf3_pse+0x7a>
    103e:	ee 0f       	add	r30, r30
    1040:	ff 1f       	adc	r31, r31
    1042:	bb 1f       	adc	r27, r27
    1044:	66 1f       	adc	r22, r22
    1046:	77 1f       	adc	r23, r23
    1048:	88 1f       	adc	r24, r24
    104a:	91 50       	subi	r25, 0x01	; 1
    104c:	50 40       	sbci	r21, 0x00	; 0
    104e:	a9 f7       	brne	.-22     	; 0x103a <__mulsf3_pse+0x64>
    1050:	9e 3f       	cpi	r25, 0xFE	; 254
    1052:	51 05       	cpc	r21, r1
    1054:	70 f0       	brcs	.+28     	; 0x1072 <__mulsf3_pse+0x9c>
    1056:	60 cf       	rjmp	.-320    	; 0xf18 <__fp_inf>
    1058:	aa cf       	rjmp	.-172    	; 0xfae <__fp_szero>
    105a:	5f 3f       	cpi	r21, 0xFF	; 255
    105c:	ec f3       	brlt	.-6      	; 0x1058 <__mulsf3_pse+0x82>
    105e:	98 3e       	cpi	r25, 0xE8	; 232
    1060:	dc f3       	brlt	.-10     	; 0x1058 <__mulsf3_pse+0x82>
    1062:	86 95       	lsr	r24
    1064:	77 95       	ror	r23
    1066:	67 95       	ror	r22
    1068:	b7 95       	ror	r27
    106a:	f7 95       	ror	r31
    106c:	e7 95       	ror	r30
    106e:	9f 5f       	subi	r25, 0xFF	; 255
    1070:	c1 f7       	brne	.-16     	; 0x1062 <__mulsf3_pse+0x8c>
    1072:	fe 2b       	or	r31, r30
    1074:	88 0f       	add	r24, r24
    1076:	91 1d       	adc	r25, r1
    1078:	96 95       	lsr	r25
    107a:	87 95       	ror	r24
    107c:	97 f9       	bld	r25, 7
    107e:	08 95       	ret

00001080 <vfprintf>:
    1080:	2f 92       	push	r2
    1082:	3f 92       	push	r3
    1084:	4f 92       	push	r4
    1086:	5f 92       	push	r5
    1088:	6f 92       	push	r6
    108a:	7f 92       	push	r7
    108c:	8f 92       	push	r8
    108e:	9f 92       	push	r9
    1090:	af 92       	push	r10
    1092:	bf 92       	push	r11
    1094:	cf 92       	push	r12
    1096:	df 92       	push	r13
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	63 97       	sbiw	r28, 0x13	; 19
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	7c 01       	movw	r14, r24
    10b6:	1b 01       	movw	r2, r22
    10b8:	6a 01       	movw	r12, r20
    10ba:	fc 01       	movw	r30, r24
    10bc:	17 82       	std	Z+7, r1	; 0x07
    10be:	16 82       	std	Z+6, r1	; 0x06
    10c0:	83 81       	ldd	r24, Z+3	; 0x03
    10c2:	81 ff       	sbrs	r24, 1
    10c4:	49 c3       	rjmp	.+1682   	; 0x1758 <vfprintf+0x6d8>
    10c6:	be 01       	movw	r22, r28
    10c8:	6f 5f       	subi	r22, 0xFF	; 255
    10ca:	7f 4f       	sbci	r23, 0xFF	; 255
    10cc:	4b 01       	movw	r8, r22
    10ce:	f7 01       	movw	r30, r14
    10d0:	93 81       	ldd	r25, Z+3	; 0x03
    10d2:	f1 01       	movw	r30, r2
    10d4:	93 fd       	sbrc	r25, 3
    10d6:	85 91       	lpm	r24, Z+
    10d8:	93 ff       	sbrs	r25, 3
    10da:	81 91       	ld	r24, Z+
    10dc:	1f 01       	movw	r2, r30
    10de:	88 23       	and	r24, r24
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <vfprintf+0x64>
    10e2:	36 c3       	rjmp	.+1644   	; 0x1750 <vfprintf+0x6d0>
    10e4:	85 32       	cpi	r24, 0x25	; 37
    10e6:	39 f4       	brne	.+14     	; 0x10f6 <vfprintf+0x76>
    10e8:	93 fd       	sbrc	r25, 3
    10ea:	85 91       	lpm	r24, Z+
    10ec:	93 ff       	sbrs	r25, 3
    10ee:	81 91       	ld	r24, Z+
    10f0:	1f 01       	movw	r2, r30
    10f2:	85 32       	cpi	r24, 0x25	; 37
    10f4:	31 f4       	brne	.+12     	; 0x1102 <vfprintf+0x82>
    10f6:	b7 01       	movw	r22, r14
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	ae d5       	rcall	.+2908   	; 0x1c58 <fputc>
    10fc:	56 01       	movw	r10, r12
    10fe:	65 01       	movw	r12, r10
    1100:	e6 cf       	rjmp	.-52     	; 0x10ce <vfprintf+0x4e>
    1102:	10 e0       	ldi	r17, 0x00	; 0
    1104:	51 2c       	mov	r5, r1
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	20 32       	cpi	r18, 0x20	; 32
    110a:	a0 f4       	brcc	.+40     	; 0x1134 <vfprintf+0xb4>
    110c:	8b 32       	cpi	r24, 0x2B	; 43
    110e:	69 f0       	breq	.+26     	; 0x112a <vfprintf+0xaa>
    1110:	30 f4       	brcc	.+12     	; 0x111e <vfprintf+0x9e>
    1112:	80 32       	cpi	r24, 0x20	; 32
    1114:	59 f0       	breq	.+22     	; 0x112c <vfprintf+0xac>
    1116:	83 32       	cpi	r24, 0x23	; 35
    1118:	69 f4       	brne	.+26     	; 0x1134 <vfprintf+0xb4>
    111a:	20 61       	ori	r18, 0x10	; 16
    111c:	2c c0       	rjmp	.+88     	; 0x1176 <vfprintf+0xf6>
    111e:	8d 32       	cpi	r24, 0x2D	; 45
    1120:	39 f0       	breq	.+14     	; 0x1130 <vfprintf+0xb0>
    1122:	80 33       	cpi	r24, 0x30	; 48
    1124:	39 f4       	brne	.+14     	; 0x1134 <vfprintf+0xb4>
    1126:	21 60       	ori	r18, 0x01	; 1
    1128:	26 c0       	rjmp	.+76     	; 0x1176 <vfprintf+0xf6>
    112a:	22 60       	ori	r18, 0x02	; 2
    112c:	24 60       	ori	r18, 0x04	; 4
    112e:	23 c0       	rjmp	.+70     	; 0x1176 <vfprintf+0xf6>
    1130:	28 60       	ori	r18, 0x08	; 8
    1132:	21 c0       	rjmp	.+66     	; 0x1176 <vfprintf+0xf6>
    1134:	27 fd       	sbrc	r18, 7
    1136:	27 c0       	rjmp	.+78     	; 0x1186 <vfprintf+0x106>
    1138:	30 ed       	ldi	r19, 0xD0	; 208
    113a:	38 0f       	add	r19, r24
    113c:	3a 30       	cpi	r19, 0x0A	; 10
    113e:	78 f4       	brcc	.+30     	; 0x115e <vfprintf+0xde>
    1140:	26 ff       	sbrs	r18, 6
    1142:	06 c0       	rjmp	.+12     	; 0x1150 <vfprintf+0xd0>
    1144:	fa e0       	ldi	r31, 0x0A	; 10
    1146:	1f 9f       	mul	r17, r31
    1148:	30 0d       	add	r19, r0
    114a:	11 24       	eor	r1, r1
    114c:	13 2f       	mov	r17, r19
    114e:	13 c0       	rjmp	.+38     	; 0x1176 <vfprintf+0xf6>
    1150:	6a e0       	ldi	r22, 0x0A	; 10
    1152:	56 9e       	mul	r5, r22
    1154:	30 0d       	add	r19, r0
    1156:	11 24       	eor	r1, r1
    1158:	53 2e       	mov	r5, r19
    115a:	20 62       	ori	r18, 0x20	; 32
    115c:	0c c0       	rjmp	.+24     	; 0x1176 <vfprintf+0xf6>
    115e:	8e 32       	cpi	r24, 0x2E	; 46
    1160:	21 f4       	brne	.+8      	; 0x116a <vfprintf+0xea>
    1162:	26 fd       	sbrc	r18, 6
    1164:	f5 c2       	rjmp	.+1514   	; 0x1750 <vfprintf+0x6d0>
    1166:	20 64       	ori	r18, 0x40	; 64
    1168:	06 c0       	rjmp	.+12     	; 0x1176 <vfprintf+0xf6>
    116a:	8c 36       	cpi	r24, 0x6C	; 108
    116c:	11 f4       	brne	.+4      	; 0x1172 <vfprintf+0xf2>
    116e:	20 68       	ori	r18, 0x80	; 128
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <vfprintf+0xf6>
    1172:	88 36       	cpi	r24, 0x68	; 104
    1174:	41 f4       	brne	.+16     	; 0x1186 <vfprintf+0x106>
    1176:	f1 01       	movw	r30, r2
    1178:	93 fd       	sbrc	r25, 3
    117a:	85 91       	lpm	r24, Z+
    117c:	93 ff       	sbrs	r25, 3
    117e:	81 91       	ld	r24, Z+
    1180:	1f 01       	movw	r2, r30
    1182:	81 11       	cpse	r24, r1
    1184:	c1 cf       	rjmp	.-126    	; 0x1108 <vfprintf+0x88>
    1186:	9b eb       	ldi	r25, 0xBB	; 187
    1188:	98 0f       	add	r25, r24
    118a:	93 30       	cpi	r25, 0x03	; 3
    118c:	18 f4       	brcc	.+6      	; 0x1194 <vfprintf+0x114>
    118e:	20 61       	ori	r18, 0x10	; 16
    1190:	80 5e       	subi	r24, 0xE0	; 224
    1192:	06 c0       	rjmp	.+12     	; 0x11a0 <vfprintf+0x120>
    1194:	9b e9       	ldi	r25, 0x9B	; 155
    1196:	98 0f       	add	r25, r24
    1198:	93 30       	cpi	r25, 0x03	; 3
    119a:	08 f0       	brcs	.+2      	; 0x119e <vfprintf+0x11e>
    119c:	9a c1       	rjmp	.+820    	; 0x14d2 <vfprintf+0x452>
    119e:	2f 7e       	andi	r18, 0xEF	; 239
    11a0:	26 ff       	sbrs	r18, 6
    11a2:	16 e0       	ldi	r17, 0x06	; 6
    11a4:	2f 73       	andi	r18, 0x3F	; 63
    11a6:	72 2e       	mov	r7, r18
    11a8:	85 36       	cpi	r24, 0x65	; 101
    11aa:	21 f4       	brne	.+8      	; 0x11b4 <vfprintf+0x134>
    11ac:	f2 2f       	mov	r31, r18
    11ae:	f0 64       	ori	r31, 0x40	; 64
    11b0:	7f 2e       	mov	r7, r31
    11b2:	08 c0       	rjmp	.+16     	; 0x11c4 <vfprintf+0x144>
    11b4:	86 36       	cpi	r24, 0x66	; 102
    11b6:	21 f4       	brne	.+8      	; 0x11c0 <vfprintf+0x140>
    11b8:	62 2f       	mov	r22, r18
    11ba:	60 68       	ori	r22, 0x80	; 128
    11bc:	76 2e       	mov	r7, r22
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <vfprintf+0x144>
    11c0:	11 11       	cpse	r17, r1
    11c2:	11 50       	subi	r17, 0x01	; 1
    11c4:	77 fe       	sbrs	r7, 7
    11c6:	07 c0       	rjmp	.+14     	; 0x11d6 <vfprintf+0x156>
    11c8:	1c 33       	cpi	r17, 0x3C	; 60
    11ca:	48 f4       	brcc	.+18     	; 0x11de <vfprintf+0x15e>
    11cc:	44 24       	eor	r4, r4
    11ce:	43 94       	inc	r4
    11d0:	41 0e       	add	r4, r17
    11d2:	27 e0       	ldi	r18, 0x07	; 7
    11d4:	0b c0       	rjmp	.+22     	; 0x11ec <vfprintf+0x16c>
    11d6:	18 30       	cpi	r17, 0x08	; 8
    11d8:	30 f4       	brcc	.+12     	; 0x11e6 <vfprintf+0x166>
    11da:	21 2f       	mov	r18, r17
    11dc:	06 c0       	rjmp	.+12     	; 0x11ea <vfprintf+0x16a>
    11de:	27 e0       	ldi	r18, 0x07	; 7
    11e0:	4c e3       	ldi	r20, 0x3C	; 60
    11e2:	44 2e       	mov	r4, r20
    11e4:	03 c0       	rjmp	.+6      	; 0x11ec <vfprintf+0x16c>
    11e6:	27 e0       	ldi	r18, 0x07	; 7
    11e8:	17 e0       	ldi	r17, 0x07	; 7
    11ea:	41 2c       	mov	r4, r1
    11ec:	56 01       	movw	r10, r12
    11ee:	74 e0       	ldi	r23, 0x04	; 4
    11f0:	a7 0e       	add	r10, r23
    11f2:	b1 1c       	adc	r11, r1
    11f4:	f6 01       	movw	r30, r12
    11f6:	60 81       	ld	r22, Z
    11f8:	71 81       	ldd	r23, Z+1	; 0x01
    11fa:	82 81       	ldd	r24, Z+2	; 0x02
    11fc:	93 81       	ldd	r25, Z+3	; 0x03
    11fe:	04 2d       	mov	r16, r4
    1200:	a4 01       	movw	r20, r8
    1202:	f2 d3       	rcall	.+2020   	; 0x19e8 <__ftoa_engine>
    1204:	6c 01       	movw	r12, r24
    1206:	09 81       	ldd	r16, Y+1	; 0x01
    1208:	00 ff       	sbrs	r16, 0
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <vfprintf+0x190>
    120c:	03 ff       	sbrs	r16, 3
    120e:	06 c0       	rjmp	.+12     	; 0x121c <vfprintf+0x19c>
    1210:	71 fc       	sbrc	r7, 1
    1212:	07 c0       	rjmp	.+14     	; 0x1222 <vfprintf+0x1a2>
    1214:	72 fc       	sbrc	r7, 2
    1216:	08 c0       	rjmp	.+16     	; 0x1228 <vfprintf+0x1a8>
    1218:	61 2c       	mov	r6, r1
    121a:	08 c0       	rjmp	.+16     	; 0x122c <vfprintf+0x1ac>
    121c:	3d e2       	ldi	r19, 0x2D	; 45
    121e:	63 2e       	mov	r6, r19
    1220:	05 c0       	rjmp	.+10     	; 0x122c <vfprintf+0x1ac>
    1222:	2b e2       	ldi	r18, 0x2B	; 43
    1224:	62 2e       	mov	r6, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <vfprintf+0x1ac>
    1228:	90 e2       	ldi	r25, 0x20	; 32
    122a:	69 2e       	mov	r6, r25
    122c:	80 2f       	mov	r24, r16
    122e:	8c 70       	andi	r24, 0x0C	; 12
    1230:	81 f1       	breq	.+96     	; 0x1292 <vfprintf+0x212>
    1232:	66 20       	and	r6, r6
    1234:	11 f0       	breq	.+4      	; 0x123a <vfprintf+0x1ba>
    1236:	84 e0       	ldi	r24, 0x04	; 4
    1238:	01 c0       	rjmp	.+2      	; 0x123c <vfprintf+0x1bc>
    123a:	83 e0       	ldi	r24, 0x03	; 3
    123c:	85 15       	cp	r24, r5
    123e:	10 f0       	brcs	.+4      	; 0x1244 <vfprintf+0x1c4>
    1240:	51 2c       	mov	r5, r1
    1242:	0a c0       	rjmp	.+20     	; 0x1258 <vfprintf+0x1d8>
    1244:	58 1a       	sub	r5, r24
    1246:	73 fc       	sbrc	r7, 3
    1248:	07 c0       	rjmp	.+14     	; 0x1258 <vfprintf+0x1d8>
    124a:	b7 01       	movw	r22, r14
    124c:	80 e2       	ldi	r24, 0x20	; 32
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	03 d5       	rcall	.+2566   	; 0x1c58 <fputc>
    1252:	5a 94       	dec	r5
    1254:	d1 f7       	brne	.-12     	; 0x124a <vfprintf+0x1ca>
    1256:	f4 cf       	rjmp	.-24     	; 0x1240 <vfprintf+0x1c0>
    1258:	66 20       	and	r6, r6
    125a:	21 f0       	breq	.+8      	; 0x1264 <vfprintf+0x1e4>
    125c:	b7 01       	movw	r22, r14
    125e:	86 2d       	mov	r24, r6
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	fa d4       	rcall	.+2548   	; 0x1c58 <fputc>
    1264:	03 fd       	sbrc	r16, 3
    1266:	03 c0       	rjmp	.+6      	; 0x126e <vfprintf+0x1ee>
    1268:	0a e8       	ldi	r16, 0x8A	; 138
    126a:	11 e0       	ldi	r17, 0x01	; 1
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <vfprintf+0x1f2>
    126e:	06 e8       	ldi	r16, 0x86	; 134
    1270:	11 e0       	ldi	r17, 0x01	; 1
    1272:	f7 2d       	mov	r31, r7
    1274:	f0 71       	andi	r31, 0x10	; 16
    1276:	7f 2e       	mov	r7, r31
    1278:	f8 01       	movw	r30, r16
    127a:	84 91       	lpm	r24, Z
    127c:	88 23       	and	r24, r24
    127e:	09 f4       	brne	.+2      	; 0x1282 <vfprintf+0x202>
    1280:	5e c2       	rjmp	.+1212   	; 0x173e <vfprintf+0x6be>
    1282:	71 10       	cpse	r7, r1
    1284:	80 52       	subi	r24, 0x20	; 32
    1286:	b7 01       	movw	r22, r14
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	e6 d4       	rcall	.+2508   	; 0x1c58 <fputc>
    128c:	0f 5f       	subi	r16, 0xFF	; 255
    128e:	1f 4f       	sbci	r17, 0xFF	; 255
    1290:	f3 cf       	rjmp	.-26     	; 0x1278 <vfprintf+0x1f8>
    1292:	77 fe       	sbrs	r7, 7
    1294:	0f c0       	rjmp	.+30     	; 0x12b4 <vfprintf+0x234>
    1296:	4c 0c       	add	r4, r12
    1298:	04 ff       	sbrs	r16, 4
    129a:	04 c0       	rjmp	.+8      	; 0x12a4 <vfprintf+0x224>
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	81 33       	cpi	r24, 0x31	; 49
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <vfprintf+0x224>
    12a2:	4a 94       	dec	r4
    12a4:	14 14       	cp	r1, r4
    12a6:	74 f5       	brge	.+92     	; 0x1304 <vfprintf+0x284>
    12a8:	f8 e0       	ldi	r31, 0x08	; 8
    12aa:	f4 15       	cp	r31, r4
    12ac:	78 f5       	brcc	.+94     	; 0x130c <vfprintf+0x28c>
    12ae:	88 e0       	ldi	r24, 0x08	; 8
    12b0:	48 2e       	mov	r4, r24
    12b2:	2c c0       	rjmp	.+88     	; 0x130c <vfprintf+0x28c>
    12b4:	76 fc       	sbrc	r7, 6
    12b6:	2a c0       	rjmp	.+84     	; 0x130c <vfprintf+0x28c>
    12b8:	81 2f       	mov	r24, r17
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	8c 15       	cp	r24, r12
    12be:	9d 05       	cpc	r25, r13
    12c0:	9c f0       	brlt	.+38     	; 0x12e8 <vfprintf+0x268>
    12c2:	6c ef       	ldi	r22, 0xFC	; 252
    12c4:	c6 16       	cp	r12, r22
    12c6:	6f ef       	ldi	r22, 0xFF	; 255
    12c8:	d6 06       	cpc	r13, r22
    12ca:	74 f0       	brlt	.+28     	; 0x12e8 <vfprintf+0x268>
    12cc:	77 2d       	mov	r23, r7
    12ce:	70 68       	ori	r23, 0x80	; 128
    12d0:	77 2e       	mov	r7, r23
    12d2:	0a c0       	rjmp	.+20     	; 0x12e8 <vfprintf+0x268>
    12d4:	e2 e0       	ldi	r30, 0x02	; 2
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	ec 0f       	add	r30, r28
    12da:	fd 1f       	adc	r31, r29
    12dc:	e1 0f       	add	r30, r17
    12de:	f1 1d       	adc	r31, r1
    12e0:	80 81       	ld	r24, Z
    12e2:	80 33       	cpi	r24, 0x30	; 48
    12e4:	19 f4       	brne	.+6      	; 0x12ec <vfprintf+0x26c>
    12e6:	11 50       	subi	r17, 0x01	; 1
    12e8:	11 11       	cpse	r17, r1
    12ea:	f4 cf       	rjmp	.-24     	; 0x12d4 <vfprintf+0x254>
    12ec:	77 fe       	sbrs	r7, 7
    12ee:	0e c0       	rjmp	.+28     	; 0x130c <vfprintf+0x28c>
    12f0:	44 24       	eor	r4, r4
    12f2:	43 94       	inc	r4
    12f4:	41 0e       	add	r4, r17
    12f6:	81 2f       	mov	r24, r17
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	c8 16       	cp	r12, r24
    12fc:	d9 06       	cpc	r13, r25
    12fe:	2c f4       	brge	.+10     	; 0x130a <vfprintf+0x28a>
    1300:	1c 19       	sub	r17, r12
    1302:	04 c0       	rjmp	.+8      	; 0x130c <vfprintf+0x28c>
    1304:	44 24       	eor	r4, r4
    1306:	43 94       	inc	r4
    1308:	01 c0       	rjmp	.+2      	; 0x130c <vfprintf+0x28c>
    130a:	10 e0       	ldi	r17, 0x00	; 0
    130c:	77 fe       	sbrs	r7, 7
    130e:	07 c0       	rjmp	.+14     	; 0x131e <vfprintf+0x29e>
    1310:	1c 14       	cp	r1, r12
    1312:	1d 04       	cpc	r1, r13
    1314:	3c f4       	brge	.+14     	; 0x1324 <vfprintf+0x2a4>
    1316:	96 01       	movw	r18, r12
    1318:	2f 5f       	subi	r18, 0xFF	; 255
    131a:	3f 4f       	sbci	r19, 0xFF	; 255
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <vfprintf+0x2a8>
    131e:	25 e0       	ldi	r18, 0x05	; 5
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <vfprintf+0x2a8>
    1324:	21 e0       	ldi	r18, 0x01	; 1
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	66 20       	and	r6, r6
    132a:	11 f0       	breq	.+4      	; 0x1330 <vfprintf+0x2b0>
    132c:	2f 5f       	subi	r18, 0xFF	; 255
    132e:	3f 4f       	sbci	r19, 0xFF	; 255
    1330:	11 23       	and	r17, r17
    1332:	31 f0       	breq	.+12     	; 0x1340 <vfprintf+0x2c0>
    1334:	41 2f       	mov	r20, r17
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	4f 5f       	subi	r20, 0xFF	; 255
    133a:	5f 4f       	sbci	r21, 0xFF	; 255
    133c:	24 0f       	add	r18, r20
    133e:	35 1f       	adc	r19, r21
    1340:	45 2d       	mov	r20, r5
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	24 17       	cp	r18, r20
    1346:	35 07       	cpc	r19, r21
    1348:	14 f4       	brge	.+4      	; 0x134e <vfprintf+0x2ce>
    134a:	52 1a       	sub	r5, r18
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <vfprintf+0x2d0>
    134e:	51 2c       	mov	r5, r1
    1350:	87 2d       	mov	r24, r7
    1352:	89 70       	andi	r24, 0x09	; 9
    1354:	41 f4       	brne	.+16     	; 0x1366 <vfprintf+0x2e6>
    1356:	55 20       	and	r5, r5
    1358:	31 f0       	breq	.+12     	; 0x1366 <vfprintf+0x2e6>
    135a:	b7 01       	movw	r22, r14
    135c:	80 e2       	ldi	r24, 0x20	; 32
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	7b d4       	rcall	.+2294   	; 0x1c58 <fputc>
    1362:	5a 94       	dec	r5
    1364:	f8 cf       	rjmp	.-16     	; 0x1356 <vfprintf+0x2d6>
    1366:	66 20       	and	r6, r6
    1368:	21 f0       	breq	.+8      	; 0x1372 <vfprintf+0x2f2>
    136a:	b7 01       	movw	r22, r14
    136c:	86 2d       	mov	r24, r6
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	73 d4       	rcall	.+2278   	; 0x1c58 <fputc>
    1372:	73 fc       	sbrc	r7, 3
    1374:	08 c0       	rjmp	.+16     	; 0x1386 <vfprintf+0x306>
    1376:	55 20       	and	r5, r5
    1378:	31 f0       	breq	.+12     	; 0x1386 <vfprintf+0x306>
    137a:	b7 01       	movw	r22, r14
    137c:	80 e3       	ldi	r24, 0x30	; 48
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	6b d4       	rcall	.+2262   	; 0x1c58 <fputc>
    1382:	5a 94       	dec	r5
    1384:	f8 cf       	rjmp	.-16     	; 0x1376 <vfprintf+0x2f6>
    1386:	77 fe       	sbrs	r7, 7
    1388:	5d c0       	rjmp	.+186    	; 0x1444 <vfprintf+0x3c4>
    138a:	9c 2d       	mov	r25, r12
    138c:	8d 2d       	mov	r24, r13
    138e:	d7 fe       	sbrs	r13, 7
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <vfprintf+0x316>
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	69 2e       	mov	r6, r25
    1398:	78 2e       	mov	r7, r24
    139a:	40 e0       	ldi	r20, 0x00	; 0
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	c6 01       	movw	r24, r12
    13a0:	84 19       	sub	r24, r4
    13a2:	91 09       	sbc	r25, r1
    13a4:	9d 87       	std	Y+13, r25	; 0x0d
    13a6:	8c 87       	std	Y+12, r24	; 0x0c
    13a8:	96 01       	movw	r18, r12
    13aa:	26 19       	sub	r18, r6
    13ac:	37 09       	sbc	r19, r7
    13ae:	28 0d       	add	r18, r8
    13b0:	39 1d       	adc	r19, r9
    13b2:	81 2f       	mov	r24, r17
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	ee 27       	eor	r30, r30
    13b8:	ff 27       	eor	r31, r31
    13ba:	e8 1b       	sub	r30, r24
    13bc:	f9 0b       	sbc	r31, r25
    13be:	ff 87       	std	Y+15, r31	; 0x0f
    13c0:	ee 87       	std	Y+14, r30	; 0x0e
    13c2:	ff ef       	ldi	r31, 0xFF	; 255
    13c4:	6f 16       	cp	r6, r31
    13c6:	7f 06       	cpc	r7, r31
    13c8:	61 f4       	brne	.+24     	; 0x13e2 <vfprintf+0x362>
    13ca:	b7 01       	movw	r22, r14
    13cc:	8e e2       	ldi	r24, 0x2E	; 46
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	2b 8b       	std	Y+19, r18	; 0x13
    13d2:	3a 8b       	std	Y+18, r19	; 0x12
    13d4:	48 8b       	std	Y+16, r20	; 0x10
    13d6:	59 8b       	std	Y+17, r21	; 0x11
    13d8:	3f d4       	rcall	.+2174   	; 0x1c58 <fputc>
    13da:	59 89       	ldd	r21, Y+17	; 0x11
    13dc:	48 89       	ldd	r20, Y+16	; 0x10
    13de:	3a 89       	ldd	r19, Y+18	; 0x12
    13e0:	2b 89       	ldd	r18, Y+19	; 0x13
    13e2:	c6 14       	cp	r12, r6
    13e4:	d7 04       	cpc	r13, r7
    13e6:	54 f0       	brlt	.+20     	; 0x13fc <vfprintf+0x37c>
    13e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    13ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    13ec:	66 15       	cp	r22, r6
    13ee:	77 05       	cpc	r23, r7
    13f0:	2c f4       	brge	.+10     	; 0x13fc <vfprintf+0x37c>
    13f2:	f9 01       	movw	r30, r18
    13f4:	e4 0f       	add	r30, r20
    13f6:	f5 1f       	adc	r31, r21
    13f8:	81 81       	ldd	r24, Z+1	; 0x01
    13fa:	01 c0       	rjmp	.+2      	; 0x13fe <vfprintf+0x37e>
    13fc:	80 e3       	ldi	r24, 0x30	; 48
    13fe:	71 e0       	ldi	r23, 0x01	; 1
    1400:	67 1a       	sub	r6, r23
    1402:	71 08       	sbc	r7, r1
    1404:	4f 5f       	subi	r20, 0xFF	; 255
    1406:	5f 4f       	sbci	r21, 0xFF	; 255
    1408:	ee 85       	ldd	r30, Y+14	; 0x0e
    140a:	ff 85       	ldd	r31, Y+15	; 0x0f
    140c:	6e 16       	cp	r6, r30
    140e:	7f 06       	cpc	r7, r31
    1410:	64 f0       	brlt	.+24     	; 0x142a <vfprintf+0x3aa>
    1412:	b7 01       	movw	r22, r14
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	2b 8b       	std	Y+19, r18	; 0x13
    1418:	3a 8b       	std	Y+18, r19	; 0x12
    141a:	48 8b       	std	Y+16, r20	; 0x10
    141c:	59 8b       	std	Y+17, r21	; 0x11
    141e:	1c d4       	rcall	.+2104   	; 0x1c58 <fputc>
    1420:	2b 89       	ldd	r18, Y+19	; 0x13
    1422:	3a 89       	ldd	r19, Y+18	; 0x12
    1424:	48 89       	ldd	r20, Y+16	; 0x10
    1426:	59 89       	ldd	r21, Y+17	; 0x11
    1428:	cc cf       	rjmp	.-104    	; 0x13c2 <vfprintf+0x342>
    142a:	6c 14       	cp	r6, r12
    142c:	7d 04       	cpc	r7, r13
    142e:	39 f4       	brne	.+14     	; 0x143e <vfprintf+0x3be>
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
    1432:	96 33       	cpi	r25, 0x36	; 54
    1434:	18 f4       	brcc	.+6      	; 0x143c <vfprintf+0x3bc>
    1436:	95 33       	cpi	r25, 0x35	; 53
    1438:	11 f4       	brne	.+4      	; 0x143e <vfprintf+0x3be>
    143a:	04 ff       	sbrs	r16, 4
    143c:	81 e3       	ldi	r24, 0x31	; 49
    143e:	b7 01       	movw	r22, r14
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	45 c0       	rjmp	.+138    	; 0x14ce <vfprintf+0x44e>
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	81 33       	cpi	r24, 0x31	; 49
    1448:	09 f0       	breq	.+2      	; 0x144c <vfprintf+0x3cc>
    144a:	0f 7e       	andi	r16, 0xEF	; 239
    144c:	b7 01       	movw	r22, r14
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	03 d4       	rcall	.+2054   	; 0x1c58 <fputc>
    1452:	11 11       	cpse	r17, r1
    1454:	05 c0       	rjmp	.+10     	; 0x1460 <vfprintf+0x3e0>
    1456:	74 fe       	sbrs	r7, 4
    1458:	16 c0       	rjmp	.+44     	; 0x1486 <vfprintf+0x406>
    145a:	85 e4       	ldi	r24, 0x45	; 69
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	15 c0       	rjmp	.+42     	; 0x148a <vfprintf+0x40a>
    1460:	b7 01       	movw	r22, r14
    1462:	8e e2       	ldi	r24, 0x2E	; 46
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	f8 d3       	rcall	.+2032   	; 0x1c58 <fputc>
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	66 24       	eor	r6, r6
    146c:	63 94       	inc	r6
    146e:	68 0e       	add	r6, r24
    1470:	f4 01       	movw	r30, r8
    1472:	e8 0f       	add	r30, r24
    1474:	f1 1d       	adc	r31, r1
    1476:	80 81       	ld	r24, Z
    1478:	b7 01       	movw	r22, r14
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	ed d3       	rcall	.+2010   	; 0x1c58 <fputc>
    147e:	11 50       	subi	r17, 0x01	; 1
    1480:	51 f3       	breq	.-44     	; 0x1456 <vfprintf+0x3d6>
    1482:	86 2d       	mov	r24, r6
    1484:	f2 cf       	rjmp	.-28     	; 0x146a <vfprintf+0x3ea>
    1486:	85 e6       	ldi	r24, 0x65	; 101
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	b7 01       	movw	r22, r14
    148c:	e5 d3       	rcall	.+1994   	; 0x1c58 <fputc>
    148e:	d7 fc       	sbrc	r13, 7
    1490:	05 c0       	rjmp	.+10     	; 0x149c <vfprintf+0x41c>
    1492:	c1 14       	cp	r12, r1
    1494:	d1 04       	cpc	r13, r1
    1496:	39 f4       	brne	.+14     	; 0x14a6 <vfprintf+0x426>
    1498:	04 ff       	sbrs	r16, 4
    149a:	05 c0       	rjmp	.+10     	; 0x14a6 <vfprintf+0x426>
    149c:	d1 94       	neg	r13
    149e:	c1 94       	neg	r12
    14a0:	d1 08       	sbc	r13, r1
    14a2:	8d e2       	ldi	r24, 0x2D	; 45
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <vfprintf+0x428>
    14a6:	8b e2       	ldi	r24, 0x2B	; 43
    14a8:	b7 01       	movw	r22, r14
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	d5 d3       	rcall	.+1962   	; 0x1c58 <fputc>
    14ae:	80 e3       	ldi	r24, 0x30	; 48
    14b0:	6a e0       	ldi	r22, 0x0A	; 10
    14b2:	c6 16       	cp	r12, r22
    14b4:	d1 04       	cpc	r13, r1
    14b6:	2c f0       	brlt	.+10     	; 0x14c2 <vfprintf+0x442>
    14b8:	8f 5f       	subi	r24, 0xFF	; 255
    14ba:	fa e0       	ldi	r31, 0x0A	; 10
    14bc:	cf 1a       	sub	r12, r31
    14be:	d1 08       	sbc	r13, r1
    14c0:	f7 cf       	rjmp	.-18     	; 0x14b0 <vfprintf+0x430>
    14c2:	b7 01       	movw	r22, r14
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	c8 d3       	rcall	.+1936   	; 0x1c58 <fputc>
    14c8:	b7 01       	movw	r22, r14
    14ca:	c6 01       	movw	r24, r12
    14cc:	c0 96       	adiw	r24, 0x30	; 48
    14ce:	c4 d3       	rcall	.+1928   	; 0x1c58 <fputc>
    14d0:	36 c1       	rjmp	.+620    	; 0x173e <vfprintf+0x6be>
    14d2:	83 36       	cpi	r24, 0x63	; 99
    14d4:	31 f0       	breq	.+12     	; 0x14e2 <vfprintf+0x462>
    14d6:	83 37       	cpi	r24, 0x73	; 115
    14d8:	79 f0       	breq	.+30     	; 0x14f8 <vfprintf+0x478>
    14da:	83 35       	cpi	r24, 0x53	; 83
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <vfprintf+0x460>
    14de:	54 c0       	rjmp	.+168    	; 0x1588 <vfprintf+0x508>
    14e0:	20 c0       	rjmp	.+64     	; 0x1522 <vfprintf+0x4a2>
    14e2:	56 01       	movw	r10, r12
    14e4:	72 e0       	ldi	r23, 0x02	; 2
    14e6:	a7 0e       	add	r10, r23
    14e8:	b1 1c       	adc	r11, r1
    14ea:	f6 01       	movw	r30, r12
    14ec:	80 81       	ld	r24, Z
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	01 e0       	ldi	r16, 0x01	; 1
    14f2:	10 e0       	ldi	r17, 0x00	; 0
    14f4:	64 01       	movw	r12, r8
    14f6:	13 c0       	rjmp	.+38     	; 0x151e <vfprintf+0x49e>
    14f8:	56 01       	movw	r10, r12
    14fa:	f2 e0       	ldi	r31, 0x02	; 2
    14fc:	af 0e       	add	r10, r31
    14fe:	b1 1c       	adc	r11, r1
    1500:	f6 01       	movw	r30, r12
    1502:	c0 80       	ld	r12, Z
    1504:	d1 80       	ldd	r13, Z+1	; 0x01
    1506:	26 ff       	sbrs	r18, 6
    1508:	03 c0       	rjmp	.+6      	; 0x1510 <vfprintf+0x490>
    150a:	61 2f       	mov	r22, r17
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <vfprintf+0x494>
    1510:	6f ef       	ldi	r22, 0xFF	; 255
    1512:	7f ef       	ldi	r23, 0xFF	; 255
    1514:	c6 01       	movw	r24, r12
    1516:	2b 8b       	std	Y+19, r18	; 0x13
    1518:	4a d3       	rcall	.+1684   	; 0x1bae <strnlen>
    151a:	8c 01       	movw	r16, r24
    151c:	2b 89       	ldd	r18, Y+19	; 0x13
    151e:	2f 77       	andi	r18, 0x7F	; 127
    1520:	14 c0       	rjmp	.+40     	; 0x154a <vfprintf+0x4ca>
    1522:	56 01       	movw	r10, r12
    1524:	f2 e0       	ldi	r31, 0x02	; 2
    1526:	af 0e       	add	r10, r31
    1528:	b1 1c       	adc	r11, r1
    152a:	f6 01       	movw	r30, r12
    152c:	c0 80       	ld	r12, Z
    152e:	d1 80       	ldd	r13, Z+1	; 0x01
    1530:	26 ff       	sbrs	r18, 6
    1532:	03 c0       	rjmp	.+6      	; 0x153a <vfprintf+0x4ba>
    1534:	61 2f       	mov	r22, r17
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	02 c0       	rjmp	.+4      	; 0x153e <vfprintf+0x4be>
    153a:	6f ef       	ldi	r22, 0xFF	; 255
    153c:	7f ef       	ldi	r23, 0xFF	; 255
    153e:	c6 01       	movw	r24, r12
    1540:	2b 8b       	std	Y+19, r18	; 0x13
    1542:	2a d3       	rcall	.+1620   	; 0x1b98 <strnlen_P>
    1544:	8c 01       	movw	r16, r24
    1546:	2b 89       	ldd	r18, Y+19	; 0x13
    1548:	20 68       	ori	r18, 0x80	; 128
    154a:	72 2e       	mov	r7, r18
    154c:	23 fd       	sbrc	r18, 3
    154e:	18 c0       	rjmp	.+48     	; 0x1580 <vfprintf+0x500>
    1550:	85 2d       	mov	r24, r5
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	08 17       	cp	r16, r24
    1556:	19 07       	cpc	r17, r25
    1558:	98 f4       	brcc	.+38     	; 0x1580 <vfprintf+0x500>
    155a:	b7 01       	movw	r22, r14
    155c:	80 e2       	ldi	r24, 0x20	; 32
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	7b d3       	rcall	.+1782   	; 0x1c58 <fputc>
    1562:	5a 94       	dec	r5
    1564:	f5 cf       	rjmp	.-22     	; 0x1550 <vfprintf+0x4d0>
    1566:	f6 01       	movw	r30, r12
    1568:	77 fc       	sbrc	r7, 7
    156a:	85 91       	lpm	r24, Z+
    156c:	77 fe       	sbrs	r7, 7
    156e:	81 91       	ld	r24, Z+
    1570:	6f 01       	movw	r12, r30
    1572:	b7 01       	movw	r22, r14
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	70 d3       	rcall	.+1760   	; 0x1c58 <fputc>
    1578:	51 10       	cpse	r5, r1
    157a:	5a 94       	dec	r5
    157c:	01 50       	subi	r16, 0x01	; 1
    157e:	11 09       	sbc	r17, r1
    1580:	01 15       	cp	r16, r1
    1582:	11 05       	cpc	r17, r1
    1584:	81 f7       	brne	.-32     	; 0x1566 <vfprintf+0x4e6>
    1586:	db c0       	rjmp	.+438    	; 0x173e <vfprintf+0x6be>
    1588:	84 36       	cpi	r24, 0x64	; 100
    158a:	11 f0       	breq	.+4      	; 0x1590 <vfprintf+0x510>
    158c:	89 36       	cpi	r24, 0x69	; 105
    158e:	49 f5       	brne	.+82     	; 0x15e2 <vfprintf+0x562>
    1590:	56 01       	movw	r10, r12
    1592:	27 ff       	sbrs	r18, 7
    1594:	09 c0       	rjmp	.+18     	; 0x15a8 <vfprintf+0x528>
    1596:	f4 e0       	ldi	r31, 0x04	; 4
    1598:	af 0e       	add	r10, r31
    159a:	b1 1c       	adc	r11, r1
    159c:	f6 01       	movw	r30, r12
    159e:	60 81       	ld	r22, Z
    15a0:	71 81       	ldd	r23, Z+1	; 0x01
    15a2:	82 81       	ldd	r24, Z+2	; 0x02
    15a4:	93 81       	ldd	r25, Z+3	; 0x03
    15a6:	0a c0       	rjmp	.+20     	; 0x15bc <vfprintf+0x53c>
    15a8:	f2 e0       	ldi	r31, 0x02	; 2
    15aa:	af 0e       	add	r10, r31
    15ac:	b1 1c       	adc	r11, r1
    15ae:	f6 01       	movw	r30, r12
    15b0:	60 81       	ld	r22, Z
    15b2:	71 81       	ldd	r23, Z+1	; 0x01
    15b4:	88 27       	eor	r24, r24
    15b6:	77 fd       	sbrc	r23, 7
    15b8:	80 95       	com	r24
    15ba:	98 2f       	mov	r25, r24
    15bc:	02 2f       	mov	r16, r18
    15be:	0f 76       	andi	r16, 0x6F	; 111
    15c0:	97 ff       	sbrs	r25, 7
    15c2:	08 c0       	rjmp	.+16     	; 0x15d4 <vfprintf+0x554>
    15c4:	90 95       	com	r25
    15c6:	80 95       	com	r24
    15c8:	70 95       	com	r23
    15ca:	61 95       	neg	r22
    15cc:	7f 4f       	sbci	r23, 0xFF	; 255
    15ce:	8f 4f       	sbci	r24, 0xFF	; 255
    15d0:	9f 4f       	sbci	r25, 0xFF	; 255
    15d2:	00 68       	ori	r16, 0x80	; 128
    15d4:	2a e0       	ldi	r18, 0x0A	; 10
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	a4 01       	movw	r20, r8
    15da:	ae d3       	rcall	.+1884   	; 0x1d38 <__ultoa_invert>
    15dc:	c8 2e       	mov	r12, r24
    15de:	c8 18       	sub	r12, r8
    15e0:	3d c0       	rjmp	.+122    	; 0x165c <vfprintf+0x5dc>
    15e2:	02 2f       	mov	r16, r18
    15e4:	85 37       	cpi	r24, 0x75	; 117
    15e6:	21 f4       	brne	.+8      	; 0x15f0 <vfprintf+0x570>
    15e8:	0f 7e       	andi	r16, 0xEF	; 239
    15ea:	2a e0       	ldi	r18, 0x0A	; 10
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	1d c0       	rjmp	.+58     	; 0x162a <vfprintf+0x5aa>
    15f0:	09 7f       	andi	r16, 0xF9	; 249
    15f2:	8f 36       	cpi	r24, 0x6F	; 111
    15f4:	91 f0       	breq	.+36     	; 0x161a <vfprintf+0x59a>
    15f6:	18 f4       	brcc	.+6      	; 0x15fe <vfprintf+0x57e>
    15f8:	88 35       	cpi	r24, 0x58	; 88
    15fa:	59 f0       	breq	.+22     	; 0x1612 <vfprintf+0x592>
    15fc:	a9 c0       	rjmp	.+338    	; 0x1750 <vfprintf+0x6d0>
    15fe:	80 37       	cpi	r24, 0x70	; 112
    1600:	19 f0       	breq	.+6      	; 0x1608 <vfprintf+0x588>
    1602:	88 37       	cpi	r24, 0x78	; 120
    1604:	11 f0       	breq	.+4      	; 0x160a <vfprintf+0x58a>
    1606:	a4 c0       	rjmp	.+328    	; 0x1750 <vfprintf+0x6d0>
    1608:	00 61       	ori	r16, 0x10	; 16
    160a:	04 ff       	sbrs	r16, 4
    160c:	09 c0       	rjmp	.+18     	; 0x1620 <vfprintf+0x5a0>
    160e:	04 60       	ori	r16, 0x04	; 4
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <vfprintf+0x5a0>
    1612:	24 ff       	sbrs	r18, 4
    1614:	08 c0       	rjmp	.+16     	; 0x1626 <vfprintf+0x5a6>
    1616:	06 60       	ori	r16, 0x06	; 6
    1618:	06 c0       	rjmp	.+12     	; 0x1626 <vfprintf+0x5a6>
    161a:	28 e0       	ldi	r18, 0x08	; 8
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	05 c0       	rjmp	.+10     	; 0x162a <vfprintf+0x5aa>
    1620:	20 e1       	ldi	r18, 0x10	; 16
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	02 c0       	rjmp	.+4      	; 0x162a <vfprintf+0x5aa>
    1626:	20 e1       	ldi	r18, 0x10	; 16
    1628:	32 e0       	ldi	r19, 0x02	; 2
    162a:	56 01       	movw	r10, r12
    162c:	07 ff       	sbrs	r16, 7
    162e:	09 c0       	rjmp	.+18     	; 0x1642 <vfprintf+0x5c2>
    1630:	f4 e0       	ldi	r31, 0x04	; 4
    1632:	af 0e       	add	r10, r31
    1634:	b1 1c       	adc	r11, r1
    1636:	f6 01       	movw	r30, r12
    1638:	60 81       	ld	r22, Z
    163a:	71 81       	ldd	r23, Z+1	; 0x01
    163c:	82 81       	ldd	r24, Z+2	; 0x02
    163e:	93 81       	ldd	r25, Z+3	; 0x03
    1640:	08 c0       	rjmp	.+16     	; 0x1652 <vfprintf+0x5d2>
    1642:	f2 e0       	ldi	r31, 0x02	; 2
    1644:	af 0e       	add	r10, r31
    1646:	b1 1c       	adc	r11, r1
    1648:	f6 01       	movw	r30, r12
    164a:	60 81       	ld	r22, Z
    164c:	71 81       	ldd	r23, Z+1	; 0x01
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	a4 01       	movw	r20, r8
    1654:	71 d3       	rcall	.+1762   	; 0x1d38 <__ultoa_invert>
    1656:	c8 2e       	mov	r12, r24
    1658:	c8 18       	sub	r12, r8
    165a:	0f 77       	andi	r16, 0x7F	; 127
    165c:	06 ff       	sbrs	r16, 6
    165e:	0b c0       	rjmp	.+22     	; 0x1676 <vfprintf+0x5f6>
    1660:	20 2f       	mov	r18, r16
    1662:	2e 7f       	andi	r18, 0xFE	; 254
    1664:	c1 16       	cp	r12, r17
    1666:	50 f4       	brcc	.+20     	; 0x167c <vfprintf+0x5fc>
    1668:	04 ff       	sbrs	r16, 4
    166a:	0a c0       	rjmp	.+20     	; 0x1680 <vfprintf+0x600>
    166c:	02 fd       	sbrc	r16, 2
    166e:	08 c0       	rjmp	.+16     	; 0x1680 <vfprintf+0x600>
    1670:	20 2f       	mov	r18, r16
    1672:	2e 7e       	andi	r18, 0xEE	; 238
    1674:	05 c0       	rjmp	.+10     	; 0x1680 <vfprintf+0x600>
    1676:	dc 2c       	mov	r13, r12
    1678:	20 2f       	mov	r18, r16
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <vfprintf+0x602>
    167c:	dc 2c       	mov	r13, r12
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <vfprintf+0x602>
    1680:	d1 2e       	mov	r13, r17
    1682:	24 ff       	sbrs	r18, 4
    1684:	0d c0       	rjmp	.+26     	; 0x16a0 <vfprintf+0x620>
    1686:	fe 01       	movw	r30, r28
    1688:	ec 0d       	add	r30, r12
    168a:	f1 1d       	adc	r31, r1
    168c:	80 81       	ld	r24, Z
    168e:	80 33       	cpi	r24, 0x30	; 48
    1690:	11 f4       	brne	.+4      	; 0x1696 <vfprintf+0x616>
    1692:	29 7e       	andi	r18, 0xE9	; 233
    1694:	09 c0       	rjmp	.+18     	; 0x16a8 <vfprintf+0x628>
    1696:	22 ff       	sbrs	r18, 2
    1698:	06 c0       	rjmp	.+12     	; 0x16a6 <vfprintf+0x626>
    169a:	d3 94       	inc	r13
    169c:	d3 94       	inc	r13
    169e:	04 c0       	rjmp	.+8      	; 0x16a8 <vfprintf+0x628>
    16a0:	82 2f       	mov	r24, r18
    16a2:	86 78       	andi	r24, 0x86	; 134
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <vfprintf+0x628>
    16a6:	d3 94       	inc	r13
    16a8:	23 fd       	sbrc	r18, 3
    16aa:	12 c0       	rjmp	.+36     	; 0x16d0 <vfprintf+0x650>
    16ac:	20 ff       	sbrs	r18, 0
    16ae:	06 c0       	rjmp	.+12     	; 0x16bc <vfprintf+0x63c>
    16b0:	1c 2d       	mov	r17, r12
    16b2:	d5 14       	cp	r13, r5
    16b4:	18 f4       	brcc	.+6      	; 0x16bc <vfprintf+0x63c>
    16b6:	15 0d       	add	r17, r5
    16b8:	1d 19       	sub	r17, r13
    16ba:	d5 2c       	mov	r13, r5
    16bc:	d5 14       	cp	r13, r5
    16be:	60 f4       	brcc	.+24     	; 0x16d8 <vfprintf+0x658>
    16c0:	b7 01       	movw	r22, r14
    16c2:	80 e2       	ldi	r24, 0x20	; 32
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	2b 8b       	std	Y+19, r18	; 0x13
    16c8:	c7 d2       	rcall	.+1422   	; 0x1c58 <fputc>
    16ca:	d3 94       	inc	r13
    16cc:	2b 89       	ldd	r18, Y+19	; 0x13
    16ce:	f6 cf       	rjmp	.-20     	; 0x16bc <vfprintf+0x63c>
    16d0:	d5 14       	cp	r13, r5
    16d2:	10 f4       	brcc	.+4      	; 0x16d8 <vfprintf+0x658>
    16d4:	5d 18       	sub	r5, r13
    16d6:	01 c0       	rjmp	.+2      	; 0x16da <vfprintf+0x65a>
    16d8:	51 2c       	mov	r5, r1
    16da:	24 ff       	sbrs	r18, 4
    16dc:	11 c0       	rjmp	.+34     	; 0x1700 <vfprintf+0x680>
    16de:	b7 01       	movw	r22, r14
    16e0:	80 e3       	ldi	r24, 0x30	; 48
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	2b 8b       	std	Y+19, r18	; 0x13
    16e6:	b8 d2       	rcall	.+1392   	; 0x1c58 <fputc>
    16e8:	2b 89       	ldd	r18, Y+19	; 0x13
    16ea:	22 ff       	sbrs	r18, 2
    16ec:	16 c0       	rjmp	.+44     	; 0x171a <vfprintf+0x69a>
    16ee:	21 ff       	sbrs	r18, 1
    16f0:	03 c0       	rjmp	.+6      	; 0x16f8 <vfprintf+0x678>
    16f2:	88 e5       	ldi	r24, 0x58	; 88
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <vfprintf+0x67c>
    16f8:	88 e7       	ldi	r24, 0x78	; 120
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	b7 01       	movw	r22, r14
    16fe:	0c c0       	rjmp	.+24     	; 0x1718 <vfprintf+0x698>
    1700:	82 2f       	mov	r24, r18
    1702:	86 78       	andi	r24, 0x86	; 134
    1704:	51 f0       	breq	.+20     	; 0x171a <vfprintf+0x69a>
    1706:	21 fd       	sbrc	r18, 1
    1708:	02 c0       	rjmp	.+4      	; 0x170e <vfprintf+0x68e>
    170a:	80 e2       	ldi	r24, 0x20	; 32
    170c:	01 c0       	rjmp	.+2      	; 0x1710 <vfprintf+0x690>
    170e:	8b e2       	ldi	r24, 0x2B	; 43
    1710:	27 fd       	sbrc	r18, 7
    1712:	8d e2       	ldi	r24, 0x2D	; 45
    1714:	b7 01       	movw	r22, r14
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9f d2       	rcall	.+1342   	; 0x1c58 <fputc>
    171a:	c1 16       	cp	r12, r17
    171c:	30 f4       	brcc	.+12     	; 0x172a <vfprintf+0x6aa>
    171e:	b7 01       	movw	r22, r14
    1720:	80 e3       	ldi	r24, 0x30	; 48
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	99 d2       	rcall	.+1330   	; 0x1c58 <fputc>
    1726:	11 50       	subi	r17, 0x01	; 1
    1728:	f8 cf       	rjmp	.-16     	; 0x171a <vfprintf+0x69a>
    172a:	ca 94       	dec	r12
    172c:	f4 01       	movw	r30, r8
    172e:	ec 0d       	add	r30, r12
    1730:	f1 1d       	adc	r31, r1
    1732:	80 81       	ld	r24, Z
    1734:	b7 01       	movw	r22, r14
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	8f d2       	rcall	.+1310   	; 0x1c58 <fputc>
    173a:	c1 10       	cpse	r12, r1
    173c:	f6 cf       	rjmp	.-20     	; 0x172a <vfprintf+0x6aa>
    173e:	55 20       	and	r5, r5
    1740:	09 f4       	brne	.+2      	; 0x1744 <vfprintf+0x6c4>
    1742:	dd cc       	rjmp	.-1606   	; 0x10fe <vfprintf+0x7e>
    1744:	b7 01       	movw	r22, r14
    1746:	80 e2       	ldi	r24, 0x20	; 32
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	86 d2       	rcall	.+1292   	; 0x1c58 <fputc>
    174c:	5a 94       	dec	r5
    174e:	f7 cf       	rjmp	.-18     	; 0x173e <vfprintf+0x6be>
    1750:	f7 01       	movw	r30, r14
    1752:	86 81       	ldd	r24, Z+6	; 0x06
    1754:	97 81       	ldd	r25, Z+7	; 0x07
    1756:	02 c0       	rjmp	.+4      	; 0x175c <vfprintf+0x6dc>
    1758:	8f ef       	ldi	r24, 0xFF	; 255
    175a:	9f ef       	ldi	r25, 0xFF	; 255
    175c:	63 96       	adiw	r28, 0x13	; 19
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	ff 90       	pop	r15
    1772:	ef 90       	pop	r14
    1774:	df 90       	pop	r13
    1776:	cf 90       	pop	r12
    1778:	bf 90       	pop	r11
    177a:	af 90       	pop	r10
    177c:	9f 90       	pop	r9
    177e:	8f 90       	pop	r8
    1780:	7f 90       	pop	r7
    1782:	6f 90       	pop	r6
    1784:	5f 90       	pop	r5
    1786:	4f 90       	pop	r4
    1788:	3f 90       	pop	r3
    178a:	2f 90       	pop	r2
    178c:	08 95       	ret

0000178e <__tablejump2__>:
    178e:	ee 0f       	add	r30, r30
    1790:	ff 1f       	adc	r31, r31

00001792 <__tablejump__>:
    1792:	05 90       	lpm	r0, Z+
    1794:	f4 91       	lpm	r31, Z
    1796:	e0 2d       	mov	r30, r0
    1798:	19 94       	eijmp

0000179a <malloc>:
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	82 30       	cpi	r24, 0x02	; 2
    17a0:	91 05       	cpc	r25, r1
    17a2:	10 f4       	brcc	.+4      	; 0x17a8 <malloc+0xe>
    17a4:	82 e0       	ldi	r24, 0x02	; 2
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	e0 91 c4 02 	lds	r30, 0x02C4
    17ac:	f0 91 c5 02 	lds	r31, 0x02C5
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	a0 e0       	ldi	r26, 0x00	; 0
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	30 97       	sbiw	r30, 0x00	; 0
    17ba:	39 f1       	breq	.+78     	; 0x180a <malloc+0x70>
    17bc:	40 81       	ld	r20, Z
    17be:	51 81       	ldd	r21, Z+1	; 0x01
    17c0:	48 17       	cp	r20, r24
    17c2:	59 07       	cpc	r21, r25
    17c4:	b8 f0       	brcs	.+46     	; 0x17f4 <malloc+0x5a>
    17c6:	48 17       	cp	r20, r24
    17c8:	59 07       	cpc	r21, r25
    17ca:	71 f4       	brne	.+28     	; 0x17e8 <malloc+0x4e>
    17cc:	82 81       	ldd	r24, Z+2	; 0x02
    17ce:	93 81       	ldd	r25, Z+3	; 0x03
    17d0:	10 97       	sbiw	r26, 0x00	; 0
    17d2:	29 f0       	breq	.+10     	; 0x17de <malloc+0x44>
    17d4:	13 96       	adiw	r26, 0x03	; 3
    17d6:	9c 93       	st	X, r25
    17d8:	8e 93       	st	-X, r24
    17da:	12 97       	sbiw	r26, 0x02	; 2
    17dc:	2c c0       	rjmp	.+88     	; 0x1836 <malloc+0x9c>
    17de:	90 93 c5 02 	sts	0x02C5, r25
    17e2:	80 93 c4 02 	sts	0x02C4, r24
    17e6:	27 c0       	rjmp	.+78     	; 0x1836 <malloc+0x9c>
    17e8:	21 15       	cp	r18, r1
    17ea:	31 05       	cpc	r19, r1
    17ec:	31 f0       	breq	.+12     	; 0x17fa <malloc+0x60>
    17ee:	42 17       	cp	r20, r18
    17f0:	53 07       	cpc	r21, r19
    17f2:	18 f0       	brcs	.+6      	; 0x17fa <malloc+0x60>
    17f4:	a9 01       	movw	r20, r18
    17f6:	db 01       	movw	r26, r22
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <malloc+0x62>
    17fa:	ef 01       	movw	r28, r30
    17fc:	9a 01       	movw	r18, r20
    17fe:	bd 01       	movw	r22, r26
    1800:	df 01       	movw	r26, r30
    1802:	02 80       	ldd	r0, Z+2	; 0x02
    1804:	f3 81       	ldd	r31, Z+3	; 0x03
    1806:	e0 2d       	mov	r30, r0
    1808:	d7 cf       	rjmp	.-82     	; 0x17b8 <malloc+0x1e>
    180a:	21 15       	cp	r18, r1
    180c:	31 05       	cpc	r19, r1
    180e:	f9 f0       	breq	.+62     	; 0x184e <malloc+0xb4>
    1810:	28 1b       	sub	r18, r24
    1812:	39 0b       	sbc	r19, r25
    1814:	24 30       	cpi	r18, 0x04	; 4
    1816:	31 05       	cpc	r19, r1
    1818:	80 f4       	brcc	.+32     	; 0x183a <malloc+0xa0>
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	9b 81       	ldd	r25, Y+3	; 0x03
    181e:	61 15       	cp	r22, r1
    1820:	71 05       	cpc	r23, r1
    1822:	21 f0       	breq	.+8      	; 0x182c <malloc+0x92>
    1824:	fb 01       	movw	r30, r22
    1826:	93 83       	std	Z+3, r25	; 0x03
    1828:	82 83       	std	Z+2, r24	; 0x02
    182a:	04 c0       	rjmp	.+8      	; 0x1834 <malloc+0x9a>
    182c:	90 93 c5 02 	sts	0x02C5, r25
    1830:	80 93 c4 02 	sts	0x02C4, r24
    1834:	fe 01       	movw	r30, r28
    1836:	32 96       	adiw	r30, 0x02	; 2
    1838:	44 c0       	rjmp	.+136    	; 0x18c2 <malloc+0x128>
    183a:	fe 01       	movw	r30, r28
    183c:	e2 0f       	add	r30, r18
    183e:	f3 1f       	adc	r31, r19
    1840:	81 93       	st	Z+, r24
    1842:	91 93       	st	Z+, r25
    1844:	22 50       	subi	r18, 0x02	; 2
    1846:	31 09       	sbc	r19, r1
    1848:	39 83       	std	Y+1, r19	; 0x01
    184a:	28 83       	st	Y, r18
    184c:	3a c0       	rjmp	.+116    	; 0x18c2 <malloc+0x128>
    184e:	20 91 c2 02 	lds	r18, 0x02C2
    1852:	30 91 c3 02 	lds	r19, 0x02C3
    1856:	23 2b       	or	r18, r19
    1858:	41 f4       	brne	.+16     	; 0x186a <malloc+0xd0>
    185a:	20 91 02 02 	lds	r18, 0x0202
    185e:	30 91 03 02 	lds	r19, 0x0203
    1862:	30 93 c3 02 	sts	0x02C3, r19
    1866:	20 93 c2 02 	sts	0x02C2, r18
    186a:	20 91 00 02 	lds	r18, 0x0200
    186e:	30 91 01 02 	lds	r19, 0x0201
    1872:	21 15       	cp	r18, r1
    1874:	31 05       	cpc	r19, r1
    1876:	41 f4       	brne	.+16     	; 0x1888 <malloc+0xee>
    1878:	2d b7       	in	r18, 0x3d	; 61
    187a:	3e b7       	in	r19, 0x3e	; 62
    187c:	40 91 04 02 	lds	r20, 0x0204
    1880:	50 91 05 02 	lds	r21, 0x0205
    1884:	24 1b       	sub	r18, r20
    1886:	35 0b       	sbc	r19, r21
    1888:	e0 91 c2 02 	lds	r30, 0x02C2
    188c:	f0 91 c3 02 	lds	r31, 0x02C3
    1890:	e2 17       	cp	r30, r18
    1892:	f3 07       	cpc	r31, r19
    1894:	a0 f4       	brcc	.+40     	; 0x18be <malloc+0x124>
    1896:	2e 1b       	sub	r18, r30
    1898:	3f 0b       	sbc	r19, r31
    189a:	28 17       	cp	r18, r24
    189c:	39 07       	cpc	r19, r25
    189e:	78 f0       	brcs	.+30     	; 0x18be <malloc+0x124>
    18a0:	ac 01       	movw	r20, r24
    18a2:	4e 5f       	subi	r20, 0xFE	; 254
    18a4:	5f 4f       	sbci	r21, 0xFF	; 255
    18a6:	24 17       	cp	r18, r20
    18a8:	35 07       	cpc	r19, r21
    18aa:	48 f0       	brcs	.+18     	; 0x18be <malloc+0x124>
    18ac:	4e 0f       	add	r20, r30
    18ae:	5f 1f       	adc	r21, r31
    18b0:	50 93 c3 02 	sts	0x02C3, r21
    18b4:	40 93 c2 02 	sts	0x02C2, r20
    18b8:	81 93       	st	Z+, r24
    18ba:	91 93       	st	Z+, r25
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <malloc+0x128>
    18be:	e0 e0       	ldi	r30, 0x00	; 0
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	cf 01       	movw	r24, r30
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	08 95       	ret

000018ca <free>:
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <free+0xa>
    18d2:	87 c0       	rjmp	.+270    	; 0x19e2 <free+0x118>
    18d4:	fc 01       	movw	r30, r24
    18d6:	32 97       	sbiw	r30, 0x02	; 2
    18d8:	13 82       	std	Z+3, r1	; 0x03
    18da:	12 82       	std	Z+2, r1	; 0x02
    18dc:	c0 91 c4 02 	lds	r28, 0x02C4
    18e0:	d0 91 c5 02 	lds	r29, 0x02C5
    18e4:	20 97       	sbiw	r28, 0x00	; 0
    18e6:	81 f4       	brne	.+32     	; 0x1908 <free+0x3e>
    18e8:	20 81       	ld	r18, Z
    18ea:	31 81       	ldd	r19, Z+1	; 0x01
    18ec:	28 0f       	add	r18, r24
    18ee:	39 1f       	adc	r19, r25
    18f0:	80 91 c2 02 	lds	r24, 0x02C2
    18f4:	90 91 c3 02 	lds	r25, 0x02C3
    18f8:	82 17       	cp	r24, r18
    18fa:	93 07       	cpc	r25, r19
    18fc:	79 f5       	brne	.+94     	; 0x195c <free+0x92>
    18fe:	f0 93 c3 02 	sts	0x02C3, r31
    1902:	e0 93 c2 02 	sts	0x02C2, r30
    1906:	6d c0       	rjmp	.+218    	; 0x19e2 <free+0x118>
    1908:	de 01       	movw	r26, r28
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	ae 17       	cp	r26, r30
    1910:	bf 07       	cpc	r27, r31
    1912:	50 f4       	brcc	.+20     	; 0x1928 <free+0x5e>
    1914:	12 96       	adiw	r26, 0x02	; 2
    1916:	4d 91       	ld	r20, X+
    1918:	5c 91       	ld	r21, X
    191a:	13 97       	sbiw	r26, 0x03	; 3
    191c:	9d 01       	movw	r18, r26
    191e:	41 15       	cp	r20, r1
    1920:	51 05       	cpc	r21, r1
    1922:	09 f1       	breq	.+66     	; 0x1966 <free+0x9c>
    1924:	da 01       	movw	r26, r20
    1926:	f3 cf       	rjmp	.-26     	; 0x190e <free+0x44>
    1928:	b3 83       	std	Z+3, r27	; 0x03
    192a:	a2 83       	std	Z+2, r26	; 0x02
    192c:	40 81       	ld	r20, Z
    192e:	51 81       	ldd	r21, Z+1	; 0x01
    1930:	84 0f       	add	r24, r20
    1932:	95 1f       	adc	r25, r21
    1934:	8a 17       	cp	r24, r26
    1936:	9b 07       	cpc	r25, r27
    1938:	71 f4       	brne	.+28     	; 0x1956 <free+0x8c>
    193a:	8d 91       	ld	r24, X+
    193c:	9c 91       	ld	r25, X
    193e:	11 97       	sbiw	r26, 0x01	; 1
    1940:	84 0f       	add	r24, r20
    1942:	95 1f       	adc	r25, r21
    1944:	02 96       	adiw	r24, 0x02	; 2
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	80 83       	st	Z, r24
    194a:	12 96       	adiw	r26, 0x02	; 2
    194c:	8d 91       	ld	r24, X+
    194e:	9c 91       	ld	r25, X
    1950:	13 97       	sbiw	r26, 0x03	; 3
    1952:	93 83       	std	Z+3, r25	; 0x03
    1954:	82 83       	std	Z+2, r24	; 0x02
    1956:	21 15       	cp	r18, r1
    1958:	31 05       	cpc	r19, r1
    195a:	29 f4       	brne	.+10     	; 0x1966 <free+0x9c>
    195c:	f0 93 c5 02 	sts	0x02C5, r31
    1960:	e0 93 c4 02 	sts	0x02C4, r30
    1964:	3e c0       	rjmp	.+124    	; 0x19e2 <free+0x118>
    1966:	d9 01       	movw	r26, r18
    1968:	13 96       	adiw	r26, 0x03	; 3
    196a:	fc 93       	st	X, r31
    196c:	ee 93       	st	-X, r30
    196e:	12 97       	sbiw	r26, 0x02	; 2
    1970:	4d 91       	ld	r20, X+
    1972:	5d 91       	ld	r21, X+
    1974:	a4 0f       	add	r26, r20
    1976:	b5 1f       	adc	r27, r21
    1978:	ea 17       	cp	r30, r26
    197a:	fb 07       	cpc	r31, r27
    197c:	79 f4       	brne	.+30     	; 0x199c <free+0xd2>
    197e:	80 81       	ld	r24, Z
    1980:	91 81       	ldd	r25, Z+1	; 0x01
    1982:	84 0f       	add	r24, r20
    1984:	95 1f       	adc	r25, r21
    1986:	02 96       	adiw	r24, 0x02	; 2
    1988:	d9 01       	movw	r26, r18
    198a:	11 96       	adiw	r26, 0x01	; 1
    198c:	9c 93       	st	X, r25
    198e:	8e 93       	st	-X, r24
    1990:	82 81       	ldd	r24, Z+2	; 0x02
    1992:	93 81       	ldd	r25, Z+3	; 0x03
    1994:	13 96       	adiw	r26, 0x03	; 3
    1996:	9c 93       	st	X, r25
    1998:	8e 93       	st	-X, r24
    199a:	12 97       	sbiw	r26, 0x02	; 2
    199c:	e0 e0       	ldi	r30, 0x00	; 0
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	9b 81       	ldd	r25, Y+3	; 0x03
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	19 f0       	breq	.+6      	; 0x19ae <free+0xe4>
    19a8:	fe 01       	movw	r30, r28
    19aa:	ec 01       	movw	r28, r24
    19ac:	f9 cf       	rjmp	.-14     	; 0x19a0 <free+0xd6>
    19ae:	ce 01       	movw	r24, r28
    19b0:	02 96       	adiw	r24, 0x02	; 2
    19b2:	28 81       	ld	r18, Y
    19b4:	39 81       	ldd	r19, Y+1	; 0x01
    19b6:	82 0f       	add	r24, r18
    19b8:	93 1f       	adc	r25, r19
    19ba:	20 91 c2 02 	lds	r18, 0x02C2
    19be:	30 91 c3 02 	lds	r19, 0x02C3
    19c2:	28 17       	cp	r18, r24
    19c4:	39 07       	cpc	r19, r25
    19c6:	69 f4       	brne	.+26     	; 0x19e2 <free+0x118>
    19c8:	30 97       	sbiw	r30, 0x00	; 0
    19ca:	29 f4       	brne	.+10     	; 0x19d6 <free+0x10c>
    19cc:	10 92 c5 02 	sts	0x02C5, r1
    19d0:	10 92 c4 02 	sts	0x02C4, r1
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <free+0x110>
    19d6:	13 82       	std	Z+3, r1	; 0x03
    19d8:	12 82       	std	Z+2, r1	; 0x02
    19da:	d0 93 c3 02 	sts	0x02C3, r29
    19de:	c0 93 c2 02 	sts	0x02C2, r28
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	08 95       	ret

000019e8 <__ftoa_engine>:
    19e8:	28 30       	cpi	r18, 0x08	; 8
    19ea:	08 f0       	brcs	.+2      	; 0x19ee <__ftoa_engine+0x6>
    19ec:	27 e0       	ldi	r18, 0x07	; 7
    19ee:	33 27       	eor	r19, r19
    19f0:	da 01       	movw	r26, r20
    19f2:	99 0f       	add	r25, r25
    19f4:	31 1d       	adc	r19, r1
    19f6:	87 fd       	sbrc	r24, 7
    19f8:	91 60       	ori	r25, 0x01	; 1
    19fa:	00 96       	adiw	r24, 0x00	; 0
    19fc:	61 05       	cpc	r22, r1
    19fe:	71 05       	cpc	r23, r1
    1a00:	39 f4       	brne	.+14     	; 0x1a10 <__ftoa_engine+0x28>
    1a02:	32 60       	ori	r19, 0x02	; 2
    1a04:	2e 5f       	subi	r18, 0xFE	; 254
    1a06:	3d 93       	st	X+, r19
    1a08:	30 e3       	ldi	r19, 0x30	; 48
    1a0a:	2a 95       	dec	r18
    1a0c:	e1 f7       	brne	.-8      	; 0x1a06 <__ftoa_engine+0x1e>
    1a0e:	08 95       	ret
    1a10:	9f 3f       	cpi	r25, 0xFF	; 255
    1a12:	30 f0       	brcs	.+12     	; 0x1a20 <__ftoa_engine+0x38>
    1a14:	80 38       	cpi	r24, 0x80	; 128
    1a16:	71 05       	cpc	r23, r1
    1a18:	61 05       	cpc	r22, r1
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <__ftoa_engine+0x36>
    1a1c:	3c 5f       	subi	r19, 0xFC	; 252
    1a1e:	3c 5f       	subi	r19, 0xFC	; 252
    1a20:	3d 93       	st	X+, r19
    1a22:	91 30       	cpi	r25, 0x01	; 1
    1a24:	08 f0       	brcs	.+2      	; 0x1a28 <__ftoa_engine+0x40>
    1a26:	80 68       	ori	r24, 0x80	; 128
    1a28:	91 1d       	adc	r25, r1
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	1f 93       	push	r17
    1a30:	0f 93       	push	r16
    1a32:	ff 92       	push	r15
    1a34:	ef 92       	push	r14
    1a36:	19 2f       	mov	r17, r25
    1a38:	98 7f       	andi	r25, 0xF8	; 248
    1a3a:	96 95       	lsr	r25
    1a3c:	e9 2f       	mov	r30, r25
    1a3e:	96 95       	lsr	r25
    1a40:	96 95       	lsr	r25
    1a42:	e9 0f       	add	r30, r25
    1a44:	ff 27       	eor	r31, r31
    1a46:	e8 51       	subi	r30, 0x18	; 24
    1a48:	fe 4f       	sbci	r31, 0xFE	; 254
    1a4a:	99 27       	eor	r25, r25
    1a4c:	33 27       	eor	r19, r19
    1a4e:	ee 24       	eor	r14, r14
    1a50:	ff 24       	eor	r15, r15
    1a52:	a7 01       	movw	r20, r14
    1a54:	e7 01       	movw	r28, r14
    1a56:	05 90       	lpm	r0, Z+
    1a58:	08 94       	sec
    1a5a:	07 94       	ror	r0
    1a5c:	28 f4       	brcc	.+10     	; 0x1a68 <__ftoa_engine+0x80>
    1a5e:	36 0f       	add	r19, r22
    1a60:	e7 1e       	adc	r14, r23
    1a62:	f8 1e       	adc	r15, r24
    1a64:	49 1f       	adc	r20, r25
    1a66:	51 1d       	adc	r21, r1
    1a68:	66 0f       	add	r22, r22
    1a6a:	77 1f       	adc	r23, r23
    1a6c:	88 1f       	adc	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	06 94       	lsr	r0
    1a72:	a1 f7       	brne	.-24     	; 0x1a5c <__ftoa_engine+0x74>
    1a74:	05 90       	lpm	r0, Z+
    1a76:	07 94       	ror	r0
    1a78:	28 f4       	brcc	.+10     	; 0x1a84 <__ftoa_engine+0x9c>
    1a7a:	e7 0e       	add	r14, r23
    1a7c:	f8 1e       	adc	r15, r24
    1a7e:	49 1f       	adc	r20, r25
    1a80:	56 1f       	adc	r21, r22
    1a82:	c1 1d       	adc	r28, r1
    1a84:	77 0f       	add	r23, r23
    1a86:	88 1f       	adc	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	66 1f       	adc	r22, r22
    1a8c:	06 94       	lsr	r0
    1a8e:	a1 f7       	brne	.-24     	; 0x1a78 <__ftoa_engine+0x90>
    1a90:	05 90       	lpm	r0, Z+
    1a92:	07 94       	ror	r0
    1a94:	28 f4       	brcc	.+10     	; 0x1aa0 <__ftoa_engine+0xb8>
    1a96:	f8 0e       	add	r15, r24
    1a98:	49 1f       	adc	r20, r25
    1a9a:	56 1f       	adc	r21, r22
    1a9c:	c7 1f       	adc	r28, r23
    1a9e:	d1 1d       	adc	r29, r1
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	66 1f       	adc	r22, r22
    1aa6:	77 1f       	adc	r23, r23
    1aa8:	06 94       	lsr	r0
    1aaa:	a1 f7       	brne	.-24     	; 0x1a94 <__ftoa_engine+0xac>
    1aac:	05 90       	lpm	r0, Z+
    1aae:	07 94       	ror	r0
    1ab0:	20 f4       	brcc	.+8      	; 0x1aba <__ftoa_engine+0xd2>
    1ab2:	49 0f       	add	r20, r25
    1ab4:	56 1f       	adc	r21, r22
    1ab6:	c7 1f       	adc	r28, r23
    1ab8:	d8 1f       	adc	r29, r24
    1aba:	99 0f       	add	r25, r25
    1abc:	66 1f       	adc	r22, r22
    1abe:	77 1f       	adc	r23, r23
    1ac0:	88 1f       	adc	r24, r24
    1ac2:	06 94       	lsr	r0
    1ac4:	a9 f7       	brne	.-22     	; 0x1ab0 <__ftoa_engine+0xc8>
    1ac6:	84 91       	lpm	r24, Z
    1ac8:	10 95       	com	r17
    1aca:	17 70       	andi	r17, 0x07	; 7
    1acc:	41 f0       	breq	.+16     	; 0x1ade <__ftoa_engine+0xf6>
    1ace:	d6 95       	lsr	r29
    1ad0:	c7 95       	ror	r28
    1ad2:	57 95       	ror	r21
    1ad4:	47 95       	ror	r20
    1ad6:	f7 94       	ror	r15
    1ad8:	e7 94       	ror	r14
    1ada:	1a 95       	dec	r17
    1adc:	c1 f7       	brne	.-16     	; 0x1ace <__ftoa_engine+0xe6>
    1ade:	ee e8       	ldi	r30, 0x8E	; 142
    1ae0:	f1 e0       	ldi	r31, 0x01	; 1
    1ae2:	68 94       	set
    1ae4:	15 90       	lpm	r1, Z+
    1ae6:	15 91       	lpm	r17, Z+
    1ae8:	35 91       	lpm	r19, Z+
    1aea:	65 91       	lpm	r22, Z+
    1aec:	95 91       	lpm	r25, Z+
    1aee:	05 90       	lpm	r0, Z+
    1af0:	7f e2       	ldi	r23, 0x2F	; 47
    1af2:	73 95       	inc	r23
    1af4:	e1 18       	sub	r14, r1
    1af6:	f1 0a       	sbc	r15, r17
    1af8:	43 0b       	sbc	r20, r19
    1afa:	56 0b       	sbc	r21, r22
    1afc:	c9 0b       	sbc	r28, r25
    1afe:	d0 09       	sbc	r29, r0
    1b00:	c0 f7       	brcc	.-16     	; 0x1af2 <__ftoa_engine+0x10a>
    1b02:	e1 0c       	add	r14, r1
    1b04:	f1 1e       	adc	r15, r17
    1b06:	43 1f       	adc	r20, r19
    1b08:	56 1f       	adc	r21, r22
    1b0a:	c9 1f       	adc	r28, r25
    1b0c:	d0 1d       	adc	r29, r0
    1b0e:	7e f4       	brtc	.+30     	; 0x1b2e <__ftoa_engine+0x146>
    1b10:	70 33       	cpi	r23, 0x30	; 48
    1b12:	11 f4       	brne	.+4      	; 0x1b18 <__ftoa_engine+0x130>
    1b14:	8a 95       	dec	r24
    1b16:	e6 cf       	rjmp	.-52     	; 0x1ae4 <__ftoa_engine+0xfc>
    1b18:	e8 94       	clt
    1b1a:	01 50       	subi	r16, 0x01	; 1
    1b1c:	30 f0       	brcs	.+12     	; 0x1b2a <__ftoa_engine+0x142>
    1b1e:	08 0f       	add	r16, r24
    1b20:	0a f4       	brpl	.+2      	; 0x1b24 <__ftoa_engine+0x13c>
    1b22:	00 27       	eor	r16, r16
    1b24:	02 17       	cp	r16, r18
    1b26:	08 f4       	brcc	.+2      	; 0x1b2a <__ftoa_engine+0x142>
    1b28:	20 2f       	mov	r18, r16
    1b2a:	23 95       	inc	r18
    1b2c:	02 2f       	mov	r16, r18
    1b2e:	7a 33       	cpi	r23, 0x3A	; 58
    1b30:	28 f0       	brcs	.+10     	; 0x1b3c <__ftoa_engine+0x154>
    1b32:	79 e3       	ldi	r23, 0x39	; 57
    1b34:	7d 93       	st	X+, r23
    1b36:	2a 95       	dec	r18
    1b38:	e9 f7       	brne	.-6      	; 0x1b34 <__ftoa_engine+0x14c>
    1b3a:	10 c0       	rjmp	.+32     	; 0x1b5c <__ftoa_engine+0x174>
    1b3c:	7d 93       	st	X+, r23
    1b3e:	2a 95       	dec	r18
    1b40:	89 f6       	brne	.-94     	; 0x1ae4 <__ftoa_engine+0xfc>
    1b42:	06 94       	lsr	r0
    1b44:	97 95       	ror	r25
    1b46:	67 95       	ror	r22
    1b48:	37 95       	ror	r19
    1b4a:	17 95       	ror	r17
    1b4c:	17 94       	ror	r1
    1b4e:	e1 18       	sub	r14, r1
    1b50:	f1 0a       	sbc	r15, r17
    1b52:	43 0b       	sbc	r20, r19
    1b54:	56 0b       	sbc	r21, r22
    1b56:	c9 0b       	sbc	r28, r25
    1b58:	d0 09       	sbc	r29, r0
    1b5a:	98 f0       	brcs	.+38     	; 0x1b82 <__ftoa_engine+0x19a>
    1b5c:	23 95       	inc	r18
    1b5e:	7e 91       	ld	r23, -X
    1b60:	73 95       	inc	r23
    1b62:	7a 33       	cpi	r23, 0x3A	; 58
    1b64:	08 f0       	brcs	.+2      	; 0x1b68 <__ftoa_engine+0x180>
    1b66:	70 e3       	ldi	r23, 0x30	; 48
    1b68:	7c 93       	st	X, r23
    1b6a:	20 13       	cpse	r18, r16
    1b6c:	b8 f7       	brcc	.-18     	; 0x1b5c <__ftoa_engine+0x174>
    1b6e:	7e 91       	ld	r23, -X
    1b70:	70 61       	ori	r23, 0x10	; 16
    1b72:	7d 93       	st	X+, r23
    1b74:	30 f0       	brcs	.+12     	; 0x1b82 <__ftoa_engine+0x19a>
    1b76:	83 95       	inc	r24
    1b78:	71 e3       	ldi	r23, 0x31	; 49
    1b7a:	7d 93       	st	X+, r23
    1b7c:	70 e3       	ldi	r23, 0x30	; 48
    1b7e:	2a 95       	dec	r18
    1b80:	e1 f7       	brne	.-8      	; 0x1b7a <__ftoa_engine+0x192>
    1b82:	11 24       	eor	r1, r1
    1b84:	ef 90       	pop	r14
    1b86:	ff 90       	pop	r15
    1b88:	0f 91       	pop	r16
    1b8a:	1f 91       	pop	r17
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	99 27       	eor	r25, r25
    1b92:	87 fd       	sbrc	r24, 7
    1b94:	90 95       	com	r25
    1b96:	08 95       	ret

00001b98 <strnlen_P>:
    1b98:	fc 01       	movw	r30, r24
    1b9a:	05 90       	lpm	r0, Z+
    1b9c:	61 50       	subi	r22, 0x01	; 1
    1b9e:	70 40       	sbci	r23, 0x00	; 0
    1ba0:	01 10       	cpse	r0, r1
    1ba2:	d8 f7       	brcc	.-10     	; 0x1b9a <strnlen_P+0x2>
    1ba4:	80 95       	com	r24
    1ba6:	90 95       	com	r25
    1ba8:	8e 0f       	add	r24, r30
    1baa:	9f 1f       	adc	r25, r31
    1bac:	08 95       	ret

00001bae <strnlen>:
    1bae:	fc 01       	movw	r30, r24
    1bb0:	61 50       	subi	r22, 0x01	; 1
    1bb2:	70 40       	sbci	r23, 0x00	; 0
    1bb4:	01 90       	ld	r0, Z+
    1bb6:	01 10       	cpse	r0, r1
    1bb8:	d8 f7       	brcc	.-10     	; 0x1bb0 <strnlen+0x2>
    1bba:	80 95       	com	r24
    1bbc:	90 95       	com	r25
    1bbe:	8e 0f       	add	r24, r30
    1bc0:	9f 1f       	adc	r25, r31
    1bc2:	08 95       	ret

00001bc4 <fdevopen>:
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	ec 01       	movw	r28, r24
    1bce:	8b 01       	movw	r16, r22
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	31 f4       	brne	.+12     	; 0x1be0 <fdevopen+0x1c>
    1bd4:	61 15       	cp	r22, r1
    1bd6:	71 05       	cpc	r23, r1
    1bd8:	19 f4       	brne	.+6      	; 0x1be0 <fdevopen+0x1c>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	37 c0       	rjmp	.+110    	; 0x1c4e <fdevopen+0x8a>
    1be0:	6e e0       	ldi	r22, 0x0E	; 14
    1be2:	70 e0       	ldi	r23, 0x00	; 0
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	05 d1       	rcall	.+522    	; 0x1df4 <calloc>
    1bea:	fc 01       	movw	r30, r24
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	a9 f3       	breq	.-22     	; 0x1bda <fdevopen+0x16>
    1bf0:	80 e8       	ldi	r24, 0x80	; 128
    1bf2:	83 83       	std	Z+3, r24	; 0x03
    1bf4:	01 15       	cp	r16, r1
    1bf6:	11 05       	cpc	r17, r1
    1bf8:	71 f0       	breq	.+28     	; 0x1c16 <fdevopen+0x52>
    1bfa:	13 87       	std	Z+11, r17	; 0x0b
    1bfc:	02 87       	std	Z+10, r16	; 0x0a
    1bfe:	81 e8       	ldi	r24, 0x81	; 129
    1c00:	83 83       	std	Z+3, r24	; 0x03
    1c02:	80 91 c6 02 	lds	r24, 0x02C6
    1c06:	90 91 c7 02 	lds	r25, 0x02C7
    1c0a:	89 2b       	or	r24, r25
    1c0c:	21 f4       	brne	.+8      	; 0x1c16 <fdevopen+0x52>
    1c0e:	f0 93 c7 02 	sts	0x02C7, r31
    1c12:	e0 93 c6 02 	sts	0x02C6, r30
    1c16:	20 97       	sbiw	r28, 0x00	; 0
    1c18:	c9 f0       	breq	.+50     	; 0x1c4c <fdevopen+0x88>
    1c1a:	d1 87       	std	Z+9, r29	; 0x09
    1c1c:	c0 87       	std	Z+8, r28	; 0x08
    1c1e:	83 81       	ldd	r24, Z+3	; 0x03
    1c20:	82 60       	ori	r24, 0x02	; 2
    1c22:	83 83       	std	Z+3, r24	; 0x03
    1c24:	80 91 c8 02 	lds	r24, 0x02C8
    1c28:	90 91 c9 02 	lds	r25, 0x02C9
    1c2c:	89 2b       	or	r24, r25
    1c2e:	71 f4       	brne	.+28     	; 0x1c4c <fdevopen+0x88>
    1c30:	f0 93 c9 02 	sts	0x02C9, r31
    1c34:	e0 93 c8 02 	sts	0x02C8, r30
    1c38:	80 91 ca 02 	lds	r24, 0x02CA
    1c3c:	90 91 cb 02 	lds	r25, 0x02CB
    1c40:	89 2b       	or	r24, r25
    1c42:	21 f4       	brne	.+8      	; 0x1c4c <fdevopen+0x88>
    1c44:	f0 93 cb 02 	sts	0x02CB, r31
    1c48:	e0 93 ca 02 	sts	0x02CA, r30
    1c4c:	cf 01       	movw	r24, r30
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	1f 91       	pop	r17
    1c54:	0f 91       	pop	r16
    1c56:	08 95       	ret

00001c58 <fputc>:
    1c58:	0f 93       	push	r16
    1c5a:	1f 93       	push	r17
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	18 2f       	mov	r17, r24
    1c62:	09 2f       	mov	r16, r25
    1c64:	eb 01       	movw	r28, r22
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	81 fd       	sbrc	r24, 1
    1c6a:	03 c0       	rjmp	.+6      	; 0x1c72 <fputc+0x1a>
    1c6c:	8f ef       	ldi	r24, 0xFF	; 255
    1c6e:	9f ef       	ldi	r25, 0xFF	; 255
    1c70:	20 c0       	rjmp	.+64     	; 0x1cb2 <fputc+0x5a>
    1c72:	82 ff       	sbrs	r24, 2
    1c74:	10 c0       	rjmp	.+32     	; 0x1c96 <fputc+0x3e>
    1c76:	4e 81       	ldd	r20, Y+6	; 0x06
    1c78:	5f 81       	ldd	r21, Y+7	; 0x07
    1c7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c7e:	42 17       	cp	r20, r18
    1c80:	53 07       	cpc	r21, r19
    1c82:	7c f4       	brge	.+30     	; 0x1ca2 <fputc+0x4a>
    1c84:	e8 81       	ld	r30, Y
    1c86:	f9 81       	ldd	r31, Y+1	; 0x01
    1c88:	9f 01       	movw	r18, r30
    1c8a:	2f 5f       	subi	r18, 0xFF	; 255
    1c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8e:	39 83       	std	Y+1, r19	; 0x01
    1c90:	28 83       	st	Y, r18
    1c92:	10 83       	st	Z, r17
    1c94:	06 c0       	rjmp	.+12     	; 0x1ca2 <fputc+0x4a>
    1c96:	e8 85       	ldd	r30, Y+8	; 0x08
    1c98:	f9 85       	ldd	r31, Y+9	; 0x09
    1c9a:	81 2f       	mov	r24, r17
    1c9c:	19 95       	eicall
    1c9e:	89 2b       	or	r24, r25
    1ca0:	29 f7       	brne	.-54     	; 0x1c6c <fputc+0x14>
    1ca2:	2e 81       	ldd	r18, Y+6	; 0x06
    1ca4:	3f 81       	ldd	r19, Y+7	; 0x07
    1ca6:	2f 5f       	subi	r18, 0xFF	; 255
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    1caa:	3f 83       	std	Y+7, r19	; 0x07
    1cac:	2e 83       	std	Y+6, r18	; 0x06
    1cae:	81 2f       	mov	r24, r17
    1cb0:	90 2f       	mov	r25, r16
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	08 95       	ret

00001cbc <printf>:
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	36 96       	adiw	r30, 0x06	; 6
    1cc8:	61 91       	ld	r22, Z+
    1cca:	71 91       	ld	r23, Z+
    1ccc:	af 01       	movw	r20, r30
    1cce:	80 91 c8 02 	lds	r24, 0x02C8
    1cd2:	90 91 c9 02 	lds	r25, 0x02C9
    1cd6:	d4 d9       	rcall	.-3160   	; 0x1080 <vfprintf>
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	08 95       	ret

00001cde <puts>:
    1cde:	0f 93       	push	r16
    1ce0:	1f 93       	push	r17
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	e0 91 c8 02 	lds	r30, 0x02C8
    1cea:	f0 91 c9 02 	lds	r31, 0x02C9
    1cee:	23 81       	ldd	r18, Z+3	; 0x03
    1cf0:	21 ff       	sbrs	r18, 1
    1cf2:	1b c0       	rjmp	.+54     	; 0x1d2a <puts+0x4c>
    1cf4:	ec 01       	movw	r28, r24
    1cf6:	00 e0       	ldi	r16, 0x00	; 0
    1cf8:	10 e0       	ldi	r17, 0x00	; 0
    1cfa:	89 91       	ld	r24, Y+
    1cfc:	60 91 c8 02 	lds	r22, 0x02C8
    1d00:	70 91 c9 02 	lds	r23, 0x02C9
    1d04:	db 01       	movw	r26, r22
    1d06:	18 96       	adiw	r26, 0x08	; 8
    1d08:	ed 91       	ld	r30, X+
    1d0a:	fc 91       	ld	r31, X
    1d0c:	19 97       	sbiw	r26, 0x09	; 9
    1d0e:	88 23       	and	r24, r24
    1d10:	31 f0       	breq	.+12     	; 0x1d1e <puts+0x40>
    1d12:	19 95       	eicall
    1d14:	89 2b       	or	r24, r25
    1d16:	89 f3       	breq	.-30     	; 0x1cfa <puts+0x1c>
    1d18:	0f ef       	ldi	r16, 0xFF	; 255
    1d1a:	1f ef       	ldi	r17, 0xFF	; 255
    1d1c:	ee cf       	rjmp	.-36     	; 0x1cfa <puts+0x1c>
    1d1e:	8a e0       	ldi	r24, 0x0A	; 10
    1d20:	19 95       	eicall
    1d22:	89 2b       	or	r24, r25
    1d24:	11 f4       	brne	.+4      	; 0x1d2a <puts+0x4c>
    1d26:	c8 01       	movw	r24, r16
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <puts+0x50>
    1d2a:	8f ef       	ldi	r24, 0xFF	; 255
    1d2c:	9f ef       	ldi	r25, 0xFF	; 255
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	1f 91       	pop	r17
    1d34:	0f 91       	pop	r16
    1d36:	08 95       	ret

00001d38 <__ultoa_invert>:
    1d38:	fa 01       	movw	r30, r20
    1d3a:	aa 27       	eor	r26, r26
    1d3c:	28 30       	cpi	r18, 0x08	; 8
    1d3e:	51 f1       	breq	.+84     	; 0x1d94 <__ultoa_invert+0x5c>
    1d40:	20 31       	cpi	r18, 0x10	; 16
    1d42:	81 f1       	breq	.+96     	; 0x1da4 <__ultoa_invert+0x6c>
    1d44:	e8 94       	clt
    1d46:	6f 93       	push	r22
    1d48:	6e 7f       	andi	r22, 0xFE	; 254
    1d4a:	6e 5f       	subi	r22, 0xFE	; 254
    1d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d50:	9f 4f       	sbci	r25, 0xFF	; 255
    1d52:	af 4f       	sbci	r26, 0xFF	; 255
    1d54:	b1 e0       	ldi	r27, 0x01	; 1
    1d56:	3e d0       	rcall	.+124    	; 0x1dd4 <__ultoa_invert+0x9c>
    1d58:	b4 e0       	ldi	r27, 0x04	; 4
    1d5a:	3c d0       	rcall	.+120    	; 0x1dd4 <__ultoa_invert+0x9c>
    1d5c:	67 0f       	add	r22, r23
    1d5e:	78 1f       	adc	r23, r24
    1d60:	89 1f       	adc	r24, r25
    1d62:	9a 1f       	adc	r25, r26
    1d64:	a1 1d       	adc	r26, r1
    1d66:	68 0f       	add	r22, r24
    1d68:	79 1f       	adc	r23, r25
    1d6a:	8a 1f       	adc	r24, r26
    1d6c:	91 1d       	adc	r25, r1
    1d6e:	a1 1d       	adc	r26, r1
    1d70:	6a 0f       	add	r22, r26
    1d72:	71 1d       	adc	r23, r1
    1d74:	81 1d       	adc	r24, r1
    1d76:	91 1d       	adc	r25, r1
    1d78:	a1 1d       	adc	r26, r1
    1d7a:	20 d0       	rcall	.+64     	; 0x1dbc <__ultoa_invert+0x84>
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <__ultoa_invert+0x48>
    1d7e:	68 94       	set
    1d80:	3f 91       	pop	r19
    1d82:	2a e0       	ldi	r18, 0x0A	; 10
    1d84:	26 9f       	mul	r18, r22
    1d86:	11 24       	eor	r1, r1
    1d88:	30 19       	sub	r19, r0
    1d8a:	30 5d       	subi	r19, 0xD0	; 208
    1d8c:	31 93       	st	Z+, r19
    1d8e:	de f6       	brtc	.-74     	; 0x1d46 <__ultoa_invert+0xe>
    1d90:	cf 01       	movw	r24, r30
    1d92:	08 95       	ret
    1d94:	46 2f       	mov	r20, r22
    1d96:	47 70       	andi	r20, 0x07	; 7
    1d98:	40 5d       	subi	r20, 0xD0	; 208
    1d9a:	41 93       	st	Z+, r20
    1d9c:	b3 e0       	ldi	r27, 0x03	; 3
    1d9e:	0f d0       	rcall	.+30     	; 0x1dbe <__ultoa_invert+0x86>
    1da0:	c9 f7       	brne	.-14     	; 0x1d94 <__ultoa_invert+0x5c>
    1da2:	f6 cf       	rjmp	.-20     	; 0x1d90 <__ultoa_invert+0x58>
    1da4:	46 2f       	mov	r20, r22
    1da6:	4f 70       	andi	r20, 0x0F	; 15
    1da8:	40 5d       	subi	r20, 0xD0	; 208
    1daa:	4a 33       	cpi	r20, 0x3A	; 58
    1dac:	18 f0       	brcs	.+6      	; 0x1db4 <__ultoa_invert+0x7c>
    1dae:	49 5d       	subi	r20, 0xD9	; 217
    1db0:	31 fd       	sbrc	r19, 1
    1db2:	40 52       	subi	r20, 0x20	; 32
    1db4:	41 93       	st	Z+, r20
    1db6:	02 d0       	rcall	.+4      	; 0x1dbc <__ultoa_invert+0x84>
    1db8:	a9 f7       	brne	.-22     	; 0x1da4 <__ultoa_invert+0x6c>
    1dba:	ea cf       	rjmp	.-44     	; 0x1d90 <__ultoa_invert+0x58>
    1dbc:	b4 e0       	ldi	r27, 0x04	; 4
    1dbe:	a6 95       	lsr	r26
    1dc0:	97 95       	ror	r25
    1dc2:	87 95       	ror	r24
    1dc4:	77 95       	ror	r23
    1dc6:	67 95       	ror	r22
    1dc8:	ba 95       	dec	r27
    1dca:	c9 f7       	brne	.-14     	; 0x1dbe <__ultoa_invert+0x86>
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	61 05       	cpc	r22, r1
    1dd0:	71 05       	cpc	r23, r1
    1dd2:	08 95       	ret
    1dd4:	9b 01       	movw	r18, r22
    1dd6:	ac 01       	movw	r20, r24
    1dd8:	0a 2e       	mov	r0, r26
    1dda:	06 94       	lsr	r0
    1ddc:	57 95       	ror	r21
    1dde:	47 95       	ror	r20
    1de0:	37 95       	ror	r19
    1de2:	27 95       	ror	r18
    1de4:	ba 95       	dec	r27
    1de6:	c9 f7       	brne	.-14     	; 0x1dda <__ultoa_invert+0xa2>
    1de8:	62 0f       	add	r22, r18
    1dea:	73 1f       	adc	r23, r19
    1dec:	84 1f       	adc	r24, r20
    1dee:	95 1f       	adc	r25, r21
    1df0:	a0 1d       	adc	r26, r0
    1df2:	08 95       	ret

00001df4 <calloc>:
    1df4:	0f 93       	push	r16
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	86 9f       	mul	r24, r22
    1dfe:	80 01       	movw	r16, r0
    1e00:	87 9f       	mul	r24, r23
    1e02:	10 0d       	add	r17, r0
    1e04:	96 9f       	mul	r25, r22
    1e06:	10 0d       	add	r17, r0
    1e08:	11 24       	eor	r1, r1
    1e0a:	c8 01       	movw	r24, r16
    1e0c:	c6 dc       	rcall	.-1652   	; 0x179a <malloc>
    1e0e:	ec 01       	movw	r28, r24
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	21 f0       	breq	.+8      	; 0x1e1c <calloc+0x28>
    1e14:	a8 01       	movw	r20, r16
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	06 d0       	rcall	.+12     	; 0x1e28 <memset>
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	df 91       	pop	r29
    1e20:	cf 91       	pop	r28
    1e22:	1f 91       	pop	r17
    1e24:	0f 91       	pop	r16
    1e26:	08 95       	ret

00001e28 <memset>:
    1e28:	dc 01       	movw	r26, r24
    1e2a:	01 c0       	rjmp	.+2      	; 0x1e2e <memset+0x6>
    1e2c:	6d 93       	st	X+, r22
    1e2e:	41 50       	subi	r20, 0x01	; 1
    1e30:	50 40       	sbci	r21, 0x00	; 0
    1e32:	e0 f7       	brcc	.-8      	; 0x1e2c <memset+0x4>
    1e34:	08 95       	ret

00001e36 <_exit>:
    1e36:	f8 94       	cli

00001e38 <__stop_program>:
    1e38:	ff cf       	rjmp	.-2      	; 0x1e38 <__stop_program>
