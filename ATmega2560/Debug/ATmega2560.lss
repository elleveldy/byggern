
ATmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800200  0000158c  00001620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000158c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  008002aa  008002aa  000016ca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016ca  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003a0  00000000  00000000  00001726  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000252c  00000000  00000000  00001ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011b3  00000000  00000000  00003ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001949  00000000  00000000  000051a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000754  00000000  00000000  00006af0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000083c  00000000  00000000  00007244  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d1d  00000000  00000000  00007a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002c0  00000000  00000000  0000879d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e6 c3       	rjmp	.+1996   	; 0x86a <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	50 04       	cpc	r5, r0
      e6:	a2 04       	cpc	r10, r2
      e8:	a2 04       	cpc	r10, r2
      ea:	a2 04       	cpc	r10, r2
      ec:	a2 04       	cpc	r10, r2
      ee:	a2 04       	cpc	r10, r2
      f0:	a2 04       	cpc	r10, r2
      f2:	a2 04       	cpc	r10, r2
      f4:	50 04       	cpc	r5, r0
      f6:	a2 04       	cpc	r10, r2
      f8:	a2 04       	cpc	r10, r2
      fa:	a2 04       	cpc	r10, r2
      fc:	a2 04       	cpc	r10, r2
      fe:	a2 04       	cpc	r10, r2
     100:	a2 04       	cpc	r10, r2
     102:	a2 04       	cpc	r10, r2
     104:	52 04       	cpc	r5, r2
     106:	a2 04       	cpc	r10, r2
     108:	a2 04       	cpc	r10, r2
     10a:	a2 04       	cpc	r10, r2
     10c:	a2 04       	cpc	r10, r2
     10e:	a2 04       	cpc	r10, r2
     110:	a2 04       	cpc	r10, r2
     112:	a2 04       	cpc	r10, r2
     114:	a2 04       	cpc	r10, r2
     116:	a2 04       	cpc	r10, r2
     118:	a2 04       	cpc	r10, r2
     11a:	a2 04       	cpc	r10, r2
     11c:	a2 04       	cpc	r10, r2
     11e:	a2 04       	cpc	r10, r2
     120:	a2 04       	cpc	r10, r2
     122:	a2 04       	cpc	r10, r2
     124:	52 04       	cpc	r5, r2
     126:	a2 04       	cpc	r10, r2
     128:	a2 04       	cpc	r10, r2
     12a:	a2 04       	cpc	r10, r2
     12c:	a2 04       	cpc	r10, r2
     12e:	a2 04       	cpc	r10, r2
     130:	a2 04       	cpc	r10, r2
     132:	a2 04       	cpc	r10, r2
     134:	a2 04       	cpc	r10, r2
     136:	a2 04       	cpc	r10, r2
     138:	a2 04       	cpc	r10, r2
     13a:	a2 04       	cpc	r10, r2
     13c:	a2 04       	cpc	r10, r2
     13e:	a2 04       	cpc	r10, r2
     140:	a2 04       	cpc	r10, r2
     142:	a2 04       	cpc	r10, r2
     144:	9e 04       	cpc	r9, r14
     146:	a2 04       	cpc	r10, r2
     148:	a2 04       	cpc	r10, r2
     14a:	a2 04       	cpc	r10, r2
     14c:	a2 04       	cpc	r10, r2
     14e:	a2 04       	cpc	r10, r2
     150:	a2 04       	cpc	r10, r2
     152:	a2 04       	cpc	r10, r2
     154:	7b 04       	cpc	r7, r11
     156:	a2 04       	cpc	r10, r2
     158:	a2 04       	cpc	r10, r2
     15a:	a2 04       	cpc	r10, r2
     15c:	a2 04       	cpc	r10, r2
     15e:	a2 04       	cpc	r10, r2
     160:	a2 04       	cpc	r10, r2
     162:	a2 04       	cpc	r10, r2
     164:	a2 04       	cpc	r10, r2
     166:	a2 04       	cpc	r10, r2
     168:	a2 04       	cpc	r10, r2
     16a:	a2 04       	cpc	r10, r2
     16c:	a2 04       	cpc	r10, r2
     16e:	a2 04       	cpc	r10, r2
     170:	a2 04       	cpc	r10, r2
     172:	a2 04       	cpc	r10, r2
     174:	6f 04       	cpc	r6, r15
     176:	a2 04       	cpc	r10, r2
     178:	a2 04       	cpc	r10, r2
     17a:	a2 04       	cpc	r10, r2
     17c:	a2 04       	cpc	r10, r2
     17e:	a2 04       	cpc	r10, r2
     180:	a2 04       	cpc	r10, r2
     182:	a2 04       	cpc	r10, r2
     184:	8d 04       	cpc	r8, r13

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	ec e8       	ldi	r30, 0x8C	; 140
     19e:	f5 e1       	ldi	r31, 0x15	; 21
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	aa 3a       	cpi	r26, 0xAA	; 170
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	aa ea       	ldi	r26, 0xAA	; 170
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a6 3c       	cpi	r26, 0xC6	; 198
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	24 d0       	rcall	.+72     	; 0x20a <main>
     1c2:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <adc_init>:
#include "adc.h"

void adc_init(){
	
	// Division factor 128
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     1c8:	ea e7       	ldi	r30, 0x7A	; 122
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	87 68       	ori	r24, 0x87	; 135
     1d0:	80 83       	st	Z, r24
	
	/*We find max voltage to be 1.1 V
	Internal 1.1 V Voltage Reference with external capacitor at AREF pin  ->  REFS1 = 1 REFS0 = 0 
	*/  
	ADMUX |= (1 << REFS0);
     1d2:	ec e7       	ldi	r30, 0x7C	; 124
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 64       	ori	r24, 0x40	; 64
     1da:	80 83       	st	Z, r24
	//ADMUX &= ~(1 << REFS1);
	ADMUX |= (1 << REFS1);
     1dc:	80 81       	ld	r24, Z
     1de:	80 68       	ori	r24, 0x80	; 128
     1e0:	80 83       	st	Z, r24
     1e2:	08 95       	ret

000001e4 <adc_read>:
	
	
}

uint16_t adc_read(uint8_t ch){ //IR set to ADC0 = PF0
	ADMUX |= (ch & 0x03);
     1e4:	ec e7       	ldi	r30, 0x7C	; 124
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	90 81       	ld	r25, Z
     1ea:	83 70       	andi	r24, 0x03	; 3
     1ec:	98 2b       	or	r25, r24
     1ee:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADSC);
     1f0:	ea e7       	ldi	r30, 0x7A	; 122
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	80 64       	ori	r24, 0x40	; 64
     1f8:	80 83       	st	Z, r24
	
	while((ADCSRA & (1 << ADSC))){}
     1fa:	80 81       	ld	r24, Z
     1fc:	86 fd       	sbrc	r24, 6
     1fe:	fd cf       	rjmp	.-6      	; 0x1fa <adc_read+0x16>

	return ADC; //sexy premade code
     200:	80 91 78 00 	lds	r24, 0x0078
     204:	90 91 79 00 	lds	r25, 0x0079
     208:	08 95       	ret

0000020a <main>:

*/



int main(void){
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	2b 97       	sbiw	r28, 0x0b	; 11
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	f8 94       	cli
     218:	de bf       	out	0x3e, r29	; 62
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	cd bf       	out	0x3d, r28	; 61
		PORTB = 0;
		_delay_ms(500);
	}*/
	
	
	MCUCR |= (1 << SRE);
     21e:	85 b7       	in	r24, 0x35	; 53
     220:	80 68       	ori	r24, 0x80	; 128
     222:	85 bf       	out	0x35, r24	; 53
	uart_Init(MYUBRR);
     224:	87 e6       	ldi	r24, 0x67	; 103
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	b3 d3       	rcall	.+1894   	; 0x990 <uart_Init>
	//
	
	
	can_init(MODE_NORMAL);
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	38 d0       	rcall	.+112    	; 0x2a0 <can_init>
	pwm_init();//servo
     230:	34 d2       	rcall	.+1128   	; 0x69a <pwm_init>
	adc_init();
     232:	ca df       	rcall	.-108    	; 0x1c8 <adc_init>
	
	DDRE |= (1 << 3); //studass PWM bandaid that can be removed? 
     234:	6b 9a       	sbi	0x0d, 3	; 13
	/*
	int high = adc_read(0x00);
	int low = adc_read(0x00);
	*/

	timer_init();
     236:	d4 d2       	rcall	.+1448   	; 0x7e0 <timer_init>
	
	solenoid_init();
     238:	ae d2       	rcall	.+1372   	; 0x796 <solenoid_init>
	motor_init();
     23a:	ba d1       	rcall	.+884    	; 0x5b0 <motor_init>
			motor_direction(right);
		}
		else
			motor_direction(left);
		
		printf("x: %d\tspeed: %d\n",canjoy_joystick_x(), speed);
     23c:	0f 2e       	mov	r0, r31
     23e:	f9 e0       	ldi	r31, 0x09	; 9
     240:	ef 2e       	mov	r14, r31
     242:	f2 e0       	ldi	r31, 0x02	; 2
     244:	ff 2e       	mov	r15, r31
     246:	f0 2d       	mov	r31, r0
	
	
	
	while(1){
		
		motor_solenoid_test();
     248:	e2 d1       	rcall	.+964    	; 0x60e <motor_solenoid_test>
		canjoy_recieve();
     24a:	ce 01       	movw	r24, r28
     24c:	01 96       	adiw	r24, 0x01	; 1
     24e:	db d0       	rcall	.+438    	; 0x406 <canjoy_recieve>
		speed = 2 * abs(canjoy_joystick_x() - 127);
     250:	18 d1       	rcall	.+560    	; 0x482 <canjoy_joystick_x>
     252:	8f 57       	subi	r24, 0x7F	; 127
     254:	91 09       	sbc	r25, r1
     256:	8c 01       	movw	r16, r24
     258:	99 23       	and	r25, r25
     25a:	24 f4       	brge	.+8      	; 0x264 <main+0x5a>
     25c:	00 27       	eor	r16, r16
     25e:	11 27       	eor	r17, r17
     260:	08 1b       	sub	r16, r24
     262:	19 0b       	sbc	r17, r25
     264:	00 0f       	add	r16, r16
     266:	11 1f       	adc	r17, r17
		
		motor_speed(speed);
     268:	c8 01       	movw	r24, r16
     26a:	92 d1       	rcall	.+804    	; 0x590 <motor_speed>
		if(canjoy_joystick_x() > 128){
     26c:	0a d1       	rcall	.+532    	; 0x482 <canjoy_joystick_x>
     26e:	81 38       	cpi	r24, 0x81	; 129
     270:	91 05       	cpc	r25, r1
     272:	24 f0       	brlt	.+8      	; 0x27c <main+0x72>
			motor_direction(right);
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	83 d1       	rcall	.+774    	; 0x580 <motor_direction>
     27a:	03 c0       	rjmp	.+6      	; 0x282 <main+0x78>
		}
		else
			motor_direction(left);
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	7f d1       	rcall	.+766    	; 0x580 <motor_direction>
		
		printf("x: %d\tspeed: %d\n",canjoy_joystick_x(), speed);
     282:	ff d0       	rcall	.+510    	; 0x482 <canjoy_joystick_x>
     284:	1f 93       	push	r17
     286:	0f 93       	push	r16
     288:	9f 93       	push	r25
     28a:	8f 93       	push	r24
     28c:	ff 92       	push	r15
     28e:	ef 92       	push	r14
     290:	61 d5       	rcall	.+2754   	; 0xd54 <printf>
			high = adc;
		if(adc < low)
			low = adc;
		printf("\nIR VALUE: %d\tHighest: %d\tLowest: %d\tUnblocked: %d\talt_blocked: %d\n", adc, high, low, ir_unblocked(), ir_alt_unblocked());*/
		
	}
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	d4 cf       	rjmp	.-88     	; 0x248 <main+0x3e>

000002a0 <can_init>:
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
}
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	ec 01       	movw	r28, r24
     2a6:	3b d1       	rcall	.+630    	; 0x51e <mcp2515_init>
     2a8:	4f ef       	ldi	r20, 0xFF	; 255
     2aa:	50 e0       	ldi	r21, 0x00	; 0
     2ac:	60 e6       	ldi	r22, 0x60	; 96
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	80 e6       	ldi	r24, 0x60	; 96
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	1b d1       	rcall	.+566    	; 0x4ec <mcp2515_bit_modify>
     2b6:	4f ef       	ldi	r20, 0xFF	; 255
     2b8:	50 e0       	ldi	r21, 0x00	; 0
     2ba:	60 e6       	ldi	r22, 0x60	; 96
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	80 e7       	ldi	r24, 0x70	; 112
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	14 d1       	rcall	.+552    	; 0x4ec <mcp2515_bit_modify>
     2c4:	ae 01       	movw	r20, r28
     2c6:	60 ee       	ldi	r22, 0xE0	; 224
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	8f e0       	ldi	r24, 0x0F	; 15
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e d1       	rcall	.+540    	; 0x4ec <mcp2515_bit_modify>
     2d0:	69 98       	cbi	0x0d, 1	; 13
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <can_poll_interrupt>:
}


uint8_t can_poll_interrupt(){
	
	while(!(PINE & (1 << PE1))){}
     2d8:	61 9b       	sbis	0x0c, 1	; 12
     2da:	fe cf       	rjmp	.-4      	; 0x2d8 <can_poll_interrupt>
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
     2dc:	8c e2       	ldi	r24, 0x2C	; 44
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	f9 d0       	rcall	.+498    	; 0x4d4 <mcp2515_read>
     2e2:	80 fd       	sbrc	r24, 0
     2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <can_poll_interrupt+0x1c>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
	}
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
     2e6:	8c e2       	ldi	r24, 0x2C	; 44
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	f4 d0       	rcall	.+488    	; 0x4d4 <mcp2515_read>
     2ec:	81 ff       	sbrs	r24, 1
     2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <can_poll_interrupt+0x20>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
     2f0:	80 e7       	ldi	r24, 0x70	; 112
     2f2:	08 95       	ret
	
	while(!(PINE & (1 << PE1))){}
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
     2f4:	80 e6       	ldi	r24, 0x60	; 96
     2f6:	08 95       	ret
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
	}
	return -1;
     2f8:	8f ef       	ldi	r24, 0xFF	; 255
}
     2fa:	08 95       	ret

000002fc <can_recieve>:
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
}

can_message can_recieve(can_message* msg){
     2fc:	7f 92       	push	r7
     2fe:	8f 92       	push	r8
     300:	9f 92       	push	r9
     302:	af 92       	push	r10
     304:	bf 92       	push	r11
     306:	cf 92       	push	r12
     308:	df 92       	push	r13
     30a:	ef 92       	push	r14
     30c:	ff 92       	push	r15
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	2b 97       	sbiw	r28, 0x0b	; 11
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
     326:	6c 01       	movw	r12, r24
	can_message m;
	
	uint8_t buffer_select = can_poll_interrupt();
     328:	d7 df       	rcall	.-82     	; 0x2d8 <can_poll_interrupt>
     32a:	98 2e       	mov	r9, r24
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
     32c:	08 2f       	mov	r16, r24
     32e:	10 e0       	ldi	r17, 0x00	; 0
     330:	c8 01       	movw	r24, r16
     332:	01 96       	adiw	r24, 0x01	; 1
     334:	cf d0       	rcall	.+414    	; 0x4d4 <mcp2515_read>
     336:	7c 01       	movw	r14, r24
     338:	c8 01       	movw	r24, r16
     33a:	02 96       	adiw	r24, 0x02	; 2
     33c:	cb d0       	rcall	.+406    	; 0x4d4 <mcp2515_read>
     33e:	95 95       	asr	r25
     340:	87 95       	ror	r24
     342:	95 95       	asr	r25
     344:	87 95       	ror	r24
     346:	95 95       	asr	r25
     348:	87 95       	ror	r24
     34a:	95 95       	asr	r25
     34c:	87 95       	ror	r24
     34e:	95 95       	asr	r25
     350:	87 95       	ror	r24
     352:	ee 0c       	add	r14, r14
     354:	ff 1c       	adc	r15, r15
     356:	ee 0c       	add	r14, r14
     358:	ff 1c       	adc	r15, r15
     35a:	ee 0c       	add	r14, r14
     35c:	ff 1c       	adc	r15, r15
     35e:	5c 01       	movw	r10, r24
     360:	ae 28       	or	r10, r14
     362:	bf 28       	or	r11, r15
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
     364:	c8 01       	movw	r24, r16
     366:	05 96       	adiw	r24, 0x05	; 5
     368:	b5 d0       	rcall	.+362    	; 0x4d4 <mcp2515_read>
     36a:	8f 70       	andi	r24, 0x0F	; 15
     36c:	78 2e       	mov	r7, r24
	
	for(uint8_t i = 0; i < m.length; i++){
     36e:	a9 f0       	breq	.+42     	; 0x39a <can_recieve+0x9e>
     370:	8e 01       	movw	r16, r28
     372:	0c 5f       	subi	r16, 0xFC	; 252
     374:	1f 4f       	sbci	r17, 0xFF	; 255
     376:	81 2c       	mov	r8, r1
     378:	ce 01       	movw	r24, r28
     37a:	80 95       	com	r24
     37c:	90 95       	com	r25
     37e:	03 96       	adiw	r24, 0x03	; 3
     380:	7c 01       	movw	r14, r24
     382:	e9 0c       	add	r14, r9
     384:	f1 1c       	adc	r15, r1
		m.data[i] = mcp2515_read(buffer_select + MCP2515_RXB_OFFSET + i);// + i, msg->data[i]);
     386:	c7 01       	movw	r24, r14
     388:	80 0f       	add	r24, r16
     38a:	91 1f       	adc	r25, r17
     38c:	a3 d0       	rcall	.+326    	; 0x4d4 <mcp2515_read>
     38e:	f8 01       	movw	r30, r16
     390:	81 93       	st	Z+, r24
     392:	8f 01       	movw	r16, r30
	uint8_t buffer_select = can_poll_interrupt();
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
	
	for(uint8_t i = 0; i < m.length; i++){
     394:	83 94       	inc	r8
     396:	87 10       	cpse	r8, r7
     398:	f6 cf       	rjmp	.-20     	; 0x386 <can_recieve+0x8a>
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	
	switch(buffer_select){
     39a:	f0 e6       	ldi	r31, 0x60	; 96
     39c:	9f 16       	cp	r9, r31
     39e:	21 f0       	breq	.+8      	; 0x3a8 <can_recieve+0xac>
     3a0:	80 e7       	ldi	r24, 0x70	; 112
     3a2:	98 16       	cp	r9, r24
     3a4:	49 f0       	breq	.+18     	; 0x3b8 <can_recieve+0xbc>
     3a6:	0f c0       	rjmp	.+30     	; 0x3c6 <can_recieve+0xca>
		case MCP_RXB0CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
     3a8:	40 e0       	ldi	r20, 0x00	; 0
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	61 e0       	ldi	r22, 0x01	; 1
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	8c e2       	ldi	r24, 0x2C	; 44
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	9b d0       	rcall	.+310    	; 0x4ec <mcp2515_bit_modify>
		break;
     3b6:	07 c0       	rjmp	.+14     	; 0x3c6 <can_recieve+0xca>
		case MCP_RXB1CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
     3b8:	40 e0       	ldi	r20, 0x00	; 0
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	62 e0       	ldi	r22, 0x02	; 2
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	8c e2       	ldi	r24, 0x2C	; 44
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	93 d0       	rcall	.+294    	; 0x4ec <mcp2515_bit_modify>
		break;
	}
	
	return m;
     3c6:	ba 82       	std	Y+2, r11	; 0x02
     3c8:	a9 82       	std	Y+1, r10	; 0x01
     3ca:	7b 82       	std	Y+3, r7	; 0x03
     3cc:	8b e0       	ldi	r24, 0x0B	; 11
     3ce:	fe 01       	movw	r30, r28
     3d0:	31 96       	adiw	r30, 0x01	; 1
     3d2:	d6 01       	movw	r26, r12
     3d4:	01 90       	ld	r0, Z+
     3d6:	0d 92       	st	X+, r0
     3d8:	8a 95       	dec	r24
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <can_recieve+0xd8>
}
     3dc:	c6 01       	movw	r24, r12
     3de:	2b 96       	adiw	r28, 0x0b	; 11
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	f8 94       	cli
     3e4:	de bf       	out	0x3e, r29	; 62
     3e6:	0f be       	out	0x3f, r0	; 63
     3e8:	cd bf       	out	0x3d, r28	; 61
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	cf 90       	pop	r12
     3fa:	bf 90       	pop	r11
     3fc:	af 90       	pop	r10
     3fe:	9f 90       	pop	r9
     400:	8f 90       	pop	r8
     402:	7f 90       	pop	r7
     404:	08 95       	ret

00000406 <canjoy_recieve>:
int canjoy_slider_right(){
	return canjoy_msg.data[4];
}
int canjoy_button_left(){
	return canjoy_msg.data[5];
}
     406:	ef 92       	push	r14
     408:	ff 92       	push	r15
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	ec 01       	movw	r28, r24
     414:	73 df       	rcall	.-282    	; 0x2fc <can_recieve>
     416:	ea 80       	ldd	r14, Y+2	; 0x02
     418:	fb 80       	ldd	r15, Y+3	; 0x03
     41a:	0c 81       	ldd	r16, Y+4	; 0x04
     41c:	1d 81       	ldd	r17, Y+5	; 0x05
     41e:	7e 81       	ldd	r23, Y+6	; 0x06
     420:	6f 81       	ldd	r22, Y+7	; 0x07
     422:	58 85       	ldd	r21, Y+8	; 0x08
     424:	49 85       	ldd	r20, Y+9	; 0x09
     426:	28 81       	ld	r18, Y
     428:	39 81       	ldd	r19, Y+1	; 0x01
     42a:	80 91 06 02 	lds	r24, 0x0206
     42e:	90 91 07 02 	lds	r25, 0x0207
     432:	28 17       	cp	r18, r24
     434:	39 07       	cpc	r19, r25
     436:	89 f4       	brne	.+34     	; 0x45a <canjoy_recieve+0x54>
     438:	8b e0       	ldi	r24, 0x0B	; 11
     43a:	fe 01       	movw	r30, r28
     43c:	a1 eb       	ldi	r26, 0xB1	; 177
     43e:	b2 e0       	ldi	r27, 0x02	; 2
     440:	01 90       	ld	r0, Z+
     442:	0d 92       	st	X+, r0
     444:	8a 95       	dec	r24
     446:	e1 f7       	brne	.-8      	; 0x440 <canjoy_recieve+0x3a>
     448:	ea 82       	std	Y+2, r14	; 0x02
     44a:	fb 82       	std	Y+3, r15	; 0x03
     44c:	0c 83       	std	Y+4, r16	; 0x04
     44e:	1d 83       	std	Y+5, r17	; 0x05
     450:	7e 83       	std	Y+6, r23	; 0x06
     452:	6f 83       	std	Y+7, r22	; 0x07
     454:	58 87       	std	Y+8, r21	; 0x08
     456:	49 87       	std	Y+9, r20	; 0x09
     458:	0c c0       	rjmp	.+24     	; 0x472 <canjoy_recieve+0x6c>
     45a:	8a e1       	ldi	r24, 0x1A	; 26
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	8b d4       	rcall	.+2326   	; 0xd76 <puts>
     460:	87 e0       	ldi	r24, 0x07	; 7
     462:	8a 83       	std	Y+2, r24	; 0x02
     464:	8b 83       	std	Y+3, r24	; 0x03
     466:	1c 82       	std	Y+4, r1	; 0x04
     468:	1d 82       	std	Y+5, r1	; 0x05
     46a:	1e 82       	std	Y+6, r1	; 0x06
     46c:	1f 82       	std	Y+7, r1	; 0x07
     46e:	18 86       	std	Y+8, r1	; 0x08
     470:	19 86       	std	Y+9, r1	; 0x09
     472:	ce 01       	movw	r24, r28
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	ff 90       	pop	r15
     47e:	ef 90       	pop	r14
     480:	08 95       	ret

00000482 <canjoy_joystick_x>:
     482:	80 91 b4 02 	lds	r24, 0x02B4
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	08 95       	ret

0000048a <canjoy_button_right>:
int canjoy_button_right(){
	return canjoy_msg.data[6];
     48a:	80 91 ba 02 	lds	r24, 0x02BA
}
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	08 95       	ret

00000492 <ir_alt_blocked>:
	
}

int ir_alt_blocked(){
	
	if(adc_read(IR_PIN) > MID){
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	a7 de       	rcall	.-690    	; 0x1e4 <adc_read>
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	8d 32       	cpi	r24, 0x2D	; 45
     49c:	91 40       	sbci	r25, 0x01	; 1
     49e:	10 f0       	brcs	.+4      	; 0x4a4 <ir_alt_blocked+0x12>
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
		return 1;
	
	
}
     4a4:	c9 01       	movw	r24, r18
     4a6:	08 95       	ret

000004a8 <max520_init>:
#define MAX520_TWI_ADDR 0b01011110



void max520_init(){
	TWI_Master_Initialise();
     4a8:	b4 d1       	rcall	.+872    	; 0x812 <TWI_Master_Initialise>
	sei();//interrupts on
     4aa:	78 94       	sei
     4ac:	08 95       	ret

000004ae <max520_send>:
}


void max520_send(uint8_t val)
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <max520_send+0x6>
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
	//printf("In max520_send\n");
	uint8_t message[3] = {MAX520_TWI_ADDR, 0, val};
     4b8:	9e e5       	ldi	r25, 0x5E	; 94
     4ba:	99 83       	std	Y+1, r25	; 0x01
     4bc:	1a 82       	std	Y+2, r1	; 0x02
     4be:	8b 83       	std	Y+3, r24	; 0x03
	
	TWI_Start_Transceiver_With_Data(message, 3);
     4c0:	63 e0       	ldi	r22, 0x03	; 3
     4c2:	ce 01       	movw	r24, r28
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	af d1       	rcall	.+862    	; 0x826 <TWI_Start_Transceiver_With_Data>
	
}
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <mcp2515_read>:
}

void mcp2515_request_to_send(int buffer_select){
	PORTB &= ~(1 << MCP2515_CS);
	spi_write(buffer_select);
	PORTB |= (1 << MCP2515_CS);
     4d4:	cf 93       	push	r28
     4d6:	c8 2f       	mov	r28, r24
     4d8:	28 98       	cbi	0x05, 0	; 5
     4da:	83 e0       	ldi	r24, 0x03	; 3
     4dc:	7a d1       	rcall	.+756    	; 0x7d2 <spi_write>
     4de:	8c 2f       	mov	r24, r28
     4e0:	78 d1       	rcall	.+752    	; 0x7d2 <spi_write>
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	76 d1       	rcall	.+748    	; 0x7d2 <spi_write>
     4e6:	28 9a       	sbi	0x05, 0	; 5
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <mcp2515_bit_modify>:
}

void mcp2515_bit_modify(int address, int mask, int data){
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	18 2f       	mov	r17, r24
     4f4:	d6 2f       	mov	r29, r22
     4f6:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS);
     4f8:	28 98       	cbi	0x05, 0	; 5
	
	spi_write(MCP_BITMOD);
     4fa:	85 e0       	ldi	r24, 0x05	; 5
     4fc:	6a d1       	rcall	.+724    	; 0x7d2 <spi_write>
	spi_write(address);
     4fe:	81 2f       	mov	r24, r17
     500:	68 d1       	rcall	.+720    	; 0x7d2 <spi_write>
	spi_write(mask);
     502:	8d 2f       	mov	r24, r29
     504:	66 d1       	rcall	.+716    	; 0x7d2 <spi_write>
	spi_write(data);
     506:	8c 2f       	mov	r24, r28
     508:	64 d1       	rcall	.+712    	; 0x7d2 <spi_write>

	PORTB |= (1 << MCP2515_CS);
     50a:	28 9a       	sbi	0x05, 0	; 5
	
}
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	08 95       	ret

00000514 <mcp2515_reset>:

void mcp2515_reset(){
	PORTB &= ~(1 << MCP2515_CS);
     514:	28 98       	cbi	0x05, 0	; 5
	spi_write(MCP_RESET);
     516:	80 ec       	ldi	r24, 0xC0	; 192
     518:	5c d1       	rcall	.+696    	; 0x7d2 <spi_write>
	PORTB |= (1 << MCP2515_CS);
     51a:	28 9a       	sbi	0x05, 0	; 5
     51c:	08 95       	ret

0000051e <mcp2515_init>:
#include "SPI.h"
#include "mcp2515_define.h"


int mcp2515_init(){
	spi_init();
     51e:	52 d1       	rcall	.+676    	; 0x7c4 <spi_init>
	mcp2515_reset();
     520:	f9 df       	rcall	.-14     	; 0x514 <mcp2515_reset>
	
	uint8_t val = mcp2515_read(MCP_CANSTAT);
     522:	8e e0       	ldi	r24, 0x0E	; 14
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	d6 df       	rcall	.-84     	; 0x4d4 <mcp2515_read>
	if((val & MODE_MASK) != MODE_CONFIG){
     528:	80 7e       	andi	r24, 0xE0	; 224
     52a:	99 27       	eor	r25, r25
     52c:	80 38       	cpi	r24, 0x80	; 128
     52e:	91 05       	cpc	r25, r1
     530:	31 f0       	breq	.+12     	; 0x53e <mcp2515_init+0x20>
		printf("ERROR: MCP2515 is NOT in config mode after reset!\n");
     532:	83 e2       	ldi	r24, 0x23	; 35
     534:	92 e0       	ldi	r25, 0x02	; 2
     536:	1f d4       	rcall	.+2110   	; 0xd76 <puts>
		return 1;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	08 95       	ret
	}
	return 0;
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e0       	ldi	r25, 0x00	; 0
}
     542:	08 95       	ret

00000544 <reverse_bits>:

uint8_t motor_encoder_byte_reversed(){
	uint8_t byte = reverse_bits(PINK);
	
	
}
     544:	28 2f       	mov	r18, r24
     546:	2a 7a       	andi	r18, 0xAA	; 170
     548:	26 95       	lsr	r18
     54a:	98 2f       	mov	r25, r24
     54c:	95 75       	andi	r25, 0x55	; 85
     54e:	99 0f       	add	r25, r25
     550:	92 2b       	or	r25, r18
     552:	29 2f       	mov	r18, r25
     554:	2c 7c       	andi	r18, 0xCC	; 204
     556:	26 95       	lsr	r18
     558:	26 95       	lsr	r18
     55a:	89 2f       	mov	r24, r25
     55c:	83 73       	andi	r24, 0x33	; 51
     55e:	88 0f       	add	r24, r24
     560:	88 0f       	add	r24, r24
     562:	82 2b       	or	r24, r18
     564:	82 95       	swap	r24
     566:	08 95       	ret

00000568 <motor_encoder_select_byte>:
     568:	88 23       	and	r24, r24
     56a:	11 f0       	breq	.+4      	; 0x570 <motor_encoder_select_byte+0x8>
     56c:	8d 9a       	sbi	0x11, 5	; 17
     56e:	08 95       	ret
     570:	8d 98       	cbi	0x11, 5	; 17
     572:	08 95       	ret

00000574 <motor_encoder_output_enable>:
     574:	88 23       	and	r24, r24
     576:	11 f0       	breq	.+4      	; 0x57c <motor_encoder_output_enable+0x8>
     578:	8c 98       	cbi	0x11, 4	; 17
     57a:	08 95       	ret
     57c:	8c 9a       	sbi	0x11, 4	; 17
     57e:	08 95       	ret

00000580 <motor_direction>:
     580:	00 97       	sbiw	r24, 0x00	; 0
     582:	11 f4       	brne	.+4      	; 0x588 <motor_direction+0x8>
     584:	8b 9a       	sbi	0x11, 3	; 17
     586:	08 95       	ret
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	09 f4       	brne	.+2      	; 0x58e <motor_direction+0xe>
     58c:	8b 98       	cbi	0x11, 3	; 17
     58e:	08 95       	ret

00000590 <motor_speed>:
     590:	8f 3f       	cpi	r24, 0xFF	; 255
     592:	91 05       	cpc	r25, r1
     594:	21 f0       	breq	.+8      	; 0x59e <motor_speed+0xe>
     596:	18 f0       	brcs	.+6      	; 0x59e <motor_speed+0xe>
     598:	8f ef       	ldi	r24, 0xFF	; 255
     59a:	89 cf       	rjmp	.-238    	; 0x4ae <max520_send>
     59c:	08 95       	ret
     59e:	87 cf       	rjmp	.-242    	; 0x4ae <max520_send>
     5a0:	08 95       	ret

000005a2 <motor_encoder_reset>:
     5a2:	8e 98       	cbi	0x11, 6	; 17
     5a4:	8a e6       	ldi	r24, 0x6A	; 106
     5a6:	8a 95       	dec	r24
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <motor_encoder_reset+0x4>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <motor_encoder_reset+0xa>
     5ac:	8e 9a       	sbi	0x11, 6	; 17
     5ae:	08 95       	ret

000005b0 <motor_init>:
     5b0:	7b df       	rcall	.-266    	; 0x4a8 <max520_init>
     5b2:	80 b3       	in	r24, 0x10	; 16
     5b4:	88 6f       	ori	r24, 0xF8	; 248
     5b6:	80 bb       	out	0x10, r24	; 16
     5b8:	81 b3       	in	r24, 0x11	; 17
     5ba:	88 63       	ori	r24, 0x38	; 56
     5bc:	81 bb       	out	0x11, r24	; 17
     5be:	8f 98       	cbi	0x11, 7	; 17
     5c0:	10 92 07 01 	sts	0x0107, r1
     5c4:	ee cf       	rjmp	.-36     	; 0x5a2 <motor_encoder_reset>
     5c6:	08 95       	ret

000005c8 <motor_encoder_read>:


uint16_t motor_encoder_read(){
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
	uint8_t msb;
	uint8_t lsb;
	
	
	//enable output
	motor_encoder_output_enable(1);
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	d2 df       	rcall	.-92     	; 0x574 <motor_encoder_output_enable>
	
	//read MSB to data
	motor_encoder_select_byte(0);
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	ca df       	rcall	.-108    	; 0x568 <motor_encoder_select_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d4:	8a e6       	ldi	r24, 0x6A	; 106
     5d6:	8a 95       	dec	r24
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <motor_encoder_read+0xe>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <motor_encoder_read+0x14>
}



uint8_t motor_encoder_byte_read(){
	uint8_t byte = PINK;
     5dc:	80 91 06 01 	lds	r24, 0x0106
	motor_encoder_output_enable(1);
	
	//read MSB to data
	motor_encoder_select_byte(0);
	_delay_us(20);
	msb = reverse_bits(motor_encoder_byte_read());
     5e0:	b1 df       	rcall	.-158    	; 0x544 <reverse_bits>
     5e2:	d8 2f       	mov	r29, r24
	
	//read LSB to data
	motor_encoder_select_byte(1);
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	c0 df       	rcall	.-128    	; 0x568 <motor_encoder_select_byte>
     5e8:	8a e6       	ldi	r24, 0x6A	; 106
     5ea:	8a 95       	dec	r24
     5ec:	f1 f7       	brne	.-4      	; 0x5ea <motor_encoder_read+0x22>
     5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <motor_encoder_read+0x28>
}



uint8_t motor_encoder_byte_read(){
	uint8_t byte = PINK;
     5f0:	80 91 06 01 	lds	r24, 0x0106
	msb = reverse_bits(motor_encoder_byte_read());
	
	//read LSB to data
	motor_encoder_select_byte(1);
	_delay_us(20);
	lsb = reverse_bits(motor_encoder_byte_read());
     5f4:	a7 df       	rcall	.-178    	; 0x544 <reverse_bits>
     5f6:	c8 2f       	mov	r28, r24
	
	//motor_encoder_reset();
	
	//disable output
	motor_encoder_output_enable(0);
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	bc df       	rcall	.-136    	; 0x574 <motor_encoder_output_enable>
	
	
	uint16_t data = (msb << 8) + lsb;
     5fc:	2d 2f       	mov	r18, r29
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	92 2f       	mov	r25, r18
     602:	88 27       	eor	r24, r24
	
	return data;

	
}
     604:	8c 0f       	add	r24, r28
     606:	91 1d       	adc	r25, r1
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	08 95       	ret

0000060e <motor_solenoid_test>:
	}

}


void motor_solenoid_test(){
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	2b 97       	sbiw	r28, 0x0b	; 11
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	de bf       	out	0x3e, r29	; 62
     61e:	0f be       	out	0x3f, r0	; 63
     620:	cd bf       	out	0x3d, r28	; 61
	pwm_init(); //for servo
     622:	3b d0       	rcall	.+118    	; 0x69a <pwm_init>
	solenoid_init();
     624:	b8 d0       	rcall	.+368    	; 0x796 <solenoid_init>
	motor_init();
     626:	c4 df       	rcall	.-120    	; 0x5b0 <motor_init>
		
		pwm_alt_joystick_pulse(canjoy_joystick_x());
		
		ir = ir_alt_blocked();
		
		printf("Ir blocked: %d\t\tEncoder: %d\n", ir, motor_encoder_read());
     628:	05 e5       	ldi	r16, 0x55	; 85
     62a:	12 e0       	ldi	r17, 0x02	; 2
	
	int16_t speed;
	uint8_t ir;
	while(1){
		
		canjoy_recieve();
     62c:	ce 01       	movw	r24, r28
     62e:	01 96       	adiw	r24, 0x01	; 1
     630:	ea de       	rcall	.-556    	; 0x406 <canjoy_recieve>
		speed = 2 * abs(canjoy_joystick_x() - 127);
     632:	27 df       	rcall	.-434    	; 0x482 <canjoy_joystick_x>
     634:	8f 57       	subi	r24, 0x7F	; 127
     636:	91 09       	sbc	r25, r1
     638:	9c 01       	movw	r18, r24
     63a:	99 23       	and	r25, r25
     63c:	24 f4       	brge	.+8      	; 0x646 <motor_solenoid_test+0x38>
     63e:	22 27       	eor	r18, r18
     640:	33 27       	eor	r19, r19
     642:	28 1b       	sub	r18, r24
     644:	39 0b       	sbc	r19, r25
			
		motor_speed(speed);
     646:	c9 01       	movw	r24, r18
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	a1 df       	rcall	.-190    	; 0x590 <motor_speed>
		
		if(canjoy_joystick_x() > 128){
     64e:	19 df       	rcall	.-462    	; 0x482 <canjoy_joystick_x>
     650:	81 38       	cpi	r24, 0x81	; 129
     652:	91 05       	cpc	r25, r1
     654:	24 f0       	brlt	.+8      	; 0x65e <motor_solenoid_test+0x50>
			motor_direction(right);}
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	92 df       	rcall	.-220    	; 0x580 <motor_direction>
     65c:	03 c0       	rjmp	.+6      	; 0x664 <motor_solenoid_test+0x56>
		else{
			motor_direction(left);}
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	8e df       	rcall	.-228    	; 0x580 <motor_direction>
		
		if(canjoy_button_right()){
     664:	12 df       	rcall	.-476    	; 0x48a <canjoy_button_right>
     666:	89 2b       	or	r24, r25
     668:	11 f0       	breq	.+4      	; 0x66e <motor_solenoid_test+0x60>
			solenoid_extend();
     66a:	a0 d0       	rcall	.+320    	; 0x7ac <solenoid_extend>
     66c:	01 c0       	rjmp	.+2      	; 0x670 <motor_solenoid_test+0x62>
		}
		else{
			solenoid_retract();
     66e:	a4 d0       	rcall	.+328    	; 0x7b8 <solenoid_retract>
		}
		
		pwm_alt_joystick_pulse(canjoy_joystick_x());
     670:	08 df       	rcall	.-496    	; 0x482 <canjoy_joystick_x>
     672:	85 d0       	rcall	.+266    	; 0x77e <pwm_alt_joystick_pulse>
		
		ir = ir_alt_blocked();
     674:	0e df       	rcall	.-484    	; 0x492 <ir_alt_blocked>
     676:	7c 01       	movw	r14, r24
		
		printf("Ir blocked: %d\t\tEncoder: %d\n", ir, motor_encoder_read());
     678:	a7 df       	rcall	.-178    	; 0x5c8 <motor_encoder_read>
     67a:	9f 93       	push	r25
     67c:	8f 93       	push	r24
     67e:	c7 01       	movw	r24, r14
     680:	99 27       	eor	r25, r25
     682:	9f 93       	push	r25
     684:	8f 93       	push	r24
     686:	1f 93       	push	r17
     688:	0f 93       	push	r16
     68a:	64 d3       	rcall	.+1736   	; 0xd54 <printf>
		
		
	}
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	c9 cf       	rjmp	.-110    	; 0x62c <motor_solenoid_test+0x1e>

0000069a <pwm_init>:

void pwm_set_value(uint16_t val){
	OCR3A = val;
}

void pwm_set_servo(int16_t val){
     69a:	6b 9a       	sbi	0x0d, 3	; 13
     69c:	73 9a       	sbi	0x0e, 3	; 14
     69e:	a0 e9       	ldi	r26, 0x90	; 144
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	1c 92       	st	X, r1
     6a4:	e1 e9       	ldi	r30, 0x91	; 145
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	10 82       	st	Z, r1
     6aa:	10 92 92 00 	sts	0x0092, r1
     6ae:	8c 91       	ld	r24, X
     6b0:	8e 7f       	andi	r24, 0xFE	; 254
     6b2:	8c 93       	st	X, r24
     6b4:	8c 91       	ld	r24, X
     6b6:	82 60       	ori	r24, 0x02	; 2
     6b8:	8c 93       	st	X, r24
     6ba:	80 81       	ld	r24, Z
     6bc:	88 60       	ori	r24, 0x08	; 8
     6be:	80 83       	st	Z, r24
     6c0:	80 81       	ld	r24, Z
     6c2:	80 61       	ori	r24, 0x10	; 16
     6c4:	80 83       	st	Z, r24
     6c6:	8c 91       	ld	r24, X
     6c8:	8c 93       	st	X, r24
     6ca:	8c 91       	ld	r24, X
     6cc:	80 68       	ori	r24, 0x80	; 128
     6ce:	8c 93       	st	X, r24
     6d0:	80 81       	ld	r24, Z
     6d2:	83 60       	ori	r24, 0x03	; 3
     6d4:	80 83       	st	Z, r24
     6d6:	80 81       	ld	r24, Z
     6d8:	8b 7f       	andi	r24, 0xFB	; 251
     6da:	80 83       	st	Z, r24
     6dc:	88 e8       	ldi	r24, 0x88	; 136
     6de:	93 e1       	ldi	r25, 0x13	; 19
     6e0:	90 93 97 00 	sts	0x0097, r25
     6e4:	80 93 96 00 	sts	0x0096, r24
     6e8:	87 e7       	ldi	r24, 0x77	; 119
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	90 93 99 00 	sts	0x0099, r25
     6f0:	80 93 98 00 	sts	0x0098, r24
     6f4:	08 95       	ret

000006f6 <pwm_set_pulse>:
	//delete and remove from header
}

void pwm_set_pulse(int16_t val){
	
	if(val >= P_MAX)
     6f6:	8d 30       	cpi	r24, 0x0D	; 13
     6f8:	22 e0       	ldi	r18, 0x02	; 2
     6fa:	92 07       	cpc	r25, r18
     6fc:	3c f0       	brlt	.+14     	; 0x70c <pwm_set_pulse+0x16>
	//printf("PWM init done:\n\tTCCRA: %02X\n\tTCCRB: %02X\n\tICR: %02X\n\tOCR: %02X\n", TCCR3A, TCCR3B, ICR3, OCR3A);
}


void pwm_set_value(uint16_t val){
	OCR3A = val;
     6fe:	8d e0       	ldi	r24, 0x0D	; 13
     700:	92 e0       	ldi	r25, 0x02	; 2
     702:	90 93 99 00 	sts	0x0099, r25
     706:	80 93 98 00 	sts	0x0098, r24
     70a:	08 95       	ret

void pwm_set_pulse(int16_t val){
	
	if(val >= P_MAX)
		pwm_set_value(P_MAX);
	else if(val < P_MIN)
     70c:	81 3e       	cpi	r24, 0xE1	; 225
     70e:	91 05       	cpc	r25, r1
     710:	3c f4       	brge	.+14     	; 0x720 <pwm_set_pulse+0x2a>
	//printf("PWM init done:\n\tTCCRA: %02X\n\tTCCRB: %02X\n\tICR: %02X\n\tOCR: %02X\n", TCCR3A, TCCR3B, ICR3, OCR3A);
}


void pwm_set_value(uint16_t val){
	OCR3A = val;
     712:	81 ee       	ldi	r24, 0xE1	; 225
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	90 93 99 00 	sts	0x0099, r25
     71a:	80 93 98 00 	sts	0x0098, r24
     71e:	08 95       	ret
     720:	90 93 99 00 	sts	0x0099, r25
     724:	80 93 98 00 	sts	0x0098, r24
     728:	08 95       	ret

0000072a <pwm_joystick_pulse>:


//uses joystick_x_value() which returns between 0 and 255
void pwm_joystick_pulse(int16_t val){
	
	if((val > 255) || (val < 0)){
     72a:	8f 3f       	cpi	r24, 0xFF	; 255
     72c:	91 05       	cpc	r25, r1
     72e:	99 f0       	breq	.+38     	; 0x756 <pwm_joystick_pulse+0x2c>
     730:	90 f0       	brcs	.+36     	; 0x756 <pwm_joystick_pulse+0x2c>
		printf("ERROR: pwm_joystick_pulse input val = %d out of range!\n", val);
     732:	9f 93       	push	r25
     734:	8f 93       	push	r24
     736:	82 e7       	ldi	r24, 0x72	; 114
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	9f 93       	push	r25
     73c:	8f 93       	push	r24
     73e:	0a d3       	rcall	.+1556   	; 0xd54 <printf>
	//printf("PWM init done:\n\tTCCRA: %02X\n\tTCCRB: %02X\n\tICR: %02X\n\tOCR: %02X\n", TCCR3A, TCCR3B, ICR3, OCR3A);
}


void pwm_set_value(uint16_t val){
	OCR3A = val;
     740:	87 e7       	ldi	r24, 0x77	; 119
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	90 93 99 00 	sts	0x0099, r25
     748:	80 93 98 00 	sts	0x0098, r24
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	08 95       	ret
		pwm_set_value(P_MID);
		return;
	}
	else{
		
		uint16_t pulse_width = (val * (300/255.0)) + P_MIN;
     756:	bc 01       	movw	r22, r24
     758:	88 27       	eor	r24, r24
     75a:	77 fd       	sbrc	r23, 7
     75c:	80 95       	com	r24
     75e:	98 2f       	mov	r25, r24
     760:	ba d1       	rcall	.+884    	; 0xad6 <__floatsisf>
     762:	27 e9       	ldi	r18, 0x97	; 151
     764:	36 e9       	ldi	r19, 0x96	; 150
     766:	46 e9       	ldi	r20, 0x96	; 150
     768:	5f e3       	ldi	r21, 0x3F	; 63
     76a:	41 d2       	rcall	.+1154   	; 0xbee <__mulsf3>
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	41 e6       	ldi	r20, 0x61	; 97
     772:	53 e4       	ldi	r21, 0x43	; 67
     774:	1e d1       	rcall	.+572    	; 0x9b2 <__addsf3>
     776:	81 d1       	rcall	.+770    	; 0xa7a <__fixunssfsi>
		
		//printf("\nPulse converted from %d to %d\t P_RESOLUTION = %d\n", val, pulse_width, P_RESOLUTION);
		pwm_set_pulse(pulse_width);
     778:	cb 01       	movw	r24, r22
     77a:	bd cf       	rjmp	.-134    	; 0x6f6 <pwm_set_pulse>
     77c:	08 95       	ret

0000077e <pwm_alt_joystick_pulse>:
	return;
}

void pwm_alt_joystick_pulse(int16_t val){
	
	pwm_joystick_pulse(abs(val - 255));
     77e:	9c 01       	movw	r18, r24
     780:	2f 5f       	subi	r18, 0xFF	; 255
     782:	31 09       	sbc	r19, r1
     784:	c9 01       	movw	r24, r18
     786:	99 23       	and	r25, r25
     788:	24 f4       	brge	.+8      	; 0x792 <pwm_alt_joystick_pulse+0x14>
     78a:	88 27       	eor	r24, r24
     78c:	99 27       	eor	r25, r25
     78e:	82 1b       	sub	r24, r18
     790:	93 0b       	sbc	r25, r19
     792:	cb cf       	rjmp	.-106    	; 0x72a <pwm_joystick_pulse>
     794:	08 95       	ret

00000796 <solenoid_init>:
}

void solenoid_shoot(){
	PORTH &= ~(1<<PH3);
	_delay_ms(150);
	PORTH |= (1<<PH3);
     796:	e1 e0       	ldi	r30, 0x01	; 1
     798:	f1 e0       	ldi	r31, 0x01	; 1
     79a:	80 81       	ld	r24, Z
     79c:	88 60       	ori	r24, 0x08	; 8
     79e:	80 83       	st	Z, r24
     7a0:	e2 e0       	ldi	r30, 0x02	; 2
     7a2:	f1 e0       	ldi	r31, 0x01	; 1
     7a4:	80 81       	ld	r24, Z
     7a6:	88 60       	ori	r24, 0x08	; 8
     7a8:	80 83       	st	Z, r24
     7aa:	08 95       	ret

000007ac <solenoid_extend>:
}

void solenoid_extend(){
	PORTH &= ~(1<<PH3);
     7ac:	e2 e0       	ldi	r30, 0x02	; 2
     7ae:	f1 e0       	ldi	r31, 0x01	; 1
     7b0:	80 81       	ld	r24, Z
     7b2:	87 7f       	andi	r24, 0xF7	; 247
     7b4:	80 83       	st	Z, r24
     7b6:	08 95       	ret

000007b8 <solenoid_retract>:
}

void solenoid_retract(){
	PORTH |= (1<<PH3);	
     7b8:	e2 e0       	ldi	r30, 0x02	; 2
     7ba:	f1 e0       	ldi	r31, 0x01	; 1
     7bc:	80 81       	ld	r24, Z
     7be:	88 60       	ori	r24, 0x08	; 8
     7c0:	80 83       	st	Z, r24
     7c2:	08 95       	ret

000007c4 <spi_init>:
#include "SPI.h"
#include <avr/io.h>

void spi_init(){
			//SI out		SS out		SCK out
	DDRB |= ( 1 << PB2) | (1 << PB0) | (1 << PB1);
     7c4:	84 b1       	in	r24, 0x04	; 4
     7c6:	87 60       	ori	r24, 0x07	; 7
     7c8:	84 b9       	out	0x04, r24	; 4
	//SO in
	DDRB &= ~(1 << PB3);
     7ca:	23 98       	cbi	0x04, 3	; 4
	
	//								 frequency / 16
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     7cc:	81 e5       	ldi	r24, 0x51	; 81
     7ce:	8c bd       	out	0x2c, r24	; 44
     7d0:	08 95       	ret

000007d2 <spi_write>:

//both read and write
int spi_write(char data){
	//SPDR = data;
	//while(!(SPSR & (1<<SPIF)));
	SPDR = data;
     7d2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
     7d4:	0d b4       	in	r0, 0x2d	; 45
     7d6:	07 fe       	sbrs	r0, 7
     7d8:	fd cf       	rjmp	.-6      	; 0x7d4 <spi_write+0x2>
	return SPDR;
     7da:	8e b5       	in	r24, 0x2e	; 46
}
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	08 95       	ret

000007e0 <timer_init>:

int time_tick = 0;
int time_tick_max = 0;
void timer_init() {
	
	TCCR4A = 0;
     7e0:	a0 ea       	ldi	r26, 0xA0	; 160
     7e2:	b0 e0       	ldi	r27, 0x00	; 0
     7e4:	1c 92       	st	X, r1
	TCCR4B = 0;
     7e6:	e1 ea       	ldi	r30, 0xA1	; 161
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	10 82       	st	Z, r1
	
	//CS4{2:0}   = 101  prescaler set to 1024
	TCCR4B |=  (1<<CS42) | (1<<CS40);
     7ec:	80 81       	ld	r24, Z
     7ee:	85 60       	ori	r24, 0x05	; 5
     7f0:	80 83       	st	Z, r24
	TCCR4B &= ~(1<<CS41);
     7f2:	80 81       	ld	r24, Z
     7f4:	8d 7f       	andi	r24, 0xFD	; 253
     7f6:	80 83       	st	Z, r24
	
	//0100 -> Mode CTC -> TOP = OCRnA
	TCCR4A &= ~(1<<WGM40);
     7f8:	8c 91       	ld	r24, X
     7fa:	8e 7f       	andi	r24, 0xFE	; 254
     7fc:	8c 93       	st	X, r24
	TCCR4A &= ~(1<<WGM41);
     7fe:	8c 91       	ld	r24, X
     800:	8d 7f       	andi	r24, 0xFD	; 253
     802:	8c 93       	st	X, r24
	TCCR4B |=  (1<<WGM42);
     804:	80 81       	ld	r24, Z
     806:	88 60       	ori	r24, 0x08	; 8
     808:	80 83       	st	Z, r24
	TCCR4B &= ~(1<<WGM43);
     80a:	80 81       	ld	r24, Z
     80c:	8f 7e       	andi	r24, 0xEF	; 239
     80e:	80 83       	st	Z, r24
     810:	08 95       	ret

00000812 <TWI_Master_Initialise>:
		{
			msg[ i ] = TWI_buf[ i ];
		}
	}
	return( TWI_statusReg.lastTransOK );
}
     812:	8c e0       	ldi	r24, 0x0C	; 12
     814:	80 93 b8 00 	sts	0x00B8, r24
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	80 93 bb 00 	sts	0x00BB, r24
     81e:	84 e0       	ldi	r24, 0x04	; 4
     820:	80 93 bc 00 	sts	0x00BC, r24
     824:	08 95       	ret

00000826 <TWI_Start_Transceiver_With_Data>:
     826:	ec eb       	ldi	r30, 0xBC	; 188
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	20 81       	ld	r18, Z
     82c:	20 fd       	sbrc	r18, 0
     82e:	fd cf       	rjmp	.-6      	; 0x82a <TWI_Start_Transceiver_With_Data+0x4>
     830:	60 93 ac 02 	sts	0x02AC, r22
     834:	fc 01       	movw	r30, r24
     836:	20 81       	ld	r18, Z
     838:	20 93 ad 02 	sts	0x02AD, r18
     83c:	20 fd       	sbrc	r18, 0
     83e:	0c c0       	rjmp	.+24     	; 0x858 <TWI_Start_Transceiver_With_Data+0x32>
     840:	62 30       	cpi	r22, 0x02	; 2
     842:	50 f0       	brcs	.+20     	; 0x858 <TWI_Start_Transceiver_With_Data+0x32>
     844:	dc 01       	movw	r26, r24
     846:	11 96       	adiw	r26, 0x01	; 1
     848:	ee ea       	ldi	r30, 0xAE	; 174
     84a:	f2 e0       	ldi	r31, 0x02	; 2
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	9d 91       	ld	r25, X+
     850:	91 93       	st	Z+, r25
     852:	8f 5f       	subi	r24, 0xFF	; 255
     854:	86 13       	cpse	r24, r22
     856:	fb cf       	rjmp	.-10     	; 0x84e <TWI_Start_Transceiver_With_Data+0x28>
     858:	10 92 ab 02 	sts	0x02AB, r1
     85c:	88 ef       	ldi	r24, 0xF8	; 248
     85e:	80 93 08 02 	sts	0x0208, r24
     862:	85 ea       	ldi	r24, 0xA5	; 165
     864:	80 93 bc 00 	sts	0x00BC, r24
     868:	08 95       	ret

0000086a <__vector_39>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
     86a:	1f 92       	push	r1
     86c:	0f 92       	push	r0
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	0f 92       	push	r0
     872:	11 24       	eor	r1, r1
     874:	0b b6       	in	r0, 0x3b	; 59
     876:	0f 92       	push	r0
     878:	2f 93       	push	r18
     87a:	3f 93       	push	r19
     87c:	8f 93       	push	r24
     87e:	9f 93       	push	r25
     880:	af 93       	push	r26
     882:	bf 93       	push	r27
     884:	ef 93       	push	r30
     886:	ff 93       	push	r31
	static unsigned char TWI_bufPtr;
	
	switch (TWSR)
     888:	80 91 b9 00 	lds	r24, 0x00B9
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	fc 01       	movw	r30, r24
     890:	38 97       	sbiw	r30, 0x08	; 8
     892:	e1 35       	cpi	r30, 0x51	; 81
     894:	f1 05       	cpc	r31, r1
     896:	08 f0       	brcs	.+2      	; 0x89a <__vector_39+0x30>
     898:	55 c0       	rjmp	.+170    	; 0x944 <__vector_39+0xda>
     89a:	ee 58       	subi	r30, 0x8E	; 142
     89c:	ff 4f       	sbci	r31, 0xFF	; 255
     89e:	0a c2       	rjmp	.+1044   	; 0xcb4 <__tablejump2__>
	{
		case TWI_START:             // START has been transmitted
		case TWI_REP_START:         // Repeated START has been transmitted
		TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
     8a0:	10 92 aa 02 	sts	0x02AA, r1
		case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
		case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
		if (TWI_bufPtr < TWI_msgSize)
     8a4:	e0 91 aa 02 	lds	r30, 0x02AA
     8a8:	80 91 ac 02 	lds	r24, 0x02AC
     8ac:	e8 17       	cp	r30, r24
     8ae:	70 f4       	brcc	.+28     	; 0x8cc <__vector_39+0x62>
		{
			TWDR = TWI_buf[TWI_bufPtr++];
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	8e 0f       	add	r24, r30
     8b4:	80 93 aa 02 	sts	0x02AA, r24
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	e3 55       	subi	r30, 0x53	; 83
     8bc:	fd 4f       	sbci	r31, 0xFD	; 253
     8be:	80 81       	ld	r24, Z
     8c0:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     8c4:	85 e8       	ldi	r24, 0x85	; 133
     8c6:	80 93 bc 00 	sts	0x00BC, r24
     8ca:	43 c0       	rjmp	.+134    	; 0x952 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
			(0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
			TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     8cc:	80 91 ab 02 	lds	r24, 0x02AB
     8d0:	81 60       	ori	r24, 0x01	; 1
     8d2:	80 93 ab 02 	sts	0x02AB, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     8d6:	84 e9       	ldi	r24, 0x94	; 148
     8d8:	80 93 bc 00 	sts	0x00BC, r24
     8dc:	3a c0       	rjmp	.+116    	; 0x952 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
		TWI_buf[TWI_bufPtr++] = TWDR;
     8de:	e0 91 aa 02 	lds	r30, 0x02AA
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	8e 0f       	add	r24, r30
     8e6:	80 93 aa 02 	sts	0x02AA, r24
     8ea:	80 91 bb 00 	lds	r24, 0x00BB
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	e3 55       	subi	r30, 0x53	; 83
     8f2:	fd 4f       	sbci	r31, 0xFD	; 253
     8f4:	80 83       	st	Z, r24
		case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
		if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
     8f6:	20 91 aa 02 	lds	r18, 0x02AA
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	80 91 ac 02 	lds	r24, 0x02AC
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	01 97       	sbiw	r24, 0x01	; 1
     904:	28 17       	cp	r18, r24
     906:	39 07       	cpc	r19, r25
     908:	24 f4       	brge	.+8      	; 0x912 <__vector_39+0xa8>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     90a:	85 ec       	ldi	r24, 0xC5	; 197
     90c:	80 93 bc 00 	sts	0x00BC, r24
     910:	20 c0       	rjmp	.+64     	; 0x952 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
			(0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     912:	85 e8       	ldi	r24, 0x85	; 133
     914:	80 93 bc 00 	sts	0x00BC, r24
     918:	1c c0       	rjmp	.+56     	; 0x952 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
		TWI_buf[TWI_bufPtr] = TWDR;
     91a:	80 91 bb 00 	lds	r24, 0x00BB
     91e:	e0 91 aa 02 	lds	r30, 0x02AA
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	e3 55       	subi	r30, 0x53	; 83
     926:	fd 4f       	sbci	r31, 0xFD	; 253
     928:	80 83       	st	Z, r24
		TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     92a:	80 91 ab 02 	lds	r24, 0x02AB
     92e:	81 60       	ori	r24, 0x01	; 1
     930:	80 93 ab 02 	sts	0x02AB, r24
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     934:	84 e9       	ldi	r24, 0x94	; 148
     936:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
		(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
		(0<<TWWC);                                 //
		break;
     93a:	0b c0       	rjmp	.+22     	; 0x952 <__vector_39+0xe8>
		case TWI_ARB_LOST:          // Arbitration lost
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     93c:	85 ea       	ldi	r24, 0xA5	; 165
     93e:	80 93 bc 00 	sts	0x00BC, r24
		(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
		(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
		(0<<TWWC);                                 //
		break;
     942:	07 c0       	rjmp	.+14     	; 0x952 <__vector_39+0xe8>
		case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received
		case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
		//    case TWI_NO_STATE              // No relevant state information available; TWINT = ?0?
		case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
		default:
		TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     944:	80 91 b9 00 	lds	r24, 0x00B9
     948:	80 93 08 02 	sts	0x0208, r24
		// Reset TWI Interface
		TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     94c:	84 e0       	ldi	r24, 0x04	; 4
     94e:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
		(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
		(0<<TWWC);                                 //
	}
     952:	ff 91       	pop	r31
     954:	ef 91       	pop	r30
     956:	bf 91       	pop	r27
     958:	af 91       	pop	r26
     95a:	9f 91       	pop	r25
     95c:	8f 91       	pop	r24
     95e:	3f 91       	pop	r19
     960:	2f 91       	pop	r18
     962:	0f 90       	pop	r0
     964:	0b be       	out	0x3b, r0	; 59
     966:	0f 90       	pop	r0
     968:	0f be       	out	0x3f, r0	; 63
     96a:	0f 90       	pop	r0
     96c:	1f 90       	pop	r1
     96e:	18 95       	reti

00000970 <uart_Transmit>:
}

void uart_Transmit( unsigned char data ){
	
	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     970:	e0 ec       	ldi	r30, 0xC0	; 192
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	90 81       	ld	r25, Z
     976:	95 ff       	sbrs	r25, 5
     978:	fd cf       	rjmp	.-6      	; 0x974 <uart_Transmit+0x4>
	
	//Put data into buffer, sends the data
	UDR0 = data;
     97a:	80 93 c6 00 	sts	0x00C6, r24
     97e:	08 95       	ret

00000980 <uart_Receive>:

unsigned char uart_Receive(void){
	
	//Wait for data to be received
	
	while( !(UCSR0A & (1<<RXC0)) );
     980:	e0 ec       	ldi	r30, 0xC0	; 192
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	88 23       	and	r24, r24
     988:	ec f7       	brge	.-6      	; 0x984 <uart_Receive+0x4>
	
	//Get and return received data from buffer
	
	return UDR0;
     98a:	80 91 c6 00 	lds	r24, 0x00C6
}
     98e:	08 95       	ret

00000990 <uart_Init>:
#include "uart.h"

void uart_Init(unsigned int ubrr){
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     990:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     994:	80 93 c4 00 	sts	0x00C4, r24
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     998:	88 e1       	ldi	r24, 0x18	; 24
     99a:	80 93 c1 00 	sts	0x00C1, r24
	
	//Set frame format: 8data, 1stop bit
	UCSR0C = (1 << 7)|(3<<UCSZ00);//here, 7 replaces URSEL0 from ATmega162 project
     99e:	86 e8       	ldi	r24, 0x86	; 134
     9a0:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(uart_Transmit, uart_Receive);
     9a4:	60 ec       	ldi	r22, 0xC0	; 192
     9a6:	74 e0       	ldi	r23, 0x04	; 4
     9a8:	88 eb       	ldi	r24, 0xB8	; 184
     9aa:	94 e0       	ldi	r25, 0x04	; 4
     9ac:	89 c1       	rjmp	.+786    	; 0xcc0 <fdevopen>
     9ae:	08 95       	ret

000009b0 <__subsf3>:
     9b0:	50 58       	subi	r21, 0x80	; 128

000009b2 <__addsf3>:
     9b2:	bb 27       	eor	r27, r27
     9b4:	aa 27       	eor	r26, r26
     9b6:	0e d0       	rcall	.+28     	; 0x9d4 <__addsf3x>
     9b8:	e0 c0       	rjmp	.+448    	; 0xb7a <__fp_round>
     9ba:	d1 d0       	rcall	.+418    	; 0xb5e <__fp_pscA>
     9bc:	30 f0       	brcs	.+12     	; 0x9ca <__addsf3+0x18>
     9be:	d6 d0       	rcall	.+428    	; 0xb6c <__fp_pscB>
     9c0:	20 f0       	brcs	.+8      	; 0x9ca <__addsf3+0x18>
     9c2:	31 f4       	brne	.+12     	; 0x9d0 <__addsf3+0x1e>
     9c4:	9f 3f       	cpi	r25, 0xFF	; 255
     9c6:	11 f4       	brne	.+4      	; 0x9cc <__addsf3+0x1a>
     9c8:	1e f4       	brtc	.+6      	; 0x9d0 <__addsf3+0x1e>
     9ca:	c6 c0       	rjmp	.+396    	; 0xb58 <__fp_nan>
     9cc:	0e f4       	brtc	.+2      	; 0x9d0 <__addsf3+0x1e>
     9ce:	e0 95       	com	r30
     9d0:	e7 fb       	bst	r30, 7
     9d2:	bc c0       	rjmp	.+376    	; 0xb4c <__fp_inf>

000009d4 <__addsf3x>:
     9d4:	e9 2f       	mov	r30, r25
     9d6:	e2 d0       	rcall	.+452    	; 0xb9c <__fp_split3>
     9d8:	80 f3       	brcs	.-32     	; 0x9ba <__addsf3+0x8>
     9da:	ba 17       	cp	r27, r26
     9dc:	62 07       	cpc	r22, r18
     9de:	73 07       	cpc	r23, r19
     9e0:	84 07       	cpc	r24, r20
     9e2:	95 07       	cpc	r25, r21
     9e4:	18 f0       	brcs	.+6      	; 0x9ec <__addsf3x+0x18>
     9e6:	71 f4       	brne	.+28     	; 0xa04 <__addsf3x+0x30>
     9e8:	9e f5       	brtc	.+102    	; 0xa50 <__addsf3x+0x7c>
     9ea:	fa c0       	rjmp	.+500    	; 0xbe0 <__fp_zero>
     9ec:	0e f4       	brtc	.+2      	; 0x9f0 <__addsf3x+0x1c>
     9ee:	e0 95       	com	r30
     9f0:	0b 2e       	mov	r0, r27
     9f2:	ba 2f       	mov	r27, r26
     9f4:	a0 2d       	mov	r26, r0
     9f6:	0b 01       	movw	r0, r22
     9f8:	b9 01       	movw	r22, r18
     9fa:	90 01       	movw	r18, r0
     9fc:	0c 01       	movw	r0, r24
     9fe:	ca 01       	movw	r24, r20
     a00:	a0 01       	movw	r20, r0
     a02:	11 24       	eor	r1, r1
     a04:	ff 27       	eor	r31, r31
     a06:	59 1b       	sub	r21, r25
     a08:	99 f0       	breq	.+38     	; 0xa30 <__addsf3x+0x5c>
     a0a:	59 3f       	cpi	r21, 0xF9	; 249
     a0c:	50 f4       	brcc	.+20     	; 0xa22 <__addsf3x+0x4e>
     a0e:	50 3e       	cpi	r21, 0xE0	; 224
     a10:	68 f1       	brcs	.+90     	; 0xa6c <__addsf3x+0x98>
     a12:	1a 16       	cp	r1, r26
     a14:	f0 40       	sbci	r31, 0x00	; 0
     a16:	a2 2f       	mov	r26, r18
     a18:	23 2f       	mov	r18, r19
     a1a:	34 2f       	mov	r19, r20
     a1c:	44 27       	eor	r20, r20
     a1e:	58 5f       	subi	r21, 0xF8	; 248
     a20:	f3 cf       	rjmp	.-26     	; 0xa08 <__addsf3x+0x34>
     a22:	46 95       	lsr	r20
     a24:	37 95       	ror	r19
     a26:	27 95       	ror	r18
     a28:	a7 95       	ror	r26
     a2a:	f0 40       	sbci	r31, 0x00	; 0
     a2c:	53 95       	inc	r21
     a2e:	c9 f7       	brne	.-14     	; 0xa22 <__addsf3x+0x4e>
     a30:	7e f4       	brtc	.+30     	; 0xa50 <__addsf3x+0x7c>
     a32:	1f 16       	cp	r1, r31
     a34:	ba 0b       	sbc	r27, r26
     a36:	62 0b       	sbc	r22, r18
     a38:	73 0b       	sbc	r23, r19
     a3a:	84 0b       	sbc	r24, r20
     a3c:	ba f0       	brmi	.+46     	; 0xa6c <__addsf3x+0x98>
     a3e:	91 50       	subi	r25, 0x01	; 1
     a40:	a1 f0       	breq	.+40     	; 0xa6a <__addsf3x+0x96>
     a42:	ff 0f       	add	r31, r31
     a44:	bb 1f       	adc	r27, r27
     a46:	66 1f       	adc	r22, r22
     a48:	77 1f       	adc	r23, r23
     a4a:	88 1f       	adc	r24, r24
     a4c:	c2 f7       	brpl	.-16     	; 0xa3e <__addsf3x+0x6a>
     a4e:	0e c0       	rjmp	.+28     	; 0xa6c <__addsf3x+0x98>
     a50:	ba 0f       	add	r27, r26
     a52:	62 1f       	adc	r22, r18
     a54:	73 1f       	adc	r23, r19
     a56:	84 1f       	adc	r24, r20
     a58:	48 f4       	brcc	.+18     	; 0xa6c <__addsf3x+0x98>
     a5a:	87 95       	ror	r24
     a5c:	77 95       	ror	r23
     a5e:	67 95       	ror	r22
     a60:	b7 95       	ror	r27
     a62:	f7 95       	ror	r31
     a64:	9e 3f       	cpi	r25, 0xFE	; 254
     a66:	08 f0       	brcs	.+2      	; 0xa6a <__addsf3x+0x96>
     a68:	b3 cf       	rjmp	.-154    	; 0x9d0 <__addsf3+0x1e>
     a6a:	93 95       	inc	r25
     a6c:	88 0f       	add	r24, r24
     a6e:	08 f0       	brcs	.+2      	; 0xa72 <__addsf3x+0x9e>
     a70:	99 27       	eor	r25, r25
     a72:	ee 0f       	add	r30, r30
     a74:	97 95       	ror	r25
     a76:	87 95       	ror	r24
     a78:	08 95       	ret

00000a7a <__fixunssfsi>:
     a7a:	98 d0       	rcall	.+304    	; 0xbac <__fp_splitA>
     a7c:	88 f0       	brcs	.+34     	; 0xaa0 <__fixunssfsi+0x26>
     a7e:	9f 57       	subi	r25, 0x7F	; 127
     a80:	90 f0       	brcs	.+36     	; 0xaa6 <__fixunssfsi+0x2c>
     a82:	b9 2f       	mov	r27, r25
     a84:	99 27       	eor	r25, r25
     a86:	b7 51       	subi	r27, 0x17	; 23
     a88:	a0 f0       	brcs	.+40     	; 0xab2 <__fixunssfsi+0x38>
     a8a:	d1 f0       	breq	.+52     	; 0xac0 <__fixunssfsi+0x46>
     a8c:	66 0f       	add	r22, r22
     a8e:	77 1f       	adc	r23, r23
     a90:	88 1f       	adc	r24, r24
     a92:	99 1f       	adc	r25, r25
     a94:	1a f0       	brmi	.+6      	; 0xa9c <__fixunssfsi+0x22>
     a96:	ba 95       	dec	r27
     a98:	c9 f7       	brne	.-14     	; 0xa8c <__fixunssfsi+0x12>
     a9a:	12 c0       	rjmp	.+36     	; 0xac0 <__fixunssfsi+0x46>
     a9c:	b1 30       	cpi	r27, 0x01	; 1
     a9e:	81 f0       	breq	.+32     	; 0xac0 <__fixunssfsi+0x46>
     aa0:	9f d0       	rcall	.+318    	; 0xbe0 <__fp_zero>
     aa2:	b1 e0       	ldi	r27, 0x01	; 1
     aa4:	08 95       	ret
     aa6:	9c c0       	rjmp	.+312    	; 0xbe0 <__fp_zero>
     aa8:	67 2f       	mov	r22, r23
     aaa:	78 2f       	mov	r23, r24
     aac:	88 27       	eor	r24, r24
     aae:	b8 5f       	subi	r27, 0xF8	; 248
     ab0:	39 f0       	breq	.+14     	; 0xac0 <__fixunssfsi+0x46>
     ab2:	b9 3f       	cpi	r27, 0xF9	; 249
     ab4:	cc f3       	brlt	.-14     	; 0xaa8 <__fixunssfsi+0x2e>
     ab6:	86 95       	lsr	r24
     ab8:	77 95       	ror	r23
     aba:	67 95       	ror	r22
     abc:	b3 95       	inc	r27
     abe:	d9 f7       	brne	.-10     	; 0xab6 <__fixunssfsi+0x3c>
     ac0:	3e f4       	brtc	.+14     	; 0xad0 <__fixunssfsi+0x56>
     ac2:	90 95       	com	r25
     ac4:	80 95       	com	r24
     ac6:	70 95       	com	r23
     ac8:	61 95       	neg	r22
     aca:	7f 4f       	sbci	r23, 0xFF	; 255
     acc:	8f 4f       	sbci	r24, 0xFF	; 255
     ace:	9f 4f       	sbci	r25, 0xFF	; 255
     ad0:	08 95       	ret

00000ad2 <__floatunsisf>:
     ad2:	e8 94       	clt
     ad4:	09 c0       	rjmp	.+18     	; 0xae8 <__floatsisf+0x12>

00000ad6 <__floatsisf>:
     ad6:	97 fb       	bst	r25, 7
     ad8:	3e f4       	brtc	.+14     	; 0xae8 <__floatsisf+0x12>
     ada:	90 95       	com	r25
     adc:	80 95       	com	r24
     ade:	70 95       	com	r23
     ae0:	61 95       	neg	r22
     ae2:	7f 4f       	sbci	r23, 0xFF	; 255
     ae4:	8f 4f       	sbci	r24, 0xFF	; 255
     ae6:	9f 4f       	sbci	r25, 0xFF	; 255
     ae8:	99 23       	and	r25, r25
     aea:	a9 f0       	breq	.+42     	; 0xb16 <__floatsisf+0x40>
     aec:	f9 2f       	mov	r31, r25
     aee:	96 e9       	ldi	r25, 0x96	; 150
     af0:	bb 27       	eor	r27, r27
     af2:	93 95       	inc	r25
     af4:	f6 95       	lsr	r31
     af6:	87 95       	ror	r24
     af8:	77 95       	ror	r23
     afa:	67 95       	ror	r22
     afc:	b7 95       	ror	r27
     afe:	f1 11       	cpse	r31, r1
     b00:	f8 cf       	rjmp	.-16     	; 0xaf2 <__floatsisf+0x1c>
     b02:	fa f4       	brpl	.+62     	; 0xb42 <__floatsisf+0x6c>
     b04:	bb 0f       	add	r27, r27
     b06:	11 f4       	brne	.+4      	; 0xb0c <__floatsisf+0x36>
     b08:	60 ff       	sbrs	r22, 0
     b0a:	1b c0       	rjmp	.+54     	; 0xb42 <__floatsisf+0x6c>
     b0c:	6f 5f       	subi	r22, 0xFF	; 255
     b0e:	7f 4f       	sbci	r23, 0xFF	; 255
     b10:	8f 4f       	sbci	r24, 0xFF	; 255
     b12:	9f 4f       	sbci	r25, 0xFF	; 255
     b14:	16 c0       	rjmp	.+44     	; 0xb42 <__floatsisf+0x6c>
     b16:	88 23       	and	r24, r24
     b18:	11 f0       	breq	.+4      	; 0xb1e <__floatsisf+0x48>
     b1a:	96 e9       	ldi	r25, 0x96	; 150
     b1c:	11 c0       	rjmp	.+34     	; 0xb40 <__floatsisf+0x6a>
     b1e:	77 23       	and	r23, r23
     b20:	21 f0       	breq	.+8      	; 0xb2a <__floatsisf+0x54>
     b22:	9e e8       	ldi	r25, 0x8E	; 142
     b24:	87 2f       	mov	r24, r23
     b26:	76 2f       	mov	r23, r22
     b28:	05 c0       	rjmp	.+10     	; 0xb34 <__floatsisf+0x5e>
     b2a:	66 23       	and	r22, r22
     b2c:	71 f0       	breq	.+28     	; 0xb4a <__floatsisf+0x74>
     b2e:	96 e8       	ldi	r25, 0x86	; 134
     b30:	86 2f       	mov	r24, r22
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	2a f0       	brmi	.+10     	; 0xb42 <__floatsisf+0x6c>
     b38:	9a 95       	dec	r25
     b3a:	66 0f       	add	r22, r22
     b3c:	77 1f       	adc	r23, r23
     b3e:	88 1f       	adc	r24, r24
     b40:	da f7       	brpl	.-10     	; 0xb38 <__floatsisf+0x62>
     b42:	88 0f       	add	r24, r24
     b44:	96 95       	lsr	r25
     b46:	87 95       	ror	r24
     b48:	97 f9       	bld	r25, 7
     b4a:	08 95       	ret

00000b4c <__fp_inf>:
     b4c:	97 f9       	bld	r25, 7
     b4e:	9f 67       	ori	r25, 0x7F	; 127
     b50:	80 e8       	ldi	r24, 0x80	; 128
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	08 95       	ret

00000b58 <__fp_nan>:
     b58:	9f ef       	ldi	r25, 0xFF	; 255
     b5a:	80 ec       	ldi	r24, 0xC0	; 192
     b5c:	08 95       	ret

00000b5e <__fp_pscA>:
     b5e:	00 24       	eor	r0, r0
     b60:	0a 94       	dec	r0
     b62:	16 16       	cp	r1, r22
     b64:	17 06       	cpc	r1, r23
     b66:	18 06       	cpc	r1, r24
     b68:	09 06       	cpc	r0, r25
     b6a:	08 95       	ret

00000b6c <__fp_pscB>:
     b6c:	00 24       	eor	r0, r0
     b6e:	0a 94       	dec	r0
     b70:	12 16       	cp	r1, r18
     b72:	13 06       	cpc	r1, r19
     b74:	14 06       	cpc	r1, r20
     b76:	05 06       	cpc	r0, r21
     b78:	08 95       	ret

00000b7a <__fp_round>:
     b7a:	09 2e       	mov	r0, r25
     b7c:	03 94       	inc	r0
     b7e:	00 0c       	add	r0, r0
     b80:	11 f4       	brne	.+4      	; 0xb86 <__fp_round+0xc>
     b82:	88 23       	and	r24, r24
     b84:	52 f0       	brmi	.+20     	; 0xb9a <__fp_round+0x20>
     b86:	bb 0f       	add	r27, r27
     b88:	40 f4       	brcc	.+16     	; 0xb9a <__fp_round+0x20>
     b8a:	bf 2b       	or	r27, r31
     b8c:	11 f4       	brne	.+4      	; 0xb92 <__fp_round+0x18>
     b8e:	60 ff       	sbrs	r22, 0
     b90:	04 c0       	rjmp	.+8      	; 0xb9a <__fp_round+0x20>
     b92:	6f 5f       	subi	r22, 0xFF	; 255
     b94:	7f 4f       	sbci	r23, 0xFF	; 255
     b96:	8f 4f       	sbci	r24, 0xFF	; 255
     b98:	9f 4f       	sbci	r25, 0xFF	; 255
     b9a:	08 95       	ret

00000b9c <__fp_split3>:
     b9c:	57 fd       	sbrc	r21, 7
     b9e:	90 58       	subi	r25, 0x80	; 128
     ba0:	44 0f       	add	r20, r20
     ba2:	55 1f       	adc	r21, r21
     ba4:	59 f0       	breq	.+22     	; 0xbbc <__fp_splitA+0x10>
     ba6:	5f 3f       	cpi	r21, 0xFF	; 255
     ba8:	71 f0       	breq	.+28     	; 0xbc6 <__fp_splitA+0x1a>
     baa:	47 95       	ror	r20

00000bac <__fp_splitA>:
     bac:	88 0f       	add	r24, r24
     bae:	97 fb       	bst	r25, 7
     bb0:	99 1f       	adc	r25, r25
     bb2:	61 f0       	breq	.+24     	; 0xbcc <__fp_splitA+0x20>
     bb4:	9f 3f       	cpi	r25, 0xFF	; 255
     bb6:	79 f0       	breq	.+30     	; 0xbd6 <__fp_splitA+0x2a>
     bb8:	87 95       	ror	r24
     bba:	08 95       	ret
     bbc:	12 16       	cp	r1, r18
     bbe:	13 06       	cpc	r1, r19
     bc0:	14 06       	cpc	r1, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	f2 cf       	rjmp	.-28     	; 0xbaa <__fp_split3+0xe>
     bc6:	46 95       	lsr	r20
     bc8:	f1 df       	rcall	.-30     	; 0xbac <__fp_splitA>
     bca:	08 c0       	rjmp	.+16     	; 0xbdc <__fp_splitA+0x30>
     bcc:	16 16       	cp	r1, r22
     bce:	17 06       	cpc	r1, r23
     bd0:	18 06       	cpc	r1, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	f1 cf       	rjmp	.-30     	; 0xbb8 <__fp_splitA+0xc>
     bd6:	86 95       	lsr	r24
     bd8:	71 05       	cpc	r23, r1
     bda:	61 05       	cpc	r22, r1
     bdc:	08 94       	sec
     bde:	08 95       	ret

00000be0 <__fp_zero>:
     be0:	e8 94       	clt

00000be2 <__fp_szero>:
     be2:	bb 27       	eor	r27, r27
     be4:	66 27       	eor	r22, r22
     be6:	77 27       	eor	r23, r23
     be8:	cb 01       	movw	r24, r22
     bea:	97 f9       	bld	r25, 7
     bec:	08 95       	ret

00000bee <__mulsf3>:
     bee:	0b d0       	rcall	.+22     	; 0xc06 <__mulsf3x>
     bf0:	c4 cf       	rjmp	.-120    	; 0xb7a <__fp_round>
     bf2:	b5 df       	rcall	.-150    	; 0xb5e <__fp_pscA>
     bf4:	28 f0       	brcs	.+10     	; 0xc00 <__mulsf3+0x12>
     bf6:	ba df       	rcall	.-140    	; 0xb6c <__fp_pscB>
     bf8:	18 f0       	brcs	.+6      	; 0xc00 <__mulsf3+0x12>
     bfa:	95 23       	and	r25, r21
     bfc:	09 f0       	breq	.+2      	; 0xc00 <__mulsf3+0x12>
     bfe:	a6 cf       	rjmp	.-180    	; 0xb4c <__fp_inf>
     c00:	ab cf       	rjmp	.-170    	; 0xb58 <__fp_nan>
     c02:	11 24       	eor	r1, r1
     c04:	ee cf       	rjmp	.-36     	; 0xbe2 <__fp_szero>

00000c06 <__mulsf3x>:
     c06:	ca df       	rcall	.-108    	; 0xb9c <__fp_split3>
     c08:	a0 f3       	brcs	.-24     	; 0xbf2 <__mulsf3+0x4>

00000c0a <__mulsf3_pse>:
     c0a:	95 9f       	mul	r25, r21
     c0c:	d1 f3       	breq	.-12     	; 0xc02 <__mulsf3+0x14>
     c0e:	95 0f       	add	r25, r21
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	55 1f       	adc	r21, r21
     c14:	62 9f       	mul	r22, r18
     c16:	f0 01       	movw	r30, r0
     c18:	72 9f       	mul	r23, r18
     c1a:	bb 27       	eor	r27, r27
     c1c:	f0 0d       	add	r31, r0
     c1e:	b1 1d       	adc	r27, r1
     c20:	63 9f       	mul	r22, r19
     c22:	aa 27       	eor	r26, r26
     c24:	f0 0d       	add	r31, r0
     c26:	b1 1d       	adc	r27, r1
     c28:	aa 1f       	adc	r26, r26
     c2a:	64 9f       	mul	r22, r20
     c2c:	66 27       	eor	r22, r22
     c2e:	b0 0d       	add	r27, r0
     c30:	a1 1d       	adc	r26, r1
     c32:	66 1f       	adc	r22, r22
     c34:	82 9f       	mul	r24, r18
     c36:	22 27       	eor	r18, r18
     c38:	b0 0d       	add	r27, r0
     c3a:	a1 1d       	adc	r26, r1
     c3c:	62 1f       	adc	r22, r18
     c3e:	73 9f       	mul	r23, r19
     c40:	b0 0d       	add	r27, r0
     c42:	a1 1d       	adc	r26, r1
     c44:	62 1f       	adc	r22, r18
     c46:	83 9f       	mul	r24, r19
     c48:	a0 0d       	add	r26, r0
     c4a:	61 1d       	adc	r22, r1
     c4c:	22 1f       	adc	r18, r18
     c4e:	74 9f       	mul	r23, r20
     c50:	33 27       	eor	r19, r19
     c52:	a0 0d       	add	r26, r0
     c54:	61 1d       	adc	r22, r1
     c56:	23 1f       	adc	r18, r19
     c58:	84 9f       	mul	r24, r20
     c5a:	60 0d       	add	r22, r0
     c5c:	21 1d       	adc	r18, r1
     c5e:	82 2f       	mov	r24, r18
     c60:	76 2f       	mov	r23, r22
     c62:	6a 2f       	mov	r22, r26
     c64:	11 24       	eor	r1, r1
     c66:	9f 57       	subi	r25, 0x7F	; 127
     c68:	50 40       	sbci	r21, 0x00	; 0
     c6a:	8a f0       	brmi	.+34     	; 0xc8e <__mulsf3_pse+0x84>
     c6c:	e1 f0       	breq	.+56     	; 0xca6 <__mulsf3_pse+0x9c>
     c6e:	88 23       	and	r24, r24
     c70:	4a f0       	brmi	.+18     	; 0xc84 <__mulsf3_pse+0x7a>
     c72:	ee 0f       	add	r30, r30
     c74:	ff 1f       	adc	r31, r31
     c76:	bb 1f       	adc	r27, r27
     c78:	66 1f       	adc	r22, r22
     c7a:	77 1f       	adc	r23, r23
     c7c:	88 1f       	adc	r24, r24
     c7e:	91 50       	subi	r25, 0x01	; 1
     c80:	50 40       	sbci	r21, 0x00	; 0
     c82:	a9 f7       	brne	.-22     	; 0xc6e <__mulsf3_pse+0x64>
     c84:	9e 3f       	cpi	r25, 0xFE	; 254
     c86:	51 05       	cpc	r21, r1
     c88:	70 f0       	brcs	.+28     	; 0xca6 <__mulsf3_pse+0x9c>
     c8a:	60 cf       	rjmp	.-320    	; 0xb4c <__fp_inf>
     c8c:	aa cf       	rjmp	.-172    	; 0xbe2 <__fp_szero>
     c8e:	5f 3f       	cpi	r21, 0xFF	; 255
     c90:	ec f3       	brlt	.-6      	; 0xc8c <__mulsf3_pse+0x82>
     c92:	98 3e       	cpi	r25, 0xE8	; 232
     c94:	dc f3       	brlt	.-10     	; 0xc8c <__mulsf3_pse+0x82>
     c96:	86 95       	lsr	r24
     c98:	77 95       	ror	r23
     c9a:	67 95       	ror	r22
     c9c:	b7 95       	ror	r27
     c9e:	f7 95       	ror	r31
     ca0:	e7 95       	ror	r30
     ca2:	9f 5f       	subi	r25, 0xFF	; 255
     ca4:	c1 f7       	brne	.-16     	; 0xc96 <__mulsf3_pse+0x8c>
     ca6:	fe 2b       	or	r31, r30
     ca8:	88 0f       	add	r24, r24
     caa:	91 1d       	adc	r25, r1
     cac:	96 95       	lsr	r25
     cae:	87 95       	ror	r24
     cb0:	97 f9       	bld	r25, 7
     cb2:	08 95       	ret

00000cb4 <__tablejump2__>:
     cb4:	ee 0f       	add	r30, r30
     cb6:	ff 1f       	adc	r31, r31

00000cb8 <__tablejump__>:
     cb8:	05 90       	lpm	r0, Z+
     cba:	f4 91       	lpm	r31, Z
     cbc:	e0 2d       	mov	r30, r0
     cbe:	19 94       	eijmp

00000cc0 <fdevopen>:
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	ec 01       	movw	r28, r24
     cca:	8b 01       	movw	r16, r22
     ccc:	00 97       	sbiw	r24, 0x00	; 0
     cce:	31 f4       	brne	.+12     	; 0xcdc <fdevopen+0x1c>
     cd0:	61 15       	cp	r22, r1
     cd2:	71 05       	cpc	r23, r1
     cd4:	19 f4       	brne	.+6      	; 0xcdc <fdevopen+0x1c>
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	37 c0       	rjmp	.+110    	; 0xd4a <fdevopen+0x8a>
     cdc:	6e e0       	ldi	r22, 0x0E	; 14
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	63 d2       	rcall	.+1222   	; 0x11ac <calloc>
     ce6:	fc 01       	movw	r30, r24
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	a9 f3       	breq	.-22     	; 0xcd6 <fdevopen+0x16>
     cec:	80 e8       	ldi	r24, 0x80	; 128
     cee:	83 83       	std	Z+3, r24	; 0x03
     cf0:	01 15       	cp	r16, r1
     cf2:	11 05       	cpc	r17, r1
     cf4:	71 f0       	breq	.+28     	; 0xd12 <fdevopen+0x52>
     cf6:	13 87       	std	Z+11, r17	; 0x0b
     cf8:	02 87       	std	Z+10, r16	; 0x0a
     cfa:	81 e8       	ldi	r24, 0x81	; 129
     cfc:	83 83       	std	Z+3, r24	; 0x03
     cfe:	80 91 bc 02 	lds	r24, 0x02BC
     d02:	90 91 bd 02 	lds	r25, 0x02BD
     d06:	89 2b       	or	r24, r25
     d08:	21 f4       	brne	.+8      	; 0xd12 <fdevopen+0x52>
     d0a:	f0 93 bd 02 	sts	0x02BD, r31
     d0e:	e0 93 bc 02 	sts	0x02BC, r30
     d12:	20 97       	sbiw	r28, 0x00	; 0
     d14:	c9 f0       	breq	.+50     	; 0xd48 <fdevopen+0x88>
     d16:	d1 87       	std	Z+9, r29	; 0x09
     d18:	c0 87       	std	Z+8, r28	; 0x08
     d1a:	83 81       	ldd	r24, Z+3	; 0x03
     d1c:	82 60       	ori	r24, 0x02	; 2
     d1e:	83 83       	std	Z+3, r24	; 0x03
     d20:	80 91 be 02 	lds	r24, 0x02BE
     d24:	90 91 bf 02 	lds	r25, 0x02BF
     d28:	89 2b       	or	r24, r25
     d2a:	71 f4       	brne	.+28     	; 0xd48 <fdevopen+0x88>
     d2c:	f0 93 bf 02 	sts	0x02BF, r31
     d30:	e0 93 be 02 	sts	0x02BE, r30
     d34:	80 91 c0 02 	lds	r24, 0x02C0
     d38:	90 91 c1 02 	lds	r25, 0x02C1
     d3c:	89 2b       	or	r24, r25
     d3e:	21 f4       	brne	.+8      	; 0xd48 <fdevopen+0x88>
     d40:	f0 93 c1 02 	sts	0x02C1, r31
     d44:	e0 93 c0 02 	sts	0x02C0, r30
     d48:	cf 01       	movw	r24, r30
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	08 95       	ret

00000d54 <printf>:
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	fe 01       	movw	r30, r28
     d5e:	36 96       	adiw	r30, 0x06	; 6
     d60:	61 91       	ld	r22, Z+
     d62:	71 91       	ld	r23, Z+
     d64:	af 01       	movw	r20, r30
     d66:	80 91 be 02 	lds	r24, 0x02BE
     d6a:	90 91 bf 02 	lds	r25, 0x02BF
     d6e:	30 d0       	rcall	.+96     	; 0xdd0 <vfprintf>
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <puts>:
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	e0 91 be 02 	lds	r30, 0x02BE
     d82:	f0 91 bf 02 	lds	r31, 0x02BF
     d86:	23 81       	ldd	r18, Z+3	; 0x03
     d88:	21 ff       	sbrs	r18, 1
     d8a:	1b c0       	rjmp	.+54     	; 0xdc2 <puts+0x4c>
     d8c:	ec 01       	movw	r28, r24
     d8e:	00 e0       	ldi	r16, 0x00	; 0
     d90:	10 e0       	ldi	r17, 0x00	; 0
     d92:	89 91       	ld	r24, Y+
     d94:	60 91 be 02 	lds	r22, 0x02BE
     d98:	70 91 bf 02 	lds	r23, 0x02BF
     d9c:	db 01       	movw	r26, r22
     d9e:	18 96       	adiw	r26, 0x08	; 8
     da0:	ed 91       	ld	r30, X+
     da2:	fc 91       	ld	r31, X
     da4:	19 97       	sbiw	r26, 0x09	; 9
     da6:	88 23       	and	r24, r24
     da8:	31 f0       	breq	.+12     	; 0xdb6 <puts+0x40>
     daa:	19 95       	eicall
     dac:	89 2b       	or	r24, r25
     dae:	89 f3       	breq	.-30     	; 0xd92 <puts+0x1c>
     db0:	0f ef       	ldi	r16, 0xFF	; 255
     db2:	1f ef       	ldi	r17, 0xFF	; 255
     db4:	ee cf       	rjmp	.-36     	; 0xd92 <puts+0x1c>
     db6:	8a e0       	ldi	r24, 0x0A	; 10
     db8:	19 95       	eicall
     dba:	89 2b       	or	r24, r25
     dbc:	11 f4       	brne	.+4      	; 0xdc2 <puts+0x4c>
     dbe:	c8 01       	movw	r24, r16
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <puts+0x50>
     dc2:	8f ef       	ldi	r24, 0xFF	; 255
     dc4:	9f ef       	ldi	r25, 0xFF	; 255
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	08 95       	ret

00000dd0 <vfprintf>:
     dd0:	2f 92       	push	r2
     dd2:	3f 92       	push	r3
     dd4:	4f 92       	push	r4
     dd6:	5f 92       	push	r5
     dd8:	6f 92       	push	r6
     dda:	7f 92       	push	r7
     ddc:	8f 92       	push	r8
     dde:	9f 92       	push	r9
     de0:	af 92       	push	r10
     de2:	bf 92       	push	r11
     de4:	cf 92       	push	r12
     de6:	df 92       	push	r13
     de8:	ef 92       	push	r14
     dea:	ff 92       	push	r15
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	2c 97       	sbiw	r28, 0x0c	; 12
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	de bf       	out	0x3e, r29	; 62
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	cd bf       	out	0x3d, r28	; 61
     e04:	7c 01       	movw	r14, r24
     e06:	6b 01       	movw	r12, r22
     e08:	8a 01       	movw	r16, r20
     e0a:	fc 01       	movw	r30, r24
     e0c:	17 82       	std	Z+7, r1	; 0x07
     e0e:	16 82       	std	Z+6, r1	; 0x06
     e10:	83 81       	ldd	r24, Z+3	; 0x03
     e12:	81 ff       	sbrs	r24, 1
     e14:	b0 c1       	rjmp	.+864    	; 0x1176 <vfprintf+0x3a6>
     e16:	ce 01       	movw	r24, r28
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	4c 01       	movw	r8, r24
     e1c:	f7 01       	movw	r30, r14
     e1e:	93 81       	ldd	r25, Z+3	; 0x03
     e20:	f6 01       	movw	r30, r12
     e22:	93 fd       	sbrc	r25, 3
     e24:	85 91       	lpm	r24, Z+
     e26:	93 ff       	sbrs	r25, 3
     e28:	81 91       	ld	r24, Z+
     e2a:	6f 01       	movw	r12, r30
     e2c:	88 23       	and	r24, r24
     e2e:	09 f4       	brne	.+2      	; 0xe32 <vfprintf+0x62>
     e30:	9e c1       	rjmp	.+828    	; 0x116e <vfprintf+0x39e>
     e32:	85 32       	cpi	r24, 0x25	; 37
     e34:	39 f4       	brne	.+14     	; 0xe44 <vfprintf+0x74>
     e36:	93 fd       	sbrc	r25, 3
     e38:	85 91       	lpm	r24, Z+
     e3a:	93 ff       	sbrs	r25, 3
     e3c:	81 91       	ld	r24, Z+
     e3e:	6f 01       	movw	r12, r30
     e40:	85 32       	cpi	r24, 0x25	; 37
     e42:	21 f4       	brne	.+8      	; 0xe4c <vfprintf+0x7c>
     e44:	b7 01       	movw	r22, r14
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0f d3       	rcall	.+1566   	; 0x1468 <fputc>
     e4a:	e8 cf       	rjmp	.-48     	; 0xe1c <vfprintf+0x4c>
     e4c:	51 2c       	mov	r5, r1
     e4e:	31 2c       	mov	r3, r1
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	20 32       	cpi	r18, 0x20	; 32
     e54:	a0 f4       	brcc	.+40     	; 0xe7e <vfprintf+0xae>
     e56:	8b 32       	cpi	r24, 0x2B	; 43
     e58:	69 f0       	breq	.+26     	; 0xe74 <vfprintf+0xa4>
     e5a:	30 f4       	brcc	.+12     	; 0xe68 <vfprintf+0x98>
     e5c:	80 32       	cpi	r24, 0x20	; 32
     e5e:	59 f0       	breq	.+22     	; 0xe76 <vfprintf+0xa6>
     e60:	83 32       	cpi	r24, 0x23	; 35
     e62:	69 f4       	brne	.+26     	; 0xe7e <vfprintf+0xae>
     e64:	20 61       	ori	r18, 0x10	; 16
     e66:	2c c0       	rjmp	.+88     	; 0xec0 <vfprintf+0xf0>
     e68:	8d 32       	cpi	r24, 0x2D	; 45
     e6a:	39 f0       	breq	.+14     	; 0xe7a <vfprintf+0xaa>
     e6c:	80 33       	cpi	r24, 0x30	; 48
     e6e:	39 f4       	brne	.+14     	; 0xe7e <vfprintf+0xae>
     e70:	21 60       	ori	r18, 0x01	; 1
     e72:	26 c0       	rjmp	.+76     	; 0xec0 <vfprintf+0xf0>
     e74:	22 60       	ori	r18, 0x02	; 2
     e76:	24 60       	ori	r18, 0x04	; 4
     e78:	23 c0       	rjmp	.+70     	; 0xec0 <vfprintf+0xf0>
     e7a:	28 60       	ori	r18, 0x08	; 8
     e7c:	21 c0       	rjmp	.+66     	; 0xec0 <vfprintf+0xf0>
     e7e:	27 fd       	sbrc	r18, 7
     e80:	27 c0       	rjmp	.+78     	; 0xed0 <vfprintf+0x100>
     e82:	30 ed       	ldi	r19, 0xD0	; 208
     e84:	38 0f       	add	r19, r24
     e86:	3a 30       	cpi	r19, 0x0A	; 10
     e88:	78 f4       	brcc	.+30     	; 0xea8 <vfprintf+0xd8>
     e8a:	26 ff       	sbrs	r18, 6
     e8c:	06 c0       	rjmp	.+12     	; 0xe9a <vfprintf+0xca>
     e8e:	fa e0       	ldi	r31, 0x0A	; 10
     e90:	5f 9e       	mul	r5, r31
     e92:	30 0d       	add	r19, r0
     e94:	11 24       	eor	r1, r1
     e96:	53 2e       	mov	r5, r19
     e98:	13 c0       	rjmp	.+38     	; 0xec0 <vfprintf+0xf0>
     e9a:	8a e0       	ldi	r24, 0x0A	; 10
     e9c:	38 9e       	mul	r3, r24
     e9e:	30 0d       	add	r19, r0
     ea0:	11 24       	eor	r1, r1
     ea2:	33 2e       	mov	r3, r19
     ea4:	20 62       	ori	r18, 0x20	; 32
     ea6:	0c c0       	rjmp	.+24     	; 0xec0 <vfprintf+0xf0>
     ea8:	8e 32       	cpi	r24, 0x2E	; 46
     eaa:	21 f4       	brne	.+8      	; 0xeb4 <vfprintf+0xe4>
     eac:	26 fd       	sbrc	r18, 6
     eae:	5f c1       	rjmp	.+702    	; 0x116e <vfprintf+0x39e>
     eb0:	20 64       	ori	r18, 0x40	; 64
     eb2:	06 c0       	rjmp	.+12     	; 0xec0 <vfprintf+0xf0>
     eb4:	8c 36       	cpi	r24, 0x6C	; 108
     eb6:	11 f4       	brne	.+4      	; 0xebc <vfprintf+0xec>
     eb8:	20 68       	ori	r18, 0x80	; 128
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <vfprintf+0xf0>
     ebc:	88 36       	cpi	r24, 0x68	; 104
     ebe:	41 f4       	brne	.+16     	; 0xed0 <vfprintf+0x100>
     ec0:	f6 01       	movw	r30, r12
     ec2:	93 fd       	sbrc	r25, 3
     ec4:	85 91       	lpm	r24, Z+
     ec6:	93 ff       	sbrs	r25, 3
     ec8:	81 91       	ld	r24, Z+
     eca:	6f 01       	movw	r12, r30
     ecc:	81 11       	cpse	r24, r1
     ece:	c1 cf       	rjmp	.-126    	; 0xe52 <vfprintf+0x82>
     ed0:	98 2f       	mov	r25, r24
     ed2:	9f 7d       	andi	r25, 0xDF	; 223
     ed4:	95 54       	subi	r25, 0x45	; 69
     ed6:	93 30       	cpi	r25, 0x03	; 3
     ed8:	28 f4       	brcc	.+10     	; 0xee4 <vfprintf+0x114>
     eda:	0c 5f       	subi	r16, 0xFC	; 252
     edc:	1f 4f       	sbci	r17, 0xFF	; 255
     ede:	ff e3       	ldi	r31, 0x3F	; 63
     ee0:	f9 83       	std	Y+1, r31	; 0x01
     ee2:	0d c0       	rjmp	.+26     	; 0xefe <vfprintf+0x12e>
     ee4:	83 36       	cpi	r24, 0x63	; 99
     ee6:	31 f0       	breq	.+12     	; 0xef4 <vfprintf+0x124>
     ee8:	83 37       	cpi	r24, 0x73	; 115
     eea:	71 f0       	breq	.+28     	; 0xf08 <vfprintf+0x138>
     eec:	83 35       	cpi	r24, 0x53	; 83
     eee:	09 f0       	breq	.+2      	; 0xef2 <vfprintf+0x122>
     ef0:	57 c0       	rjmp	.+174    	; 0xfa0 <vfprintf+0x1d0>
     ef2:	21 c0       	rjmp	.+66     	; 0xf36 <vfprintf+0x166>
     ef4:	f8 01       	movw	r30, r16
     ef6:	80 81       	ld	r24, Z
     ef8:	89 83       	std	Y+1, r24	; 0x01
     efa:	0e 5f       	subi	r16, 0xFE	; 254
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
     efe:	44 24       	eor	r4, r4
     f00:	43 94       	inc	r4
     f02:	51 2c       	mov	r5, r1
     f04:	54 01       	movw	r10, r8
     f06:	14 c0       	rjmp	.+40     	; 0xf30 <vfprintf+0x160>
     f08:	38 01       	movw	r6, r16
     f0a:	f2 e0       	ldi	r31, 0x02	; 2
     f0c:	6f 0e       	add	r6, r31
     f0e:	71 1c       	adc	r7, r1
     f10:	f8 01       	movw	r30, r16
     f12:	a0 80       	ld	r10, Z
     f14:	b1 80       	ldd	r11, Z+1	; 0x01
     f16:	26 ff       	sbrs	r18, 6
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <vfprintf+0x150>
     f1a:	65 2d       	mov	r22, r5
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <vfprintf+0x154>
     f20:	6f ef       	ldi	r22, 0xFF	; 255
     f22:	7f ef       	ldi	r23, 0xFF	; 255
     f24:	c5 01       	movw	r24, r10
     f26:	2c 87       	std	Y+12, r18	; 0x0c
     f28:	94 d2       	rcall	.+1320   	; 0x1452 <strnlen>
     f2a:	2c 01       	movw	r4, r24
     f2c:	83 01       	movw	r16, r6
     f2e:	2c 85       	ldd	r18, Y+12	; 0x0c
     f30:	2f 77       	andi	r18, 0x7F	; 127
     f32:	22 2e       	mov	r2, r18
     f34:	16 c0       	rjmp	.+44     	; 0xf62 <vfprintf+0x192>
     f36:	38 01       	movw	r6, r16
     f38:	f2 e0       	ldi	r31, 0x02	; 2
     f3a:	6f 0e       	add	r6, r31
     f3c:	71 1c       	adc	r7, r1
     f3e:	f8 01       	movw	r30, r16
     f40:	a0 80       	ld	r10, Z
     f42:	b1 80       	ldd	r11, Z+1	; 0x01
     f44:	26 ff       	sbrs	r18, 6
     f46:	03 c0       	rjmp	.+6      	; 0xf4e <vfprintf+0x17e>
     f48:	65 2d       	mov	r22, r5
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <vfprintf+0x182>
     f4e:	6f ef       	ldi	r22, 0xFF	; 255
     f50:	7f ef       	ldi	r23, 0xFF	; 255
     f52:	c5 01       	movw	r24, r10
     f54:	2c 87       	std	Y+12, r18	; 0x0c
     f56:	6b d2       	rcall	.+1238   	; 0x142e <strnlen_P>
     f58:	2c 01       	movw	r4, r24
     f5a:	2c 85       	ldd	r18, Y+12	; 0x0c
     f5c:	20 68       	ori	r18, 0x80	; 128
     f5e:	22 2e       	mov	r2, r18
     f60:	83 01       	movw	r16, r6
     f62:	23 fc       	sbrc	r2, 3
     f64:	19 c0       	rjmp	.+50     	; 0xf98 <vfprintf+0x1c8>
     f66:	83 2d       	mov	r24, r3
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	48 16       	cp	r4, r24
     f6c:	59 06       	cpc	r5, r25
     f6e:	a0 f4       	brcc	.+40     	; 0xf98 <vfprintf+0x1c8>
     f70:	b7 01       	movw	r22, r14
     f72:	80 e2       	ldi	r24, 0x20	; 32
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	78 d2       	rcall	.+1264   	; 0x1468 <fputc>
     f78:	3a 94       	dec	r3
     f7a:	f5 cf       	rjmp	.-22     	; 0xf66 <vfprintf+0x196>
     f7c:	f5 01       	movw	r30, r10
     f7e:	27 fc       	sbrc	r2, 7
     f80:	85 91       	lpm	r24, Z+
     f82:	27 fe       	sbrs	r2, 7
     f84:	81 91       	ld	r24, Z+
     f86:	5f 01       	movw	r10, r30
     f88:	b7 01       	movw	r22, r14
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	6d d2       	rcall	.+1242   	; 0x1468 <fputc>
     f8e:	31 10       	cpse	r3, r1
     f90:	3a 94       	dec	r3
     f92:	f1 e0       	ldi	r31, 0x01	; 1
     f94:	4f 1a       	sub	r4, r31
     f96:	51 08       	sbc	r5, r1
     f98:	41 14       	cp	r4, r1
     f9a:	51 04       	cpc	r5, r1
     f9c:	79 f7       	brne	.-34     	; 0xf7c <vfprintf+0x1ac>
     f9e:	de c0       	rjmp	.+444    	; 0x115c <vfprintf+0x38c>
     fa0:	84 36       	cpi	r24, 0x64	; 100
     fa2:	11 f0       	breq	.+4      	; 0xfa8 <vfprintf+0x1d8>
     fa4:	89 36       	cpi	r24, 0x69	; 105
     fa6:	31 f5       	brne	.+76     	; 0xff4 <vfprintf+0x224>
     fa8:	f8 01       	movw	r30, r16
     faa:	27 ff       	sbrs	r18, 7
     fac:	07 c0       	rjmp	.+14     	; 0xfbc <vfprintf+0x1ec>
     fae:	60 81       	ld	r22, Z
     fb0:	71 81       	ldd	r23, Z+1	; 0x01
     fb2:	82 81       	ldd	r24, Z+2	; 0x02
     fb4:	93 81       	ldd	r25, Z+3	; 0x03
     fb6:	0c 5f       	subi	r16, 0xFC	; 252
     fb8:	1f 4f       	sbci	r17, 0xFF	; 255
     fba:	08 c0       	rjmp	.+16     	; 0xfcc <vfprintf+0x1fc>
     fbc:	60 81       	ld	r22, Z
     fbe:	71 81       	ldd	r23, Z+1	; 0x01
     fc0:	88 27       	eor	r24, r24
     fc2:	77 fd       	sbrc	r23, 7
     fc4:	80 95       	com	r24
     fc6:	98 2f       	mov	r25, r24
     fc8:	0e 5f       	subi	r16, 0xFE	; 254
     fca:	1f 4f       	sbci	r17, 0xFF	; 255
     fcc:	2f 76       	andi	r18, 0x6F	; 111
     fce:	b2 2e       	mov	r11, r18
     fd0:	97 ff       	sbrs	r25, 7
     fd2:	09 c0       	rjmp	.+18     	; 0xfe6 <vfprintf+0x216>
     fd4:	90 95       	com	r25
     fd6:	80 95       	com	r24
     fd8:	70 95       	com	r23
     fda:	61 95       	neg	r22
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	8f 4f       	sbci	r24, 0xFF	; 255
     fe0:	9f 4f       	sbci	r25, 0xFF	; 255
     fe2:	20 68       	ori	r18, 0x80	; 128
     fe4:	b2 2e       	mov	r11, r18
     fe6:	2a e0       	ldi	r18, 0x0A	; 10
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	a4 01       	movw	r20, r8
     fec:	6f d2       	rcall	.+1246   	; 0x14cc <__ultoa_invert>
     fee:	a8 2e       	mov	r10, r24
     ff0:	a8 18       	sub	r10, r8
     ff2:	43 c0       	rjmp	.+134    	; 0x107a <vfprintf+0x2aa>
     ff4:	85 37       	cpi	r24, 0x75	; 117
     ff6:	29 f4       	brne	.+10     	; 0x1002 <vfprintf+0x232>
     ff8:	2f 7e       	andi	r18, 0xEF	; 239
     ffa:	b2 2e       	mov	r11, r18
     ffc:	2a e0       	ldi	r18, 0x0A	; 10
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	25 c0       	rjmp	.+74     	; 0x104c <vfprintf+0x27c>
    1002:	f2 2f       	mov	r31, r18
    1004:	f9 7f       	andi	r31, 0xF9	; 249
    1006:	bf 2e       	mov	r11, r31
    1008:	8f 36       	cpi	r24, 0x6F	; 111
    100a:	c1 f0       	breq	.+48     	; 0x103c <vfprintf+0x26c>
    100c:	18 f4       	brcc	.+6      	; 0x1014 <vfprintf+0x244>
    100e:	88 35       	cpi	r24, 0x58	; 88
    1010:	79 f0       	breq	.+30     	; 0x1030 <vfprintf+0x260>
    1012:	ad c0       	rjmp	.+346    	; 0x116e <vfprintf+0x39e>
    1014:	80 37       	cpi	r24, 0x70	; 112
    1016:	19 f0       	breq	.+6      	; 0x101e <vfprintf+0x24e>
    1018:	88 37       	cpi	r24, 0x78	; 120
    101a:	21 f0       	breq	.+8      	; 0x1024 <vfprintf+0x254>
    101c:	a8 c0       	rjmp	.+336    	; 0x116e <vfprintf+0x39e>
    101e:	2f 2f       	mov	r18, r31
    1020:	20 61       	ori	r18, 0x10	; 16
    1022:	b2 2e       	mov	r11, r18
    1024:	b4 fe       	sbrs	r11, 4
    1026:	0d c0       	rjmp	.+26     	; 0x1042 <vfprintf+0x272>
    1028:	8b 2d       	mov	r24, r11
    102a:	84 60       	ori	r24, 0x04	; 4
    102c:	b8 2e       	mov	r11, r24
    102e:	09 c0       	rjmp	.+18     	; 0x1042 <vfprintf+0x272>
    1030:	24 ff       	sbrs	r18, 4
    1032:	0a c0       	rjmp	.+20     	; 0x1048 <vfprintf+0x278>
    1034:	9f 2f       	mov	r25, r31
    1036:	96 60       	ori	r25, 0x06	; 6
    1038:	b9 2e       	mov	r11, r25
    103a:	06 c0       	rjmp	.+12     	; 0x1048 <vfprintf+0x278>
    103c:	28 e0       	ldi	r18, 0x08	; 8
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	05 c0       	rjmp	.+10     	; 0x104c <vfprintf+0x27c>
    1042:	20 e1       	ldi	r18, 0x10	; 16
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	02 c0       	rjmp	.+4      	; 0x104c <vfprintf+0x27c>
    1048:	20 e1       	ldi	r18, 0x10	; 16
    104a:	32 e0       	ldi	r19, 0x02	; 2
    104c:	f8 01       	movw	r30, r16
    104e:	b7 fe       	sbrs	r11, 7
    1050:	07 c0       	rjmp	.+14     	; 0x1060 <vfprintf+0x290>
    1052:	60 81       	ld	r22, Z
    1054:	71 81       	ldd	r23, Z+1	; 0x01
    1056:	82 81       	ldd	r24, Z+2	; 0x02
    1058:	93 81       	ldd	r25, Z+3	; 0x03
    105a:	0c 5f       	subi	r16, 0xFC	; 252
    105c:	1f 4f       	sbci	r17, 0xFF	; 255
    105e:	06 c0       	rjmp	.+12     	; 0x106c <vfprintf+0x29c>
    1060:	60 81       	ld	r22, Z
    1062:	71 81       	ldd	r23, Z+1	; 0x01
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 5f       	subi	r16, 0xFE	; 254
    106a:	1f 4f       	sbci	r17, 0xFF	; 255
    106c:	a4 01       	movw	r20, r8
    106e:	2e d2       	rcall	.+1116   	; 0x14cc <__ultoa_invert>
    1070:	a8 2e       	mov	r10, r24
    1072:	a8 18       	sub	r10, r8
    1074:	fb 2d       	mov	r31, r11
    1076:	ff 77       	andi	r31, 0x7F	; 127
    1078:	bf 2e       	mov	r11, r31
    107a:	b6 fe       	sbrs	r11, 6
    107c:	0b c0       	rjmp	.+22     	; 0x1094 <vfprintf+0x2c4>
    107e:	2b 2d       	mov	r18, r11
    1080:	2e 7f       	andi	r18, 0xFE	; 254
    1082:	a5 14       	cp	r10, r5
    1084:	50 f4       	brcc	.+20     	; 0x109a <vfprintf+0x2ca>
    1086:	b4 fe       	sbrs	r11, 4
    1088:	0a c0       	rjmp	.+20     	; 0x109e <vfprintf+0x2ce>
    108a:	b2 fc       	sbrc	r11, 2
    108c:	08 c0       	rjmp	.+16     	; 0x109e <vfprintf+0x2ce>
    108e:	2b 2d       	mov	r18, r11
    1090:	2e 7e       	andi	r18, 0xEE	; 238
    1092:	05 c0       	rjmp	.+10     	; 0x109e <vfprintf+0x2ce>
    1094:	7a 2c       	mov	r7, r10
    1096:	2b 2d       	mov	r18, r11
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <vfprintf+0x2d0>
    109a:	7a 2c       	mov	r7, r10
    109c:	01 c0       	rjmp	.+2      	; 0x10a0 <vfprintf+0x2d0>
    109e:	75 2c       	mov	r7, r5
    10a0:	24 ff       	sbrs	r18, 4
    10a2:	0d c0       	rjmp	.+26     	; 0x10be <vfprintf+0x2ee>
    10a4:	fe 01       	movw	r30, r28
    10a6:	ea 0d       	add	r30, r10
    10a8:	f1 1d       	adc	r31, r1
    10aa:	80 81       	ld	r24, Z
    10ac:	80 33       	cpi	r24, 0x30	; 48
    10ae:	11 f4       	brne	.+4      	; 0x10b4 <vfprintf+0x2e4>
    10b0:	29 7e       	andi	r18, 0xE9	; 233
    10b2:	09 c0       	rjmp	.+18     	; 0x10c6 <vfprintf+0x2f6>
    10b4:	22 ff       	sbrs	r18, 2
    10b6:	06 c0       	rjmp	.+12     	; 0x10c4 <vfprintf+0x2f4>
    10b8:	73 94       	inc	r7
    10ba:	73 94       	inc	r7
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <vfprintf+0x2f6>
    10be:	82 2f       	mov	r24, r18
    10c0:	86 78       	andi	r24, 0x86	; 134
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <vfprintf+0x2f6>
    10c4:	73 94       	inc	r7
    10c6:	23 fd       	sbrc	r18, 3
    10c8:	12 c0       	rjmp	.+36     	; 0x10ee <vfprintf+0x31e>
    10ca:	20 ff       	sbrs	r18, 0
    10cc:	06 c0       	rjmp	.+12     	; 0x10da <vfprintf+0x30a>
    10ce:	5a 2c       	mov	r5, r10
    10d0:	73 14       	cp	r7, r3
    10d2:	18 f4       	brcc	.+6      	; 0x10da <vfprintf+0x30a>
    10d4:	53 0c       	add	r5, r3
    10d6:	57 18       	sub	r5, r7
    10d8:	73 2c       	mov	r7, r3
    10da:	73 14       	cp	r7, r3
    10dc:	60 f4       	brcc	.+24     	; 0x10f6 <vfprintf+0x326>
    10de:	b7 01       	movw	r22, r14
    10e0:	80 e2       	ldi	r24, 0x20	; 32
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	2c 87       	std	Y+12, r18	; 0x0c
    10e6:	c0 d1       	rcall	.+896    	; 0x1468 <fputc>
    10e8:	73 94       	inc	r7
    10ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    10ec:	f6 cf       	rjmp	.-20     	; 0x10da <vfprintf+0x30a>
    10ee:	73 14       	cp	r7, r3
    10f0:	10 f4       	brcc	.+4      	; 0x10f6 <vfprintf+0x326>
    10f2:	37 18       	sub	r3, r7
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <vfprintf+0x328>
    10f6:	31 2c       	mov	r3, r1
    10f8:	24 ff       	sbrs	r18, 4
    10fa:	11 c0       	rjmp	.+34     	; 0x111e <vfprintf+0x34e>
    10fc:	b7 01       	movw	r22, r14
    10fe:	80 e3       	ldi	r24, 0x30	; 48
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	2c 87       	std	Y+12, r18	; 0x0c
    1104:	b1 d1       	rcall	.+866    	; 0x1468 <fputc>
    1106:	2c 85       	ldd	r18, Y+12	; 0x0c
    1108:	22 ff       	sbrs	r18, 2
    110a:	16 c0       	rjmp	.+44     	; 0x1138 <vfprintf+0x368>
    110c:	21 ff       	sbrs	r18, 1
    110e:	03 c0       	rjmp	.+6      	; 0x1116 <vfprintf+0x346>
    1110:	88 e5       	ldi	r24, 0x58	; 88
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 c0       	rjmp	.+4      	; 0x111a <vfprintf+0x34a>
    1116:	88 e7       	ldi	r24, 0x78	; 120
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	b7 01       	movw	r22, r14
    111c:	0c c0       	rjmp	.+24     	; 0x1136 <vfprintf+0x366>
    111e:	82 2f       	mov	r24, r18
    1120:	86 78       	andi	r24, 0x86	; 134
    1122:	51 f0       	breq	.+20     	; 0x1138 <vfprintf+0x368>
    1124:	21 fd       	sbrc	r18, 1
    1126:	02 c0       	rjmp	.+4      	; 0x112c <vfprintf+0x35c>
    1128:	80 e2       	ldi	r24, 0x20	; 32
    112a:	01 c0       	rjmp	.+2      	; 0x112e <vfprintf+0x35e>
    112c:	8b e2       	ldi	r24, 0x2B	; 43
    112e:	27 fd       	sbrc	r18, 7
    1130:	8d e2       	ldi	r24, 0x2D	; 45
    1132:	b7 01       	movw	r22, r14
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	98 d1       	rcall	.+816    	; 0x1468 <fputc>
    1138:	a5 14       	cp	r10, r5
    113a:	30 f4       	brcc	.+12     	; 0x1148 <vfprintf+0x378>
    113c:	b7 01       	movw	r22, r14
    113e:	80 e3       	ldi	r24, 0x30	; 48
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	92 d1       	rcall	.+804    	; 0x1468 <fputc>
    1144:	5a 94       	dec	r5
    1146:	f8 cf       	rjmp	.-16     	; 0x1138 <vfprintf+0x368>
    1148:	aa 94       	dec	r10
    114a:	f4 01       	movw	r30, r8
    114c:	ea 0d       	add	r30, r10
    114e:	f1 1d       	adc	r31, r1
    1150:	80 81       	ld	r24, Z
    1152:	b7 01       	movw	r22, r14
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	88 d1       	rcall	.+784    	; 0x1468 <fputc>
    1158:	a1 10       	cpse	r10, r1
    115a:	f6 cf       	rjmp	.-20     	; 0x1148 <vfprintf+0x378>
    115c:	33 20       	and	r3, r3
    115e:	09 f4       	brne	.+2      	; 0x1162 <vfprintf+0x392>
    1160:	5d ce       	rjmp	.-838    	; 0xe1c <vfprintf+0x4c>
    1162:	b7 01       	movw	r22, r14
    1164:	80 e2       	ldi	r24, 0x20	; 32
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	7f d1       	rcall	.+766    	; 0x1468 <fputc>
    116a:	3a 94       	dec	r3
    116c:	f7 cf       	rjmp	.-18     	; 0x115c <vfprintf+0x38c>
    116e:	f7 01       	movw	r30, r14
    1170:	86 81       	ldd	r24, Z+6	; 0x06
    1172:	97 81       	ldd	r25, Z+7	; 0x07
    1174:	02 c0       	rjmp	.+4      	; 0x117a <vfprintf+0x3aa>
    1176:	8f ef       	ldi	r24, 0xFF	; 255
    1178:	9f ef       	ldi	r25, 0xFF	; 255
    117a:	2c 96       	adiw	r28, 0x0c	; 12
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	ff 90       	pop	r15
    1190:	ef 90       	pop	r14
    1192:	df 90       	pop	r13
    1194:	cf 90       	pop	r12
    1196:	bf 90       	pop	r11
    1198:	af 90       	pop	r10
    119a:	9f 90       	pop	r9
    119c:	8f 90       	pop	r8
    119e:	7f 90       	pop	r7
    11a0:	6f 90       	pop	r6
    11a2:	5f 90       	pop	r5
    11a4:	4f 90       	pop	r4
    11a6:	3f 90       	pop	r3
    11a8:	2f 90       	pop	r2
    11aa:	08 95       	ret

000011ac <calloc>:
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	86 9f       	mul	r24, r22
    11b6:	80 01       	movw	r16, r0
    11b8:	87 9f       	mul	r24, r23
    11ba:	10 0d       	add	r17, r0
    11bc:	96 9f       	mul	r25, r22
    11be:	10 0d       	add	r17, r0
    11c0:	11 24       	eor	r1, r1
    11c2:	c8 01       	movw	r24, r16
    11c4:	0d d0       	rcall	.+26     	; 0x11e0 <malloc>
    11c6:	ec 01       	movw	r28, r24
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	21 f0       	breq	.+8      	; 0x11d4 <calloc+0x28>
    11cc:	a8 01       	movw	r20, r16
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	38 d1       	rcall	.+624    	; 0x1444 <memset>
    11d4:	ce 01       	movw	r24, r28
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	08 95       	ret

000011e0 <malloc>:
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	82 30       	cpi	r24, 0x02	; 2
    11e6:	91 05       	cpc	r25, r1
    11e8:	10 f4       	brcc	.+4      	; 0x11ee <malloc+0xe>
    11ea:	82 e0       	ldi	r24, 0x02	; 2
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	e0 91 c4 02 	lds	r30, 0x02C4
    11f2:	f0 91 c5 02 	lds	r31, 0x02C5
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	a0 e0       	ldi	r26, 0x00	; 0
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	30 97       	sbiw	r30, 0x00	; 0
    1200:	39 f1       	breq	.+78     	; 0x1250 <malloc+0x70>
    1202:	40 81       	ld	r20, Z
    1204:	51 81       	ldd	r21, Z+1	; 0x01
    1206:	48 17       	cp	r20, r24
    1208:	59 07       	cpc	r21, r25
    120a:	b8 f0       	brcs	.+46     	; 0x123a <malloc+0x5a>
    120c:	48 17       	cp	r20, r24
    120e:	59 07       	cpc	r21, r25
    1210:	71 f4       	brne	.+28     	; 0x122e <malloc+0x4e>
    1212:	82 81       	ldd	r24, Z+2	; 0x02
    1214:	93 81       	ldd	r25, Z+3	; 0x03
    1216:	10 97       	sbiw	r26, 0x00	; 0
    1218:	29 f0       	breq	.+10     	; 0x1224 <malloc+0x44>
    121a:	13 96       	adiw	r26, 0x03	; 3
    121c:	9c 93       	st	X, r25
    121e:	8e 93       	st	-X, r24
    1220:	12 97       	sbiw	r26, 0x02	; 2
    1222:	2c c0       	rjmp	.+88     	; 0x127c <malloc+0x9c>
    1224:	90 93 c5 02 	sts	0x02C5, r25
    1228:	80 93 c4 02 	sts	0x02C4, r24
    122c:	27 c0       	rjmp	.+78     	; 0x127c <malloc+0x9c>
    122e:	21 15       	cp	r18, r1
    1230:	31 05       	cpc	r19, r1
    1232:	31 f0       	breq	.+12     	; 0x1240 <malloc+0x60>
    1234:	42 17       	cp	r20, r18
    1236:	53 07       	cpc	r21, r19
    1238:	18 f0       	brcs	.+6      	; 0x1240 <malloc+0x60>
    123a:	a9 01       	movw	r20, r18
    123c:	db 01       	movw	r26, r22
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <malloc+0x62>
    1240:	ef 01       	movw	r28, r30
    1242:	9a 01       	movw	r18, r20
    1244:	bd 01       	movw	r22, r26
    1246:	df 01       	movw	r26, r30
    1248:	02 80       	ldd	r0, Z+2	; 0x02
    124a:	f3 81       	ldd	r31, Z+3	; 0x03
    124c:	e0 2d       	mov	r30, r0
    124e:	d7 cf       	rjmp	.-82     	; 0x11fe <malloc+0x1e>
    1250:	21 15       	cp	r18, r1
    1252:	31 05       	cpc	r19, r1
    1254:	f9 f0       	breq	.+62     	; 0x1294 <malloc+0xb4>
    1256:	28 1b       	sub	r18, r24
    1258:	39 0b       	sbc	r19, r25
    125a:	24 30       	cpi	r18, 0x04	; 4
    125c:	31 05       	cpc	r19, r1
    125e:	80 f4       	brcc	.+32     	; 0x1280 <malloc+0xa0>
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	9b 81       	ldd	r25, Y+3	; 0x03
    1264:	61 15       	cp	r22, r1
    1266:	71 05       	cpc	r23, r1
    1268:	21 f0       	breq	.+8      	; 0x1272 <malloc+0x92>
    126a:	fb 01       	movw	r30, r22
    126c:	93 83       	std	Z+3, r25	; 0x03
    126e:	82 83       	std	Z+2, r24	; 0x02
    1270:	04 c0       	rjmp	.+8      	; 0x127a <malloc+0x9a>
    1272:	90 93 c5 02 	sts	0x02C5, r25
    1276:	80 93 c4 02 	sts	0x02C4, r24
    127a:	fe 01       	movw	r30, r28
    127c:	32 96       	adiw	r30, 0x02	; 2
    127e:	44 c0       	rjmp	.+136    	; 0x1308 <malloc+0x128>
    1280:	fe 01       	movw	r30, r28
    1282:	e2 0f       	add	r30, r18
    1284:	f3 1f       	adc	r31, r19
    1286:	81 93       	st	Z+, r24
    1288:	91 93       	st	Z+, r25
    128a:	22 50       	subi	r18, 0x02	; 2
    128c:	31 09       	sbc	r19, r1
    128e:	39 83       	std	Y+1, r19	; 0x01
    1290:	28 83       	st	Y, r18
    1292:	3a c0       	rjmp	.+116    	; 0x1308 <malloc+0x128>
    1294:	20 91 c2 02 	lds	r18, 0x02C2
    1298:	30 91 c3 02 	lds	r19, 0x02C3
    129c:	23 2b       	or	r18, r19
    129e:	41 f4       	brne	.+16     	; 0x12b0 <malloc+0xd0>
    12a0:	20 91 02 02 	lds	r18, 0x0202
    12a4:	30 91 03 02 	lds	r19, 0x0203
    12a8:	30 93 c3 02 	sts	0x02C3, r19
    12ac:	20 93 c2 02 	sts	0x02C2, r18
    12b0:	20 91 00 02 	lds	r18, 0x0200
    12b4:	30 91 01 02 	lds	r19, 0x0201
    12b8:	21 15       	cp	r18, r1
    12ba:	31 05       	cpc	r19, r1
    12bc:	41 f4       	brne	.+16     	; 0x12ce <malloc+0xee>
    12be:	2d b7       	in	r18, 0x3d	; 61
    12c0:	3e b7       	in	r19, 0x3e	; 62
    12c2:	40 91 04 02 	lds	r20, 0x0204
    12c6:	50 91 05 02 	lds	r21, 0x0205
    12ca:	24 1b       	sub	r18, r20
    12cc:	35 0b       	sbc	r19, r21
    12ce:	e0 91 c2 02 	lds	r30, 0x02C2
    12d2:	f0 91 c3 02 	lds	r31, 0x02C3
    12d6:	e2 17       	cp	r30, r18
    12d8:	f3 07       	cpc	r31, r19
    12da:	a0 f4       	brcc	.+40     	; 0x1304 <malloc+0x124>
    12dc:	2e 1b       	sub	r18, r30
    12de:	3f 0b       	sbc	r19, r31
    12e0:	28 17       	cp	r18, r24
    12e2:	39 07       	cpc	r19, r25
    12e4:	78 f0       	brcs	.+30     	; 0x1304 <malloc+0x124>
    12e6:	ac 01       	movw	r20, r24
    12e8:	4e 5f       	subi	r20, 0xFE	; 254
    12ea:	5f 4f       	sbci	r21, 0xFF	; 255
    12ec:	24 17       	cp	r18, r20
    12ee:	35 07       	cpc	r19, r21
    12f0:	48 f0       	brcs	.+18     	; 0x1304 <malloc+0x124>
    12f2:	4e 0f       	add	r20, r30
    12f4:	5f 1f       	adc	r21, r31
    12f6:	50 93 c3 02 	sts	0x02C3, r21
    12fa:	40 93 c2 02 	sts	0x02C2, r20
    12fe:	81 93       	st	Z+, r24
    1300:	91 93       	st	Z+, r25
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <malloc+0x128>
    1304:	e0 e0       	ldi	r30, 0x00	; 0
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	cf 01       	movw	r24, r30
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	08 95       	ret

00001310 <free>:
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	09 f4       	brne	.+2      	; 0x131a <free+0xa>
    1318:	87 c0       	rjmp	.+270    	; 0x1428 <free+0x118>
    131a:	fc 01       	movw	r30, r24
    131c:	32 97       	sbiw	r30, 0x02	; 2
    131e:	13 82       	std	Z+3, r1	; 0x03
    1320:	12 82       	std	Z+2, r1	; 0x02
    1322:	c0 91 c4 02 	lds	r28, 0x02C4
    1326:	d0 91 c5 02 	lds	r29, 0x02C5
    132a:	20 97       	sbiw	r28, 0x00	; 0
    132c:	81 f4       	brne	.+32     	; 0x134e <free+0x3e>
    132e:	20 81       	ld	r18, Z
    1330:	31 81       	ldd	r19, Z+1	; 0x01
    1332:	28 0f       	add	r18, r24
    1334:	39 1f       	adc	r19, r25
    1336:	80 91 c2 02 	lds	r24, 0x02C2
    133a:	90 91 c3 02 	lds	r25, 0x02C3
    133e:	82 17       	cp	r24, r18
    1340:	93 07       	cpc	r25, r19
    1342:	79 f5       	brne	.+94     	; 0x13a2 <free+0x92>
    1344:	f0 93 c3 02 	sts	0x02C3, r31
    1348:	e0 93 c2 02 	sts	0x02C2, r30
    134c:	6d c0       	rjmp	.+218    	; 0x1428 <free+0x118>
    134e:	de 01       	movw	r26, r28
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	ae 17       	cp	r26, r30
    1356:	bf 07       	cpc	r27, r31
    1358:	50 f4       	brcc	.+20     	; 0x136e <free+0x5e>
    135a:	12 96       	adiw	r26, 0x02	; 2
    135c:	4d 91       	ld	r20, X+
    135e:	5c 91       	ld	r21, X
    1360:	13 97       	sbiw	r26, 0x03	; 3
    1362:	9d 01       	movw	r18, r26
    1364:	41 15       	cp	r20, r1
    1366:	51 05       	cpc	r21, r1
    1368:	09 f1       	breq	.+66     	; 0x13ac <free+0x9c>
    136a:	da 01       	movw	r26, r20
    136c:	f3 cf       	rjmp	.-26     	; 0x1354 <free+0x44>
    136e:	b3 83       	std	Z+3, r27	; 0x03
    1370:	a2 83       	std	Z+2, r26	; 0x02
    1372:	40 81       	ld	r20, Z
    1374:	51 81       	ldd	r21, Z+1	; 0x01
    1376:	84 0f       	add	r24, r20
    1378:	95 1f       	adc	r25, r21
    137a:	8a 17       	cp	r24, r26
    137c:	9b 07       	cpc	r25, r27
    137e:	71 f4       	brne	.+28     	; 0x139c <free+0x8c>
    1380:	8d 91       	ld	r24, X+
    1382:	9c 91       	ld	r25, X
    1384:	11 97       	sbiw	r26, 0x01	; 1
    1386:	84 0f       	add	r24, r20
    1388:	95 1f       	adc	r25, r21
    138a:	02 96       	adiw	r24, 0x02	; 2
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	80 83       	st	Z, r24
    1390:	12 96       	adiw	r26, 0x02	; 2
    1392:	8d 91       	ld	r24, X+
    1394:	9c 91       	ld	r25, X
    1396:	13 97       	sbiw	r26, 0x03	; 3
    1398:	93 83       	std	Z+3, r25	; 0x03
    139a:	82 83       	std	Z+2, r24	; 0x02
    139c:	21 15       	cp	r18, r1
    139e:	31 05       	cpc	r19, r1
    13a0:	29 f4       	brne	.+10     	; 0x13ac <free+0x9c>
    13a2:	f0 93 c5 02 	sts	0x02C5, r31
    13a6:	e0 93 c4 02 	sts	0x02C4, r30
    13aa:	3e c0       	rjmp	.+124    	; 0x1428 <free+0x118>
    13ac:	d9 01       	movw	r26, r18
    13ae:	13 96       	adiw	r26, 0x03	; 3
    13b0:	fc 93       	st	X, r31
    13b2:	ee 93       	st	-X, r30
    13b4:	12 97       	sbiw	r26, 0x02	; 2
    13b6:	4d 91       	ld	r20, X+
    13b8:	5d 91       	ld	r21, X+
    13ba:	a4 0f       	add	r26, r20
    13bc:	b5 1f       	adc	r27, r21
    13be:	ea 17       	cp	r30, r26
    13c0:	fb 07       	cpc	r31, r27
    13c2:	79 f4       	brne	.+30     	; 0x13e2 <free+0xd2>
    13c4:	80 81       	ld	r24, Z
    13c6:	91 81       	ldd	r25, Z+1	; 0x01
    13c8:	84 0f       	add	r24, r20
    13ca:	95 1f       	adc	r25, r21
    13cc:	02 96       	adiw	r24, 0x02	; 2
    13ce:	d9 01       	movw	r26, r18
    13d0:	11 96       	adiw	r26, 0x01	; 1
    13d2:	9c 93       	st	X, r25
    13d4:	8e 93       	st	-X, r24
    13d6:	82 81       	ldd	r24, Z+2	; 0x02
    13d8:	93 81       	ldd	r25, Z+3	; 0x03
    13da:	13 96       	adiw	r26, 0x03	; 3
    13dc:	9c 93       	st	X, r25
    13de:	8e 93       	st	-X, r24
    13e0:	12 97       	sbiw	r26, 0x02	; 2
    13e2:	e0 e0       	ldi	r30, 0x00	; 0
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	19 f0       	breq	.+6      	; 0x13f4 <free+0xe4>
    13ee:	fe 01       	movw	r30, r28
    13f0:	ec 01       	movw	r28, r24
    13f2:	f9 cf       	rjmp	.-14     	; 0x13e6 <free+0xd6>
    13f4:	ce 01       	movw	r24, r28
    13f6:	02 96       	adiw	r24, 0x02	; 2
    13f8:	28 81       	ld	r18, Y
    13fa:	39 81       	ldd	r19, Y+1	; 0x01
    13fc:	82 0f       	add	r24, r18
    13fe:	93 1f       	adc	r25, r19
    1400:	20 91 c2 02 	lds	r18, 0x02C2
    1404:	30 91 c3 02 	lds	r19, 0x02C3
    1408:	28 17       	cp	r18, r24
    140a:	39 07       	cpc	r19, r25
    140c:	69 f4       	brne	.+26     	; 0x1428 <free+0x118>
    140e:	30 97       	sbiw	r30, 0x00	; 0
    1410:	29 f4       	brne	.+10     	; 0x141c <free+0x10c>
    1412:	10 92 c5 02 	sts	0x02C5, r1
    1416:	10 92 c4 02 	sts	0x02C4, r1
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <free+0x110>
    141c:	13 82       	std	Z+3, r1	; 0x03
    141e:	12 82       	std	Z+2, r1	; 0x02
    1420:	d0 93 c3 02 	sts	0x02C3, r29
    1424:	c0 93 c2 02 	sts	0x02C2, r28
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <strnlen_P>:
    142e:	fc 01       	movw	r30, r24
    1430:	05 90       	lpm	r0, Z+
    1432:	61 50       	subi	r22, 0x01	; 1
    1434:	70 40       	sbci	r23, 0x00	; 0
    1436:	01 10       	cpse	r0, r1
    1438:	d8 f7       	brcc	.-10     	; 0x1430 <strnlen_P+0x2>
    143a:	80 95       	com	r24
    143c:	90 95       	com	r25
    143e:	8e 0f       	add	r24, r30
    1440:	9f 1f       	adc	r25, r31
    1442:	08 95       	ret

00001444 <memset>:
    1444:	dc 01       	movw	r26, r24
    1446:	01 c0       	rjmp	.+2      	; 0x144a <memset+0x6>
    1448:	6d 93       	st	X+, r22
    144a:	41 50       	subi	r20, 0x01	; 1
    144c:	50 40       	sbci	r21, 0x00	; 0
    144e:	e0 f7       	brcc	.-8      	; 0x1448 <memset+0x4>
    1450:	08 95       	ret

00001452 <strnlen>:
    1452:	fc 01       	movw	r30, r24
    1454:	61 50       	subi	r22, 0x01	; 1
    1456:	70 40       	sbci	r23, 0x00	; 0
    1458:	01 90       	ld	r0, Z+
    145a:	01 10       	cpse	r0, r1
    145c:	d8 f7       	brcc	.-10     	; 0x1454 <strnlen+0x2>
    145e:	80 95       	com	r24
    1460:	90 95       	com	r25
    1462:	8e 0f       	add	r24, r30
    1464:	9f 1f       	adc	r25, r31
    1466:	08 95       	ret

00001468 <fputc>:
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	18 2f       	mov	r17, r24
    1472:	09 2f       	mov	r16, r25
    1474:	eb 01       	movw	r28, r22
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	81 fd       	sbrc	r24, 1
    147a:	03 c0       	rjmp	.+6      	; 0x1482 <fputc+0x1a>
    147c:	8f ef       	ldi	r24, 0xFF	; 255
    147e:	9f ef       	ldi	r25, 0xFF	; 255
    1480:	20 c0       	rjmp	.+64     	; 0x14c2 <fputc+0x5a>
    1482:	82 ff       	sbrs	r24, 2
    1484:	10 c0       	rjmp	.+32     	; 0x14a6 <fputc+0x3e>
    1486:	4e 81       	ldd	r20, Y+6	; 0x06
    1488:	5f 81       	ldd	r21, Y+7	; 0x07
    148a:	2c 81       	ldd	r18, Y+4	; 0x04
    148c:	3d 81       	ldd	r19, Y+5	; 0x05
    148e:	42 17       	cp	r20, r18
    1490:	53 07       	cpc	r21, r19
    1492:	7c f4       	brge	.+30     	; 0x14b2 <fputc+0x4a>
    1494:	e8 81       	ld	r30, Y
    1496:	f9 81       	ldd	r31, Y+1	; 0x01
    1498:	9f 01       	movw	r18, r30
    149a:	2f 5f       	subi	r18, 0xFF	; 255
    149c:	3f 4f       	sbci	r19, 0xFF	; 255
    149e:	39 83       	std	Y+1, r19	; 0x01
    14a0:	28 83       	st	Y, r18
    14a2:	10 83       	st	Z, r17
    14a4:	06 c0       	rjmp	.+12     	; 0x14b2 <fputc+0x4a>
    14a6:	e8 85       	ldd	r30, Y+8	; 0x08
    14a8:	f9 85       	ldd	r31, Y+9	; 0x09
    14aa:	81 2f       	mov	r24, r17
    14ac:	19 95       	eicall
    14ae:	89 2b       	or	r24, r25
    14b0:	29 f7       	brne	.-54     	; 0x147c <fputc+0x14>
    14b2:	2e 81       	ldd	r18, Y+6	; 0x06
    14b4:	3f 81       	ldd	r19, Y+7	; 0x07
    14b6:	2f 5f       	subi	r18, 0xFF	; 255
    14b8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ba:	3f 83       	std	Y+7, r19	; 0x07
    14bc:	2e 83       	std	Y+6, r18	; 0x06
    14be:	81 2f       	mov	r24, r17
    14c0:	90 2f       	mov	r25, r16
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	08 95       	ret

000014cc <__ultoa_invert>:
    14cc:	fa 01       	movw	r30, r20
    14ce:	aa 27       	eor	r26, r26
    14d0:	28 30       	cpi	r18, 0x08	; 8
    14d2:	51 f1       	breq	.+84     	; 0x1528 <__ultoa_invert+0x5c>
    14d4:	20 31       	cpi	r18, 0x10	; 16
    14d6:	81 f1       	breq	.+96     	; 0x1538 <__ultoa_invert+0x6c>
    14d8:	e8 94       	clt
    14da:	6f 93       	push	r22
    14dc:	6e 7f       	andi	r22, 0xFE	; 254
    14de:	6e 5f       	subi	r22, 0xFE	; 254
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255
    14e2:	8f 4f       	sbci	r24, 0xFF	; 255
    14e4:	9f 4f       	sbci	r25, 0xFF	; 255
    14e6:	af 4f       	sbci	r26, 0xFF	; 255
    14e8:	b1 e0       	ldi	r27, 0x01	; 1
    14ea:	3e d0       	rcall	.+124    	; 0x1568 <__ultoa_invert+0x9c>
    14ec:	b4 e0       	ldi	r27, 0x04	; 4
    14ee:	3c d0       	rcall	.+120    	; 0x1568 <__ultoa_invert+0x9c>
    14f0:	67 0f       	add	r22, r23
    14f2:	78 1f       	adc	r23, r24
    14f4:	89 1f       	adc	r24, r25
    14f6:	9a 1f       	adc	r25, r26
    14f8:	a1 1d       	adc	r26, r1
    14fa:	68 0f       	add	r22, r24
    14fc:	79 1f       	adc	r23, r25
    14fe:	8a 1f       	adc	r24, r26
    1500:	91 1d       	adc	r25, r1
    1502:	a1 1d       	adc	r26, r1
    1504:	6a 0f       	add	r22, r26
    1506:	71 1d       	adc	r23, r1
    1508:	81 1d       	adc	r24, r1
    150a:	91 1d       	adc	r25, r1
    150c:	a1 1d       	adc	r26, r1
    150e:	20 d0       	rcall	.+64     	; 0x1550 <__ultoa_invert+0x84>
    1510:	09 f4       	brne	.+2      	; 0x1514 <__ultoa_invert+0x48>
    1512:	68 94       	set
    1514:	3f 91       	pop	r19
    1516:	2a e0       	ldi	r18, 0x0A	; 10
    1518:	26 9f       	mul	r18, r22
    151a:	11 24       	eor	r1, r1
    151c:	30 19       	sub	r19, r0
    151e:	30 5d       	subi	r19, 0xD0	; 208
    1520:	31 93       	st	Z+, r19
    1522:	de f6       	brtc	.-74     	; 0x14da <__ultoa_invert+0xe>
    1524:	cf 01       	movw	r24, r30
    1526:	08 95       	ret
    1528:	46 2f       	mov	r20, r22
    152a:	47 70       	andi	r20, 0x07	; 7
    152c:	40 5d       	subi	r20, 0xD0	; 208
    152e:	41 93       	st	Z+, r20
    1530:	b3 e0       	ldi	r27, 0x03	; 3
    1532:	0f d0       	rcall	.+30     	; 0x1552 <__ultoa_invert+0x86>
    1534:	c9 f7       	brne	.-14     	; 0x1528 <__ultoa_invert+0x5c>
    1536:	f6 cf       	rjmp	.-20     	; 0x1524 <__ultoa_invert+0x58>
    1538:	46 2f       	mov	r20, r22
    153a:	4f 70       	andi	r20, 0x0F	; 15
    153c:	40 5d       	subi	r20, 0xD0	; 208
    153e:	4a 33       	cpi	r20, 0x3A	; 58
    1540:	18 f0       	brcs	.+6      	; 0x1548 <__ultoa_invert+0x7c>
    1542:	49 5d       	subi	r20, 0xD9	; 217
    1544:	31 fd       	sbrc	r19, 1
    1546:	40 52       	subi	r20, 0x20	; 32
    1548:	41 93       	st	Z+, r20
    154a:	02 d0       	rcall	.+4      	; 0x1550 <__ultoa_invert+0x84>
    154c:	a9 f7       	brne	.-22     	; 0x1538 <__ultoa_invert+0x6c>
    154e:	ea cf       	rjmp	.-44     	; 0x1524 <__ultoa_invert+0x58>
    1550:	b4 e0       	ldi	r27, 0x04	; 4
    1552:	a6 95       	lsr	r26
    1554:	97 95       	ror	r25
    1556:	87 95       	ror	r24
    1558:	77 95       	ror	r23
    155a:	67 95       	ror	r22
    155c:	ba 95       	dec	r27
    155e:	c9 f7       	brne	.-14     	; 0x1552 <__ultoa_invert+0x86>
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	61 05       	cpc	r22, r1
    1564:	71 05       	cpc	r23, r1
    1566:	08 95       	ret
    1568:	9b 01       	movw	r18, r22
    156a:	ac 01       	movw	r20, r24
    156c:	0a 2e       	mov	r0, r26
    156e:	06 94       	lsr	r0
    1570:	57 95       	ror	r21
    1572:	47 95       	ror	r20
    1574:	37 95       	ror	r19
    1576:	27 95       	ror	r18
    1578:	ba 95       	dec	r27
    157a:	c9 f7       	brne	.-14     	; 0x156e <__ultoa_invert+0xa2>
    157c:	62 0f       	add	r22, r18
    157e:	73 1f       	adc	r23, r19
    1580:	84 1f       	adc	r24, r20
    1582:	95 1f       	adc	r25, r21
    1584:	a0 1d       	adc	r26, r0
    1586:	08 95       	ret

00001588 <_exit>:
    1588:	f8 94       	cli

0000158a <__stop_program>:
    158a:	ff cf       	rjmp	.-2      	; 0x158a <__stop_program>
