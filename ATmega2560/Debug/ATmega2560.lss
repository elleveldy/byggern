
ATmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800200  0000162a  000016be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000162a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  008002dc  008002dc  0000179a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000179a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003b8  00000000  00000000  000017f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000028c9  00000000  00000000  00001bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000123e  00000000  00000000  00004477  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ad6  00000000  00000000  000056b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000082c  00000000  00000000  0000718c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008f9  00000000  00000000  000079b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000123d  00000000  00000000  000082b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002d8  00000000  00000000  000094ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	35 c4       	rjmp	.+2154   	; 0x908 <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9f 04       	cpc	r9, r15
      e6:	f1 04       	cpc	r15, r1
      e8:	f1 04       	cpc	r15, r1
      ea:	f1 04       	cpc	r15, r1
      ec:	f1 04       	cpc	r15, r1
      ee:	f1 04       	cpc	r15, r1
      f0:	f1 04       	cpc	r15, r1
      f2:	f1 04       	cpc	r15, r1
      f4:	9f 04       	cpc	r9, r15
      f6:	f1 04       	cpc	r15, r1
      f8:	f1 04       	cpc	r15, r1
      fa:	f1 04       	cpc	r15, r1
      fc:	f1 04       	cpc	r15, r1
      fe:	f1 04       	cpc	r15, r1
     100:	f1 04       	cpc	r15, r1
     102:	f1 04       	cpc	r15, r1
     104:	a1 04       	cpc	r10, r1
     106:	f1 04       	cpc	r15, r1
     108:	f1 04       	cpc	r15, r1
     10a:	f1 04       	cpc	r15, r1
     10c:	f1 04       	cpc	r15, r1
     10e:	f1 04       	cpc	r15, r1
     110:	f1 04       	cpc	r15, r1
     112:	f1 04       	cpc	r15, r1
     114:	f1 04       	cpc	r15, r1
     116:	f1 04       	cpc	r15, r1
     118:	f1 04       	cpc	r15, r1
     11a:	f1 04       	cpc	r15, r1
     11c:	f1 04       	cpc	r15, r1
     11e:	f1 04       	cpc	r15, r1
     120:	f1 04       	cpc	r15, r1
     122:	f1 04       	cpc	r15, r1
     124:	a1 04       	cpc	r10, r1
     126:	f1 04       	cpc	r15, r1
     128:	f1 04       	cpc	r15, r1
     12a:	f1 04       	cpc	r15, r1
     12c:	f1 04       	cpc	r15, r1
     12e:	f1 04       	cpc	r15, r1
     130:	f1 04       	cpc	r15, r1
     132:	f1 04       	cpc	r15, r1
     134:	f1 04       	cpc	r15, r1
     136:	f1 04       	cpc	r15, r1
     138:	f1 04       	cpc	r15, r1
     13a:	f1 04       	cpc	r15, r1
     13c:	f1 04       	cpc	r15, r1
     13e:	f1 04       	cpc	r15, r1
     140:	f1 04       	cpc	r15, r1
     142:	f1 04       	cpc	r15, r1
     144:	ed 04       	cpc	r14, r13
     146:	f1 04       	cpc	r15, r1
     148:	f1 04       	cpc	r15, r1
     14a:	f1 04       	cpc	r15, r1
     14c:	f1 04       	cpc	r15, r1
     14e:	f1 04       	cpc	r15, r1
     150:	f1 04       	cpc	r15, r1
     152:	f1 04       	cpc	r15, r1
     154:	ca 04       	cpc	r12, r10
     156:	f1 04       	cpc	r15, r1
     158:	f1 04       	cpc	r15, r1
     15a:	f1 04       	cpc	r15, r1
     15c:	f1 04       	cpc	r15, r1
     15e:	f1 04       	cpc	r15, r1
     160:	f1 04       	cpc	r15, r1
     162:	f1 04       	cpc	r15, r1
     164:	f1 04       	cpc	r15, r1
     166:	f1 04       	cpc	r15, r1
     168:	f1 04       	cpc	r15, r1
     16a:	f1 04       	cpc	r15, r1
     16c:	f1 04       	cpc	r15, r1
     16e:	f1 04       	cpc	r15, r1
     170:	f1 04       	cpc	r15, r1
     172:	f1 04       	cpc	r15, r1
     174:	be 04       	cpc	r11, r14
     176:	f1 04       	cpc	r15, r1
     178:	f1 04       	cpc	r15, r1
     17a:	f1 04       	cpc	r15, r1
     17c:	f1 04       	cpc	r15, r1
     17e:	f1 04       	cpc	r15, r1
     180:	f1 04       	cpc	r15, r1
     182:	f1 04       	cpc	r15, r1
     184:	dc 04       	cpc	r13, r12

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	ea e2       	ldi	r30, 0x2A	; 42
     19e:	f6 e1       	ldi	r31, 0x16	; 22
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	ac 3d       	cpi	r26, 0xDC	; 220
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	ac ed       	ldi	r26, 0xDC	; 220
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	ac 3f       	cpi	r26, 0xFC	; 252
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	24 d0       	rcall	.+72     	; 0x20a <main>
     1c2:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <adc_init>:
#include "adc.h"

void adc_init(){
	
	// Division factor 128
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     1c8:	ea e7       	ldi	r30, 0x7A	; 122
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	87 68       	ori	r24, 0x87	; 135
     1d0:	80 83       	st	Z, r24
	
	/*We find max voltage to be 1.1 V
	Internal 1.1 V Voltage Reference with external capacitor at AREF pin  ->  REFS1 = 1 REFS0 = 0 
	*/  
	ADMUX |= (1 << REFS0);
     1d2:	ec e7       	ldi	r30, 0x7C	; 124
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 64       	ori	r24, 0x40	; 64
     1da:	80 83       	st	Z, r24
	//ADMUX &= ~(1 << REFS1);
	ADMUX |= (1 << REFS1);
     1dc:	80 81       	ld	r24, Z
     1de:	80 68       	ori	r24, 0x80	; 128
     1e0:	80 83       	st	Z, r24
     1e2:	08 95       	ret

000001e4 <adc_read>:
	
	
}

uint16_t adc_read(uint8_t ch){ //IR set to ADC0 = PF0
	ADMUX |= (ch & 0x03);
     1e4:	ec e7       	ldi	r30, 0x7C	; 124
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	90 81       	ld	r25, Z
     1ea:	83 70       	andi	r24, 0x03	; 3
     1ec:	98 2b       	or	r25, r24
     1ee:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADSC);
     1f0:	ea e7       	ldi	r30, 0x7A	; 122
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	80 64       	ori	r24, 0x40	; 64
     1f8:	80 83       	st	Z, r24
	
	while((ADCSRA & (1 << ADSC))){}
     1fa:	80 81       	ld	r24, Z
     1fc:	86 fd       	sbrc	r24, 6
     1fe:	fd cf       	rjmp	.-6      	; 0x1fa <adc_read+0x16>

	return ADC; //sexy premade code
     200:	80 91 78 00 	lds	r24, 0x0078
     204:	90 91 79 00 	lds	r25, 0x0079
     208:	08 95       	ret

0000020a <main>:

*/



int main(void){
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	2b 97       	sbiw	r28, 0x0b	; 11
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	f8 94       	cli
     218:	de bf       	out	0x3e, r29	; 62
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	cd bf       	out	0x3d, r28	; 61
		PORTB = 0;
		_delay_ms(500);
	}*/
	
	
	MCUCR |= (1 << SRE);
     21e:	85 b7       	in	r24, 0x35	; 53
     220:	80 68       	ori	r24, 0x80	; 128
     222:	85 bf       	out	0x35, r24	; 53
	uart_Init(MYUBRR);
     224:	87 e6       	ldi	r24, 0x67	; 103
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 d4       	rcall	.+2052   	; 0xa2e <uart_Init>
	//
	
	
	can_init(MODE_NORMAL);
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0c d0       	rcall	.+24     	; 0x248 <can_init>
	pwm_init();//servo
     230:	83 d2       	rcall	.+1286   	; 0x738 <pwm_init>
	adc_init();
     232:	ca df       	rcall	.-108    	; 0x1c8 <adc_init>
	
	DDRE |= (1 << 3); //studass PWM bandaid that can be removed? 
     234:	6b 9a       	sbi	0x0d, 3	; 13
	/*
	int high = adc_read(0x00);
	int low = adc_read(0x00);
	*/

	timer_init();
     236:	23 d3       	rcall	.+1606   	; 0x87e <timer_init>
	
	solenoid_init();
     238:	fd d2       	rcall	.+1530   	; 0x834 <solenoid_init>
	motor_init();
     23a:	8e d1       	rcall	.+796    	; 0x558 <motor_init>
	
	int16_t speed;
	
	
	motor_controller_calibrate_by_reset();
     23c:	06 d2       	rcall	.+1036   	; 0x64a <motor_controller_calibrate_by_reset>
	
	
	while(1){
		
		motor_solenoid_test();
     23e:	bb d1       	rcall	.+886    	; 0x5b6 <motor_solenoid_test>
		
		canjoy_recieve();
     240:	ce 01       	movw	r24, r28
     242:	01 96       	adiw	r24, 0x01	; 1
     244:	b4 d0       	rcall	.+360    	; 0x3ae <canjoy_recieve>
     246:	fb cf       	rjmp	.-10     	; 0x23e <main+0x34>

00000248 <can_init>:
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
}
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	ec 01       	movw	r28, r24
     24e:	3b d1       	rcall	.+630    	; 0x4c6 <mcp2515_init>
     250:	4f ef       	ldi	r20, 0xFF	; 255
     252:	50 e0       	ldi	r21, 0x00	; 0
     254:	60 e6       	ldi	r22, 0x60	; 96
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	80 e6       	ldi	r24, 0x60	; 96
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	1b d1       	rcall	.+566    	; 0x494 <mcp2515_bit_modify>
     25e:	4f ef       	ldi	r20, 0xFF	; 255
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	60 e6       	ldi	r22, 0x60	; 96
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	80 e7       	ldi	r24, 0x70	; 112
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	14 d1       	rcall	.+552    	; 0x494 <mcp2515_bit_modify>
     26c:	ae 01       	movw	r20, r28
     26e:	60 ee       	ldi	r22, 0xE0	; 224
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	8f e0       	ldi	r24, 0x0F	; 15
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e d1       	rcall	.+540    	; 0x494 <mcp2515_bit_modify>
     278:	69 98       	cbi	0x0d, 1	; 13
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <can_poll_interrupt>:
}


uint8_t can_poll_interrupt(){
	
	while(!(PINE & (1 << PE1))){}
     280:	61 9b       	sbis	0x0c, 1	; 12
     282:	fe cf       	rjmp	.-4      	; 0x280 <can_poll_interrupt>
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
     284:	8c e2       	ldi	r24, 0x2C	; 44
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	f9 d0       	rcall	.+498    	; 0x47c <mcp2515_read>
     28a:	80 fd       	sbrc	r24, 0
     28c:	07 c0       	rjmp	.+14     	; 0x29c <can_poll_interrupt+0x1c>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
	}
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
     28e:	8c e2       	ldi	r24, 0x2C	; 44
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	f4 d0       	rcall	.+488    	; 0x47c <mcp2515_read>
     294:	81 ff       	sbrs	r24, 1
     296:	04 c0       	rjmp	.+8      	; 0x2a0 <can_poll_interrupt+0x20>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
     298:	80 e7       	ldi	r24, 0x70	; 112
     29a:	08 95       	ret
	
	while(!(PINE & (1 << PE1))){}
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
     29c:	80 e6       	ldi	r24, 0x60	; 96
     29e:	08 95       	ret
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
	}
	return -1;
     2a0:	8f ef       	ldi	r24, 0xFF	; 255
}
     2a2:	08 95       	ret

000002a4 <can_recieve>:
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
}

can_message can_recieve(can_message* msg){
     2a4:	7f 92       	push	r7
     2a6:	8f 92       	push	r8
     2a8:	9f 92       	push	r9
     2aa:	af 92       	push	r10
     2ac:	bf 92       	push	r11
     2ae:	cf 92       	push	r12
     2b0:	df 92       	push	r13
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	2b 97       	sbiw	r28, 0x0b	; 11
     2c4:	0f b6       	in	r0, 0x3f	; 63
     2c6:	f8 94       	cli
     2c8:	de bf       	out	0x3e, r29	; 62
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	cd bf       	out	0x3d, r28	; 61
     2ce:	6c 01       	movw	r12, r24
	can_message m;
	
	uint8_t buffer_select = can_poll_interrupt();
     2d0:	d7 df       	rcall	.-82     	; 0x280 <can_poll_interrupt>
     2d2:	98 2e       	mov	r9, r24
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
     2d4:	08 2f       	mov	r16, r24
     2d6:	10 e0       	ldi	r17, 0x00	; 0
     2d8:	c8 01       	movw	r24, r16
     2da:	01 96       	adiw	r24, 0x01	; 1
     2dc:	cf d0       	rcall	.+414    	; 0x47c <mcp2515_read>
     2de:	7c 01       	movw	r14, r24
     2e0:	c8 01       	movw	r24, r16
     2e2:	02 96       	adiw	r24, 0x02	; 2
     2e4:	cb d0       	rcall	.+406    	; 0x47c <mcp2515_read>
     2e6:	95 95       	asr	r25
     2e8:	87 95       	ror	r24
     2ea:	95 95       	asr	r25
     2ec:	87 95       	ror	r24
     2ee:	95 95       	asr	r25
     2f0:	87 95       	ror	r24
     2f2:	95 95       	asr	r25
     2f4:	87 95       	ror	r24
     2f6:	95 95       	asr	r25
     2f8:	87 95       	ror	r24
     2fa:	ee 0c       	add	r14, r14
     2fc:	ff 1c       	adc	r15, r15
     2fe:	ee 0c       	add	r14, r14
     300:	ff 1c       	adc	r15, r15
     302:	ee 0c       	add	r14, r14
     304:	ff 1c       	adc	r15, r15
     306:	5c 01       	movw	r10, r24
     308:	ae 28       	or	r10, r14
     30a:	bf 28       	or	r11, r15
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
     30c:	c8 01       	movw	r24, r16
     30e:	05 96       	adiw	r24, 0x05	; 5
     310:	b5 d0       	rcall	.+362    	; 0x47c <mcp2515_read>
     312:	8f 70       	andi	r24, 0x0F	; 15
     314:	78 2e       	mov	r7, r24
	
	for(uint8_t i = 0; i < m.length; i++){
     316:	a9 f0       	breq	.+42     	; 0x342 <can_recieve+0x9e>
     318:	8e 01       	movw	r16, r28
     31a:	0c 5f       	subi	r16, 0xFC	; 252
     31c:	1f 4f       	sbci	r17, 0xFF	; 255
     31e:	81 2c       	mov	r8, r1
     320:	ce 01       	movw	r24, r28
     322:	80 95       	com	r24
     324:	90 95       	com	r25
     326:	03 96       	adiw	r24, 0x03	; 3
     328:	7c 01       	movw	r14, r24
     32a:	e9 0c       	add	r14, r9
     32c:	f1 1c       	adc	r15, r1
		m.data[i] = mcp2515_read(buffer_select + MCP2515_RXB_OFFSET + i);// + i, msg->data[i]);
     32e:	c7 01       	movw	r24, r14
     330:	80 0f       	add	r24, r16
     332:	91 1f       	adc	r25, r17
     334:	a3 d0       	rcall	.+326    	; 0x47c <mcp2515_read>
     336:	f8 01       	movw	r30, r16
     338:	81 93       	st	Z+, r24
     33a:	8f 01       	movw	r16, r30
	uint8_t buffer_select = can_poll_interrupt();
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
	
	for(uint8_t i = 0; i < m.length; i++){
     33c:	83 94       	inc	r8
     33e:	87 10       	cpse	r8, r7
     340:	f6 cf       	rjmp	.-20     	; 0x32e <can_recieve+0x8a>
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	
	switch(buffer_select){
     342:	f0 e6       	ldi	r31, 0x60	; 96
     344:	9f 16       	cp	r9, r31
     346:	21 f0       	breq	.+8      	; 0x350 <can_recieve+0xac>
     348:	80 e7       	ldi	r24, 0x70	; 112
     34a:	98 16       	cp	r9, r24
     34c:	49 f0       	breq	.+18     	; 0x360 <can_recieve+0xbc>
     34e:	0f c0       	rjmp	.+30     	; 0x36e <can_recieve+0xca>
		case MCP_RXB0CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
     350:	40 e0       	ldi	r20, 0x00	; 0
     352:	50 e0       	ldi	r21, 0x00	; 0
     354:	61 e0       	ldi	r22, 0x01	; 1
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	8c e2       	ldi	r24, 0x2C	; 44
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	9b d0       	rcall	.+310    	; 0x494 <mcp2515_bit_modify>
		break;
     35e:	07 c0       	rjmp	.+14     	; 0x36e <can_recieve+0xca>
		case MCP_RXB1CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
     360:	40 e0       	ldi	r20, 0x00	; 0
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	62 e0       	ldi	r22, 0x02	; 2
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	8c e2       	ldi	r24, 0x2C	; 44
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	93 d0       	rcall	.+294    	; 0x494 <mcp2515_bit_modify>
		break;
	}
	
	return m;
     36e:	ba 82       	std	Y+2, r11	; 0x02
     370:	a9 82       	std	Y+1, r10	; 0x01
     372:	7b 82       	std	Y+3, r7	; 0x03
     374:	8b e0       	ldi	r24, 0x0B	; 11
     376:	fe 01       	movw	r30, r28
     378:	31 96       	adiw	r30, 0x01	; 1
     37a:	d6 01       	movw	r26, r12
     37c:	01 90       	ld	r0, Z+
     37e:	0d 92       	st	X+, r0
     380:	8a 95       	dec	r24
     382:	e1 f7       	brne	.-8      	; 0x37c <can_recieve+0xd8>
}
     384:	c6 01       	movw	r24, r12
     386:	2b 96       	adiw	r28, 0x0b	; 11
     388:	0f b6       	in	r0, 0x3f	; 63
     38a:	f8 94       	cli
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	0f be       	out	0x3f, r0	; 63
     390:	cd bf       	out	0x3d, r28	; 61
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	bf 90       	pop	r11
     3a4:	af 90       	pop	r10
     3a6:	9f 90       	pop	r9
     3a8:	8f 90       	pop	r8
     3aa:	7f 90       	pop	r7
     3ac:	08 95       	ret

000003ae <canjoy_recieve>:
int canjoy_slider_right(){
	return canjoy_msg.data[4];
}
int canjoy_button_left(){
	return canjoy_msg.data[5];
}
     3ae:	ef 92       	push	r14
     3b0:	ff 92       	push	r15
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	ec 01       	movw	r28, r24
     3bc:	73 df       	rcall	.-282    	; 0x2a4 <can_recieve>
     3be:	ea 80       	ldd	r14, Y+2	; 0x02
     3c0:	fb 80       	ldd	r15, Y+3	; 0x03
     3c2:	0c 81       	ldd	r16, Y+4	; 0x04
     3c4:	1d 81       	ldd	r17, Y+5	; 0x05
     3c6:	7e 81       	ldd	r23, Y+6	; 0x06
     3c8:	6f 81       	ldd	r22, Y+7	; 0x07
     3ca:	58 85       	ldd	r21, Y+8	; 0x08
     3cc:	49 85       	ldd	r20, Y+9	; 0x09
     3ce:	28 81       	ld	r18, Y
     3d0:	39 81       	ldd	r19, Y+1	; 0x01
     3d2:	80 91 06 02 	lds	r24, 0x0206
     3d6:	90 91 07 02 	lds	r25, 0x0207
     3da:	28 17       	cp	r18, r24
     3dc:	39 07       	cpc	r19, r25
     3de:	89 f4       	brne	.+34     	; 0x402 <canjoy_recieve+0x54>
     3e0:	8b e0       	ldi	r24, 0x0B	; 11
     3e2:	fe 01       	movw	r30, r28
     3e4:	a7 ee       	ldi	r26, 0xE7	; 231
     3e6:	b2 e0       	ldi	r27, 0x02	; 2
     3e8:	01 90       	ld	r0, Z+
     3ea:	0d 92       	st	X+, r0
     3ec:	8a 95       	dec	r24
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <canjoy_recieve+0x3a>
     3f0:	ea 82       	std	Y+2, r14	; 0x02
     3f2:	fb 82       	std	Y+3, r15	; 0x03
     3f4:	0c 83       	std	Y+4, r16	; 0x04
     3f6:	1d 83       	std	Y+5, r17	; 0x05
     3f8:	7e 83       	std	Y+6, r23	; 0x06
     3fa:	6f 83       	std	Y+7, r22	; 0x07
     3fc:	58 87       	std	Y+8, r21	; 0x08
     3fe:	49 87       	std	Y+9, r20	; 0x09
     400:	0c c0       	rjmp	.+24     	; 0x41a <canjoy_recieve+0x6c>
     402:	89 e0       	ldi	r24, 0x09	; 9
     404:	92 e0       	ldi	r25, 0x02	; 2
     406:	06 d5       	rcall	.+2572   	; 0xe14 <puts>
     408:	87 e0       	ldi	r24, 0x07	; 7
     40a:	8a 83       	std	Y+2, r24	; 0x02
     40c:	8b 83       	std	Y+3, r24	; 0x03
     40e:	1c 82       	std	Y+4, r1	; 0x04
     410:	1d 82       	std	Y+5, r1	; 0x05
     412:	1e 82       	std	Y+6, r1	; 0x06
     414:	1f 82       	std	Y+7, r1	; 0x07
     416:	18 86       	std	Y+8, r1	; 0x08
     418:	19 86       	std	Y+9, r1	; 0x09
     41a:	ce 01       	movw	r24, r28
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	ff 90       	pop	r15
     426:	ef 90       	pop	r14
     428:	08 95       	ret

0000042a <canjoy_joystick_x>:
     42a:	80 91 ea 02 	lds	r24, 0x02EA
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	08 95       	ret

00000432 <canjoy_button_right>:
int canjoy_button_right(){
	return canjoy_msg.data[6];
     432:	80 91 f0 02 	lds	r24, 0x02F0
}
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	08 95       	ret

0000043a <ir_alt_blocked>:
	
}

int ir_alt_blocked(){
	
	if(adc_read(IR_PIN) > MID){
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	d3 de       	rcall	.-602    	; 0x1e4 <adc_read>
     43e:	21 e0       	ldi	r18, 0x01	; 1
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	8d 32       	cpi	r24, 0x2D	; 45
     444:	91 40       	sbci	r25, 0x01	; 1
     446:	10 f0       	brcs	.+4      	; 0x44c <ir_alt_blocked+0x12>
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
		return 1;
	
	
}
     44c:	c9 01       	movw	r24, r18
     44e:	08 95       	ret

00000450 <max520_init>:
#define MAX520_TWI_ADDR 0b01011110



void max520_init(){
	TWI_Master_Initialise();
     450:	2f d2       	rcall	.+1118   	; 0x8b0 <TWI_Master_Initialise>
	sei();//interrupts on
     452:	78 94       	sei
     454:	08 95       	ret

00000456 <max520_send>:
}


void max520_send(uint8_t val)
{
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	00 d0       	rcall	.+0      	; 0x45c <max520_send+0x6>
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
	//printf("In max520_send\n");
	uint8_t message[3] = {MAX520_TWI_ADDR, 0, val};
     460:	9e e5       	ldi	r25, 0x5E	; 94
     462:	99 83       	std	Y+1, r25	; 0x01
     464:	1a 82       	std	Y+2, r1	; 0x02
     466:	8b 83       	std	Y+3, r24	; 0x03
	
	TWI_Start_Transceiver_With_Data(message, 3);
     468:	63 e0       	ldi	r22, 0x03	; 3
     46a:	ce 01       	movw	r24, r28
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	2a d2       	rcall	.+1108   	; 0x8c4 <TWI_Start_Transceiver_With_Data>
	
}
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <mcp2515_read>:
}

void mcp2515_request_to_send(int buffer_select){
	PORTB &= ~(1 << MCP2515_CS);
	spi_write(buffer_select);
	PORTB |= (1 << MCP2515_CS);
     47c:	cf 93       	push	r28
     47e:	c8 2f       	mov	r28, r24
     480:	28 98       	cbi	0x05, 0	; 5
     482:	83 e0       	ldi	r24, 0x03	; 3
     484:	f5 d1       	rcall	.+1002   	; 0x870 <spi_write>
     486:	8c 2f       	mov	r24, r28
     488:	f3 d1       	rcall	.+998    	; 0x870 <spi_write>
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	f1 d1       	rcall	.+994    	; 0x870 <spi_write>
     48e:	28 9a       	sbi	0x05, 0	; 5
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <mcp2515_bit_modify>:
}

void mcp2515_bit_modify(int address, int mask, int data){
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	18 2f       	mov	r17, r24
     49c:	d6 2f       	mov	r29, r22
     49e:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS);
     4a0:	28 98       	cbi	0x05, 0	; 5
	
	spi_write(MCP_BITMOD);
     4a2:	85 e0       	ldi	r24, 0x05	; 5
     4a4:	e5 d1       	rcall	.+970    	; 0x870 <spi_write>
	spi_write(address);
     4a6:	81 2f       	mov	r24, r17
     4a8:	e3 d1       	rcall	.+966    	; 0x870 <spi_write>
	spi_write(mask);
     4aa:	8d 2f       	mov	r24, r29
     4ac:	e1 d1       	rcall	.+962    	; 0x870 <spi_write>
	spi_write(data);
     4ae:	8c 2f       	mov	r24, r28
     4b0:	df d1       	rcall	.+958    	; 0x870 <spi_write>

	PORTB |= (1 << MCP2515_CS);
     4b2:	28 9a       	sbi	0x05, 0	; 5
	
}
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	1f 91       	pop	r17
     4ba:	08 95       	ret

000004bc <mcp2515_reset>:

void mcp2515_reset(){
	PORTB &= ~(1 << MCP2515_CS);
     4bc:	28 98       	cbi	0x05, 0	; 5
	spi_write(MCP_RESET);
     4be:	80 ec       	ldi	r24, 0xC0	; 192
     4c0:	d7 d1       	rcall	.+942    	; 0x870 <spi_write>
	PORTB |= (1 << MCP2515_CS);
     4c2:	28 9a       	sbi	0x05, 0	; 5
     4c4:	08 95       	ret

000004c6 <mcp2515_init>:
#include "SPI.h"
#include "mcp2515_define.h"


int mcp2515_init(){
	spi_init();
     4c6:	cd d1       	rcall	.+922    	; 0x862 <spi_init>
	mcp2515_reset();
     4c8:	f9 df       	rcall	.-14     	; 0x4bc <mcp2515_reset>
	
	uint8_t val = mcp2515_read(MCP_CANSTAT);
     4ca:	8e e0       	ldi	r24, 0x0E	; 14
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	d6 df       	rcall	.-84     	; 0x47c <mcp2515_read>
	if((val & MODE_MASK) != MODE_CONFIG){
     4d0:	80 7e       	andi	r24, 0xE0	; 224
     4d2:	99 27       	eor	r25, r25
     4d4:	80 38       	cpi	r24, 0x80	; 128
     4d6:	91 05       	cpc	r25, r1
     4d8:	31 f0       	breq	.+12     	; 0x4e6 <mcp2515_init+0x20>
		printf("ERROR: MCP2515 is NOT in config mode after reset!\n");
     4da:	82 e1       	ldi	r24, 0x12	; 18
     4dc:	92 e0       	ldi	r25, 0x02	; 2
     4de:	9a d4       	rcall	.+2356   	; 0xe14 <puts>
		return 1;
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	08 95       	ret
	}
	return 0;
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
}
     4ea:	08 95       	ret

000004ec <reverse_bits>:
	return byte;
	
	
	
	//reverse stuff
}
     4ec:	28 2f       	mov	r18, r24
     4ee:	2a 7a       	andi	r18, 0xAA	; 170
     4f0:	26 95       	lsr	r18
     4f2:	98 2f       	mov	r25, r24
     4f4:	95 75       	andi	r25, 0x55	; 85
     4f6:	99 0f       	add	r25, r25
     4f8:	92 2b       	or	r25, r18
     4fa:	29 2f       	mov	r18, r25
     4fc:	2c 7c       	andi	r18, 0xCC	; 204
     4fe:	26 95       	lsr	r18
     500:	26 95       	lsr	r18
     502:	89 2f       	mov	r24, r25
     504:	83 73       	andi	r24, 0x33	; 51
     506:	88 0f       	add	r24, r24
     508:	88 0f       	add	r24, r24
     50a:	82 2b       	or	r24, r18
     50c:	82 95       	swap	r24
     50e:	08 95       	ret

00000510 <motor_encoder_select_byte>:
     510:	88 23       	and	r24, r24
     512:	11 f0       	breq	.+4      	; 0x518 <motor_encoder_select_byte+0x8>
     514:	8d 9a       	sbi	0x11, 5	; 17
     516:	08 95       	ret
     518:	8d 98       	cbi	0x11, 5	; 17
     51a:	08 95       	ret

0000051c <motor_encoder_output_enable>:
     51c:	88 23       	and	r24, r24
     51e:	11 f0       	breq	.+4      	; 0x524 <motor_encoder_output_enable+0x8>
     520:	8c 98       	cbi	0x11, 4	; 17
     522:	08 95       	ret
     524:	8c 9a       	sbi	0x11, 4	; 17
     526:	08 95       	ret

00000528 <motor_direction>:
     528:	00 97       	sbiw	r24, 0x00	; 0
     52a:	11 f4       	brne	.+4      	; 0x530 <motor_direction+0x8>
     52c:	8b 9a       	sbi	0x11, 3	; 17
     52e:	08 95       	ret
     530:	01 97       	sbiw	r24, 0x01	; 1
     532:	09 f4       	brne	.+2      	; 0x536 <motor_direction+0xe>
     534:	8b 98       	cbi	0x11, 3	; 17
     536:	08 95       	ret

00000538 <motor_speed>:
     538:	8f 3f       	cpi	r24, 0xFF	; 255
     53a:	91 05       	cpc	r25, r1
     53c:	21 f0       	breq	.+8      	; 0x546 <motor_speed+0xe>
     53e:	18 f0       	brcs	.+6      	; 0x546 <motor_speed+0xe>
     540:	8f ef       	ldi	r24, 0xFF	; 255
     542:	89 cf       	rjmp	.-238    	; 0x456 <max520_send>
     544:	08 95       	ret
     546:	87 cf       	rjmp	.-242    	; 0x456 <max520_send>
     548:	08 95       	ret

0000054a <motor_encoder_reset>:
     54a:	8e 98       	cbi	0x11, 6	; 17
     54c:	8a e6       	ldi	r24, 0x6A	; 106
     54e:	8a 95       	dec	r24
     550:	f1 f7       	brne	.-4      	; 0x54e <motor_encoder_reset+0x4>
     552:	00 c0       	rjmp	.+0      	; 0x554 <motor_encoder_reset+0xa>
     554:	8e 9a       	sbi	0x11, 6	; 17
     556:	08 95       	ret

00000558 <motor_init>:
     558:	7b df       	rcall	.-266    	; 0x450 <max520_init>
     55a:	80 b3       	in	r24, 0x10	; 16
     55c:	88 6f       	ori	r24, 0xF8	; 248
     55e:	80 bb       	out	0x10, r24	; 16
     560:	81 b3       	in	r24, 0x11	; 17
     562:	88 63       	ori	r24, 0x38	; 56
     564:	81 bb       	out	0x11, r24	; 17
     566:	8f 98       	cbi	0x11, 7	; 17
     568:	10 92 07 01 	sts	0x0107, r1
     56c:	ee cf       	rjmp	.-36     	; 0x54a <motor_encoder_reset>
     56e:	08 95       	ret

00000570 <motor_encoder_read>:



uint16_t motor_encoder_read(){
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
	uint8_t msb;
	uint8_t lsb;
	
	
	//enable output
	motor_encoder_output_enable(1);
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	d2 df       	rcall	.-92     	; 0x51c <motor_encoder_output_enable>
	
	//read MSB to data
	motor_encoder_select_byte(0);
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	ca df       	rcall	.-108    	; 0x510 <motor_encoder_select_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     57c:	8a e6       	ldi	r24, 0x6A	; 106
     57e:	8a 95       	dec	r24
     580:	f1 f7       	brne	.-4      	; 0x57e <motor_encoder_read+0xe>
     582:	00 c0       	rjmp	.+0      	; 0x584 <motor_encoder_read+0x14>
}



uint8_t motor_encoder_byte_read(){
	uint8_t byte = PINK;
     584:	80 91 06 01 	lds	r24, 0x0106
	motor_encoder_output_enable(1);
	
	//read MSB to data
	motor_encoder_select_byte(0);
	_delay_us(20);
	msb = reverse_bits(motor_encoder_byte_read());
     588:	b1 df       	rcall	.-158    	; 0x4ec <reverse_bits>
     58a:	d8 2f       	mov	r29, r24
	
	//read LSB to data
	motor_encoder_select_byte(1);
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	c0 df       	rcall	.-128    	; 0x510 <motor_encoder_select_byte>
     590:	8a e6       	ldi	r24, 0x6A	; 106
     592:	8a 95       	dec	r24
     594:	f1 f7       	brne	.-4      	; 0x592 <motor_encoder_read+0x22>
     596:	00 c0       	rjmp	.+0      	; 0x598 <motor_encoder_read+0x28>
}



uint8_t motor_encoder_byte_read(){
	uint8_t byte = PINK;
     598:	80 91 06 01 	lds	r24, 0x0106
	msb = reverse_bits(motor_encoder_byte_read());
	
	//read LSB to data
	motor_encoder_select_byte(1);
	_delay_us(20);
	lsb = reverse_bits(motor_encoder_byte_read());
     59c:	a7 df       	rcall	.-178    	; 0x4ec <reverse_bits>
     59e:	c8 2f       	mov	r28, r24
	
	//motor_encoder_reset(); 
	//NO?
	
	//disable output
	motor_encoder_output_enable(0);
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	bc df       	rcall	.-136    	; 0x51c <motor_encoder_output_enable>
	
	
	uint16_t data = (msb << 8) + lsb;
     5a4:	2d 2f       	mov	r18, r29
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	92 2f       	mov	r25, r18
     5aa:	88 27       	eor	r24, r24
	
	return data;

	
}
     5ac:	8c 0f       	add	r24, r28
     5ae:	91 1d       	adc	r25, r1
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <motor_solenoid_test>:
	}

}


void motor_solenoid_test(){
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	2b 97       	sbiw	r28, 0x0b	; 11
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
	pwm_init(); //for servo
     5ca:	b6 d0       	rcall	.+364    	; 0x738 <pwm_init>
	solenoid_init();
     5cc:	33 d1       	rcall	.+614    	; 0x834 <solenoid_init>
		
		pwm_alt_joystick_pulse(canjoy_joystick_x());
		
		ir = ir_alt_blocked();
		
		printf("Ir blocked: %d\t\tEncoder: %d\n", ir, motor_encoder_read(), position_offset);
     5ce:	07 e5       	ldi	r16, 0x57	; 87
     5d0:	12 e0       	ldi	r17, 0x02	; 2

	int16_t speed;
	uint8_t ir;
	while(1){
		
		canjoy_recieve();
     5d2:	ce 01       	movw	r24, r28
     5d4:	01 96       	adiw	r24, 0x01	; 1
     5d6:	eb de       	rcall	.-554    	; 0x3ae <canjoy_recieve>
		speed = 2 * abs(canjoy_joystick_x() - 127);
     5d8:	28 df       	rcall	.-432    	; 0x42a <canjoy_joystick_x>
     5da:	8f 57       	subi	r24, 0x7F	; 127
     5dc:	91 09       	sbc	r25, r1
     5de:	9c 01       	movw	r18, r24
     5e0:	99 23       	and	r25, r25
     5e2:	24 f4       	brge	.+8      	; 0x5ec <motor_solenoid_test+0x36>
     5e4:	22 27       	eor	r18, r18
     5e6:	33 27       	eor	r19, r19
     5e8:	28 1b       	sub	r18, r24
     5ea:	39 0b       	sbc	r19, r25
			
		motor_speed(speed);
     5ec:	c9 01       	movw	r24, r18
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	a2 df       	rcall	.-188    	; 0x538 <motor_speed>
		
		if(canjoy_joystick_x() > 128){
     5f4:	1a df       	rcall	.-460    	; 0x42a <canjoy_joystick_x>
     5f6:	81 38       	cpi	r24, 0x81	; 129
     5f8:	91 05       	cpc	r25, r1
     5fa:	24 f0       	brlt	.+8      	; 0x604 <motor_solenoid_test+0x4e>
			motor_direction(right);}
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	93 df       	rcall	.-218    	; 0x528 <motor_direction>
     602:	03 c0       	rjmp	.+6      	; 0x60a <motor_solenoid_test+0x54>
		else{
			motor_direction(left);}
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	8f df       	rcall	.-226    	; 0x528 <motor_direction>
		
		if(canjoy_button_right()){
     60a:	13 df       	rcall	.-474    	; 0x432 <canjoy_button_right>
     60c:	89 2b       	or	r24, r25
     60e:	11 f0       	breq	.+4      	; 0x614 <motor_solenoid_test+0x5e>
			solenoid_extend();
     610:	1c d1       	rcall	.+568    	; 0x84a <solenoid_extend>
     612:	01 c0       	rjmp	.+2      	; 0x616 <motor_solenoid_test+0x60>
		/*if(canjoy_button_left()){
			motor_encoder_reset();
		}*/
		
		else{
			solenoid_retract();
     614:	20 d1       	rcall	.+576    	; 0x856 <solenoid_retract>
		}
		
		pwm_alt_joystick_pulse(canjoy_joystick_x());
     616:	09 df       	rcall	.-494    	; 0x42a <canjoy_joystick_x>
     618:	01 d1       	rcall	.+514    	; 0x81c <pwm_alt_joystick_pulse>
		
		ir = ir_alt_blocked();
     61a:	0f df       	rcall	.-482    	; 0x43a <ir_alt_blocked>
     61c:	7c 01       	movw	r14, r24
		
		printf("Ir blocked: %d\t\tEncoder: %d\n", ir, motor_encoder_read(), position_offset);
     61e:	d0 90 dc 02 	lds	r13, 0x02DC
     622:	c0 90 dd 02 	lds	r12, 0x02DD
     626:	a4 df       	rcall	.-184    	; 0x570 <motor_encoder_read>
     628:	cf 92       	push	r12
     62a:	df 92       	push	r13
     62c:	9f 93       	push	r25
     62e:	8f 93       	push	r24
     630:	c7 01       	movw	r24, r14
     632:	99 27       	eor	r25, r25
     634:	9f 93       	push	r25
     636:	8f 93       	push	r24
     638:	1f 93       	push	r17
     63a:	0f 93       	push	r16
     63c:	da d3       	rcall	.+1972   	; 0xdf2 <printf>
		
		
	}
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	f8 94       	cli
     642:	de bf       	out	0x3e, r29	; 62
     644:	0f be       	out	0x3f, r0	; 63
     646:	cd bf       	out	0x3d, r28	; 61
     648:	c4 cf       	rjmp	.-120    	; 0x5d2 <motor_solenoid_test+0x1c>

0000064a <motor_controller_calibrate_by_reset>:
	
}



void motor_controller_calibrate_by_reset(){
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
	printf("start calibration\n");
     656:	84 e7       	ldi	r24, 0x74	; 116
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	dc d3       	rcall	.+1976   	; 0xe14 <puts>
	
	motor_init();
     65c:	7d df       	rcall	.-262    	; 0x558 <motor_init>
	
	
	uint16_t position;
	uint16_t prev_position;
	
	motor_speed(70);
     65e:	86 e4       	ldi	r24, 0x46	; 70
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	6a df       	rcall	.-300    	; 0x538 <motor_speed>
	motor_direction(right);
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	5f df       	rcall	.-322    	; 0x528 <motor_direction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     66a:	2f ef       	ldi	r18, 0xFF	; 255
     66c:	82 e5       	ldi	r24, 0x52	; 82
     66e:	97 e0       	ldi	r25, 0x07	; 7
     670:	21 50       	subi	r18, 0x01	; 1
     672:	80 40       	sbci	r24, 0x00	; 0
     674:	90 40       	sbci	r25, 0x00	; 0
     676:	e1 f7       	brne	.-8      	; 0x670 <motor_controller_calibrate_by_reset+0x26>
     678:	00 c0       	rjmp	.+0      	; 0x67a <motor_controller_calibrate_by_reset+0x30>
     67a:	00 00       	nop
	_delay_ms(150);
	position =  motor_encoder_read();
     67c:	79 df       	rcall	.-270    	; 0x570 <motor_encoder_read>
	
	//go right until stopped, then set encoder to zero
	while(position != prev_position){
     67e:	89 2b       	or	r24, r25
     680:	d9 f0       	breq	.+54     	; 0x6b8 <motor_controller_calibrate_by_reset+0x6e>
		
		position =  motor_encoder_read();
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
		printf("position: %d\n", position);
     682:	06 e8       	ldi	r16, 0x86	; 134
     684:	12 e0       	ldi	r17, 0x02	; 2
	
	//go right until stopped, then set encoder to zero
	while(position != prev_position){
		
		
		position =  motor_encoder_read();
     686:	74 df       	rcall	.-280    	; 0x570 <motor_encoder_read>
     688:	7c 01       	movw	r14, r24
     68a:	2f ef       	ldi	r18, 0xFF	; 255
     68c:	81 ee       	ldi	r24, 0xE1	; 225
     68e:	94 e0       	ldi	r25, 0x04	; 4
     690:	21 50       	subi	r18, 0x01	; 1
     692:	80 40       	sbci	r24, 0x00	; 0
     694:	90 40       	sbci	r25, 0x00	; 0
     696:	e1 f7       	brne	.-8      	; 0x690 <motor_controller_calibrate_by_reset+0x46>
     698:	00 c0       	rjmp	.+0      	; 0x69a <motor_controller_calibrate_by_reset+0x50>
     69a:	00 00       	nop
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
     69c:	69 df       	rcall	.-302    	; 0x570 <motor_encoder_read>
     69e:	ec 01       	movw	r28, r24
		printf("position: %d\n", position);
     6a0:	df 93       	push	r29
     6a2:	8f 93       	push	r24
     6a4:	1f 93       	push	r17
     6a6:	0f 93       	push	r16
     6a8:	a4 d3       	rcall	.+1864   	; 0xdf2 <printf>
	motor_direction(right);
	_delay_ms(150);
	position =  motor_encoder_read();
	
	//go right until stopped, then set encoder to zero
	while(position != prev_position){
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	ec 16       	cp	r14, r28
     6b4:	fd 06       	cpc	r15, r29
     6b6:	39 f7       	brne	.-50     	; 0x686 <motor_controller_calibrate_by_reset+0x3c>
		position = motor_encoder_read();
		printf("position: %d\n", position);

		
	}
	motor_encoder_reset();
     6b8:	48 df       	rcall	.-368    	; 0x54a <motor_encoder_reset>
	
	motor_speed(70);
     6ba:	86 e4       	ldi	r24, 0x46	; 70
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	3c df       	rcall	.-392    	; 0x538 <motor_speed>
	motor_direction(left);
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	31 df       	rcall	.-414    	; 0x528 <motor_direction>
     6c6:	9f ef       	ldi	r25, 0xFF	; 255
     6c8:	22 e5       	ldi	r18, 0x52	; 82
     6ca:	87 e0       	ldi	r24, 0x07	; 7
     6cc:	91 50       	subi	r25, 0x01	; 1
     6ce:	20 40       	sbci	r18, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <motor_controller_calibrate_by_reset+0x82>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <motor_controller_calibrate_by_reset+0x8c>
     6d6:	00 00       	nop
		
		position =  motor_encoder_read();
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
		printf("position: %d\n", position);
     6d8:	0f 2e       	mov	r0, r31
     6da:	f6 e8       	ldi	r31, 0x86	; 134
     6dc:	ef 2e       	mov	r14, r31
     6de:	f2 e0       	ldi	r31, 0x02	; 2
     6e0:	ff 2e       	mov	r15, r31
     6e2:	f0 2d       	mov	r31, r0
	
	//go left until stopped, set max left to current position
	do{
		
		
		position =  motor_encoder_read();
     6e4:	45 df       	rcall	.-374    	; 0x570 <motor_encoder_read>
     6e6:	8c 01       	movw	r16, r24
     6e8:	9f ef       	ldi	r25, 0xFF	; 255
     6ea:	21 ee       	ldi	r18, 0xE1	; 225
     6ec:	84 e0       	ldi	r24, 0x04	; 4
     6ee:	91 50       	subi	r25, 0x01	; 1
     6f0:	20 40       	sbci	r18, 0x00	; 0
     6f2:	80 40       	sbci	r24, 0x00	; 0
     6f4:	e1 f7       	brne	.-8      	; 0x6ee <motor_controller_calibrate_by_reset+0xa4>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <motor_controller_calibrate_by_reset+0xae>
     6f8:	00 00       	nop
		_delay_ms(100);
		prev_position = position;
		position = motor_encoder_read();
     6fa:	3a df       	rcall	.-396    	; 0x570 <motor_encoder_read>
     6fc:	ec 01       	movw	r28, r24
		printf("position: %d\n", position);
     6fe:	df 93       	push	r29
     700:	cf 93       	push	r28
     702:	ff 92       	push	r15
     704:	ef 92       	push	r14
     706:	75 d3       	rcall	.+1770   	; 0xdf2 <printf>
		
		
	} while(position != prev_position);
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	0c 17       	cp	r16, r28
     712:	1d 07       	cpc	r17, r29
     714:	39 f7       	brne	.-50     	; 0x6e4 <motor_controller_calibrate_by_reset+0x9a>
	max_left = position;
     716:	10 93 df 02 	sts	0x02DF, r17
     71a:	00 93 de 02 	sts	0x02DE, r16
	motor_speed(0);
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0a df       	rcall	.-492    	; 0x538 <motor_speed>


	printf("end calibration\n");
     724:	84 e9       	ldi	r24, 0x94	; 148
     726:	92 e0       	ldi	r25, 0x02	; 2
     728:	75 d3       	rcall	.+1770   	; 0xe14 <puts>
	
}
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	08 95       	ret

00000738 <pwm_init>:

void pwm_set_value(uint16_t val){
	OCR3A = val;
}

void pwm_set_servo(int16_t val){
     738:	6b 9a       	sbi	0x0d, 3	; 13
     73a:	73 9a       	sbi	0x0e, 3	; 14
     73c:	a0 e9       	ldi	r26, 0x90	; 144
     73e:	b0 e0       	ldi	r27, 0x00	; 0
     740:	1c 92       	st	X, r1
     742:	e1 e9       	ldi	r30, 0x91	; 145
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	10 82       	st	Z, r1
     748:	10 92 92 00 	sts	0x0092, r1
     74c:	8c 91       	ld	r24, X
     74e:	8e 7f       	andi	r24, 0xFE	; 254
     750:	8c 93       	st	X, r24
     752:	8c 91       	ld	r24, X
     754:	82 60       	ori	r24, 0x02	; 2
     756:	8c 93       	st	X, r24
     758:	80 81       	ld	r24, Z
     75a:	88 60       	ori	r24, 0x08	; 8
     75c:	80 83       	st	Z, r24
     75e:	80 81       	ld	r24, Z
     760:	80 61       	ori	r24, 0x10	; 16
     762:	80 83       	st	Z, r24
     764:	8c 91       	ld	r24, X
     766:	8c 93       	st	X, r24
     768:	8c 91       	ld	r24, X
     76a:	80 68       	ori	r24, 0x80	; 128
     76c:	8c 93       	st	X, r24
     76e:	80 81       	ld	r24, Z
     770:	83 60       	ori	r24, 0x03	; 3
     772:	80 83       	st	Z, r24
     774:	80 81       	ld	r24, Z
     776:	8b 7f       	andi	r24, 0xFB	; 251
     778:	80 83       	st	Z, r24
     77a:	88 e8       	ldi	r24, 0x88	; 136
     77c:	93 e1       	ldi	r25, 0x13	; 19
     77e:	90 93 97 00 	sts	0x0097, r25
     782:	80 93 96 00 	sts	0x0096, r24
     786:	87 e7       	ldi	r24, 0x77	; 119
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	90 93 99 00 	sts	0x0099, r25
     78e:	80 93 98 00 	sts	0x0098, r24
     792:	08 95       	ret

00000794 <pwm_set_pulse>:
	//delete and remove from header
}

void pwm_set_pulse(int16_t val){
	
	if(val >= P_MAX)
     794:	8d 30       	cpi	r24, 0x0D	; 13
     796:	22 e0       	ldi	r18, 0x02	; 2
     798:	92 07       	cpc	r25, r18
     79a:	3c f0       	brlt	.+14     	; 0x7aa <pwm_set_pulse+0x16>
	//printf("PWM init done:\n\tTCCRA: %02X\n\tTCCRB: %02X\n\tICR: %02X\n\tOCR: %02X\n", TCCR3A, TCCR3B, ICR3, OCR3A);
}


void pwm_set_value(uint16_t val){
	OCR3A = val;
     79c:	8d e0       	ldi	r24, 0x0D	; 13
     79e:	92 e0       	ldi	r25, 0x02	; 2
     7a0:	90 93 99 00 	sts	0x0099, r25
     7a4:	80 93 98 00 	sts	0x0098, r24
     7a8:	08 95       	ret

void pwm_set_pulse(int16_t val){
	
	if(val >= P_MAX)
		pwm_set_value(P_MAX);
	else if(val < P_MIN)
     7aa:	81 3e       	cpi	r24, 0xE1	; 225
     7ac:	91 05       	cpc	r25, r1
     7ae:	3c f4       	brge	.+14     	; 0x7be <pwm_set_pulse+0x2a>
	//printf("PWM init done:\n\tTCCRA: %02X\n\tTCCRB: %02X\n\tICR: %02X\n\tOCR: %02X\n", TCCR3A, TCCR3B, ICR3, OCR3A);
}


void pwm_set_value(uint16_t val){
	OCR3A = val;
     7b0:	81 ee       	ldi	r24, 0xE1	; 225
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	90 93 99 00 	sts	0x0099, r25
     7b8:	80 93 98 00 	sts	0x0098, r24
     7bc:	08 95       	ret
     7be:	90 93 99 00 	sts	0x0099, r25
     7c2:	80 93 98 00 	sts	0x0098, r24
     7c6:	08 95       	ret

000007c8 <pwm_joystick_pulse>:


//uses joystick_x_value() which returns between 0 and 255
void pwm_joystick_pulse(int16_t val){
	
	if((val > 255) || (val < 0)){
     7c8:	8f 3f       	cpi	r24, 0xFF	; 255
     7ca:	91 05       	cpc	r25, r1
     7cc:	99 f0       	breq	.+38     	; 0x7f4 <pwm_joystick_pulse+0x2c>
     7ce:	90 f0       	brcs	.+36     	; 0x7f4 <pwm_joystick_pulse+0x2c>
		printf("ERROR: pwm_joystick_pulse input val = %d out of range!\n", val);
     7d0:	9f 93       	push	r25
     7d2:	8f 93       	push	r24
     7d4:	84 ea       	ldi	r24, 0xA4	; 164
     7d6:	92 e0       	ldi	r25, 0x02	; 2
     7d8:	9f 93       	push	r25
     7da:	8f 93       	push	r24
     7dc:	0a d3       	rcall	.+1556   	; 0xdf2 <printf>
	//printf("PWM init done:\n\tTCCRA: %02X\n\tTCCRB: %02X\n\tICR: %02X\n\tOCR: %02X\n", TCCR3A, TCCR3B, ICR3, OCR3A);
}


void pwm_set_value(uint16_t val){
	OCR3A = val;
     7de:	87 e7       	ldi	r24, 0x77	; 119
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	90 93 99 00 	sts	0x0099, r25
     7e6:	80 93 98 00 	sts	0x0098, r24
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	08 95       	ret
		pwm_set_value(P_MID);
		return;
	}
	else{
		
		uint16_t pulse_width = (val * (300/255.0)) + P_MIN;
     7f4:	bc 01       	movw	r22, r24
     7f6:	88 27       	eor	r24, r24
     7f8:	77 fd       	sbrc	r23, 7
     7fa:	80 95       	com	r24
     7fc:	98 2f       	mov	r25, r24
     7fe:	ba d1       	rcall	.+884    	; 0xb74 <__floatsisf>
     800:	27 e9       	ldi	r18, 0x97	; 151
     802:	36 e9       	ldi	r19, 0x96	; 150
     804:	46 e9       	ldi	r20, 0x96	; 150
     806:	5f e3       	ldi	r21, 0x3F	; 63
     808:	41 d2       	rcall	.+1154   	; 0xc8c <__mulsf3>
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	41 e6       	ldi	r20, 0x61	; 97
     810:	53 e4       	ldi	r21, 0x43	; 67
     812:	1e d1       	rcall	.+572    	; 0xa50 <__addsf3>
     814:	81 d1       	rcall	.+770    	; 0xb18 <__fixunssfsi>
		
		//printf("\nPulse converted from %d to %d\t P_RESOLUTION = %d\n", val, pulse_width, P_RESOLUTION);
		pwm_set_pulse(pulse_width);
     816:	cb 01       	movw	r24, r22
     818:	bd cf       	rjmp	.-134    	; 0x794 <pwm_set_pulse>
     81a:	08 95       	ret

0000081c <pwm_alt_joystick_pulse>:
	return;
}

void pwm_alt_joystick_pulse(int16_t val){
	
	pwm_joystick_pulse(abs(val - 255));
     81c:	9c 01       	movw	r18, r24
     81e:	2f 5f       	subi	r18, 0xFF	; 255
     820:	31 09       	sbc	r19, r1
     822:	c9 01       	movw	r24, r18
     824:	99 23       	and	r25, r25
     826:	24 f4       	brge	.+8      	; 0x830 <pwm_alt_joystick_pulse+0x14>
     828:	88 27       	eor	r24, r24
     82a:	99 27       	eor	r25, r25
     82c:	82 1b       	sub	r24, r18
     82e:	93 0b       	sbc	r25, r19
     830:	cb cf       	rjmp	.-106    	; 0x7c8 <pwm_joystick_pulse>
     832:	08 95       	ret

00000834 <solenoid_init>:
}

void solenoid_shoot(){
	PORTH &= ~(1<<PH3);
	_delay_ms(150);
	PORTH |= (1<<PH3);
     834:	e1 e0       	ldi	r30, 0x01	; 1
     836:	f1 e0       	ldi	r31, 0x01	; 1
     838:	80 81       	ld	r24, Z
     83a:	88 60       	ori	r24, 0x08	; 8
     83c:	80 83       	st	Z, r24
     83e:	e2 e0       	ldi	r30, 0x02	; 2
     840:	f1 e0       	ldi	r31, 0x01	; 1
     842:	80 81       	ld	r24, Z
     844:	88 60       	ori	r24, 0x08	; 8
     846:	80 83       	st	Z, r24
     848:	08 95       	ret

0000084a <solenoid_extend>:
}

void solenoid_extend(){
	PORTH &= ~(1<<PH3);
     84a:	e2 e0       	ldi	r30, 0x02	; 2
     84c:	f1 e0       	ldi	r31, 0x01	; 1
     84e:	80 81       	ld	r24, Z
     850:	87 7f       	andi	r24, 0xF7	; 247
     852:	80 83       	st	Z, r24
     854:	08 95       	ret

00000856 <solenoid_retract>:
}

void solenoid_retract(){
	PORTH |= (1<<PH3);	
     856:	e2 e0       	ldi	r30, 0x02	; 2
     858:	f1 e0       	ldi	r31, 0x01	; 1
     85a:	80 81       	ld	r24, Z
     85c:	88 60       	ori	r24, 0x08	; 8
     85e:	80 83       	st	Z, r24
     860:	08 95       	ret

00000862 <spi_init>:
#include "SPI.h"
#include <avr/io.h>

void spi_init(){
			//SI out		SS out		SCK out
	DDRB |= ( 1 << PB2) | (1 << PB0) | (1 << PB1);
     862:	84 b1       	in	r24, 0x04	; 4
     864:	87 60       	ori	r24, 0x07	; 7
     866:	84 b9       	out	0x04, r24	; 4
	//SO in
	DDRB &= ~(1 << PB3);
     868:	23 98       	cbi	0x04, 3	; 4
	
	//								 frequency / 16
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     86a:	81 e5       	ldi	r24, 0x51	; 81
     86c:	8c bd       	out	0x2c, r24	; 44
     86e:	08 95       	ret

00000870 <spi_write>:

//both read and write
int spi_write(char data){
	//SPDR = data;
	//while(!(SPSR & (1<<SPIF)));
	SPDR = data;
     870:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
     872:	0d b4       	in	r0, 0x2d	; 45
     874:	07 fe       	sbrs	r0, 7
     876:	fd cf       	rjmp	.-6      	; 0x872 <spi_write+0x2>
	return SPDR;
     878:	8e b5       	in	r24, 0x2e	; 46
}
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	08 95       	ret

0000087e <timer_init>:

int time_tick = 0;
int time_tick_max = 0;
void timer_init() {
	
	TCCR4A = 0;
     87e:	a0 ea       	ldi	r26, 0xA0	; 160
     880:	b0 e0       	ldi	r27, 0x00	; 0
     882:	1c 92       	st	X, r1
	TCCR4B = 0;
     884:	e1 ea       	ldi	r30, 0xA1	; 161
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	10 82       	st	Z, r1
	
	//CS4{2:0}   = 101  prescaler set to 1024
	TCCR4B |=  (1<<CS42) | (1<<CS40);
     88a:	80 81       	ld	r24, Z
     88c:	85 60       	ori	r24, 0x05	; 5
     88e:	80 83       	st	Z, r24
	TCCR4B &= ~(1<<CS41);
     890:	80 81       	ld	r24, Z
     892:	8d 7f       	andi	r24, 0xFD	; 253
     894:	80 83       	st	Z, r24
	
	//0100 -> Mode CTC -> TOP = OCRnA
	TCCR4A &= ~(1<<WGM40);
     896:	8c 91       	ld	r24, X
     898:	8e 7f       	andi	r24, 0xFE	; 254
     89a:	8c 93       	st	X, r24
	TCCR4A &= ~(1<<WGM41);
     89c:	8c 91       	ld	r24, X
     89e:	8d 7f       	andi	r24, 0xFD	; 253
     8a0:	8c 93       	st	X, r24
	TCCR4B |=  (1<<WGM42);
     8a2:	80 81       	ld	r24, Z
     8a4:	88 60       	ori	r24, 0x08	; 8
     8a6:	80 83       	st	Z, r24
	TCCR4B &= ~(1<<WGM43);
     8a8:	80 81       	ld	r24, Z
     8aa:	8f 7e       	andi	r24, 0xEF	; 239
     8ac:	80 83       	st	Z, r24
     8ae:	08 95       	ret

000008b0 <TWI_Master_Initialise>:
		{
			msg[ i ] = TWI_buf[ i ];
		}
	}
	return( TWI_statusReg.lastTransOK );
}
     8b0:	8c e0       	ldi	r24, 0x0C	; 12
     8b2:	80 93 b8 00 	sts	0x00B8, r24
     8b6:	8f ef       	ldi	r24, 0xFF	; 255
     8b8:	80 93 bb 00 	sts	0x00BB, r24
     8bc:	84 e0       	ldi	r24, 0x04	; 4
     8be:	80 93 bc 00 	sts	0x00BC, r24
     8c2:	08 95       	ret

000008c4 <TWI_Start_Transceiver_With_Data>:
     8c4:	ec eb       	ldi	r30, 0xBC	; 188
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	20 81       	ld	r18, Z
     8ca:	20 fd       	sbrc	r18, 0
     8cc:	fd cf       	rjmp	.-6      	; 0x8c8 <TWI_Start_Transceiver_With_Data+0x4>
     8ce:	60 93 e2 02 	sts	0x02E2, r22
     8d2:	fc 01       	movw	r30, r24
     8d4:	20 81       	ld	r18, Z
     8d6:	20 93 e3 02 	sts	0x02E3, r18
     8da:	20 fd       	sbrc	r18, 0
     8dc:	0c c0       	rjmp	.+24     	; 0x8f6 <TWI_Start_Transceiver_With_Data+0x32>
     8de:	62 30       	cpi	r22, 0x02	; 2
     8e0:	50 f0       	brcs	.+20     	; 0x8f6 <TWI_Start_Transceiver_With_Data+0x32>
     8e2:	dc 01       	movw	r26, r24
     8e4:	11 96       	adiw	r26, 0x01	; 1
     8e6:	e4 ee       	ldi	r30, 0xE4	; 228
     8e8:	f2 e0       	ldi	r31, 0x02	; 2
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	9d 91       	ld	r25, X+
     8ee:	91 93       	st	Z+, r25
     8f0:	8f 5f       	subi	r24, 0xFF	; 255
     8f2:	86 13       	cpse	r24, r22
     8f4:	fb cf       	rjmp	.-10     	; 0x8ec <TWI_Start_Transceiver_With_Data+0x28>
     8f6:	10 92 e1 02 	sts	0x02E1, r1
     8fa:	88 ef       	ldi	r24, 0xF8	; 248
     8fc:	80 93 08 02 	sts	0x0208, r24
     900:	85 ea       	ldi	r24, 0xA5	; 165
     902:	80 93 bc 00 	sts	0x00BC, r24
     906:	08 95       	ret

00000908 <__vector_39>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
     908:	1f 92       	push	r1
     90a:	0f 92       	push	r0
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	0f 92       	push	r0
     910:	11 24       	eor	r1, r1
     912:	0b b6       	in	r0, 0x3b	; 59
     914:	0f 92       	push	r0
     916:	2f 93       	push	r18
     918:	3f 93       	push	r19
     91a:	8f 93       	push	r24
     91c:	9f 93       	push	r25
     91e:	af 93       	push	r26
     920:	bf 93       	push	r27
     922:	ef 93       	push	r30
     924:	ff 93       	push	r31
	static unsigned char TWI_bufPtr;
	
	switch (TWSR)
     926:	80 91 b9 00 	lds	r24, 0x00B9
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	fc 01       	movw	r30, r24
     92e:	38 97       	sbiw	r30, 0x08	; 8
     930:	e1 35       	cpi	r30, 0x51	; 81
     932:	f1 05       	cpc	r31, r1
     934:	08 f0       	brcs	.+2      	; 0x938 <__vector_39+0x30>
     936:	55 c0       	rjmp	.+170    	; 0x9e2 <__vector_39+0xda>
     938:	ee 58       	subi	r30, 0x8E	; 142
     93a:	ff 4f       	sbci	r31, 0xFF	; 255
     93c:	0a c2       	rjmp	.+1044   	; 0xd52 <__tablejump2__>
	{
		case TWI_START:             // START has been transmitted
		case TWI_REP_START:         // Repeated START has been transmitted
		TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
     93e:	10 92 e0 02 	sts	0x02E0, r1
		case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
		case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
		if (TWI_bufPtr < TWI_msgSize)
     942:	e0 91 e0 02 	lds	r30, 0x02E0
     946:	80 91 e2 02 	lds	r24, 0x02E2
     94a:	e8 17       	cp	r30, r24
     94c:	70 f4       	brcc	.+28     	; 0x96a <__vector_39+0x62>
		{
			TWDR = TWI_buf[TWI_bufPtr++];
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	8e 0f       	add	r24, r30
     952:	80 93 e0 02 	sts	0x02E0, r24
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	ed 51       	subi	r30, 0x1D	; 29
     95a:	fd 4f       	sbci	r31, 0xFD	; 253
     95c:	80 81       	ld	r24, Z
     95e:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     962:	85 e8       	ldi	r24, 0x85	; 133
     964:	80 93 bc 00 	sts	0x00BC, r24
     968:	43 c0       	rjmp	.+134    	; 0x9f0 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
			(0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
			TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     96a:	80 91 e1 02 	lds	r24, 0x02E1
     96e:	81 60       	ori	r24, 0x01	; 1
     970:	80 93 e1 02 	sts	0x02E1, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     974:	84 e9       	ldi	r24, 0x94	; 148
     976:	80 93 bc 00 	sts	0x00BC, r24
     97a:	3a c0       	rjmp	.+116    	; 0x9f0 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
		TWI_buf[TWI_bufPtr++] = TWDR;
     97c:	e0 91 e0 02 	lds	r30, 0x02E0
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	8e 0f       	add	r24, r30
     984:	80 93 e0 02 	sts	0x02E0, r24
     988:	80 91 bb 00 	lds	r24, 0x00BB
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	ed 51       	subi	r30, 0x1D	; 29
     990:	fd 4f       	sbci	r31, 0xFD	; 253
     992:	80 83       	st	Z, r24
		case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
		if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
     994:	20 91 e0 02 	lds	r18, 0x02E0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	80 91 e2 02 	lds	r24, 0x02E2
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	28 17       	cp	r18, r24
     9a4:	39 07       	cpc	r19, r25
     9a6:	24 f4       	brge	.+8      	; 0x9b0 <__vector_39+0xa8>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     9a8:	85 ec       	ldi	r24, 0xC5	; 197
     9aa:	80 93 bc 00 	sts	0x00BC, r24
     9ae:	20 c0       	rjmp	.+64     	; 0x9f0 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
			(0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     9b0:	85 e8       	ldi	r24, 0x85	; 133
     9b2:	80 93 bc 00 	sts	0x00BC, r24
     9b6:	1c c0       	rjmp	.+56     	; 0x9f0 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
		TWI_buf[TWI_bufPtr] = TWDR;
     9b8:	80 91 bb 00 	lds	r24, 0x00BB
     9bc:	e0 91 e0 02 	lds	r30, 0x02E0
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	ed 51       	subi	r30, 0x1D	; 29
     9c4:	fd 4f       	sbci	r31, 0xFD	; 253
     9c6:	80 83       	st	Z, r24
		TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     9c8:	80 91 e1 02 	lds	r24, 0x02E1
     9cc:	81 60       	ori	r24, 0x01	; 1
     9ce:	80 93 e1 02 	sts	0x02E1, r24
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     9d2:	84 e9       	ldi	r24, 0x94	; 148
     9d4:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
		(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
		(0<<TWWC);                                 //
		break;
     9d8:	0b c0       	rjmp	.+22     	; 0x9f0 <__vector_39+0xe8>
		case TWI_ARB_LOST:          // Arbitration lost
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     9da:	85 ea       	ldi	r24, 0xA5	; 165
     9dc:	80 93 bc 00 	sts	0x00BC, r24
		(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
		(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
		(0<<TWWC);                                 //
		break;
     9e0:	07 c0       	rjmp	.+14     	; 0x9f0 <__vector_39+0xe8>
		case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received
		case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
		//    case TWI_NO_STATE              // No relevant state information available; TWINT = ?0?
		case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
		default:
		TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     9e2:	80 91 b9 00 	lds	r24, 0x00B9
     9e6:	80 93 08 02 	sts	0x0208, r24
		// Reset TWI Interface
		TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     9ea:	84 e0       	ldi	r24, 0x04	; 4
     9ec:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
		(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
		(0<<TWWC);                                 //
	}
     9f0:	ff 91       	pop	r31
     9f2:	ef 91       	pop	r30
     9f4:	bf 91       	pop	r27
     9f6:	af 91       	pop	r26
     9f8:	9f 91       	pop	r25
     9fa:	8f 91       	pop	r24
     9fc:	3f 91       	pop	r19
     9fe:	2f 91       	pop	r18
     a00:	0f 90       	pop	r0
     a02:	0b be       	out	0x3b, r0	; 59
     a04:	0f 90       	pop	r0
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	0f 90       	pop	r0
     a0a:	1f 90       	pop	r1
     a0c:	18 95       	reti

00000a0e <uart_Transmit>:
}

void uart_Transmit( unsigned char data ){
	
	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     a0e:	e0 ec       	ldi	r30, 0xC0	; 192
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	90 81       	ld	r25, Z
     a14:	95 ff       	sbrs	r25, 5
     a16:	fd cf       	rjmp	.-6      	; 0xa12 <uart_Transmit+0x4>
	
	//Put data into buffer, sends the data
	UDR0 = data;
     a18:	80 93 c6 00 	sts	0x00C6, r24
     a1c:	08 95       	ret

00000a1e <uart_Receive>:

unsigned char uart_Receive(void){
	
	//Wait for data to be received
	
	while( !(UCSR0A & (1<<RXC0)) );
     a1e:	e0 ec       	ldi	r30, 0xC0	; 192
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	80 81       	ld	r24, Z
     a24:	88 23       	and	r24, r24
     a26:	ec f7       	brge	.-6      	; 0xa22 <uart_Receive+0x4>
	
	//Get and return received data from buffer
	
	return UDR0;
     a28:	80 91 c6 00 	lds	r24, 0x00C6
}
     a2c:	08 95       	ret

00000a2e <uart_Init>:
#include "uart.h"

void uart_Init(unsigned int ubrr){
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     a2e:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     a32:	80 93 c4 00 	sts	0x00C4, r24
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     a36:	88 e1       	ldi	r24, 0x18	; 24
     a38:	80 93 c1 00 	sts	0x00C1, r24
	
	//Set frame format: 8data, 1stop bit
	UCSR0C = (1 << 7)|(3<<UCSZ00);//here, 7 replaces URSEL0 from ATmega162 project
     a3c:	86 e8       	ldi	r24, 0x86	; 134
     a3e:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(uart_Transmit, uart_Receive);
     a42:	6f e0       	ldi	r22, 0x0F	; 15
     a44:	75 e0       	ldi	r23, 0x05	; 5
     a46:	87 e0       	ldi	r24, 0x07	; 7
     a48:	95 e0       	ldi	r25, 0x05	; 5
     a4a:	89 c1       	rjmp	.+786    	; 0xd5e <fdevopen>
     a4c:	08 95       	ret

00000a4e <__subsf3>:
     a4e:	50 58       	subi	r21, 0x80	; 128

00000a50 <__addsf3>:
     a50:	bb 27       	eor	r27, r27
     a52:	aa 27       	eor	r26, r26
     a54:	0e d0       	rcall	.+28     	; 0xa72 <__addsf3x>
     a56:	e0 c0       	rjmp	.+448    	; 0xc18 <__fp_round>
     a58:	d1 d0       	rcall	.+418    	; 0xbfc <__fp_pscA>
     a5a:	30 f0       	brcs	.+12     	; 0xa68 <__addsf3+0x18>
     a5c:	d6 d0       	rcall	.+428    	; 0xc0a <__fp_pscB>
     a5e:	20 f0       	brcs	.+8      	; 0xa68 <__addsf3+0x18>
     a60:	31 f4       	brne	.+12     	; 0xa6e <__addsf3+0x1e>
     a62:	9f 3f       	cpi	r25, 0xFF	; 255
     a64:	11 f4       	brne	.+4      	; 0xa6a <__addsf3+0x1a>
     a66:	1e f4       	brtc	.+6      	; 0xa6e <__addsf3+0x1e>
     a68:	c6 c0       	rjmp	.+396    	; 0xbf6 <__fp_nan>
     a6a:	0e f4       	brtc	.+2      	; 0xa6e <__addsf3+0x1e>
     a6c:	e0 95       	com	r30
     a6e:	e7 fb       	bst	r30, 7
     a70:	bc c0       	rjmp	.+376    	; 0xbea <__fp_inf>

00000a72 <__addsf3x>:
     a72:	e9 2f       	mov	r30, r25
     a74:	e2 d0       	rcall	.+452    	; 0xc3a <__fp_split3>
     a76:	80 f3       	brcs	.-32     	; 0xa58 <__addsf3+0x8>
     a78:	ba 17       	cp	r27, r26
     a7a:	62 07       	cpc	r22, r18
     a7c:	73 07       	cpc	r23, r19
     a7e:	84 07       	cpc	r24, r20
     a80:	95 07       	cpc	r25, r21
     a82:	18 f0       	brcs	.+6      	; 0xa8a <__addsf3x+0x18>
     a84:	71 f4       	brne	.+28     	; 0xaa2 <__addsf3x+0x30>
     a86:	9e f5       	brtc	.+102    	; 0xaee <__addsf3x+0x7c>
     a88:	fa c0       	rjmp	.+500    	; 0xc7e <__fp_zero>
     a8a:	0e f4       	brtc	.+2      	; 0xa8e <__addsf3x+0x1c>
     a8c:	e0 95       	com	r30
     a8e:	0b 2e       	mov	r0, r27
     a90:	ba 2f       	mov	r27, r26
     a92:	a0 2d       	mov	r26, r0
     a94:	0b 01       	movw	r0, r22
     a96:	b9 01       	movw	r22, r18
     a98:	90 01       	movw	r18, r0
     a9a:	0c 01       	movw	r0, r24
     a9c:	ca 01       	movw	r24, r20
     a9e:	a0 01       	movw	r20, r0
     aa0:	11 24       	eor	r1, r1
     aa2:	ff 27       	eor	r31, r31
     aa4:	59 1b       	sub	r21, r25
     aa6:	99 f0       	breq	.+38     	; 0xace <__addsf3x+0x5c>
     aa8:	59 3f       	cpi	r21, 0xF9	; 249
     aaa:	50 f4       	brcc	.+20     	; 0xac0 <__addsf3x+0x4e>
     aac:	50 3e       	cpi	r21, 0xE0	; 224
     aae:	68 f1       	brcs	.+90     	; 0xb0a <__addsf3x+0x98>
     ab0:	1a 16       	cp	r1, r26
     ab2:	f0 40       	sbci	r31, 0x00	; 0
     ab4:	a2 2f       	mov	r26, r18
     ab6:	23 2f       	mov	r18, r19
     ab8:	34 2f       	mov	r19, r20
     aba:	44 27       	eor	r20, r20
     abc:	58 5f       	subi	r21, 0xF8	; 248
     abe:	f3 cf       	rjmp	.-26     	; 0xaa6 <__addsf3x+0x34>
     ac0:	46 95       	lsr	r20
     ac2:	37 95       	ror	r19
     ac4:	27 95       	ror	r18
     ac6:	a7 95       	ror	r26
     ac8:	f0 40       	sbci	r31, 0x00	; 0
     aca:	53 95       	inc	r21
     acc:	c9 f7       	brne	.-14     	; 0xac0 <__addsf3x+0x4e>
     ace:	7e f4       	brtc	.+30     	; 0xaee <__addsf3x+0x7c>
     ad0:	1f 16       	cp	r1, r31
     ad2:	ba 0b       	sbc	r27, r26
     ad4:	62 0b       	sbc	r22, r18
     ad6:	73 0b       	sbc	r23, r19
     ad8:	84 0b       	sbc	r24, r20
     ada:	ba f0       	brmi	.+46     	; 0xb0a <__addsf3x+0x98>
     adc:	91 50       	subi	r25, 0x01	; 1
     ade:	a1 f0       	breq	.+40     	; 0xb08 <__addsf3x+0x96>
     ae0:	ff 0f       	add	r31, r31
     ae2:	bb 1f       	adc	r27, r27
     ae4:	66 1f       	adc	r22, r22
     ae6:	77 1f       	adc	r23, r23
     ae8:	88 1f       	adc	r24, r24
     aea:	c2 f7       	brpl	.-16     	; 0xadc <__addsf3x+0x6a>
     aec:	0e c0       	rjmp	.+28     	; 0xb0a <__addsf3x+0x98>
     aee:	ba 0f       	add	r27, r26
     af0:	62 1f       	adc	r22, r18
     af2:	73 1f       	adc	r23, r19
     af4:	84 1f       	adc	r24, r20
     af6:	48 f4       	brcc	.+18     	; 0xb0a <__addsf3x+0x98>
     af8:	87 95       	ror	r24
     afa:	77 95       	ror	r23
     afc:	67 95       	ror	r22
     afe:	b7 95       	ror	r27
     b00:	f7 95       	ror	r31
     b02:	9e 3f       	cpi	r25, 0xFE	; 254
     b04:	08 f0       	brcs	.+2      	; 0xb08 <__addsf3x+0x96>
     b06:	b3 cf       	rjmp	.-154    	; 0xa6e <__addsf3+0x1e>
     b08:	93 95       	inc	r25
     b0a:	88 0f       	add	r24, r24
     b0c:	08 f0       	brcs	.+2      	; 0xb10 <__addsf3x+0x9e>
     b0e:	99 27       	eor	r25, r25
     b10:	ee 0f       	add	r30, r30
     b12:	97 95       	ror	r25
     b14:	87 95       	ror	r24
     b16:	08 95       	ret

00000b18 <__fixunssfsi>:
     b18:	98 d0       	rcall	.+304    	; 0xc4a <__fp_splitA>
     b1a:	88 f0       	brcs	.+34     	; 0xb3e <__fixunssfsi+0x26>
     b1c:	9f 57       	subi	r25, 0x7F	; 127
     b1e:	90 f0       	brcs	.+36     	; 0xb44 <__fixunssfsi+0x2c>
     b20:	b9 2f       	mov	r27, r25
     b22:	99 27       	eor	r25, r25
     b24:	b7 51       	subi	r27, 0x17	; 23
     b26:	a0 f0       	brcs	.+40     	; 0xb50 <__fixunssfsi+0x38>
     b28:	d1 f0       	breq	.+52     	; 0xb5e <__fixunssfsi+0x46>
     b2a:	66 0f       	add	r22, r22
     b2c:	77 1f       	adc	r23, r23
     b2e:	88 1f       	adc	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	1a f0       	brmi	.+6      	; 0xb3a <__fixunssfsi+0x22>
     b34:	ba 95       	dec	r27
     b36:	c9 f7       	brne	.-14     	; 0xb2a <__fixunssfsi+0x12>
     b38:	12 c0       	rjmp	.+36     	; 0xb5e <__fixunssfsi+0x46>
     b3a:	b1 30       	cpi	r27, 0x01	; 1
     b3c:	81 f0       	breq	.+32     	; 0xb5e <__fixunssfsi+0x46>
     b3e:	9f d0       	rcall	.+318    	; 0xc7e <__fp_zero>
     b40:	b1 e0       	ldi	r27, 0x01	; 1
     b42:	08 95       	ret
     b44:	9c c0       	rjmp	.+312    	; 0xc7e <__fp_zero>
     b46:	67 2f       	mov	r22, r23
     b48:	78 2f       	mov	r23, r24
     b4a:	88 27       	eor	r24, r24
     b4c:	b8 5f       	subi	r27, 0xF8	; 248
     b4e:	39 f0       	breq	.+14     	; 0xb5e <__fixunssfsi+0x46>
     b50:	b9 3f       	cpi	r27, 0xF9	; 249
     b52:	cc f3       	brlt	.-14     	; 0xb46 <__fixunssfsi+0x2e>
     b54:	86 95       	lsr	r24
     b56:	77 95       	ror	r23
     b58:	67 95       	ror	r22
     b5a:	b3 95       	inc	r27
     b5c:	d9 f7       	brne	.-10     	; 0xb54 <__fixunssfsi+0x3c>
     b5e:	3e f4       	brtc	.+14     	; 0xb6e <__fixunssfsi+0x56>
     b60:	90 95       	com	r25
     b62:	80 95       	com	r24
     b64:	70 95       	com	r23
     b66:	61 95       	neg	r22
     b68:	7f 4f       	sbci	r23, 0xFF	; 255
     b6a:	8f 4f       	sbci	r24, 0xFF	; 255
     b6c:	9f 4f       	sbci	r25, 0xFF	; 255
     b6e:	08 95       	ret

00000b70 <__floatunsisf>:
     b70:	e8 94       	clt
     b72:	09 c0       	rjmp	.+18     	; 0xb86 <__floatsisf+0x12>

00000b74 <__floatsisf>:
     b74:	97 fb       	bst	r25, 7
     b76:	3e f4       	brtc	.+14     	; 0xb86 <__floatsisf+0x12>
     b78:	90 95       	com	r25
     b7a:	80 95       	com	r24
     b7c:	70 95       	com	r23
     b7e:	61 95       	neg	r22
     b80:	7f 4f       	sbci	r23, 0xFF	; 255
     b82:	8f 4f       	sbci	r24, 0xFF	; 255
     b84:	9f 4f       	sbci	r25, 0xFF	; 255
     b86:	99 23       	and	r25, r25
     b88:	a9 f0       	breq	.+42     	; 0xbb4 <__floatsisf+0x40>
     b8a:	f9 2f       	mov	r31, r25
     b8c:	96 e9       	ldi	r25, 0x96	; 150
     b8e:	bb 27       	eor	r27, r27
     b90:	93 95       	inc	r25
     b92:	f6 95       	lsr	r31
     b94:	87 95       	ror	r24
     b96:	77 95       	ror	r23
     b98:	67 95       	ror	r22
     b9a:	b7 95       	ror	r27
     b9c:	f1 11       	cpse	r31, r1
     b9e:	f8 cf       	rjmp	.-16     	; 0xb90 <__floatsisf+0x1c>
     ba0:	fa f4       	brpl	.+62     	; 0xbe0 <__floatsisf+0x6c>
     ba2:	bb 0f       	add	r27, r27
     ba4:	11 f4       	brne	.+4      	; 0xbaa <__floatsisf+0x36>
     ba6:	60 ff       	sbrs	r22, 0
     ba8:	1b c0       	rjmp	.+54     	; 0xbe0 <__floatsisf+0x6c>
     baa:	6f 5f       	subi	r22, 0xFF	; 255
     bac:	7f 4f       	sbci	r23, 0xFF	; 255
     bae:	8f 4f       	sbci	r24, 0xFF	; 255
     bb0:	9f 4f       	sbci	r25, 0xFF	; 255
     bb2:	16 c0       	rjmp	.+44     	; 0xbe0 <__floatsisf+0x6c>
     bb4:	88 23       	and	r24, r24
     bb6:	11 f0       	breq	.+4      	; 0xbbc <__floatsisf+0x48>
     bb8:	96 e9       	ldi	r25, 0x96	; 150
     bba:	11 c0       	rjmp	.+34     	; 0xbde <__floatsisf+0x6a>
     bbc:	77 23       	and	r23, r23
     bbe:	21 f0       	breq	.+8      	; 0xbc8 <__floatsisf+0x54>
     bc0:	9e e8       	ldi	r25, 0x8E	; 142
     bc2:	87 2f       	mov	r24, r23
     bc4:	76 2f       	mov	r23, r22
     bc6:	05 c0       	rjmp	.+10     	; 0xbd2 <__floatsisf+0x5e>
     bc8:	66 23       	and	r22, r22
     bca:	71 f0       	breq	.+28     	; 0xbe8 <__floatsisf+0x74>
     bcc:	96 e8       	ldi	r25, 0x86	; 134
     bce:	86 2f       	mov	r24, r22
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	2a f0       	brmi	.+10     	; 0xbe0 <__floatsisf+0x6c>
     bd6:	9a 95       	dec	r25
     bd8:	66 0f       	add	r22, r22
     bda:	77 1f       	adc	r23, r23
     bdc:	88 1f       	adc	r24, r24
     bde:	da f7       	brpl	.-10     	; 0xbd6 <__floatsisf+0x62>
     be0:	88 0f       	add	r24, r24
     be2:	96 95       	lsr	r25
     be4:	87 95       	ror	r24
     be6:	97 f9       	bld	r25, 7
     be8:	08 95       	ret

00000bea <__fp_inf>:
     bea:	97 f9       	bld	r25, 7
     bec:	9f 67       	ori	r25, 0x7F	; 127
     bee:	80 e8       	ldi	r24, 0x80	; 128
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	08 95       	ret

00000bf6 <__fp_nan>:
     bf6:	9f ef       	ldi	r25, 0xFF	; 255
     bf8:	80 ec       	ldi	r24, 0xC0	; 192
     bfa:	08 95       	ret

00000bfc <__fp_pscA>:
     bfc:	00 24       	eor	r0, r0
     bfe:	0a 94       	dec	r0
     c00:	16 16       	cp	r1, r22
     c02:	17 06       	cpc	r1, r23
     c04:	18 06       	cpc	r1, r24
     c06:	09 06       	cpc	r0, r25
     c08:	08 95       	ret

00000c0a <__fp_pscB>:
     c0a:	00 24       	eor	r0, r0
     c0c:	0a 94       	dec	r0
     c0e:	12 16       	cp	r1, r18
     c10:	13 06       	cpc	r1, r19
     c12:	14 06       	cpc	r1, r20
     c14:	05 06       	cpc	r0, r21
     c16:	08 95       	ret

00000c18 <__fp_round>:
     c18:	09 2e       	mov	r0, r25
     c1a:	03 94       	inc	r0
     c1c:	00 0c       	add	r0, r0
     c1e:	11 f4       	brne	.+4      	; 0xc24 <__fp_round+0xc>
     c20:	88 23       	and	r24, r24
     c22:	52 f0       	brmi	.+20     	; 0xc38 <__fp_round+0x20>
     c24:	bb 0f       	add	r27, r27
     c26:	40 f4       	brcc	.+16     	; 0xc38 <__fp_round+0x20>
     c28:	bf 2b       	or	r27, r31
     c2a:	11 f4       	brne	.+4      	; 0xc30 <__fp_round+0x18>
     c2c:	60 ff       	sbrs	r22, 0
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__fp_round+0x20>
     c30:	6f 5f       	subi	r22, 0xFF	; 255
     c32:	7f 4f       	sbci	r23, 0xFF	; 255
     c34:	8f 4f       	sbci	r24, 0xFF	; 255
     c36:	9f 4f       	sbci	r25, 0xFF	; 255
     c38:	08 95       	ret

00000c3a <__fp_split3>:
     c3a:	57 fd       	sbrc	r21, 7
     c3c:	90 58       	subi	r25, 0x80	; 128
     c3e:	44 0f       	add	r20, r20
     c40:	55 1f       	adc	r21, r21
     c42:	59 f0       	breq	.+22     	; 0xc5a <__fp_splitA+0x10>
     c44:	5f 3f       	cpi	r21, 0xFF	; 255
     c46:	71 f0       	breq	.+28     	; 0xc64 <__fp_splitA+0x1a>
     c48:	47 95       	ror	r20

00000c4a <__fp_splitA>:
     c4a:	88 0f       	add	r24, r24
     c4c:	97 fb       	bst	r25, 7
     c4e:	99 1f       	adc	r25, r25
     c50:	61 f0       	breq	.+24     	; 0xc6a <__fp_splitA+0x20>
     c52:	9f 3f       	cpi	r25, 0xFF	; 255
     c54:	79 f0       	breq	.+30     	; 0xc74 <__fp_splitA+0x2a>
     c56:	87 95       	ror	r24
     c58:	08 95       	ret
     c5a:	12 16       	cp	r1, r18
     c5c:	13 06       	cpc	r1, r19
     c5e:	14 06       	cpc	r1, r20
     c60:	55 1f       	adc	r21, r21
     c62:	f2 cf       	rjmp	.-28     	; 0xc48 <__fp_split3+0xe>
     c64:	46 95       	lsr	r20
     c66:	f1 df       	rcall	.-30     	; 0xc4a <__fp_splitA>
     c68:	08 c0       	rjmp	.+16     	; 0xc7a <__fp_splitA+0x30>
     c6a:	16 16       	cp	r1, r22
     c6c:	17 06       	cpc	r1, r23
     c6e:	18 06       	cpc	r1, r24
     c70:	99 1f       	adc	r25, r25
     c72:	f1 cf       	rjmp	.-30     	; 0xc56 <__fp_splitA+0xc>
     c74:	86 95       	lsr	r24
     c76:	71 05       	cpc	r23, r1
     c78:	61 05       	cpc	r22, r1
     c7a:	08 94       	sec
     c7c:	08 95       	ret

00000c7e <__fp_zero>:
     c7e:	e8 94       	clt

00000c80 <__fp_szero>:
     c80:	bb 27       	eor	r27, r27
     c82:	66 27       	eor	r22, r22
     c84:	77 27       	eor	r23, r23
     c86:	cb 01       	movw	r24, r22
     c88:	97 f9       	bld	r25, 7
     c8a:	08 95       	ret

00000c8c <__mulsf3>:
     c8c:	0b d0       	rcall	.+22     	; 0xca4 <__mulsf3x>
     c8e:	c4 cf       	rjmp	.-120    	; 0xc18 <__fp_round>
     c90:	b5 df       	rcall	.-150    	; 0xbfc <__fp_pscA>
     c92:	28 f0       	brcs	.+10     	; 0xc9e <__mulsf3+0x12>
     c94:	ba df       	rcall	.-140    	; 0xc0a <__fp_pscB>
     c96:	18 f0       	brcs	.+6      	; 0xc9e <__mulsf3+0x12>
     c98:	95 23       	and	r25, r21
     c9a:	09 f0       	breq	.+2      	; 0xc9e <__mulsf3+0x12>
     c9c:	a6 cf       	rjmp	.-180    	; 0xbea <__fp_inf>
     c9e:	ab cf       	rjmp	.-170    	; 0xbf6 <__fp_nan>
     ca0:	11 24       	eor	r1, r1
     ca2:	ee cf       	rjmp	.-36     	; 0xc80 <__fp_szero>

00000ca4 <__mulsf3x>:
     ca4:	ca df       	rcall	.-108    	; 0xc3a <__fp_split3>
     ca6:	a0 f3       	brcs	.-24     	; 0xc90 <__mulsf3+0x4>

00000ca8 <__mulsf3_pse>:
     ca8:	95 9f       	mul	r25, r21
     caa:	d1 f3       	breq	.-12     	; 0xca0 <__mulsf3+0x14>
     cac:	95 0f       	add	r25, r21
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	55 1f       	adc	r21, r21
     cb2:	62 9f       	mul	r22, r18
     cb4:	f0 01       	movw	r30, r0
     cb6:	72 9f       	mul	r23, r18
     cb8:	bb 27       	eor	r27, r27
     cba:	f0 0d       	add	r31, r0
     cbc:	b1 1d       	adc	r27, r1
     cbe:	63 9f       	mul	r22, r19
     cc0:	aa 27       	eor	r26, r26
     cc2:	f0 0d       	add	r31, r0
     cc4:	b1 1d       	adc	r27, r1
     cc6:	aa 1f       	adc	r26, r26
     cc8:	64 9f       	mul	r22, r20
     cca:	66 27       	eor	r22, r22
     ccc:	b0 0d       	add	r27, r0
     cce:	a1 1d       	adc	r26, r1
     cd0:	66 1f       	adc	r22, r22
     cd2:	82 9f       	mul	r24, r18
     cd4:	22 27       	eor	r18, r18
     cd6:	b0 0d       	add	r27, r0
     cd8:	a1 1d       	adc	r26, r1
     cda:	62 1f       	adc	r22, r18
     cdc:	73 9f       	mul	r23, r19
     cde:	b0 0d       	add	r27, r0
     ce0:	a1 1d       	adc	r26, r1
     ce2:	62 1f       	adc	r22, r18
     ce4:	83 9f       	mul	r24, r19
     ce6:	a0 0d       	add	r26, r0
     ce8:	61 1d       	adc	r22, r1
     cea:	22 1f       	adc	r18, r18
     cec:	74 9f       	mul	r23, r20
     cee:	33 27       	eor	r19, r19
     cf0:	a0 0d       	add	r26, r0
     cf2:	61 1d       	adc	r22, r1
     cf4:	23 1f       	adc	r18, r19
     cf6:	84 9f       	mul	r24, r20
     cf8:	60 0d       	add	r22, r0
     cfa:	21 1d       	adc	r18, r1
     cfc:	82 2f       	mov	r24, r18
     cfe:	76 2f       	mov	r23, r22
     d00:	6a 2f       	mov	r22, r26
     d02:	11 24       	eor	r1, r1
     d04:	9f 57       	subi	r25, 0x7F	; 127
     d06:	50 40       	sbci	r21, 0x00	; 0
     d08:	8a f0       	brmi	.+34     	; 0xd2c <__mulsf3_pse+0x84>
     d0a:	e1 f0       	breq	.+56     	; 0xd44 <__mulsf3_pse+0x9c>
     d0c:	88 23       	and	r24, r24
     d0e:	4a f0       	brmi	.+18     	; 0xd22 <__mulsf3_pse+0x7a>
     d10:	ee 0f       	add	r30, r30
     d12:	ff 1f       	adc	r31, r31
     d14:	bb 1f       	adc	r27, r27
     d16:	66 1f       	adc	r22, r22
     d18:	77 1f       	adc	r23, r23
     d1a:	88 1f       	adc	r24, r24
     d1c:	91 50       	subi	r25, 0x01	; 1
     d1e:	50 40       	sbci	r21, 0x00	; 0
     d20:	a9 f7       	brne	.-22     	; 0xd0c <__mulsf3_pse+0x64>
     d22:	9e 3f       	cpi	r25, 0xFE	; 254
     d24:	51 05       	cpc	r21, r1
     d26:	70 f0       	brcs	.+28     	; 0xd44 <__mulsf3_pse+0x9c>
     d28:	60 cf       	rjmp	.-320    	; 0xbea <__fp_inf>
     d2a:	aa cf       	rjmp	.-172    	; 0xc80 <__fp_szero>
     d2c:	5f 3f       	cpi	r21, 0xFF	; 255
     d2e:	ec f3       	brlt	.-6      	; 0xd2a <__mulsf3_pse+0x82>
     d30:	98 3e       	cpi	r25, 0xE8	; 232
     d32:	dc f3       	brlt	.-10     	; 0xd2a <__mulsf3_pse+0x82>
     d34:	86 95       	lsr	r24
     d36:	77 95       	ror	r23
     d38:	67 95       	ror	r22
     d3a:	b7 95       	ror	r27
     d3c:	f7 95       	ror	r31
     d3e:	e7 95       	ror	r30
     d40:	9f 5f       	subi	r25, 0xFF	; 255
     d42:	c1 f7       	brne	.-16     	; 0xd34 <__mulsf3_pse+0x8c>
     d44:	fe 2b       	or	r31, r30
     d46:	88 0f       	add	r24, r24
     d48:	91 1d       	adc	r25, r1
     d4a:	96 95       	lsr	r25
     d4c:	87 95       	ror	r24
     d4e:	97 f9       	bld	r25, 7
     d50:	08 95       	ret

00000d52 <__tablejump2__>:
     d52:	ee 0f       	add	r30, r30
     d54:	ff 1f       	adc	r31, r31

00000d56 <__tablejump__>:
     d56:	05 90       	lpm	r0, Z+
     d58:	f4 91       	lpm	r31, Z
     d5a:	e0 2d       	mov	r30, r0
     d5c:	19 94       	eijmp

00000d5e <fdevopen>:
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	ec 01       	movw	r28, r24
     d68:	8b 01       	movw	r16, r22
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	31 f4       	brne	.+12     	; 0xd7a <fdevopen+0x1c>
     d6e:	61 15       	cp	r22, r1
     d70:	71 05       	cpc	r23, r1
     d72:	19 f4       	brne	.+6      	; 0xd7a <fdevopen+0x1c>
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	37 c0       	rjmp	.+110    	; 0xde8 <fdevopen+0x8a>
     d7a:	6e e0       	ldi	r22, 0x0E	; 14
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	63 d2       	rcall	.+1222   	; 0x124a <calloc>
     d84:	fc 01       	movw	r30, r24
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	a9 f3       	breq	.-22     	; 0xd74 <fdevopen+0x16>
     d8a:	80 e8       	ldi	r24, 0x80	; 128
     d8c:	83 83       	std	Z+3, r24	; 0x03
     d8e:	01 15       	cp	r16, r1
     d90:	11 05       	cpc	r17, r1
     d92:	71 f0       	breq	.+28     	; 0xdb0 <fdevopen+0x52>
     d94:	13 87       	std	Z+11, r17	; 0x0b
     d96:	02 87       	std	Z+10, r16	; 0x0a
     d98:	81 e8       	ldi	r24, 0x81	; 129
     d9a:	83 83       	std	Z+3, r24	; 0x03
     d9c:	80 91 f2 02 	lds	r24, 0x02F2
     da0:	90 91 f3 02 	lds	r25, 0x02F3
     da4:	89 2b       	or	r24, r25
     da6:	21 f4       	brne	.+8      	; 0xdb0 <fdevopen+0x52>
     da8:	f0 93 f3 02 	sts	0x02F3, r31
     dac:	e0 93 f2 02 	sts	0x02F2, r30
     db0:	20 97       	sbiw	r28, 0x00	; 0
     db2:	c9 f0       	breq	.+50     	; 0xde6 <fdevopen+0x88>
     db4:	d1 87       	std	Z+9, r29	; 0x09
     db6:	c0 87       	std	Z+8, r28	; 0x08
     db8:	83 81       	ldd	r24, Z+3	; 0x03
     dba:	82 60       	ori	r24, 0x02	; 2
     dbc:	83 83       	std	Z+3, r24	; 0x03
     dbe:	80 91 f4 02 	lds	r24, 0x02F4
     dc2:	90 91 f5 02 	lds	r25, 0x02F5
     dc6:	89 2b       	or	r24, r25
     dc8:	71 f4       	brne	.+28     	; 0xde6 <fdevopen+0x88>
     dca:	f0 93 f5 02 	sts	0x02F5, r31
     dce:	e0 93 f4 02 	sts	0x02F4, r30
     dd2:	80 91 f6 02 	lds	r24, 0x02F6
     dd6:	90 91 f7 02 	lds	r25, 0x02F7
     dda:	89 2b       	or	r24, r25
     ddc:	21 f4       	brne	.+8      	; 0xde6 <fdevopen+0x88>
     dde:	f0 93 f7 02 	sts	0x02F7, r31
     de2:	e0 93 f6 02 	sts	0x02F6, r30
     de6:	cf 01       	movw	r24, r30
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	08 95       	ret

00000df2 <printf>:
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	fe 01       	movw	r30, r28
     dfc:	36 96       	adiw	r30, 0x06	; 6
     dfe:	61 91       	ld	r22, Z+
     e00:	71 91       	ld	r23, Z+
     e02:	af 01       	movw	r20, r30
     e04:	80 91 f4 02 	lds	r24, 0x02F4
     e08:	90 91 f5 02 	lds	r25, 0x02F5
     e0c:	30 d0       	rcall	.+96     	; 0xe6e <vfprintf>
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <puts>:
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	e0 91 f4 02 	lds	r30, 0x02F4
     e20:	f0 91 f5 02 	lds	r31, 0x02F5
     e24:	23 81       	ldd	r18, Z+3	; 0x03
     e26:	21 ff       	sbrs	r18, 1
     e28:	1b c0       	rjmp	.+54     	; 0xe60 <puts+0x4c>
     e2a:	ec 01       	movw	r28, r24
     e2c:	00 e0       	ldi	r16, 0x00	; 0
     e2e:	10 e0       	ldi	r17, 0x00	; 0
     e30:	89 91       	ld	r24, Y+
     e32:	60 91 f4 02 	lds	r22, 0x02F4
     e36:	70 91 f5 02 	lds	r23, 0x02F5
     e3a:	db 01       	movw	r26, r22
     e3c:	18 96       	adiw	r26, 0x08	; 8
     e3e:	ed 91       	ld	r30, X+
     e40:	fc 91       	ld	r31, X
     e42:	19 97       	sbiw	r26, 0x09	; 9
     e44:	88 23       	and	r24, r24
     e46:	31 f0       	breq	.+12     	; 0xe54 <puts+0x40>
     e48:	19 95       	eicall
     e4a:	89 2b       	or	r24, r25
     e4c:	89 f3       	breq	.-30     	; 0xe30 <puts+0x1c>
     e4e:	0f ef       	ldi	r16, 0xFF	; 255
     e50:	1f ef       	ldi	r17, 0xFF	; 255
     e52:	ee cf       	rjmp	.-36     	; 0xe30 <puts+0x1c>
     e54:	8a e0       	ldi	r24, 0x0A	; 10
     e56:	19 95       	eicall
     e58:	89 2b       	or	r24, r25
     e5a:	11 f4       	brne	.+4      	; 0xe60 <puts+0x4c>
     e5c:	c8 01       	movw	r24, r16
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <puts+0x50>
     e60:	8f ef       	ldi	r24, 0xFF	; 255
     e62:	9f ef       	ldi	r25, 0xFF	; 255
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	08 95       	ret

00000e6e <vfprintf>:
     e6e:	2f 92       	push	r2
     e70:	3f 92       	push	r3
     e72:	4f 92       	push	r4
     e74:	5f 92       	push	r5
     e76:	6f 92       	push	r6
     e78:	7f 92       	push	r7
     e7a:	8f 92       	push	r8
     e7c:	9f 92       	push	r9
     e7e:	af 92       	push	r10
     e80:	bf 92       	push	r11
     e82:	cf 92       	push	r12
     e84:	df 92       	push	r13
     e86:	ef 92       	push	r14
     e88:	ff 92       	push	r15
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	2c 97       	sbiw	r28, 0x0c	; 12
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	7c 01       	movw	r14, r24
     ea4:	6b 01       	movw	r12, r22
     ea6:	8a 01       	movw	r16, r20
     ea8:	fc 01       	movw	r30, r24
     eaa:	17 82       	std	Z+7, r1	; 0x07
     eac:	16 82       	std	Z+6, r1	; 0x06
     eae:	83 81       	ldd	r24, Z+3	; 0x03
     eb0:	81 ff       	sbrs	r24, 1
     eb2:	b0 c1       	rjmp	.+864    	; 0x1214 <vfprintf+0x3a6>
     eb4:	ce 01       	movw	r24, r28
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	4c 01       	movw	r8, r24
     eba:	f7 01       	movw	r30, r14
     ebc:	93 81       	ldd	r25, Z+3	; 0x03
     ebe:	f6 01       	movw	r30, r12
     ec0:	93 fd       	sbrc	r25, 3
     ec2:	85 91       	lpm	r24, Z+
     ec4:	93 ff       	sbrs	r25, 3
     ec6:	81 91       	ld	r24, Z+
     ec8:	6f 01       	movw	r12, r30
     eca:	88 23       	and	r24, r24
     ecc:	09 f4       	brne	.+2      	; 0xed0 <vfprintf+0x62>
     ece:	9e c1       	rjmp	.+828    	; 0x120c <vfprintf+0x39e>
     ed0:	85 32       	cpi	r24, 0x25	; 37
     ed2:	39 f4       	brne	.+14     	; 0xee2 <vfprintf+0x74>
     ed4:	93 fd       	sbrc	r25, 3
     ed6:	85 91       	lpm	r24, Z+
     ed8:	93 ff       	sbrs	r25, 3
     eda:	81 91       	ld	r24, Z+
     edc:	6f 01       	movw	r12, r30
     ede:	85 32       	cpi	r24, 0x25	; 37
     ee0:	21 f4       	brne	.+8      	; 0xeea <vfprintf+0x7c>
     ee2:	b7 01       	movw	r22, r14
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0f d3       	rcall	.+1566   	; 0x1506 <fputc>
     ee8:	e8 cf       	rjmp	.-48     	; 0xeba <vfprintf+0x4c>
     eea:	51 2c       	mov	r5, r1
     eec:	31 2c       	mov	r3, r1
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	20 32       	cpi	r18, 0x20	; 32
     ef2:	a0 f4       	brcc	.+40     	; 0xf1c <vfprintf+0xae>
     ef4:	8b 32       	cpi	r24, 0x2B	; 43
     ef6:	69 f0       	breq	.+26     	; 0xf12 <vfprintf+0xa4>
     ef8:	30 f4       	brcc	.+12     	; 0xf06 <vfprintf+0x98>
     efa:	80 32       	cpi	r24, 0x20	; 32
     efc:	59 f0       	breq	.+22     	; 0xf14 <vfprintf+0xa6>
     efe:	83 32       	cpi	r24, 0x23	; 35
     f00:	69 f4       	brne	.+26     	; 0xf1c <vfprintf+0xae>
     f02:	20 61       	ori	r18, 0x10	; 16
     f04:	2c c0       	rjmp	.+88     	; 0xf5e <vfprintf+0xf0>
     f06:	8d 32       	cpi	r24, 0x2D	; 45
     f08:	39 f0       	breq	.+14     	; 0xf18 <vfprintf+0xaa>
     f0a:	80 33       	cpi	r24, 0x30	; 48
     f0c:	39 f4       	brne	.+14     	; 0xf1c <vfprintf+0xae>
     f0e:	21 60       	ori	r18, 0x01	; 1
     f10:	26 c0       	rjmp	.+76     	; 0xf5e <vfprintf+0xf0>
     f12:	22 60       	ori	r18, 0x02	; 2
     f14:	24 60       	ori	r18, 0x04	; 4
     f16:	23 c0       	rjmp	.+70     	; 0xf5e <vfprintf+0xf0>
     f18:	28 60       	ori	r18, 0x08	; 8
     f1a:	21 c0       	rjmp	.+66     	; 0xf5e <vfprintf+0xf0>
     f1c:	27 fd       	sbrc	r18, 7
     f1e:	27 c0       	rjmp	.+78     	; 0xf6e <vfprintf+0x100>
     f20:	30 ed       	ldi	r19, 0xD0	; 208
     f22:	38 0f       	add	r19, r24
     f24:	3a 30       	cpi	r19, 0x0A	; 10
     f26:	78 f4       	brcc	.+30     	; 0xf46 <vfprintf+0xd8>
     f28:	26 ff       	sbrs	r18, 6
     f2a:	06 c0       	rjmp	.+12     	; 0xf38 <vfprintf+0xca>
     f2c:	fa e0       	ldi	r31, 0x0A	; 10
     f2e:	5f 9e       	mul	r5, r31
     f30:	30 0d       	add	r19, r0
     f32:	11 24       	eor	r1, r1
     f34:	53 2e       	mov	r5, r19
     f36:	13 c0       	rjmp	.+38     	; 0xf5e <vfprintf+0xf0>
     f38:	8a e0       	ldi	r24, 0x0A	; 10
     f3a:	38 9e       	mul	r3, r24
     f3c:	30 0d       	add	r19, r0
     f3e:	11 24       	eor	r1, r1
     f40:	33 2e       	mov	r3, r19
     f42:	20 62       	ori	r18, 0x20	; 32
     f44:	0c c0       	rjmp	.+24     	; 0xf5e <vfprintf+0xf0>
     f46:	8e 32       	cpi	r24, 0x2E	; 46
     f48:	21 f4       	brne	.+8      	; 0xf52 <vfprintf+0xe4>
     f4a:	26 fd       	sbrc	r18, 6
     f4c:	5f c1       	rjmp	.+702    	; 0x120c <vfprintf+0x39e>
     f4e:	20 64       	ori	r18, 0x40	; 64
     f50:	06 c0       	rjmp	.+12     	; 0xf5e <vfprintf+0xf0>
     f52:	8c 36       	cpi	r24, 0x6C	; 108
     f54:	11 f4       	brne	.+4      	; 0xf5a <vfprintf+0xec>
     f56:	20 68       	ori	r18, 0x80	; 128
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <vfprintf+0xf0>
     f5a:	88 36       	cpi	r24, 0x68	; 104
     f5c:	41 f4       	brne	.+16     	; 0xf6e <vfprintf+0x100>
     f5e:	f6 01       	movw	r30, r12
     f60:	93 fd       	sbrc	r25, 3
     f62:	85 91       	lpm	r24, Z+
     f64:	93 ff       	sbrs	r25, 3
     f66:	81 91       	ld	r24, Z+
     f68:	6f 01       	movw	r12, r30
     f6a:	81 11       	cpse	r24, r1
     f6c:	c1 cf       	rjmp	.-126    	; 0xef0 <vfprintf+0x82>
     f6e:	98 2f       	mov	r25, r24
     f70:	9f 7d       	andi	r25, 0xDF	; 223
     f72:	95 54       	subi	r25, 0x45	; 69
     f74:	93 30       	cpi	r25, 0x03	; 3
     f76:	28 f4       	brcc	.+10     	; 0xf82 <vfprintf+0x114>
     f78:	0c 5f       	subi	r16, 0xFC	; 252
     f7a:	1f 4f       	sbci	r17, 0xFF	; 255
     f7c:	ff e3       	ldi	r31, 0x3F	; 63
     f7e:	f9 83       	std	Y+1, r31	; 0x01
     f80:	0d c0       	rjmp	.+26     	; 0xf9c <vfprintf+0x12e>
     f82:	83 36       	cpi	r24, 0x63	; 99
     f84:	31 f0       	breq	.+12     	; 0xf92 <vfprintf+0x124>
     f86:	83 37       	cpi	r24, 0x73	; 115
     f88:	71 f0       	breq	.+28     	; 0xfa6 <vfprintf+0x138>
     f8a:	83 35       	cpi	r24, 0x53	; 83
     f8c:	09 f0       	breq	.+2      	; 0xf90 <vfprintf+0x122>
     f8e:	57 c0       	rjmp	.+174    	; 0x103e <vfprintf+0x1d0>
     f90:	21 c0       	rjmp	.+66     	; 0xfd4 <vfprintf+0x166>
     f92:	f8 01       	movw	r30, r16
     f94:	80 81       	ld	r24, Z
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	0e 5f       	subi	r16, 0xFE	; 254
     f9a:	1f 4f       	sbci	r17, 0xFF	; 255
     f9c:	44 24       	eor	r4, r4
     f9e:	43 94       	inc	r4
     fa0:	51 2c       	mov	r5, r1
     fa2:	54 01       	movw	r10, r8
     fa4:	14 c0       	rjmp	.+40     	; 0xfce <vfprintf+0x160>
     fa6:	38 01       	movw	r6, r16
     fa8:	f2 e0       	ldi	r31, 0x02	; 2
     faa:	6f 0e       	add	r6, r31
     fac:	71 1c       	adc	r7, r1
     fae:	f8 01       	movw	r30, r16
     fb0:	a0 80       	ld	r10, Z
     fb2:	b1 80       	ldd	r11, Z+1	; 0x01
     fb4:	26 ff       	sbrs	r18, 6
     fb6:	03 c0       	rjmp	.+6      	; 0xfbe <vfprintf+0x150>
     fb8:	65 2d       	mov	r22, r5
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <vfprintf+0x154>
     fbe:	6f ef       	ldi	r22, 0xFF	; 255
     fc0:	7f ef       	ldi	r23, 0xFF	; 255
     fc2:	c5 01       	movw	r24, r10
     fc4:	2c 87       	std	Y+12, r18	; 0x0c
     fc6:	94 d2       	rcall	.+1320   	; 0x14f0 <strnlen>
     fc8:	2c 01       	movw	r4, r24
     fca:	83 01       	movw	r16, r6
     fcc:	2c 85       	ldd	r18, Y+12	; 0x0c
     fce:	2f 77       	andi	r18, 0x7F	; 127
     fd0:	22 2e       	mov	r2, r18
     fd2:	16 c0       	rjmp	.+44     	; 0x1000 <vfprintf+0x192>
     fd4:	38 01       	movw	r6, r16
     fd6:	f2 e0       	ldi	r31, 0x02	; 2
     fd8:	6f 0e       	add	r6, r31
     fda:	71 1c       	adc	r7, r1
     fdc:	f8 01       	movw	r30, r16
     fde:	a0 80       	ld	r10, Z
     fe0:	b1 80       	ldd	r11, Z+1	; 0x01
     fe2:	26 ff       	sbrs	r18, 6
     fe4:	03 c0       	rjmp	.+6      	; 0xfec <vfprintf+0x17e>
     fe6:	65 2d       	mov	r22, r5
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <vfprintf+0x182>
     fec:	6f ef       	ldi	r22, 0xFF	; 255
     fee:	7f ef       	ldi	r23, 0xFF	; 255
     ff0:	c5 01       	movw	r24, r10
     ff2:	2c 87       	std	Y+12, r18	; 0x0c
     ff4:	6b d2       	rcall	.+1238   	; 0x14cc <strnlen_P>
     ff6:	2c 01       	movw	r4, r24
     ff8:	2c 85       	ldd	r18, Y+12	; 0x0c
     ffa:	20 68       	ori	r18, 0x80	; 128
     ffc:	22 2e       	mov	r2, r18
     ffe:	83 01       	movw	r16, r6
    1000:	23 fc       	sbrc	r2, 3
    1002:	19 c0       	rjmp	.+50     	; 0x1036 <vfprintf+0x1c8>
    1004:	83 2d       	mov	r24, r3
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	48 16       	cp	r4, r24
    100a:	59 06       	cpc	r5, r25
    100c:	a0 f4       	brcc	.+40     	; 0x1036 <vfprintf+0x1c8>
    100e:	b7 01       	movw	r22, r14
    1010:	80 e2       	ldi	r24, 0x20	; 32
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	78 d2       	rcall	.+1264   	; 0x1506 <fputc>
    1016:	3a 94       	dec	r3
    1018:	f5 cf       	rjmp	.-22     	; 0x1004 <vfprintf+0x196>
    101a:	f5 01       	movw	r30, r10
    101c:	27 fc       	sbrc	r2, 7
    101e:	85 91       	lpm	r24, Z+
    1020:	27 fe       	sbrs	r2, 7
    1022:	81 91       	ld	r24, Z+
    1024:	5f 01       	movw	r10, r30
    1026:	b7 01       	movw	r22, r14
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	6d d2       	rcall	.+1242   	; 0x1506 <fputc>
    102c:	31 10       	cpse	r3, r1
    102e:	3a 94       	dec	r3
    1030:	f1 e0       	ldi	r31, 0x01	; 1
    1032:	4f 1a       	sub	r4, r31
    1034:	51 08       	sbc	r5, r1
    1036:	41 14       	cp	r4, r1
    1038:	51 04       	cpc	r5, r1
    103a:	79 f7       	brne	.-34     	; 0x101a <vfprintf+0x1ac>
    103c:	de c0       	rjmp	.+444    	; 0x11fa <vfprintf+0x38c>
    103e:	84 36       	cpi	r24, 0x64	; 100
    1040:	11 f0       	breq	.+4      	; 0x1046 <vfprintf+0x1d8>
    1042:	89 36       	cpi	r24, 0x69	; 105
    1044:	31 f5       	brne	.+76     	; 0x1092 <vfprintf+0x224>
    1046:	f8 01       	movw	r30, r16
    1048:	27 ff       	sbrs	r18, 7
    104a:	07 c0       	rjmp	.+14     	; 0x105a <vfprintf+0x1ec>
    104c:	60 81       	ld	r22, Z
    104e:	71 81       	ldd	r23, Z+1	; 0x01
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	93 81       	ldd	r25, Z+3	; 0x03
    1054:	0c 5f       	subi	r16, 0xFC	; 252
    1056:	1f 4f       	sbci	r17, 0xFF	; 255
    1058:	08 c0       	rjmp	.+16     	; 0x106a <vfprintf+0x1fc>
    105a:	60 81       	ld	r22, Z
    105c:	71 81       	ldd	r23, Z+1	; 0x01
    105e:	88 27       	eor	r24, r24
    1060:	77 fd       	sbrc	r23, 7
    1062:	80 95       	com	r24
    1064:	98 2f       	mov	r25, r24
    1066:	0e 5f       	subi	r16, 0xFE	; 254
    1068:	1f 4f       	sbci	r17, 0xFF	; 255
    106a:	2f 76       	andi	r18, 0x6F	; 111
    106c:	b2 2e       	mov	r11, r18
    106e:	97 ff       	sbrs	r25, 7
    1070:	09 c0       	rjmp	.+18     	; 0x1084 <vfprintf+0x216>
    1072:	90 95       	com	r25
    1074:	80 95       	com	r24
    1076:	70 95       	com	r23
    1078:	61 95       	neg	r22
    107a:	7f 4f       	sbci	r23, 0xFF	; 255
    107c:	8f 4f       	sbci	r24, 0xFF	; 255
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
    1080:	20 68       	ori	r18, 0x80	; 128
    1082:	b2 2e       	mov	r11, r18
    1084:	2a e0       	ldi	r18, 0x0A	; 10
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	a4 01       	movw	r20, r8
    108a:	6f d2       	rcall	.+1246   	; 0x156a <__ultoa_invert>
    108c:	a8 2e       	mov	r10, r24
    108e:	a8 18       	sub	r10, r8
    1090:	43 c0       	rjmp	.+134    	; 0x1118 <vfprintf+0x2aa>
    1092:	85 37       	cpi	r24, 0x75	; 117
    1094:	29 f4       	brne	.+10     	; 0x10a0 <vfprintf+0x232>
    1096:	2f 7e       	andi	r18, 0xEF	; 239
    1098:	b2 2e       	mov	r11, r18
    109a:	2a e0       	ldi	r18, 0x0A	; 10
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	25 c0       	rjmp	.+74     	; 0x10ea <vfprintf+0x27c>
    10a0:	f2 2f       	mov	r31, r18
    10a2:	f9 7f       	andi	r31, 0xF9	; 249
    10a4:	bf 2e       	mov	r11, r31
    10a6:	8f 36       	cpi	r24, 0x6F	; 111
    10a8:	c1 f0       	breq	.+48     	; 0x10da <vfprintf+0x26c>
    10aa:	18 f4       	brcc	.+6      	; 0x10b2 <vfprintf+0x244>
    10ac:	88 35       	cpi	r24, 0x58	; 88
    10ae:	79 f0       	breq	.+30     	; 0x10ce <vfprintf+0x260>
    10b0:	ad c0       	rjmp	.+346    	; 0x120c <vfprintf+0x39e>
    10b2:	80 37       	cpi	r24, 0x70	; 112
    10b4:	19 f0       	breq	.+6      	; 0x10bc <vfprintf+0x24e>
    10b6:	88 37       	cpi	r24, 0x78	; 120
    10b8:	21 f0       	breq	.+8      	; 0x10c2 <vfprintf+0x254>
    10ba:	a8 c0       	rjmp	.+336    	; 0x120c <vfprintf+0x39e>
    10bc:	2f 2f       	mov	r18, r31
    10be:	20 61       	ori	r18, 0x10	; 16
    10c0:	b2 2e       	mov	r11, r18
    10c2:	b4 fe       	sbrs	r11, 4
    10c4:	0d c0       	rjmp	.+26     	; 0x10e0 <vfprintf+0x272>
    10c6:	8b 2d       	mov	r24, r11
    10c8:	84 60       	ori	r24, 0x04	; 4
    10ca:	b8 2e       	mov	r11, r24
    10cc:	09 c0       	rjmp	.+18     	; 0x10e0 <vfprintf+0x272>
    10ce:	24 ff       	sbrs	r18, 4
    10d0:	0a c0       	rjmp	.+20     	; 0x10e6 <vfprintf+0x278>
    10d2:	9f 2f       	mov	r25, r31
    10d4:	96 60       	ori	r25, 0x06	; 6
    10d6:	b9 2e       	mov	r11, r25
    10d8:	06 c0       	rjmp	.+12     	; 0x10e6 <vfprintf+0x278>
    10da:	28 e0       	ldi	r18, 0x08	; 8
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	05 c0       	rjmp	.+10     	; 0x10ea <vfprintf+0x27c>
    10e0:	20 e1       	ldi	r18, 0x10	; 16
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <vfprintf+0x27c>
    10e6:	20 e1       	ldi	r18, 0x10	; 16
    10e8:	32 e0       	ldi	r19, 0x02	; 2
    10ea:	f8 01       	movw	r30, r16
    10ec:	b7 fe       	sbrs	r11, 7
    10ee:	07 c0       	rjmp	.+14     	; 0x10fe <vfprintf+0x290>
    10f0:	60 81       	ld	r22, Z
    10f2:	71 81       	ldd	r23, Z+1	; 0x01
    10f4:	82 81       	ldd	r24, Z+2	; 0x02
    10f6:	93 81       	ldd	r25, Z+3	; 0x03
    10f8:	0c 5f       	subi	r16, 0xFC	; 252
    10fa:	1f 4f       	sbci	r17, 0xFF	; 255
    10fc:	06 c0       	rjmp	.+12     	; 0x110a <vfprintf+0x29c>
    10fe:	60 81       	ld	r22, Z
    1100:	71 81       	ldd	r23, Z+1	; 0x01
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 5f       	subi	r16, 0xFE	; 254
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	a4 01       	movw	r20, r8
    110c:	2e d2       	rcall	.+1116   	; 0x156a <__ultoa_invert>
    110e:	a8 2e       	mov	r10, r24
    1110:	a8 18       	sub	r10, r8
    1112:	fb 2d       	mov	r31, r11
    1114:	ff 77       	andi	r31, 0x7F	; 127
    1116:	bf 2e       	mov	r11, r31
    1118:	b6 fe       	sbrs	r11, 6
    111a:	0b c0       	rjmp	.+22     	; 0x1132 <vfprintf+0x2c4>
    111c:	2b 2d       	mov	r18, r11
    111e:	2e 7f       	andi	r18, 0xFE	; 254
    1120:	a5 14       	cp	r10, r5
    1122:	50 f4       	brcc	.+20     	; 0x1138 <vfprintf+0x2ca>
    1124:	b4 fe       	sbrs	r11, 4
    1126:	0a c0       	rjmp	.+20     	; 0x113c <vfprintf+0x2ce>
    1128:	b2 fc       	sbrc	r11, 2
    112a:	08 c0       	rjmp	.+16     	; 0x113c <vfprintf+0x2ce>
    112c:	2b 2d       	mov	r18, r11
    112e:	2e 7e       	andi	r18, 0xEE	; 238
    1130:	05 c0       	rjmp	.+10     	; 0x113c <vfprintf+0x2ce>
    1132:	7a 2c       	mov	r7, r10
    1134:	2b 2d       	mov	r18, r11
    1136:	03 c0       	rjmp	.+6      	; 0x113e <vfprintf+0x2d0>
    1138:	7a 2c       	mov	r7, r10
    113a:	01 c0       	rjmp	.+2      	; 0x113e <vfprintf+0x2d0>
    113c:	75 2c       	mov	r7, r5
    113e:	24 ff       	sbrs	r18, 4
    1140:	0d c0       	rjmp	.+26     	; 0x115c <vfprintf+0x2ee>
    1142:	fe 01       	movw	r30, r28
    1144:	ea 0d       	add	r30, r10
    1146:	f1 1d       	adc	r31, r1
    1148:	80 81       	ld	r24, Z
    114a:	80 33       	cpi	r24, 0x30	; 48
    114c:	11 f4       	brne	.+4      	; 0x1152 <vfprintf+0x2e4>
    114e:	29 7e       	andi	r18, 0xE9	; 233
    1150:	09 c0       	rjmp	.+18     	; 0x1164 <vfprintf+0x2f6>
    1152:	22 ff       	sbrs	r18, 2
    1154:	06 c0       	rjmp	.+12     	; 0x1162 <vfprintf+0x2f4>
    1156:	73 94       	inc	r7
    1158:	73 94       	inc	r7
    115a:	04 c0       	rjmp	.+8      	; 0x1164 <vfprintf+0x2f6>
    115c:	82 2f       	mov	r24, r18
    115e:	86 78       	andi	r24, 0x86	; 134
    1160:	09 f0       	breq	.+2      	; 0x1164 <vfprintf+0x2f6>
    1162:	73 94       	inc	r7
    1164:	23 fd       	sbrc	r18, 3
    1166:	12 c0       	rjmp	.+36     	; 0x118c <vfprintf+0x31e>
    1168:	20 ff       	sbrs	r18, 0
    116a:	06 c0       	rjmp	.+12     	; 0x1178 <vfprintf+0x30a>
    116c:	5a 2c       	mov	r5, r10
    116e:	73 14       	cp	r7, r3
    1170:	18 f4       	brcc	.+6      	; 0x1178 <vfprintf+0x30a>
    1172:	53 0c       	add	r5, r3
    1174:	57 18       	sub	r5, r7
    1176:	73 2c       	mov	r7, r3
    1178:	73 14       	cp	r7, r3
    117a:	60 f4       	brcc	.+24     	; 0x1194 <vfprintf+0x326>
    117c:	b7 01       	movw	r22, r14
    117e:	80 e2       	ldi	r24, 0x20	; 32
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	2c 87       	std	Y+12, r18	; 0x0c
    1184:	c0 d1       	rcall	.+896    	; 0x1506 <fputc>
    1186:	73 94       	inc	r7
    1188:	2c 85       	ldd	r18, Y+12	; 0x0c
    118a:	f6 cf       	rjmp	.-20     	; 0x1178 <vfprintf+0x30a>
    118c:	73 14       	cp	r7, r3
    118e:	10 f4       	brcc	.+4      	; 0x1194 <vfprintf+0x326>
    1190:	37 18       	sub	r3, r7
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <vfprintf+0x328>
    1194:	31 2c       	mov	r3, r1
    1196:	24 ff       	sbrs	r18, 4
    1198:	11 c0       	rjmp	.+34     	; 0x11bc <vfprintf+0x34e>
    119a:	b7 01       	movw	r22, r14
    119c:	80 e3       	ldi	r24, 0x30	; 48
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	2c 87       	std	Y+12, r18	; 0x0c
    11a2:	b1 d1       	rcall	.+866    	; 0x1506 <fputc>
    11a4:	2c 85       	ldd	r18, Y+12	; 0x0c
    11a6:	22 ff       	sbrs	r18, 2
    11a8:	16 c0       	rjmp	.+44     	; 0x11d6 <vfprintf+0x368>
    11aa:	21 ff       	sbrs	r18, 1
    11ac:	03 c0       	rjmp	.+6      	; 0x11b4 <vfprintf+0x346>
    11ae:	88 e5       	ldi	r24, 0x58	; 88
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <vfprintf+0x34a>
    11b4:	88 e7       	ldi	r24, 0x78	; 120
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	b7 01       	movw	r22, r14
    11ba:	0c c0       	rjmp	.+24     	; 0x11d4 <vfprintf+0x366>
    11bc:	82 2f       	mov	r24, r18
    11be:	86 78       	andi	r24, 0x86	; 134
    11c0:	51 f0       	breq	.+20     	; 0x11d6 <vfprintf+0x368>
    11c2:	21 fd       	sbrc	r18, 1
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <vfprintf+0x35c>
    11c6:	80 e2       	ldi	r24, 0x20	; 32
    11c8:	01 c0       	rjmp	.+2      	; 0x11cc <vfprintf+0x35e>
    11ca:	8b e2       	ldi	r24, 0x2B	; 43
    11cc:	27 fd       	sbrc	r18, 7
    11ce:	8d e2       	ldi	r24, 0x2D	; 45
    11d0:	b7 01       	movw	r22, r14
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	98 d1       	rcall	.+816    	; 0x1506 <fputc>
    11d6:	a5 14       	cp	r10, r5
    11d8:	30 f4       	brcc	.+12     	; 0x11e6 <vfprintf+0x378>
    11da:	b7 01       	movw	r22, r14
    11dc:	80 e3       	ldi	r24, 0x30	; 48
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	92 d1       	rcall	.+804    	; 0x1506 <fputc>
    11e2:	5a 94       	dec	r5
    11e4:	f8 cf       	rjmp	.-16     	; 0x11d6 <vfprintf+0x368>
    11e6:	aa 94       	dec	r10
    11e8:	f4 01       	movw	r30, r8
    11ea:	ea 0d       	add	r30, r10
    11ec:	f1 1d       	adc	r31, r1
    11ee:	80 81       	ld	r24, Z
    11f0:	b7 01       	movw	r22, r14
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	88 d1       	rcall	.+784    	; 0x1506 <fputc>
    11f6:	a1 10       	cpse	r10, r1
    11f8:	f6 cf       	rjmp	.-20     	; 0x11e6 <vfprintf+0x378>
    11fa:	33 20       	and	r3, r3
    11fc:	09 f4       	brne	.+2      	; 0x1200 <vfprintf+0x392>
    11fe:	5d ce       	rjmp	.-838    	; 0xeba <vfprintf+0x4c>
    1200:	b7 01       	movw	r22, r14
    1202:	80 e2       	ldi	r24, 0x20	; 32
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	7f d1       	rcall	.+766    	; 0x1506 <fputc>
    1208:	3a 94       	dec	r3
    120a:	f7 cf       	rjmp	.-18     	; 0x11fa <vfprintf+0x38c>
    120c:	f7 01       	movw	r30, r14
    120e:	86 81       	ldd	r24, Z+6	; 0x06
    1210:	97 81       	ldd	r25, Z+7	; 0x07
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <vfprintf+0x3aa>
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	9f ef       	ldi	r25, 0xFF	; 255
    1218:	2c 96       	adiw	r28, 0x0c	; 12
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	ff 90       	pop	r15
    122e:	ef 90       	pop	r14
    1230:	df 90       	pop	r13
    1232:	cf 90       	pop	r12
    1234:	bf 90       	pop	r11
    1236:	af 90       	pop	r10
    1238:	9f 90       	pop	r9
    123a:	8f 90       	pop	r8
    123c:	7f 90       	pop	r7
    123e:	6f 90       	pop	r6
    1240:	5f 90       	pop	r5
    1242:	4f 90       	pop	r4
    1244:	3f 90       	pop	r3
    1246:	2f 90       	pop	r2
    1248:	08 95       	ret

0000124a <calloc>:
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	86 9f       	mul	r24, r22
    1254:	80 01       	movw	r16, r0
    1256:	87 9f       	mul	r24, r23
    1258:	10 0d       	add	r17, r0
    125a:	96 9f       	mul	r25, r22
    125c:	10 0d       	add	r17, r0
    125e:	11 24       	eor	r1, r1
    1260:	c8 01       	movw	r24, r16
    1262:	0d d0       	rcall	.+26     	; 0x127e <malloc>
    1264:	ec 01       	movw	r28, r24
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	21 f0       	breq	.+8      	; 0x1272 <calloc+0x28>
    126a:	a8 01       	movw	r20, r16
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	38 d1       	rcall	.+624    	; 0x14e2 <memset>
    1272:	ce 01       	movw	r24, r28
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	08 95       	ret

0000127e <malloc>:
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	82 30       	cpi	r24, 0x02	; 2
    1284:	91 05       	cpc	r25, r1
    1286:	10 f4       	brcc	.+4      	; 0x128c <malloc+0xe>
    1288:	82 e0       	ldi	r24, 0x02	; 2
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	e0 91 fa 02 	lds	r30, 0x02FA
    1290:	f0 91 fb 02 	lds	r31, 0x02FB
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	a0 e0       	ldi	r26, 0x00	; 0
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	30 97       	sbiw	r30, 0x00	; 0
    129e:	39 f1       	breq	.+78     	; 0x12ee <malloc+0x70>
    12a0:	40 81       	ld	r20, Z
    12a2:	51 81       	ldd	r21, Z+1	; 0x01
    12a4:	48 17       	cp	r20, r24
    12a6:	59 07       	cpc	r21, r25
    12a8:	b8 f0       	brcs	.+46     	; 0x12d8 <malloc+0x5a>
    12aa:	48 17       	cp	r20, r24
    12ac:	59 07       	cpc	r21, r25
    12ae:	71 f4       	brne	.+28     	; 0x12cc <malloc+0x4e>
    12b0:	82 81       	ldd	r24, Z+2	; 0x02
    12b2:	93 81       	ldd	r25, Z+3	; 0x03
    12b4:	10 97       	sbiw	r26, 0x00	; 0
    12b6:	29 f0       	breq	.+10     	; 0x12c2 <malloc+0x44>
    12b8:	13 96       	adiw	r26, 0x03	; 3
    12ba:	9c 93       	st	X, r25
    12bc:	8e 93       	st	-X, r24
    12be:	12 97       	sbiw	r26, 0x02	; 2
    12c0:	2c c0       	rjmp	.+88     	; 0x131a <malloc+0x9c>
    12c2:	90 93 fb 02 	sts	0x02FB, r25
    12c6:	80 93 fa 02 	sts	0x02FA, r24
    12ca:	27 c0       	rjmp	.+78     	; 0x131a <malloc+0x9c>
    12cc:	21 15       	cp	r18, r1
    12ce:	31 05       	cpc	r19, r1
    12d0:	31 f0       	breq	.+12     	; 0x12de <malloc+0x60>
    12d2:	42 17       	cp	r20, r18
    12d4:	53 07       	cpc	r21, r19
    12d6:	18 f0       	brcs	.+6      	; 0x12de <malloc+0x60>
    12d8:	a9 01       	movw	r20, r18
    12da:	db 01       	movw	r26, r22
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <malloc+0x62>
    12de:	ef 01       	movw	r28, r30
    12e0:	9a 01       	movw	r18, r20
    12e2:	bd 01       	movw	r22, r26
    12e4:	df 01       	movw	r26, r30
    12e6:	02 80       	ldd	r0, Z+2	; 0x02
    12e8:	f3 81       	ldd	r31, Z+3	; 0x03
    12ea:	e0 2d       	mov	r30, r0
    12ec:	d7 cf       	rjmp	.-82     	; 0x129c <malloc+0x1e>
    12ee:	21 15       	cp	r18, r1
    12f0:	31 05       	cpc	r19, r1
    12f2:	f9 f0       	breq	.+62     	; 0x1332 <malloc+0xb4>
    12f4:	28 1b       	sub	r18, r24
    12f6:	39 0b       	sbc	r19, r25
    12f8:	24 30       	cpi	r18, 0x04	; 4
    12fa:	31 05       	cpc	r19, r1
    12fc:	80 f4       	brcc	.+32     	; 0x131e <malloc+0xa0>
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	9b 81       	ldd	r25, Y+3	; 0x03
    1302:	61 15       	cp	r22, r1
    1304:	71 05       	cpc	r23, r1
    1306:	21 f0       	breq	.+8      	; 0x1310 <malloc+0x92>
    1308:	fb 01       	movw	r30, r22
    130a:	93 83       	std	Z+3, r25	; 0x03
    130c:	82 83       	std	Z+2, r24	; 0x02
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <malloc+0x9a>
    1310:	90 93 fb 02 	sts	0x02FB, r25
    1314:	80 93 fa 02 	sts	0x02FA, r24
    1318:	fe 01       	movw	r30, r28
    131a:	32 96       	adiw	r30, 0x02	; 2
    131c:	44 c0       	rjmp	.+136    	; 0x13a6 <malloc+0x128>
    131e:	fe 01       	movw	r30, r28
    1320:	e2 0f       	add	r30, r18
    1322:	f3 1f       	adc	r31, r19
    1324:	81 93       	st	Z+, r24
    1326:	91 93       	st	Z+, r25
    1328:	22 50       	subi	r18, 0x02	; 2
    132a:	31 09       	sbc	r19, r1
    132c:	39 83       	std	Y+1, r19	; 0x01
    132e:	28 83       	st	Y, r18
    1330:	3a c0       	rjmp	.+116    	; 0x13a6 <malloc+0x128>
    1332:	20 91 f8 02 	lds	r18, 0x02F8
    1336:	30 91 f9 02 	lds	r19, 0x02F9
    133a:	23 2b       	or	r18, r19
    133c:	41 f4       	brne	.+16     	; 0x134e <malloc+0xd0>
    133e:	20 91 02 02 	lds	r18, 0x0202
    1342:	30 91 03 02 	lds	r19, 0x0203
    1346:	30 93 f9 02 	sts	0x02F9, r19
    134a:	20 93 f8 02 	sts	0x02F8, r18
    134e:	20 91 00 02 	lds	r18, 0x0200
    1352:	30 91 01 02 	lds	r19, 0x0201
    1356:	21 15       	cp	r18, r1
    1358:	31 05       	cpc	r19, r1
    135a:	41 f4       	brne	.+16     	; 0x136c <malloc+0xee>
    135c:	2d b7       	in	r18, 0x3d	; 61
    135e:	3e b7       	in	r19, 0x3e	; 62
    1360:	40 91 04 02 	lds	r20, 0x0204
    1364:	50 91 05 02 	lds	r21, 0x0205
    1368:	24 1b       	sub	r18, r20
    136a:	35 0b       	sbc	r19, r21
    136c:	e0 91 f8 02 	lds	r30, 0x02F8
    1370:	f0 91 f9 02 	lds	r31, 0x02F9
    1374:	e2 17       	cp	r30, r18
    1376:	f3 07       	cpc	r31, r19
    1378:	a0 f4       	brcc	.+40     	; 0x13a2 <malloc+0x124>
    137a:	2e 1b       	sub	r18, r30
    137c:	3f 0b       	sbc	r19, r31
    137e:	28 17       	cp	r18, r24
    1380:	39 07       	cpc	r19, r25
    1382:	78 f0       	brcs	.+30     	; 0x13a2 <malloc+0x124>
    1384:	ac 01       	movw	r20, r24
    1386:	4e 5f       	subi	r20, 0xFE	; 254
    1388:	5f 4f       	sbci	r21, 0xFF	; 255
    138a:	24 17       	cp	r18, r20
    138c:	35 07       	cpc	r19, r21
    138e:	48 f0       	brcs	.+18     	; 0x13a2 <malloc+0x124>
    1390:	4e 0f       	add	r20, r30
    1392:	5f 1f       	adc	r21, r31
    1394:	50 93 f9 02 	sts	0x02F9, r21
    1398:	40 93 f8 02 	sts	0x02F8, r20
    139c:	81 93       	st	Z+, r24
    139e:	91 93       	st	Z+, r25
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <malloc+0x128>
    13a2:	e0 e0       	ldi	r30, 0x00	; 0
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	cf 01       	movw	r24, r30
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <free>:
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <free+0xa>
    13b6:	87 c0       	rjmp	.+270    	; 0x14c6 <free+0x118>
    13b8:	fc 01       	movw	r30, r24
    13ba:	32 97       	sbiw	r30, 0x02	; 2
    13bc:	13 82       	std	Z+3, r1	; 0x03
    13be:	12 82       	std	Z+2, r1	; 0x02
    13c0:	c0 91 fa 02 	lds	r28, 0x02FA
    13c4:	d0 91 fb 02 	lds	r29, 0x02FB
    13c8:	20 97       	sbiw	r28, 0x00	; 0
    13ca:	81 f4       	brne	.+32     	; 0x13ec <free+0x3e>
    13cc:	20 81       	ld	r18, Z
    13ce:	31 81       	ldd	r19, Z+1	; 0x01
    13d0:	28 0f       	add	r18, r24
    13d2:	39 1f       	adc	r19, r25
    13d4:	80 91 f8 02 	lds	r24, 0x02F8
    13d8:	90 91 f9 02 	lds	r25, 0x02F9
    13dc:	82 17       	cp	r24, r18
    13de:	93 07       	cpc	r25, r19
    13e0:	79 f5       	brne	.+94     	; 0x1440 <free+0x92>
    13e2:	f0 93 f9 02 	sts	0x02F9, r31
    13e6:	e0 93 f8 02 	sts	0x02F8, r30
    13ea:	6d c0       	rjmp	.+218    	; 0x14c6 <free+0x118>
    13ec:	de 01       	movw	r26, r28
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	ae 17       	cp	r26, r30
    13f4:	bf 07       	cpc	r27, r31
    13f6:	50 f4       	brcc	.+20     	; 0x140c <free+0x5e>
    13f8:	12 96       	adiw	r26, 0x02	; 2
    13fa:	4d 91       	ld	r20, X+
    13fc:	5c 91       	ld	r21, X
    13fe:	13 97       	sbiw	r26, 0x03	; 3
    1400:	9d 01       	movw	r18, r26
    1402:	41 15       	cp	r20, r1
    1404:	51 05       	cpc	r21, r1
    1406:	09 f1       	breq	.+66     	; 0x144a <free+0x9c>
    1408:	da 01       	movw	r26, r20
    140a:	f3 cf       	rjmp	.-26     	; 0x13f2 <free+0x44>
    140c:	b3 83       	std	Z+3, r27	; 0x03
    140e:	a2 83       	std	Z+2, r26	; 0x02
    1410:	40 81       	ld	r20, Z
    1412:	51 81       	ldd	r21, Z+1	; 0x01
    1414:	84 0f       	add	r24, r20
    1416:	95 1f       	adc	r25, r21
    1418:	8a 17       	cp	r24, r26
    141a:	9b 07       	cpc	r25, r27
    141c:	71 f4       	brne	.+28     	; 0x143a <free+0x8c>
    141e:	8d 91       	ld	r24, X+
    1420:	9c 91       	ld	r25, X
    1422:	11 97       	sbiw	r26, 0x01	; 1
    1424:	84 0f       	add	r24, r20
    1426:	95 1f       	adc	r25, r21
    1428:	02 96       	adiw	r24, 0x02	; 2
    142a:	91 83       	std	Z+1, r25	; 0x01
    142c:	80 83       	st	Z, r24
    142e:	12 96       	adiw	r26, 0x02	; 2
    1430:	8d 91       	ld	r24, X+
    1432:	9c 91       	ld	r25, X
    1434:	13 97       	sbiw	r26, 0x03	; 3
    1436:	93 83       	std	Z+3, r25	; 0x03
    1438:	82 83       	std	Z+2, r24	; 0x02
    143a:	21 15       	cp	r18, r1
    143c:	31 05       	cpc	r19, r1
    143e:	29 f4       	brne	.+10     	; 0x144a <free+0x9c>
    1440:	f0 93 fb 02 	sts	0x02FB, r31
    1444:	e0 93 fa 02 	sts	0x02FA, r30
    1448:	3e c0       	rjmp	.+124    	; 0x14c6 <free+0x118>
    144a:	d9 01       	movw	r26, r18
    144c:	13 96       	adiw	r26, 0x03	; 3
    144e:	fc 93       	st	X, r31
    1450:	ee 93       	st	-X, r30
    1452:	12 97       	sbiw	r26, 0x02	; 2
    1454:	4d 91       	ld	r20, X+
    1456:	5d 91       	ld	r21, X+
    1458:	a4 0f       	add	r26, r20
    145a:	b5 1f       	adc	r27, r21
    145c:	ea 17       	cp	r30, r26
    145e:	fb 07       	cpc	r31, r27
    1460:	79 f4       	brne	.+30     	; 0x1480 <free+0xd2>
    1462:	80 81       	ld	r24, Z
    1464:	91 81       	ldd	r25, Z+1	; 0x01
    1466:	84 0f       	add	r24, r20
    1468:	95 1f       	adc	r25, r21
    146a:	02 96       	adiw	r24, 0x02	; 2
    146c:	d9 01       	movw	r26, r18
    146e:	11 96       	adiw	r26, 0x01	; 1
    1470:	9c 93       	st	X, r25
    1472:	8e 93       	st	-X, r24
    1474:	82 81       	ldd	r24, Z+2	; 0x02
    1476:	93 81       	ldd	r25, Z+3	; 0x03
    1478:	13 96       	adiw	r26, 0x03	; 3
    147a:	9c 93       	st	X, r25
    147c:	8e 93       	st	-X, r24
    147e:	12 97       	sbiw	r26, 0x02	; 2
    1480:	e0 e0       	ldi	r30, 0x00	; 0
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	9b 81       	ldd	r25, Y+3	; 0x03
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	19 f0       	breq	.+6      	; 0x1492 <free+0xe4>
    148c:	fe 01       	movw	r30, r28
    148e:	ec 01       	movw	r28, r24
    1490:	f9 cf       	rjmp	.-14     	; 0x1484 <free+0xd6>
    1492:	ce 01       	movw	r24, r28
    1494:	02 96       	adiw	r24, 0x02	; 2
    1496:	28 81       	ld	r18, Y
    1498:	39 81       	ldd	r19, Y+1	; 0x01
    149a:	82 0f       	add	r24, r18
    149c:	93 1f       	adc	r25, r19
    149e:	20 91 f8 02 	lds	r18, 0x02F8
    14a2:	30 91 f9 02 	lds	r19, 0x02F9
    14a6:	28 17       	cp	r18, r24
    14a8:	39 07       	cpc	r19, r25
    14aa:	69 f4       	brne	.+26     	; 0x14c6 <free+0x118>
    14ac:	30 97       	sbiw	r30, 0x00	; 0
    14ae:	29 f4       	brne	.+10     	; 0x14ba <free+0x10c>
    14b0:	10 92 fb 02 	sts	0x02FB, r1
    14b4:	10 92 fa 02 	sts	0x02FA, r1
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <free+0x110>
    14ba:	13 82       	std	Z+3, r1	; 0x03
    14bc:	12 82       	std	Z+2, r1	; 0x02
    14be:	d0 93 f9 02 	sts	0x02F9, r29
    14c2:	c0 93 f8 02 	sts	0x02F8, r28
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <strnlen_P>:
    14cc:	fc 01       	movw	r30, r24
    14ce:	05 90       	lpm	r0, Z+
    14d0:	61 50       	subi	r22, 0x01	; 1
    14d2:	70 40       	sbci	r23, 0x00	; 0
    14d4:	01 10       	cpse	r0, r1
    14d6:	d8 f7       	brcc	.-10     	; 0x14ce <strnlen_P+0x2>
    14d8:	80 95       	com	r24
    14da:	90 95       	com	r25
    14dc:	8e 0f       	add	r24, r30
    14de:	9f 1f       	adc	r25, r31
    14e0:	08 95       	ret

000014e2 <memset>:
    14e2:	dc 01       	movw	r26, r24
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <memset+0x6>
    14e6:	6d 93       	st	X+, r22
    14e8:	41 50       	subi	r20, 0x01	; 1
    14ea:	50 40       	sbci	r21, 0x00	; 0
    14ec:	e0 f7       	brcc	.-8      	; 0x14e6 <memset+0x4>
    14ee:	08 95       	ret

000014f0 <strnlen>:
    14f0:	fc 01       	movw	r30, r24
    14f2:	61 50       	subi	r22, 0x01	; 1
    14f4:	70 40       	sbci	r23, 0x00	; 0
    14f6:	01 90       	ld	r0, Z+
    14f8:	01 10       	cpse	r0, r1
    14fa:	d8 f7       	brcc	.-10     	; 0x14f2 <strnlen+0x2>
    14fc:	80 95       	com	r24
    14fe:	90 95       	com	r25
    1500:	8e 0f       	add	r24, r30
    1502:	9f 1f       	adc	r25, r31
    1504:	08 95       	ret

00001506 <fputc>:
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	18 2f       	mov	r17, r24
    1510:	09 2f       	mov	r16, r25
    1512:	eb 01       	movw	r28, r22
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	81 fd       	sbrc	r24, 1
    1518:	03 c0       	rjmp	.+6      	; 0x1520 <fputc+0x1a>
    151a:	8f ef       	ldi	r24, 0xFF	; 255
    151c:	9f ef       	ldi	r25, 0xFF	; 255
    151e:	20 c0       	rjmp	.+64     	; 0x1560 <fputc+0x5a>
    1520:	82 ff       	sbrs	r24, 2
    1522:	10 c0       	rjmp	.+32     	; 0x1544 <fputc+0x3e>
    1524:	4e 81       	ldd	r20, Y+6	; 0x06
    1526:	5f 81       	ldd	r21, Y+7	; 0x07
    1528:	2c 81       	ldd	r18, Y+4	; 0x04
    152a:	3d 81       	ldd	r19, Y+5	; 0x05
    152c:	42 17       	cp	r20, r18
    152e:	53 07       	cpc	r21, r19
    1530:	7c f4       	brge	.+30     	; 0x1550 <fputc+0x4a>
    1532:	e8 81       	ld	r30, Y
    1534:	f9 81       	ldd	r31, Y+1	; 0x01
    1536:	9f 01       	movw	r18, r30
    1538:	2f 5f       	subi	r18, 0xFF	; 255
    153a:	3f 4f       	sbci	r19, 0xFF	; 255
    153c:	39 83       	std	Y+1, r19	; 0x01
    153e:	28 83       	st	Y, r18
    1540:	10 83       	st	Z, r17
    1542:	06 c0       	rjmp	.+12     	; 0x1550 <fputc+0x4a>
    1544:	e8 85       	ldd	r30, Y+8	; 0x08
    1546:	f9 85       	ldd	r31, Y+9	; 0x09
    1548:	81 2f       	mov	r24, r17
    154a:	19 95       	eicall
    154c:	89 2b       	or	r24, r25
    154e:	29 f7       	brne	.-54     	; 0x151a <fputc+0x14>
    1550:	2e 81       	ldd	r18, Y+6	; 0x06
    1552:	3f 81       	ldd	r19, Y+7	; 0x07
    1554:	2f 5f       	subi	r18, 0xFF	; 255
    1556:	3f 4f       	sbci	r19, 0xFF	; 255
    1558:	3f 83       	std	Y+7, r19	; 0x07
    155a:	2e 83       	std	Y+6, r18	; 0x06
    155c:	81 2f       	mov	r24, r17
    155e:	90 2f       	mov	r25, r16
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	08 95       	ret

0000156a <__ultoa_invert>:
    156a:	fa 01       	movw	r30, r20
    156c:	aa 27       	eor	r26, r26
    156e:	28 30       	cpi	r18, 0x08	; 8
    1570:	51 f1       	breq	.+84     	; 0x15c6 <__ultoa_invert+0x5c>
    1572:	20 31       	cpi	r18, 0x10	; 16
    1574:	81 f1       	breq	.+96     	; 0x15d6 <__ultoa_invert+0x6c>
    1576:	e8 94       	clt
    1578:	6f 93       	push	r22
    157a:	6e 7f       	andi	r22, 0xFE	; 254
    157c:	6e 5f       	subi	r22, 0xFE	; 254
    157e:	7f 4f       	sbci	r23, 0xFF	; 255
    1580:	8f 4f       	sbci	r24, 0xFF	; 255
    1582:	9f 4f       	sbci	r25, 0xFF	; 255
    1584:	af 4f       	sbci	r26, 0xFF	; 255
    1586:	b1 e0       	ldi	r27, 0x01	; 1
    1588:	3e d0       	rcall	.+124    	; 0x1606 <__ultoa_invert+0x9c>
    158a:	b4 e0       	ldi	r27, 0x04	; 4
    158c:	3c d0       	rcall	.+120    	; 0x1606 <__ultoa_invert+0x9c>
    158e:	67 0f       	add	r22, r23
    1590:	78 1f       	adc	r23, r24
    1592:	89 1f       	adc	r24, r25
    1594:	9a 1f       	adc	r25, r26
    1596:	a1 1d       	adc	r26, r1
    1598:	68 0f       	add	r22, r24
    159a:	79 1f       	adc	r23, r25
    159c:	8a 1f       	adc	r24, r26
    159e:	91 1d       	adc	r25, r1
    15a0:	a1 1d       	adc	r26, r1
    15a2:	6a 0f       	add	r22, r26
    15a4:	71 1d       	adc	r23, r1
    15a6:	81 1d       	adc	r24, r1
    15a8:	91 1d       	adc	r25, r1
    15aa:	a1 1d       	adc	r26, r1
    15ac:	20 d0       	rcall	.+64     	; 0x15ee <__ultoa_invert+0x84>
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <__ultoa_invert+0x48>
    15b0:	68 94       	set
    15b2:	3f 91       	pop	r19
    15b4:	2a e0       	ldi	r18, 0x0A	; 10
    15b6:	26 9f       	mul	r18, r22
    15b8:	11 24       	eor	r1, r1
    15ba:	30 19       	sub	r19, r0
    15bc:	30 5d       	subi	r19, 0xD0	; 208
    15be:	31 93       	st	Z+, r19
    15c0:	de f6       	brtc	.-74     	; 0x1578 <__ultoa_invert+0xe>
    15c2:	cf 01       	movw	r24, r30
    15c4:	08 95       	ret
    15c6:	46 2f       	mov	r20, r22
    15c8:	47 70       	andi	r20, 0x07	; 7
    15ca:	40 5d       	subi	r20, 0xD0	; 208
    15cc:	41 93       	st	Z+, r20
    15ce:	b3 e0       	ldi	r27, 0x03	; 3
    15d0:	0f d0       	rcall	.+30     	; 0x15f0 <__ultoa_invert+0x86>
    15d2:	c9 f7       	brne	.-14     	; 0x15c6 <__ultoa_invert+0x5c>
    15d4:	f6 cf       	rjmp	.-20     	; 0x15c2 <__ultoa_invert+0x58>
    15d6:	46 2f       	mov	r20, r22
    15d8:	4f 70       	andi	r20, 0x0F	; 15
    15da:	40 5d       	subi	r20, 0xD0	; 208
    15dc:	4a 33       	cpi	r20, 0x3A	; 58
    15de:	18 f0       	brcs	.+6      	; 0x15e6 <__ultoa_invert+0x7c>
    15e0:	49 5d       	subi	r20, 0xD9	; 217
    15e2:	31 fd       	sbrc	r19, 1
    15e4:	40 52       	subi	r20, 0x20	; 32
    15e6:	41 93       	st	Z+, r20
    15e8:	02 d0       	rcall	.+4      	; 0x15ee <__ultoa_invert+0x84>
    15ea:	a9 f7       	brne	.-22     	; 0x15d6 <__ultoa_invert+0x6c>
    15ec:	ea cf       	rjmp	.-44     	; 0x15c2 <__ultoa_invert+0x58>
    15ee:	b4 e0       	ldi	r27, 0x04	; 4
    15f0:	a6 95       	lsr	r26
    15f2:	97 95       	ror	r25
    15f4:	87 95       	ror	r24
    15f6:	77 95       	ror	r23
    15f8:	67 95       	ror	r22
    15fa:	ba 95       	dec	r27
    15fc:	c9 f7       	brne	.-14     	; 0x15f0 <__ultoa_invert+0x86>
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	61 05       	cpc	r22, r1
    1602:	71 05       	cpc	r23, r1
    1604:	08 95       	ret
    1606:	9b 01       	movw	r18, r22
    1608:	ac 01       	movw	r20, r24
    160a:	0a 2e       	mov	r0, r26
    160c:	06 94       	lsr	r0
    160e:	57 95       	ror	r21
    1610:	47 95       	ror	r20
    1612:	37 95       	ror	r19
    1614:	27 95       	ror	r18
    1616:	ba 95       	dec	r27
    1618:	c9 f7       	brne	.-14     	; 0x160c <__ultoa_invert+0xa2>
    161a:	62 0f       	add	r22, r18
    161c:	73 1f       	adc	r23, r19
    161e:	84 1f       	adc	r24, r20
    1620:	95 1f       	adc	r25, r21
    1622:	a0 1d       	adc	r26, r0
    1624:	08 95       	ret

00001626 <_exit>:
    1626:	f8 94       	cli

00001628 <__stop_program>:
    1628:	ff cf       	rjmp	.-2      	; 0x1628 <__stop_program>
