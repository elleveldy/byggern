
ATmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800200  000013fc  00001490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  008002ca  008002ca  0000155a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000155a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000310  00000000  00000000  000015b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000221d  00000000  00000000  000018c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001157  00000000  00000000  00003ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016a8  00000000  00000000  00004c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000064c  00000000  00000000  000062e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000793  00000000  00000000  00006930  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bdc  00000000  00000000  000070c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  00007c9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	1e c3       	rjmp	.+1596   	; 0x6da <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	88 03       	fmulsu	r16, r16
      e6:	da 03       	fmulsu	r21, r18
      e8:	da 03       	fmulsu	r21, r18
      ea:	da 03       	fmulsu	r21, r18
      ec:	da 03       	fmulsu	r21, r18
      ee:	da 03       	fmulsu	r21, r18
      f0:	da 03       	fmulsu	r21, r18
      f2:	da 03       	fmulsu	r21, r18
      f4:	88 03       	fmulsu	r16, r16
      f6:	da 03       	fmulsu	r21, r18
      f8:	da 03       	fmulsu	r21, r18
      fa:	da 03       	fmulsu	r21, r18
      fc:	da 03       	fmulsu	r21, r18
      fe:	da 03       	fmulsu	r21, r18
     100:	da 03       	fmulsu	r21, r18
     102:	da 03       	fmulsu	r21, r18
     104:	8a 03       	fmulsu	r16, r18
     106:	da 03       	fmulsu	r21, r18
     108:	da 03       	fmulsu	r21, r18
     10a:	da 03       	fmulsu	r21, r18
     10c:	da 03       	fmulsu	r21, r18
     10e:	da 03       	fmulsu	r21, r18
     110:	da 03       	fmulsu	r21, r18
     112:	da 03       	fmulsu	r21, r18
     114:	da 03       	fmulsu	r21, r18
     116:	da 03       	fmulsu	r21, r18
     118:	da 03       	fmulsu	r21, r18
     11a:	da 03       	fmulsu	r21, r18
     11c:	da 03       	fmulsu	r21, r18
     11e:	da 03       	fmulsu	r21, r18
     120:	da 03       	fmulsu	r21, r18
     122:	da 03       	fmulsu	r21, r18
     124:	8a 03       	fmulsu	r16, r18
     126:	da 03       	fmulsu	r21, r18
     128:	da 03       	fmulsu	r21, r18
     12a:	da 03       	fmulsu	r21, r18
     12c:	da 03       	fmulsu	r21, r18
     12e:	da 03       	fmulsu	r21, r18
     130:	da 03       	fmulsu	r21, r18
     132:	da 03       	fmulsu	r21, r18
     134:	da 03       	fmulsu	r21, r18
     136:	da 03       	fmulsu	r21, r18
     138:	da 03       	fmulsu	r21, r18
     13a:	da 03       	fmulsu	r21, r18
     13c:	da 03       	fmulsu	r21, r18
     13e:	da 03       	fmulsu	r21, r18
     140:	da 03       	fmulsu	r21, r18
     142:	da 03       	fmulsu	r21, r18
     144:	d6 03       	fmuls	r21, r22
     146:	da 03       	fmulsu	r21, r18
     148:	da 03       	fmulsu	r21, r18
     14a:	da 03       	fmulsu	r21, r18
     14c:	da 03       	fmulsu	r21, r18
     14e:	da 03       	fmulsu	r21, r18
     150:	da 03       	fmulsu	r21, r18
     152:	da 03       	fmulsu	r21, r18
     154:	b3 03       	fmuls	r19, r19
     156:	da 03       	fmulsu	r21, r18
     158:	da 03       	fmulsu	r21, r18
     15a:	da 03       	fmulsu	r21, r18
     15c:	da 03       	fmulsu	r21, r18
     15e:	da 03       	fmulsu	r21, r18
     160:	da 03       	fmulsu	r21, r18
     162:	da 03       	fmulsu	r21, r18
     164:	da 03       	fmulsu	r21, r18
     166:	da 03       	fmulsu	r21, r18
     168:	da 03       	fmulsu	r21, r18
     16a:	da 03       	fmulsu	r21, r18
     16c:	da 03       	fmulsu	r21, r18
     16e:	da 03       	fmulsu	r21, r18
     170:	da 03       	fmulsu	r21, r18
     172:	da 03       	fmulsu	r21, r18
     174:	a7 03       	fmuls	r18, r23
     176:	da 03       	fmulsu	r21, r18
     178:	da 03       	fmulsu	r21, r18
     17a:	da 03       	fmulsu	r21, r18
     17c:	da 03       	fmulsu	r21, r18
     17e:	da 03       	fmulsu	r21, r18
     180:	da 03       	fmulsu	r21, r18
     182:	da 03       	fmulsu	r21, r18
     184:	c5 03       	fmuls	r20, r21

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	ec ef       	ldi	r30, 0xFC	; 252
     19e:	f3 e1       	ldi	r31, 0x13	; 19
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	aa 3c       	cpi	r26, 0xCA	; 202
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	aa ec       	ldi	r26, 0xCA	; 202
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a6 3e       	cpi	r26, 0xE6	; 230
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	11 d0       	rcall	.+34     	; 0x1e4 <main>
     1c2:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <adc_init>:
#include "adc.h"

void adc_init(){
	
	// Division factor 128
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     1c8:	ea e7       	ldi	r30, 0x7A	; 122
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	87 68       	ori	r24, 0x87	; 135
     1d0:	80 83       	st	Z, r24
	
	/*We find max voltage to be 1.1 V
	Internal 1.1 V Voltage Reference with external capacitor at AREF pin  ->  REFS1 = 1 REFS0 = 0 
	*/  
	ADMUX |= (1 << REFS0);
     1d2:	ec e7       	ldi	r30, 0x7C	; 124
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 64       	ori	r24, 0x40	; 64
     1da:	80 83       	st	Z, r24
	//ADMUX &= ~(1 << REFS1);
	ADMUX |= (1 << REFS1);
     1dc:	80 81       	ld	r24, Z
     1de:	80 68       	ori	r24, 0x80	; 128
     1e0:	80 83       	st	Z, r24
     1e2:	08 95       	ret

000001e4 <main>:
check if header files are included in their respective c files, and if they should be
to avoid "implicit declaration of function*/



int main(void){
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
     1ec:	2b 97       	sbiw	r28, 0x0b	; 11
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	cd bf       	out	0x3d, r28	; 61
		PORTB = 0;
		_delay_ms(500);
	}*/
	
	
	MCUCR |= (1 << SRE);
     1f8:	85 b7       	in	r24, 0x35	; 53
     1fa:	80 68       	ori	r24, 0x80	; 128
     1fc:	85 bf       	out	0x35, r24	; 53
	uart_Init(MYUBRR);
     1fe:	87 e6       	ldi	r24, 0x67	; 103
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	fe d2       	rcall	.+1532   	; 0x800 <uart_Init>
	//
	
	
	can_init(MODE_NORMAL);
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	3a d0       	rcall	.+116    	; 0x27e <can_init>
	pwm_init();
     20a:	a1 d1       	rcall	.+834    	; 0x54e <pwm_init>
	adc_init();
     20c:	dd df       	rcall	.-70     	; 0x1c8 <adc_init>
	
	DDRE |= (1 << 3); //studass PWM bandaid that can be removed? 
     20e:	6b 9a       	sbi	0x0d, 3	; 13
	/*
	int high = adc_read(0x00);
	int low = adc_read(0x00);
	*/

	timer_init();
     210:	29 d2       	rcall	.+1106   	; 0x664 <timer_init>
	
	solenoid_init();
     212:	0f d2       	rcall	.+1054   	; 0x632 <solenoid_init>
	motor_init();
     214:	7e d1       	rcall	.+764    	; 0x512 <motor_init>

		
		
		//can_test_recieve();
		
		printf("x: %d\n",canjoy_joystick_x());
     216:	0f 2e       	mov	r0, r31
     218:	f6 e2       	ldi	r31, 0x26	; 38
     21a:	ef 2e       	mov	r14, r31
     21c:	f2 e0       	ldi	r31, 0x02	; 2
     21e:	ff 2e       	mov	r15, r31
     220:	f0 2d       	mov	r31, r0
			PORTH &= ~(1 << PH3);
			_delay_ms(50);
			printf("shoot\n");
		}
		else{
			PORTH |= (1 << PH3);
     222:	02 e0       	ldi	r16, 0x02	; 2
     224:	11 e0       	ldi	r17, 0x01	; 1
	
	
	
	
	while(1){
		printf("Node2 entering main while(1)\n");
     226:	89 e0       	ldi	r24, 0x09	; 9
     228:	92 e0       	ldi	r25, 0x02	; 2
     22a:	dd d4       	rcall	.+2490   	; 0xbe6 <puts>
		canjoy_recieve();
     22c:	ce 01       	movw	r24, r28
     22e:	01 96       	adiw	r24, 0x01	; 1
     230:	d9 d0       	rcall	.+434    	; 0x3e4 <canjoy_recieve>
		pwm_joystick_pulse(canjoy_joystick_x());
     232:	16 d1       	rcall	.+556    	; 0x460 <canjoy_joystick_x>
     234:	d4 d1       	rcall	.+936    	; 0x5de <pwm_joystick_pulse>
		
		motor_test();
     236:	71 d1       	rcall	.+738    	; 0x51a <motor_test>

		
		
		//can_test_recieve();
		
		printf("x: %d\n",canjoy_joystick_x());
     238:	13 d1       	rcall	.+550    	; 0x460 <canjoy_joystick_x>
     23a:	9f 93       	push	r25
     23c:	8f 93       	push	r24
     23e:	ff 92       	push	r15
     240:	ef 92       	push	r14
     242:	c0 d4       	rcall	.+2432   	; 0xbc4 <printf>
		
		if(canjoy_button_right()){
     244:	11 d1       	rcall	.+546    	; 0x468 <canjoy_button_right>
     246:	0f 90       	pop	r0
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	0f 90       	pop	r0
     24e:	89 2b       	or	r24, r25
     250:	89 f0       	breq	.+34     	; 0x274 <main+0x90>
			PORTH &= ~(1 << PH3);
     252:	f8 01       	movw	r30, r16
     254:	80 81       	ld	r24, Z
     256:	87 7f       	andi	r24, 0xF7	; 247
     258:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     25a:	ff ef       	ldi	r31, 0xFF	; 255
     25c:	20 e7       	ldi	r18, 0x70	; 112
     25e:	82 e0       	ldi	r24, 0x02	; 2
     260:	f1 50       	subi	r31, 0x01	; 1
     262:	20 40       	sbci	r18, 0x00	; 0
     264:	80 40       	sbci	r24, 0x00	; 0
     266:	e1 f7       	brne	.-8      	; 0x260 <main+0x7c>
     268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x86>
     26a:	00 00       	nop
			_delay_ms(50);
			printf("shoot\n");
     26c:	8d e2       	ldi	r24, 0x2D	; 45
     26e:	92 e0       	ldi	r25, 0x02	; 2
     270:	ba d4       	rcall	.+2420   	; 0xbe6 <puts>
     272:	d9 cf       	rjmp	.-78     	; 0x226 <main+0x42>
		}
		else{
			PORTH |= (1 << PH3);
     274:	f8 01       	movw	r30, r16
     276:	80 81       	ld	r24, Z
     278:	88 60       	ori	r24, 0x08	; 8
     27a:	80 83       	st	Z, r24
     27c:	d4 cf       	rjmp	.-88     	; 0x226 <main+0x42>

0000027e <can_init>:
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
}
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	ec 01       	movw	r28, r24
     284:	33 d1       	rcall	.+614    	; 0x4ec <mcp2515_init>
     286:	4f ef       	ldi	r20, 0xFF	; 255
     288:	50 e0       	ldi	r21, 0x00	; 0
     28a:	60 e6       	ldi	r22, 0x60	; 96
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	80 e6       	ldi	r24, 0x60	; 96
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	13 d1       	rcall	.+550    	; 0x4ba <mcp2515_bit_modify>
     294:	4f ef       	ldi	r20, 0xFF	; 255
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	60 e6       	ldi	r22, 0x60	; 96
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	80 e7       	ldi	r24, 0x70	; 112
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0c d1       	rcall	.+536    	; 0x4ba <mcp2515_bit_modify>
     2a2:	ae 01       	movw	r20, r28
     2a4:	60 ee       	ldi	r22, 0xE0	; 224
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	8f e0       	ldi	r24, 0x0F	; 15
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	06 d1       	rcall	.+524    	; 0x4ba <mcp2515_bit_modify>
     2ae:	69 98       	cbi	0x0d, 1	; 13
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <can_poll_interrupt>:
}


uint8_t can_poll_interrupt(){
	
	while(!(PINE & (1 << PE1))){}
     2b6:	61 9b       	sbis	0x0c, 1	; 12
     2b8:	fe cf       	rjmp	.-4      	; 0x2b6 <can_poll_interrupt>
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
     2ba:	8c e2       	ldi	r24, 0x2C	; 44
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	f1 d0       	rcall	.+482    	; 0x4a2 <mcp2515_read>
     2c0:	80 fd       	sbrc	r24, 0
     2c2:	07 c0       	rjmp	.+14     	; 0x2d2 <can_poll_interrupt+0x1c>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
	}
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
     2c4:	8c e2       	ldi	r24, 0x2C	; 44
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	ec d0       	rcall	.+472    	; 0x4a2 <mcp2515_read>
     2ca:	81 ff       	sbrs	r24, 1
     2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <can_poll_interrupt+0x20>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
     2ce:	80 e7       	ldi	r24, 0x70	; 112
     2d0:	08 95       	ret
	
	while(!(PINE & (1 << PE1))){}
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
     2d2:	80 e6       	ldi	r24, 0x60	; 96
     2d4:	08 95       	ret
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
	}
	return -1;
     2d6:	8f ef       	ldi	r24, 0xFF	; 255
}
     2d8:	08 95       	ret

000002da <can_recieve>:
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
}

can_message can_recieve(can_message* msg){
     2da:	7f 92       	push	r7
     2dc:	8f 92       	push	r8
     2de:	9f 92       	push	r9
     2e0:	af 92       	push	r10
     2e2:	bf 92       	push	r11
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
     2f8:	2b 97       	sbiw	r28, 0x0b	; 11
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	0f be       	out	0x3f, r0	; 63
     302:	cd bf       	out	0x3d, r28	; 61
     304:	6c 01       	movw	r12, r24
	can_message m;
	
	uint8_t buffer_select = can_poll_interrupt();
     306:	d7 df       	rcall	.-82     	; 0x2b6 <can_poll_interrupt>
     308:	98 2e       	mov	r9, r24
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
     30a:	08 2f       	mov	r16, r24
     30c:	10 e0       	ldi	r17, 0x00	; 0
     30e:	c8 01       	movw	r24, r16
     310:	01 96       	adiw	r24, 0x01	; 1
     312:	c7 d0       	rcall	.+398    	; 0x4a2 <mcp2515_read>
     314:	7c 01       	movw	r14, r24
     316:	c8 01       	movw	r24, r16
     318:	02 96       	adiw	r24, 0x02	; 2
     31a:	c3 d0       	rcall	.+390    	; 0x4a2 <mcp2515_read>
     31c:	95 95       	asr	r25
     31e:	87 95       	ror	r24
     320:	95 95       	asr	r25
     322:	87 95       	ror	r24
     324:	95 95       	asr	r25
     326:	87 95       	ror	r24
     328:	95 95       	asr	r25
     32a:	87 95       	ror	r24
     32c:	95 95       	asr	r25
     32e:	87 95       	ror	r24
     330:	ee 0c       	add	r14, r14
     332:	ff 1c       	adc	r15, r15
     334:	ee 0c       	add	r14, r14
     336:	ff 1c       	adc	r15, r15
     338:	ee 0c       	add	r14, r14
     33a:	ff 1c       	adc	r15, r15
     33c:	5c 01       	movw	r10, r24
     33e:	ae 28       	or	r10, r14
     340:	bf 28       	or	r11, r15
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
     342:	c8 01       	movw	r24, r16
     344:	05 96       	adiw	r24, 0x05	; 5
     346:	ad d0       	rcall	.+346    	; 0x4a2 <mcp2515_read>
     348:	8f 70       	andi	r24, 0x0F	; 15
     34a:	78 2e       	mov	r7, r24
	
	for(uint8_t i = 0; i < m.length; i++){
     34c:	a9 f0       	breq	.+42     	; 0x378 <can_recieve+0x9e>
     34e:	8e 01       	movw	r16, r28
     350:	0c 5f       	subi	r16, 0xFC	; 252
     352:	1f 4f       	sbci	r17, 0xFF	; 255
     354:	81 2c       	mov	r8, r1
     356:	ce 01       	movw	r24, r28
     358:	80 95       	com	r24
     35a:	90 95       	com	r25
     35c:	03 96       	adiw	r24, 0x03	; 3
     35e:	7c 01       	movw	r14, r24
     360:	e9 0c       	add	r14, r9
     362:	f1 1c       	adc	r15, r1
		m.data[i] = mcp2515_read(buffer_select + MCP2515_RXB_OFFSET + i);// + i, msg->data[i]);
     364:	c7 01       	movw	r24, r14
     366:	80 0f       	add	r24, r16
     368:	91 1f       	adc	r25, r17
     36a:	9b d0       	rcall	.+310    	; 0x4a2 <mcp2515_read>
     36c:	f8 01       	movw	r30, r16
     36e:	81 93       	st	Z+, r24
     370:	8f 01       	movw	r16, r30
	uint8_t buffer_select = can_poll_interrupt();
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
	
	for(uint8_t i = 0; i < m.length; i++){
     372:	83 94       	inc	r8
     374:	87 10       	cpse	r8, r7
     376:	f6 cf       	rjmp	.-20     	; 0x364 <can_recieve+0x8a>
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	
	switch(buffer_select){
     378:	f0 e6       	ldi	r31, 0x60	; 96
     37a:	9f 16       	cp	r9, r31
     37c:	21 f0       	breq	.+8      	; 0x386 <can_recieve+0xac>
     37e:	80 e7       	ldi	r24, 0x70	; 112
     380:	98 16       	cp	r9, r24
     382:	49 f0       	breq	.+18     	; 0x396 <can_recieve+0xbc>
     384:	0f c0       	rjmp	.+30     	; 0x3a4 <can_recieve+0xca>
		case MCP_RXB0CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	8c e2       	ldi	r24, 0x2C	; 44
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	93 d0       	rcall	.+294    	; 0x4ba <mcp2515_bit_modify>
		break;
     394:	07 c0       	rjmp	.+14     	; 0x3a4 <can_recieve+0xca>
		case MCP_RXB1CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	62 e0       	ldi	r22, 0x02	; 2
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	8c e2       	ldi	r24, 0x2C	; 44
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	8b d0       	rcall	.+278    	; 0x4ba <mcp2515_bit_modify>
		break;
	}
	
	return m;
     3a4:	ba 82       	std	Y+2, r11	; 0x02
     3a6:	a9 82       	std	Y+1, r10	; 0x01
     3a8:	7b 82       	std	Y+3, r7	; 0x03
     3aa:	8b e0       	ldi	r24, 0x0B	; 11
     3ac:	fe 01       	movw	r30, r28
     3ae:	31 96       	adiw	r30, 0x01	; 1
     3b0:	d6 01       	movw	r26, r12
     3b2:	01 90       	ld	r0, Z+
     3b4:	0d 92       	st	X+, r0
     3b6:	8a 95       	dec	r24
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <can_recieve+0xd8>
}
     3ba:	c6 01       	movw	r24, r12
     3bc:	2b 96       	adiw	r28, 0x0b	; 11
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	cd bf       	out	0x3d, r28	; 61
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	ff 90       	pop	r15
     3d2:	ef 90       	pop	r14
     3d4:	df 90       	pop	r13
     3d6:	cf 90       	pop	r12
     3d8:	bf 90       	pop	r11
     3da:	af 90       	pop	r10
     3dc:	9f 90       	pop	r9
     3de:	8f 90       	pop	r8
     3e0:	7f 90       	pop	r7
     3e2:	08 95       	ret

000003e4 <canjoy_recieve>:
int canjoy_slider_right(){
	return canjoy_msg.data[4];
}
int canjoy_button_left(){
	return canjoy_msg.data[5];
}
     3e4:	ef 92       	push	r14
     3e6:	ff 92       	push	r15
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	ec 01       	movw	r28, r24
     3f2:	73 df       	rcall	.-282    	; 0x2da <can_recieve>
     3f4:	ea 80       	ldd	r14, Y+2	; 0x02
     3f6:	fb 80       	ldd	r15, Y+3	; 0x03
     3f8:	0c 81       	ldd	r16, Y+4	; 0x04
     3fa:	1d 81       	ldd	r17, Y+5	; 0x05
     3fc:	7e 81       	ldd	r23, Y+6	; 0x06
     3fe:	6f 81       	ldd	r22, Y+7	; 0x07
     400:	58 85       	ldd	r21, Y+8	; 0x08
     402:	49 85       	ldd	r20, Y+9	; 0x09
     404:	28 81       	ld	r18, Y
     406:	39 81       	ldd	r19, Y+1	; 0x01
     408:	80 91 06 02 	lds	r24, 0x0206
     40c:	90 91 07 02 	lds	r25, 0x0207
     410:	28 17       	cp	r18, r24
     412:	39 07       	cpc	r19, r25
     414:	89 f4       	brne	.+34     	; 0x438 <canjoy_recieve+0x54>
     416:	8b e0       	ldi	r24, 0x0B	; 11
     418:	fe 01       	movw	r30, r28
     41a:	a1 ed       	ldi	r26, 0xD1	; 209
     41c:	b2 e0       	ldi	r27, 0x02	; 2
     41e:	01 90       	ld	r0, Z+
     420:	0d 92       	st	X+, r0
     422:	8a 95       	dec	r24
     424:	e1 f7       	brne	.-8      	; 0x41e <canjoy_recieve+0x3a>
     426:	ea 82       	std	Y+2, r14	; 0x02
     428:	fb 82       	std	Y+3, r15	; 0x03
     42a:	0c 83       	std	Y+4, r16	; 0x04
     42c:	1d 83       	std	Y+5, r17	; 0x05
     42e:	7e 83       	std	Y+6, r23	; 0x06
     430:	6f 83       	std	Y+7, r22	; 0x07
     432:	58 87       	std	Y+8, r21	; 0x08
     434:	49 87       	std	Y+9, r20	; 0x09
     436:	0c c0       	rjmp	.+24     	; 0x450 <canjoy_recieve+0x6c>
     438:	83 e3       	ldi	r24, 0x33	; 51
     43a:	92 e0       	ldi	r25, 0x02	; 2
     43c:	d4 d3       	rcall	.+1960   	; 0xbe6 <puts>
     43e:	87 e0       	ldi	r24, 0x07	; 7
     440:	8a 83       	std	Y+2, r24	; 0x02
     442:	8b 83       	std	Y+3, r24	; 0x03
     444:	1c 82       	std	Y+4, r1	; 0x04
     446:	1d 82       	std	Y+5, r1	; 0x05
     448:	1e 82       	std	Y+6, r1	; 0x06
     44a:	1f 82       	std	Y+7, r1	; 0x07
     44c:	18 86       	std	Y+8, r1	; 0x08
     44e:	19 86       	std	Y+9, r1	; 0x09
     450:	ce 01       	movw	r24, r28
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	1f 91       	pop	r17
     458:	0f 91       	pop	r16
     45a:	ff 90       	pop	r15
     45c:	ef 90       	pop	r14
     45e:	08 95       	ret

00000460 <canjoy_joystick_x>:
     460:	80 91 d4 02 	lds	r24, 0x02D4
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	08 95       	ret

00000468 <canjoy_button_right>:
int canjoy_button_right(){
	return canjoy_msg.data[6];
     468:	80 91 da 02 	lds	r24, 0x02DA
}
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	08 95       	ret

00000470 <max520_send>:
	TWI_Master_Initialise();
	sei();
}


void max520_send(uint8_t channel, uint8_t val){
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	00 d0       	rcall	.+0      	; 0x478 <max520_send+0x8>
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
     47c:	16 2f       	mov	r17, r22
	printf("In max520_send\n");
     47e:	8c e3       	ldi	r24, 0x3C	; 60
     480:	92 e0       	ldi	r25, 0x02	; 2
     482:	b1 d3       	rcall	.+1890   	; 0xbe6 <puts>
	uint8_t message[3] = {MAX520_TWI_ADDR, 0, val};
     484:	80 e5       	ldi	r24, 0x50	; 80
     486:	89 83       	std	Y+1, r24	; 0x01
     488:	1a 82       	std	Y+2, r1	; 0x02
     48a:	1b 83       	std	Y+3, r17	; 0x03
	
	TWI_Start_Transceiver_With_Data(message, 3);
     48c:	63 e0       	ldi	r22, 0x03	; 3
     48e:	ce 01       	movw	r24, r28
     490:	01 96       	adiw	r24, 0x01	; 1
     492:	01 d1       	rcall	.+514    	; 0x696 <TWI_Start_Transceiver_With_Data>
	
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	1f 91       	pop	r17
     4a0:	08 95       	ret

000004a2 <mcp2515_read>:
}

void mcp2515_request_to_send(int buffer_select){
	PORTB &= ~(1 << MCP2515_CS);
	spi_write(buffer_select);
	PORTB |= (1 << MCP2515_CS);
     4a2:	cf 93       	push	r28
     4a4:	c8 2f       	mov	r28, r24
     4a6:	28 98       	cbi	0x05, 0	; 5
     4a8:	83 e0       	ldi	r24, 0x03	; 3
     4aa:	d5 d0       	rcall	.+426    	; 0x656 <spi_write>
     4ac:	8c 2f       	mov	r24, r28
     4ae:	d3 d0       	rcall	.+422    	; 0x656 <spi_write>
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	d1 d0       	rcall	.+418    	; 0x656 <spi_write>
     4b4:	28 9a       	sbi	0x05, 0	; 5
     4b6:	cf 91       	pop	r28
     4b8:	08 95       	ret

000004ba <mcp2515_bit_modify>:
}

void mcp2515_bit_modify(int address, int mask, int data){
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	18 2f       	mov	r17, r24
     4c2:	d6 2f       	mov	r29, r22
     4c4:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS);
     4c6:	28 98       	cbi	0x05, 0	; 5
	
	spi_write(MCP_BITMOD);
     4c8:	85 e0       	ldi	r24, 0x05	; 5
     4ca:	c5 d0       	rcall	.+394    	; 0x656 <spi_write>
	spi_write(address);
     4cc:	81 2f       	mov	r24, r17
     4ce:	c3 d0       	rcall	.+390    	; 0x656 <spi_write>
	spi_write(mask);
     4d0:	8d 2f       	mov	r24, r29
     4d2:	c1 d0       	rcall	.+386    	; 0x656 <spi_write>
	spi_write(data);
     4d4:	8c 2f       	mov	r24, r28
     4d6:	bf d0       	rcall	.+382    	; 0x656 <spi_write>

	PORTB |= (1 << MCP2515_CS);
     4d8:	28 9a       	sbi	0x05, 0	; 5
	
}
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	08 95       	ret

000004e2 <mcp2515_reset>:

void mcp2515_reset(){
	PORTB &= ~(1 << MCP2515_CS);
     4e2:	28 98       	cbi	0x05, 0	; 5
	spi_write(MCP_RESET);
     4e4:	80 ec       	ldi	r24, 0xC0	; 192
     4e6:	b7 d0       	rcall	.+366    	; 0x656 <spi_write>
	PORTB |= (1 << MCP2515_CS);
     4e8:	28 9a       	sbi	0x05, 0	; 5
     4ea:	08 95       	ret

000004ec <mcp2515_init>:
#include "SPI.h"
#include "mcp2515_define.h"


int mcp2515_init(){
	spi_init();
     4ec:	ad d0       	rcall	.+346    	; 0x648 <spi_init>
	mcp2515_reset();
     4ee:	f9 df       	rcall	.-14     	; 0x4e2 <mcp2515_reset>
	
	uint8_t val = mcp2515_read(MCP_CANSTAT);
     4f0:	8e e0       	ldi	r24, 0x0E	; 14
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	d6 df       	rcall	.-84     	; 0x4a2 <mcp2515_read>
	if((val & MODE_MASK) != MODE_CONFIG){
     4f6:	80 7e       	andi	r24, 0xE0	; 224
     4f8:	99 27       	eor	r25, r25
     4fa:	80 38       	cpi	r24, 0x80	; 128
     4fc:	91 05       	cpc	r25, r1
     4fe:	31 f0       	breq	.+12     	; 0x50c <mcp2515_init+0x20>
		printf("ERROR: MCP2515 is NOT in config mode after reset!\n");
     500:	8b e4       	ldi	r24, 0x4B	; 75
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	70 d3       	rcall	.+1760   	; 0xbe6 <puts>
		return 1;
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	08 95       	ret
	}
	return 0;
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
}
     510:	08 95       	ret

00000512 <motor_init>:
		MOTOR_PORT |= (1 << 3/*MOTOR_DIR*/);		
	}
}

void motor_speed(uint8_t speed){
	max520_send(speed);
     512:	81 b3       	in	r24, 0x11	; 17
     514:	88 6f       	ori	r24, 0xF8	; 248
     516:	81 bb       	out	0x11, r24	; 17
     518:	08 95       	ret

0000051a <motor_test>:
}

void motor_test(){
	printf("Entering motor_test\n");
     51a:	8d e7       	ldi	r24, 0x7D	; 125
     51c:	92 e0       	ldi	r25, 0x02	; 2
     51e:	63 d3       	rcall	.+1734   	; 0xbe6 <puts>
		MOTOR_PORT |= (1 << 3/*MOTOR_DIR*/);		
	}
}

void motor_speed(uint8_t speed){
	max520_send(speed);
     520:	84 e6       	ldi	r24, 0x64	; 100
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	a5 df       	rcall	.-182    	; 0x470 <max520_send>
     526:	2f e9       	ldi	r18, 0x9F	; 159
     528:	86 e8       	ldi	r24, 0x86	; 134
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	21 50       	subi	r18, 0x01	; 1
     52e:	80 40       	sbci	r24, 0x00	; 0
     530:	90 40       	sbci	r25, 0x00	; 0
     532:	e1 f7       	brne	.-8      	; 0x52c <motor_test+0x12>
     534:	00 c0       	rjmp	.+0      	; 0x536 <motor_test+0x1c>
     536:	00 00       	nop
}*/

void motor_direction(uint8_t direction){
	
	if(direction == 1){
		MOTOR_PORT |= (1 << 3/*MOTOR_DIR*/);
     538:	8b 9a       	sbi	0x11, 3	; 17
     53a:	2f e9       	ldi	r18, 0x9F	; 159
     53c:	86 e8       	ldi	r24, 0x86	; 134
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	21 50       	subi	r18, 0x01	; 1
     542:	80 40       	sbci	r24, 0x00	; 0
     544:	90 40       	sbci	r25, 0x00	; 0
     546:	e1 f7       	brne	.-8      	; 0x540 <motor_test+0x26>
     548:	00 c0       	rjmp	.+0      	; 0x54a <motor_test+0x30>
     54a:	00 00       	nop
     54c:	08 95       	ret

0000054e <pwm_init>:

void pwm_set_value(uint16_t val){
	OCR3A = val;
}

void pwm_set_servo(int16_t val){
     54e:	6b 9a       	sbi	0x0d, 3	; 13
     550:	73 9a       	sbi	0x0e, 3	; 14
     552:	a0 e9       	ldi	r26, 0x90	; 144
     554:	b0 e0       	ldi	r27, 0x00	; 0
     556:	1c 92       	st	X, r1
     558:	e1 e9       	ldi	r30, 0x91	; 145
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	10 82       	st	Z, r1
     55e:	10 92 92 00 	sts	0x0092, r1
     562:	8c 91       	ld	r24, X
     564:	8e 7f       	andi	r24, 0xFE	; 254
     566:	8c 93       	st	X, r24
     568:	8c 91       	ld	r24, X
     56a:	82 60       	ori	r24, 0x02	; 2
     56c:	8c 93       	st	X, r24
     56e:	80 81       	ld	r24, Z
     570:	88 60       	ori	r24, 0x08	; 8
     572:	80 83       	st	Z, r24
     574:	80 81       	ld	r24, Z
     576:	80 61       	ori	r24, 0x10	; 16
     578:	80 83       	st	Z, r24
     57a:	8c 91       	ld	r24, X
     57c:	8c 93       	st	X, r24
     57e:	8c 91       	ld	r24, X
     580:	80 68       	ori	r24, 0x80	; 128
     582:	8c 93       	st	X, r24
     584:	80 81       	ld	r24, Z
     586:	83 60       	ori	r24, 0x03	; 3
     588:	80 83       	st	Z, r24
     58a:	80 81       	ld	r24, Z
     58c:	8b 7f       	andi	r24, 0xFB	; 251
     58e:	80 83       	st	Z, r24
     590:	88 e8       	ldi	r24, 0x88	; 136
     592:	93 e1       	ldi	r25, 0x13	; 19
     594:	90 93 97 00 	sts	0x0097, r25
     598:	80 93 96 00 	sts	0x0096, r24
     59c:	87 e7       	ldi	r24, 0x77	; 119
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	90 93 99 00 	sts	0x0099, r25
     5a4:	80 93 98 00 	sts	0x0098, r24
     5a8:	08 95       	ret

000005aa <pwm_set_pulse>:
	//delete and remove from header
}

void pwm_set_pulse(int16_t val){
	
	if(val >= P_MAX)
     5aa:	8d 30       	cpi	r24, 0x0D	; 13
     5ac:	22 e0       	ldi	r18, 0x02	; 2
     5ae:	92 07       	cpc	r25, r18
     5b0:	3c f0       	brlt	.+14     	; 0x5c0 <pwm_set_pulse+0x16>
	//printf("PWM init done:\n\tTCCRA: %02X\n\tTCCRB: %02X\n\tICR: %02X\n\tOCR: %02X\n", TCCR3A, TCCR3B, ICR3, OCR3A);
}


void pwm_set_value(uint16_t val){
	OCR3A = val;
     5b2:	8d e0       	ldi	r24, 0x0D	; 13
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	90 93 99 00 	sts	0x0099, r25
     5ba:	80 93 98 00 	sts	0x0098, r24
     5be:	08 95       	ret

void pwm_set_pulse(int16_t val){
	
	if(val >= P_MAX)
		pwm_set_value(P_MAX);
	else if(val < P_MIN)
     5c0:	81 3e       	cpi	r24, 0xE1	; 225
     5c2:	91 05       	cpc	r25, r1
     5c4:	3c f4       	brge	.+14     	; 0x5d4 <pwm_set_pulse+0x2a>
	//printf("PWM init done:\n\tTCCRA: %02X\n\tTCCRB: %02X\n\tICR: %02X\n\tOCR: %02X\n", TCCR3A, TCCR3B, ICR3, OCR3A);
}


void pwm_set_value(uint16_t val){
	OCR3A = val;
     5c6:	81 ee       	ldi	r24, 0xE1	; 225
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	90 93 99 00 	sts	0x0099, r25
     5ce:	80 93 98 00 	sts	0x0098, r24
     5d2:	08 95       	ret
     5d4:	90 93 99 00 	sts	0x0099, r25
     5d8:	80 93 98 00 	sts	0x0098, r24
     5dc:	08 95       	ret

000005de <pwm_joystick_pulse>:


//uses joystick_x_value() which returns between 0 and 255
void pwm_joystick_pulse(int16_t val){
	
	if((val > 255) || (val < 0)){
     5de:	8f 3f       	cpi	r24, 0xFF	; 255
     5e0:	91 05       	cpc	r25, r1
     5e2:	99 f0       	breq	.+38     	; 0x60a <pwm_joystick_pulse+0x2c>
     5e4:	90 f0       	brcs	.+36     	; 0x60a <pwm_joystick_pulse+0x2c>
		printf("ERROR: pwm_joystick_pulse input val = %d out of range!\n", val);
     5e6:	9f 93       	push	r25
     5e8:	8f 93       	push	r24
     5ea:	81 e9       	ldi	r24, 0x91	; 145
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	9f 93       	push	r25
     5f0:	8f 93       	push	r24
     5f2:	e8 d2       	rcall	.+1488   	; 0xbc4 <printf>
	//printf("PWM init done:\n\tTCCRA: %02X\n\tTCCRB: %02X\n\tICR: %02X\n\tOCR: %02X\n", TCCR3A, TCCR3B, ICR3, OCR3A);
}


void pwm_set_value(uint16_t val){
	OCR3A = val;
     5f4:	87 e7       	ldi	r24, 0x77	; 119
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	90 93 99 00 	sts	0x0099, r25
     5fc:	80 93 98 00 	sts	0x0098, r24
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	08 95       	ret
		pwm_set_value(P_MID);
		return;
	}
	else{
		
		uint16_t pulse_width = (val * (300/255.0)) + P_MIN;
     60a:	bc 01       	movw	r22, r24
     60c:	88 27       	eor	r24, r24
     60e:	77 fd       	sbrc	r23, 7
     610:	80 95       	com	r24
     612:	98 2f       	mov	r25, r24
     614:	98 d1       	rcall	.+816    	; 0x946 <__floatsisf>
     616:	27 e9       	ldi	r18, 0x97	; 151
     618:	36 e9       	ldi	r19, 0x96	; 150
     61a:	46 e9       	ldi	r20, 0x96	; 150
     61c:	5f e3       	ldi	r21, 0x3F	; 63
     61e:	1f d2       	rcall	.+1086   	; 0xa5e <__mulsf3>
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	41 e6       	ldi	r20, 0x61	; 97
     626:	53 e4       	ldi	r21, 0x43	; 67
     628:	fc d0       	rcall	.+504    	; 0x822 <__addsf3>
     62a:	5f d1       	rcall	.+702    	; 0x8ea <__fixunssfsi>
		
		//printf("\nPulse converted from %d to %d\t P_RESOLUTION = %d\n", val, pulse_width, P_RESOLUTION);
		pwm_set_pulse(pulse_width);
     62c:	cb 01       	movw	r24, r22
     62e:	bd cf       	rjmp	.-134    	; 0x5aa <pwm_set_pulse>
     630:	08 95       	ret

00000632 <solenoid_init>:
#include <avr/io.h>
#include <avr/delay.h>

void solenoid_init(){
	DDRH |= (1<<PH3);
     632:	e1 e0       	ldi	r30, 0x01	; 1
     634:	f1 e0       	ldi	r31, 0x01	; 1
     636:	80 81       	ld	r24, Z
     638:	88 60       	ori	r24, 0x08	; 8
     63a:	80 83       	st	Z, r24
	PORTH |= (1<<PH3);
     63c:	e2 e0       	ldi	r30, 0x02	; 2
     63e:	f1 e0       	ldi	r31, 0x01	; 1
     640:	80 81       	ld	r24, Z
     642:	88 60       	ori	r24, 0x08	; 8
     644:	80 83       	st	Z, r24
     646:	08 95       	ret

00000648 <spi_init>:
#include "SPI.h"
#include <avr/io.h>

void spi_init(){
			//SI out		SS out		SCK out
	DDRB |= ( 1 << PB2) | (1 << PB0) | (1 << PB1);
     648:	84 b1       	in	r24, 0x04	; 4
     64a:	87 60       	ori	r24, 0x07	; 7
     64c:	84 b9       	out	0x04, r24	; 4
	//SO in
	DDRB &= ~(1 << PB3);
     64e:	23 98       	cbi	0x04, 3	; 4
	
	//								 frequency / 16
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     650:	81 e5       	ldi	r24, 0x51	; 81
     652:	8c bd       	out	0x2c, r24	; 44
     654:	08 95       	ret

00000656 <spi_write>:

//both read and write
int spi_write(char data){
	//SPDR = data;
	//while(!(SPSR & (1<<SPIF)));
	SPDR = data;
     656:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
     658:	0d b4       	in	r0, 0x2d	; 45
     65a:	07 fe       	sbrs	r0, 7
     65c:	fd cf       	rjmp	.-6      	; 0x658 <spi_write+0x2>
	return SPDR;
     65e:	8e b5       	in	r24, 0x2e	; 46
}
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	08 95       	ret

00000664 <timer_init>:

int time_tick = 0;
int time_tick_max = 0;
void timer_init() {
	
	TCCR4A = 0;
     664:	a0 ea       	ldi	r26, 0xA0	; 160
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	1c 92       	st	X, r1
	TCCR4B = 0;
     66a:	e1 ea       	ldi	r30, 0xA1	; 161
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	10 82       	st	Z, r1
	
	//CS4{2:0}   = 101  prescaler set to 1024
	TCCR4B |=  (1<<CS42) | (1<<CS40);
     670:	80 81       	ld	r24, Z
     672:	85 60       	ori	r24, 0x05	; 5
     674:	80 83       	st	Z, r24
	TCCR4B &= ~(1<<CS41);
     676:	80 81       	ld	r24, Z
     678:	8d 7f       	andi	r24, 0xFD	; 253
     67a:	80 83       	st	Z, r24
	
	//0100 -> Mode CTC -> TOP = OCRnA
	TCCR4A &= ~(1<<WGM40);
     67c:	8c 91       	ld	r24, X
     67e:	8e 7f       	andi	r24, 0xFE	; 254
     680:	8c 93       	st	X, r24
	TCCR4A &= ~(1<<WGM41);
     682:	8c 91       	ld	r24, X
     684:	8d 7f       	andi	r24, 0xFD	; 253
     686:	8c 93       	st	X, r24
	TCCR4B |=  (1<<WGM42);
     688:	80 81       	ld	r24, Z
     68a:	88 60       	ori	r24, 0x08	; 8
     68c:	80 83       	st	Z, r24
	TCCR4B &= ~(1<<WGM43);
     68e:	80 81       	ld	r24, Z
     690:	8f 7e       	andi	r24, 0xEF	; 239
     692:	80 83       	st	Z, r24
     694:	08 95       	ret

00000696 <TWI_Start_Transceiver_With_Data>:
		{
			msg[ i ] = TWI_buf[ i ];
		}
	}
	return( TWI_statusReg.lastTransOK );
}
     696:	ec eb       	ldi	r30, 0xBC	; 188
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	20 81       	ld	r18, Z
     69c:	20 fd       	sbrc	r18, 0
     69e:	fd cf       	rjmp	.-6      	; 0x69a <TWI_Start_Transceiver_With_Data+0x4>
     6a0:	60 93 cc 02 	sts	0x02CC, r22
     6a4:	fc 01       	movw	r30, r24
     6a6:	20 81       	ld	r18, Z
     6a8:	20 93 cd 02 	sts	0x02CD, r18
     6ac:	20 fd       	sbrc	r18, 0
     6ae:	0c c0       	rjmp	.+24     	; 0x6c8 <TWI_Start_Transceiver_With_Data+0x32>
     6b0:	62 30       	cpi	r22, 0x02	; 2
     6b2:	50 f0       	brcs	.+20     	; 0x6c8 <TWI_Start_Transceiver_With_Data+0x32>
     6b4:	dc 01       	movw	r26, r24
     6b6:	11 96       	adiw	r26, 0x01	; 1
     6b8:	ee ec       	ldi	r30, 0xCE	; 206
     6ba:	f2 e0       	ldi	r31, 0x02	; 2
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	9d 91       	ld	r25, X+
     6c0:	91 93       	st	Z+, r25
     6c2:	8f 5f       	subi	r24, 0xFF	; 255
     6c4:	86 13       	cpse	r24, r22
     6c6:	fb cf       	rjmp	.-10     	; 0x6be <TWI_Start_Transceiver_With_Data+0x28>
     6c8:	10 92 cb 02 	sts	0x02CB, r1
     6cc:	88 ef       	ldi	r24, 0xF8	; 248
     6ce:	80 93 08 02 	sts	0x0208, r24
     6d2:	85 ea       	ldi	r24, 0xA5	; 165
     6d4:	80 93 bc 00 	sts	0x00BC, r24
     6d8:	08 95       	ret

000006da <__vector_39>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
     6da:	1f 92       	push	r1
     6dc:	0f 92       	push	r0
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1
     6e4:	0b b6       	in	r0, 0x3b	; 59
     6e6:	0f 92       	push	r0
     6e8:	2f 93       	push	r18
     6ea:	3f 93       	push	r19
     6ec:	8f 93       	push	r24
     6ee:	9f 93       	push	r25
     6f0:	af 93       	push	r26
     6f2:	bf 93       	push	r27
     6f4:	ef 93       	push	r30
     6f6:	ff 93       	push	r31
	static unsigned char TWI_bufPtr;
	
	switch (TWSR)
     6f8:	80 91 b9 00 	lds	r24, 0x00B9
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	fc 01       	movw	r30, r24
     700:	38 97       	sbiw	r30, 0x08	; 8
     702:	e1 35       	cpi	r30, 0x51	; 81
     704:	f1 05       	cpc	r31, r1
     706:	08 f0       	brcs	.+2      	; 0x70a <__vector_39+0x30>
     708:	55 c0       	rjmp	.+170    	; 0x7b4 <__vector_39+0xda>
     70a:	ee 58       	subi	r30, 0x8E	; 142
     70c:	ff 4f       	sbci	r31, 0xFF	; 255
     70e:	0a c2       	rjmp	.+1044   	; 0xb24 <__tablejump2__>
	{
		case TWI_START:             // START has been transmitted
		case TWI_REP_START:         // Repeated START has been transmitted
		TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
     710:	10 92 ca 02 	sts	0x02CA, r1
		case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
		case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
		if (TWI_bufPtr < TWI_msgSize)
     714:	e0 91 ca 02 	lds	r30, 0x02CA
     718:	80 91 cc 02 	lds	r24, 0x02CC
     71c:	e8 17       	cp	r30, r24
     71e:	70 f4       	brcc	.+28     	; 0x73c <__vector_39+0x62>
		{
			TWDR = TWI_buf[TWI_bufPtr++];
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	8e 0f       	add	r24, r30
     724:	80 93 ca 02 	sts	0x02CA, r24
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	e3 53       	subi	r30, 0x33	; 51
     72c:	fd 4f       	sbci	r31, 0xFD	; 253
     72e:	80 81       	ld	r24, Z
     730:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     734:	85 e8       	ldi	r24, 0x85	; 133
     736:	80 93 bc 00 	sts	0x00BC, r24
     73a:	43 c0       	rjmp	.+134    	; 0x7c2 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
			(0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
			TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     73c:	80 91 cb 02 	lds	r24, 0x02CB
     740:	81 60       	ori	r24, 0x01	; 1
     742:	80 93 cb 02 	sts	0x02CB, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     746:	84 e9       	ldi	r24, 0x94	; 148
     748:	80 93 bc 00 	sts	0x00BC, r24
     74c:	3a c0       	rjmp	.+116    	; 0x7c2 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
		TWI_buf[TWI_bufPtr++] = TWDR;
     74e:	e0 91 ca 02 	lds	r30, 0x02CA
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	8e 0f       	add	r24, r30
     756:	80 93 ca 02 	sts	0x02CA, r24
     75a:	80 91 bb 00 	lds	r24, 0x00BB
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	e3 53       	subi	r30, 0x33	; 51
     762:	fd 4f       	sbci	r31, 0xFD	; 253
     764:	80 83       	st	Z, r24
		case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
		if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
     766:	20 91 ca 02 	lds	r18, 0x02CA
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	80 91 cc 02 	lds	r24, 0x02CC
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	28 17       	cp	r18, r24
     776:	39 07       	cpc	r19, r25
     778:	24 f4       	brge	.+8      	; 0x782 <__vector_39+0xa8>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     77a:	85 ec       	ldi	r24, 0xC5	; 197
     77c:	80 93 bc 00 	sts	0x00BC, r24
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
			(0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     782:	85 e8       	ldi	r24, 0x85	; 133
     784:	80 93 bc 00 	sts	0x00BC, r24
     788:	1c c0       	rjmp	.+56     	; 0x7c2 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
		TWI_buf[TWI_bufPtr] = TWDR;
     78a:	80 91 bb 00 	lds	r24, 0x00BB
     78e:	e0 91 ca 02 	lds	r30, 0x02CA
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	e3 53       	subi	r30, 0x33	; 51
     796:	fd 4f       	sbci	r31, 0xFD	; 253
     798:	80 83       	st	Z, r24
		TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     79a:	80 91 cb 02 	lds	r24, 0x02CB
     79e:	81 60       	ori	r24, 0x01	; 1
     7a0:	80 93 cb 02 	sts	0x02CB, r24
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     7a4:	84 e9       	ldi	r24, 0x94	; 148
     7a6:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
		(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
		(0<<TWWC);                                 //
		break;
     7aa:	0b c0       	rjmp	.+22     	; 0x7c2 <__vector_39+0xe8>
		case TWI_ARB_LOST:          // Arbitration lost
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     7ac:	85 ea       	ldi	r24, 0xA5	; 165
     7ae:	80 93 bc 00 	sts	0x00BC, r24
		(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
		(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
		(0<<TWWC);                                 //
		break;
     7b2:	07 c0       	rjmp	.+14     	; 0x7c2 <__vector_39+0xe8>
		case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received
		case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
		//    case TWI_NO_STATE              // No relevant state information available; TWINT = ?0?
		case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
		default:
		TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     7b4:	80 91 b9 00 	lds	r24, 0x00B9
     7b8:	80 93 08 02 	sts	0x0208, r24
		// Reset TWI Interface
		TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     7bc:	84 e0       	ldi	r24, 0x04	; 4
     7be:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
		(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
		(0<<TWWC);                                 //
	}
     7c2:	ff 91       	pop	r31
     7c4:	ef 91       	pop	r30
     7c6:	bf 91       	pop	r27
     7c8:	af 91       	pop	r26
     7ca:	9f 91       	pop	r25
     7cc:	8f 91       	pop	r24
     7ce:	3f 91       	pop	r19
     7d0:	2f 91       	pop	r18
     7d2:	0f 90       	pop	r0
     7d4:	0b be       	out	0x3b, r0	; 59
     7d6:	0f 90       	pop	r0
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	0f 90       	pop	r0
     7dc:	1f 90       	pop	r1
     7de:	18 95       	reti

000007e0 <uart_Transmit>:
}

void uart_Transmit( unsigned char data ){
	
	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     7e0:	e0 ec       	ldi	r30, 0xC0	; 192
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	90 81       	ld	r25, Z
     7e6:	95 ff       	sbrs	r25, 5
     7e8:	fd cf       	rjmp	.-6      	; 0x7e4 <uart_Transmit+0x4>
	
	//Put data into buffer, sends the data
	UDR0 = data;
     7ea:	80 93 c6 00 	sts	0x00C6, r24
     7ee:	08 95       	ret

000007f0 <uart_Receive>:

unsigned char uart_Receive(void){
	
	//Wait for data to be received
	
	while( !(UCSR0A & (1<<RXC0)) );
     7f0:	e0 ec       	ldi	r30, 0xC0	; 192
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	80 81       	ld	r24, Z
     7f6:	88 23       	and	r24, r24
     7f8:	ec f7       	brge	.-6      	; 0x7f4 <uart_Receive+0x4>
	
	//Get and return received data from buffer
	
	return UDR0;
     7fa:	80 91 c6 00 	lds	r24, 0x00C6
}
     7fe:	08 95       	ret

00000800 <uart_Init>:
#include "uart.h"

void uart_Init(unsigned int ubrr){
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     800:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     804:	80 93 c4 00 	sts	0x00C4, r24
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     808:	88 e1       	ldi	r24, 0x18	; 24
     80a:	80 93 c1 00 	sts	0x00C1, r24
	
	//Set frame format: 8data, 1stop bit
	UCSR0C = (1 << 7)|(3<<UCSZ00);//here, 7 replaces URSEL0 from ATmega162 project
     80e:	86 e8       	ldi	r24, 0x86	; 134
     810:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(uart_Transmit, uart_Receive);
     814:	68 ef       	ldi	r22, 0xF8	; 248
     816:	73 e0       	ldi	r23, 0x03	; 3
     818:	80 ef       	ldi	r24, 0xF0	; 240
     81a:	93 e0       	ldi	r25, 0x03	; 3
     81c:	89 c1       	rjmp	.+786    	; 0xb30 <fdevopen>
     81e:	08 95       	ret

00000820 <__subsf3>:
     820:	50 58       	subi	r21, 0x80	; 128

00000822 <__addsf3>:
     822:	bb 27       	eor	r27, r27
     824:	aa 27       	eor	r26, r26
     826:	0e d0       	rcall	.+28     	; 0x844 <__addsf3x>
     828:	e0 c0       	rjmp	.+448    	; 0x9ea <__fp_round>
     82a:	d1 d0       	rcall	.+418    	; 0x9ce <__fp_pscA>
     82c:	30 f0       	brcs	.+12     	; 0x83a <__addsf3+0x18>
     82e:	d6 d0       	rcall	.+428    	; 0x9dc <__fp_pscB>
     830:	20 f0       	brcs	.+8      	; 0x83a <__addsf3+0x18>
     832:	31 f4       	brne	.+12     	; 0x840 <__addsf3+0x1e>
     834:	9f 3f       	cpi	r25, 0xFF	; 255
     836:	11 f4       	brne	.+4      	; 0x83c <__addsf3+0x1a>
     838:	1e f4       	brtc	.+6      	; 0x840 <__addsf3+0x1e>
     83a:	c6 c0       	rjmp	.+396    	; 0x9c8 <__fp_nan>
     83c:	0e f4       	brtc	.+2      	; 0x840 <__addsf3+0x1e>
     83e:	e0 95       	com	r30
     840:	e7 fb       	bst	r30, 7
     842:	bc c0       	rjmp	.+376    	; 0x9bc <__fp_inf>

00000844 <__addsf3x>:
     844:	e9 2f       	mov	r30, r25
     846:	e2 d0       	rcall	.+452    	; 0xa0c <__fp_split3>
     848:	80 f3       	brcs	.-32     	; 0x82a <__addsf3+0x8>
     84a:	ba 17       	cp	r27, r26
     84c:	62 07       	cpc	r22, r18
     84e:	73 07       	cpc	r23, r19
     850:	84 07       	cpc	r24, r20
     852:	95 07       	cpc	r25, r21
     854:	18 f0       	brcs	.+6      	; 0x85c <__addsf3x+0x18>
     856:	71 f4       	brne	.+28     	; 0x874 <__addsf3x+0x30>
     858:	9e f5       	brtc	.+102    	; 0x8c0 <__addsf3x+0x7c>
     85a:	fa c0       	rjmp	.+500    	; 0xa50 <__fp_zero>
     85c:	0e f4       	brtc	.+2      	; 0x860 <__addsf3x+0x1c>
     85e:	e0 95       	com	r30
     860:	0b 2e       	mov	r0, r27
     862:	ba 2f       	mov	r27, r26
     864:	a0 2d       	mov	r26, r0
     866:	0b 01       	movw	r0, r22
     868:	b9 01       	movw	r22, r18
     86a:	90 01       	movw	r18, r0
     86c:	0c 01       	movw	r0, r24
     86e:	ca 01       	movw	r24, r20
     870:	a0 01       	movw	r20, r0
     872:	11 24       	eor	r1, r1
     874:	ff 27       	eor	r31, r31
     876:	59 1b       	sub	r21, r25
     878:	99 f0       	breq	.+38     	; 0x8a0 <__addsf3x+0x5c>
     87a:	59 3f       	cpi	r21, 0xF9	; 249
     87c:	50 f4       	brcc	.+20     	; 0x892 <__addsf3x+0x4e>
     87e:	50 3e       	cpi	r21, 0xE0	; 224
     880:	68 f1       	brcs	.+90     	; 0x8dc <__addsf3x+0x98>
     882:	1a 16       	cp	r1, r26
     884:	f0 40       	sbci	r31, 0x00	; 0
     886:	a2 2f       	mov	r26, r18
     888:	23 2f       	mov	r18, r19
     88a:	34 2f       	mov	r19, r20
     88c:	44 27       	eor	r20, r20
     88e:	58 5f       	subi	r21, 0xF8	; 248
     890:	f3 cf       	rjmp	.-26     	; 0x878 <__addsf3x+0x34>
     892:	46 95       	lsr	r20
     894:	37 95       	ror	r19
     896:	27 95       	ror	r18
     898:	a7 95       	ror	r26
     89a:	f0 40       	sbci	r31, 0x00	; 0
     89c:	53 95       	inc	r21
     89e:	c9 f7       	brne	.-14     	; 0x892 <__addsf3x+0x4e>
     8a0:	7e f4       	brtc	.+30     	; 0x8c0 <__addsf3x+0x7c>
     8a2:	1f 16       	cp	r1, r31
     8a4:	ba 0b       	sbc	r27, r26
     8a6:	62 0b       	sbc	r22, r18
     8a8:	73 0b       	sbc	r23, r19
     8aa:	84 0b       	sbc	r24, r20
     8ac:	ba f0       	brmi	.+46     	; 0x8dc <__addsf3x+0x98>
     8ae:	91 50       	subi	r25, 0x01	; 1
     8b0:	a1 f0       	breq	.+40     	; 0x8da <__addsf3x+0x96>
     8b2:	ff 0f       	add	r31, r31
     8b4:	bb 1f       	adc	r27, r27
     8b6:	66 1f       	adc	r22, r22
     8b8:	77 1f       	adc	r23, r23
     8ba:	88 1f       	adc	r24, r24
     8bc:	c2 f7       	brpl	.-16     	; 0x8ae <__addsf3x+0x6a>
     8be:	0e c0       	rjmp	.+28     	; 0x8dc <__addsf3x+0x98>
     8c0:	ba 0f       	add	r27, r26
     8c2:	62 1f       	adc	r22, r18
     8c4:	73 1f       	adc	r23, r19
     8c6:	84 1f       	adc	r24, r20
     8c8:	48 f4       	brcc	.+18     	; 0x8dc <__addsf3x+0x98>
     8ca:	87 95       	ror	r24
     8cc:	77 95       	ror	r23
     8ce:	67 95       	ror	r22
     8d0:	b7 95       	ror	r27
     8d2:	f7 95       	ror	r31
     8d4:	9e 3f       	cpi	r25, 0xFE	; 254
     8d6:	08 f0       	brcs	.+2      	; 0x8da <__addsf3x+0x96>
     8d8:	b3 cf       	rjmp	.-154    	; 0x840 <__addsf3+0x1e>
     8da:	93 95       	inc	r25
     8dc:	88 0f       	add	r24, r24
     8de:	08 f0       	brcs	.+2      	; 0x8e2 <__addsf3x+0x9e>
     8e0:	99 27       	eor	r25, r25
     8e2:	ee 0f       	add	r30, r30
     8e4:	97 95       	ror	r25
     8e6:	87 95       	ror	r24
     8e8:	08 95       	ret

000008ea <__fixunssfsi>:
     8ea:	98 d0       	rcall	.+304    	; 0xa1c <__fp_splitA>
     8ec:	88 f0       	brcs	.+34     	; 0x910 <__fixunssfsi+0x26>
     8ee:	9f 57       	subi	r25, 0x7F	; 127
     8f0:	90 f0       	brcs	.+36     	; 0x916 <__fixunssfsi+0x2c>
     8f2:	b9 2f       	mov	r27, r25
     8f4:	99 27       	eor	r25, r25
     8f6:	b7 51       	subi	r27, 0x17	; 23
     8f8:	a0 f0       	brcs	.+40     	; 0x922 <__fixunssfsi+0x38>
     8fa:	d1 f0       	breq	.+52     	; 0x930 <__fixunssfsi+0x46>
     8fc:	66 0f       	add	r22, r22
     8fe:	77 1f       	adc	r23, r23
     900:	88 1f       	adc	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	1a f0       	brmi	.+6      	; 0x90c <__fixunssfsi+0x22>
     906:	ba 95       	dec	r27
     908:	c9 f7       	brne	.-14     	; 0x8fc <__fixunssfsi+0x12>
     90a:	12 c0       	rjmp	.+36     	; 0x930 <__fixunssfsi+0x46>
     90c:	b1 30       	cpi	r27, 0x01	; 1
     90e:	81 f0       	breq	.+32     	; 0x930 <__fixunssfsi+0x46>
     910:	9f d0       	rcall	.+318    	; 0xa50 <__fp_zero>
     912:	b1 e0       	ldi	r27, 0x01	; 1
     914:	08 95       	ret
     916:	9c c0       	rjmp	.+312    	; 0xa50 <__fp_zero>
     918:	67 2f       	mov	r22, r23
     91a:	78 2f       	mov	r23, r24
     91c:	88 27       	eor	r24, r24
     91e:	b8 5f       	subi	r27, 0xF8	; 248
     920:	39 f0       	breq	.+14     	; 0x930 <__fixunssfsi+0x46>
     922:	b9 3f       	cpi	r27, 0xF9	; 249
     924:	cc f3       	brlt	.-14     	; 0x918 <__fixunssfsi+0x2e>
     926:	86 95       	lsr	r24
     928:	77 95       	ror	r23
     92a:	67 95       	ror	r22
     92c:	b3 95       	inc	r27
     92e:	d9 f7       	brne	.-10     	; 0x926 <__fixunssfsi+0x3c>
     930:	3e f4       	brtc	.+14     	; 0x940 <__fixunssfsi+0x56>
     932:	90 95       	com	r25
     934:	80 95       	com	r24
     936:	70 95       	com	r23
     938:	61 95       	neg	r22
     93a:	7f 4f       	sbci	r23, 0xFF	; 255
     93c:	8f 4f       	sbci	r24, 0xFF	; 255
     93e:	9f 4f       	sbci	r25, 0xFF	; 255
     940:	08 95       	ret

00000942 <__floatunsisf>:
     942:	e8 94       	clt
     944:	09 c0       	rjmp	.+18     	; 0x958 <__floatsisf+0x12>

00000946 <__floatsisf>:
     946:	97 fb       	bst	r25, 7
     948:	3e f4       	brtc	.+14     	; 0x958 <__floatsisf+0x12>
     94a:	90 95       	com	r25
     94c:	80 95       	com	r24
     94e:	70 95       	com	r23
     950:	61 95       	neg	r22
     952:	7f 4f       	sbci	r23, 0xFF	; 255
     954:	8f 4f       	sbci	r24, 0xFF	; 255
     956:	9f 4f       	sbci	r25, 0xFF	; 255
     958:	99 23       	and	r25, r25
     95a:	a9 f0       	breq	.+42     	; 0x986 <__floatsisf+0x40>
     95c:	f9 2f       	mov	r31, r25
     95e:	96 e9       	ldi	r25, 0x96	; 150
     960:	bb 27       	eor	r27, r27
     962:	93 95       	inc	r25
     964:	f6 95       	lsr	r31
     966:	87 95       	ror	r24
     968:	77 95       	ror	r23
     96a:	67 95       	ror	r22
     96c:	b7 95       	ror	r27
     96e:	f1 11       	cpse	r31, r1
     970:	f8 cf       	rjmp	.-16     	; 0x962 <__floatsisf+0x1c>
     972:	fa f4       	brpl	.+62     	; 0x9b2 <__floatsisf+0x6c>
     974:	bb 0f       	add	r27, r27
     976:	11 f4       	brne	.+4      	; 0x97c <__floatsisf+0x36>
     978:	60 ff       	sbrs	r22, 0
     97a:	1b c0       	rjmp	.+54     	; 0x9b2 <__floatsisf+0x6c>
     97c:	6f 5f       	subi	r22, 0xFF	; 255
     97e:	7f 4f       	sbci	r23, 0xFF	; 255
     980:	8f 4f       	sbci	r24, 0xFF	; 255
     982:	9f 4f       	sbci	r25, 0xFF	; 255
     984:	16 c0       	rjmp	.+44     	; 0x9b2 <__floatsisf+0x6c>
     986:	88 23       	and	r24, r24
     988:	11 f0       	breq	.+4      	; 0x98e <__floatsisf+0x48>
     98a:	96 e9       	ldi	r25, 0x96	; 150
     98c:	11 c0       	rjmp	.+34     	; 0x9b0 <__floatsisf+0x6a>
     98e:	77 23       	and	r23, r23
     990:	21 f0       	breq	.+8      	; 0x99a <__floatsisf+0x54>
     992:	9e e8       	ldi	r25, 0x8E	; 142
     994:	87 2f       	mov	r24, r23
     996:	76 2f       	mov	r23, r22
     998:	05 c0       	rjmp	.+10     	; 0x9a4 <__floatsisf+0x5e>
     99a:	66 23       	and	r22, r22
     99c:	71 f0       	breq	.+28     	; 0x9ba <__floatsisf+0x74>
     99e:	96 e8       	ldi	r25, 0x86	; 134
     9a0:	86 2f       	mov	r24, r22
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	2a f0       	brmi	.+10     	; 0x9b2 <__floatsisf+0x6c>
     9a8:	9a 95       	dec	r25
     9aa:	66 0f       	add	r22, r22
     9ac:	77 1f       	adc	r23, r23
     9ae:	88 1f       	adc	r24, r24
     9b0:	da f7       	brpl	.-10     	; 0x9a8 <__floatsisf+0x62>
     9b2:	88 0f       	add	r24, r24
     9b4:	96 95       	lsr	r25
     9b6:	87 95       	ror	r24
     9b8:	97 f9       	bld	r25, 7
     9ba:	08 95       	ret

000009bc <__fp_inf>:
     9bc:	97 f9       	bld	r25, 7
     9be:	9f 67       	ori	r25, 0x7F	; 127
     9c0:	80 e8       	ldi	r24, 0x80	; 128
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	08 95       	ret

000009c8 <__fp_nan>:
     9c8:	9f ef       	ldi	r25, 0xFF	; 255
     9ca:	80 ec       	ldi	r24, 0xC0	; 192
     9cc:	08 95       	ret

000009ce <__fp_pscA>:
     9ce:	00 24       	eor	r0, r0
     9d0:	0a 94       	dec	r0
     9d2:	16 16       	cp	r1, r22
     9d4:	17 06       	cpc	r1, r23
     9d6:	18 06       	cpc	r1, r24
     9d8:	09 06       	cpc	r0, r25
     9da:	08 95       	ret

000009dc <__fp_pscB>:
     9dc:	00 24       	eor	r0, r0
     9de:	0a 94       	dec	r0
     9e0:	12 16       	cp	r1, r18
     9e2:	13 06       	cpc	r1, r19
     9e4:	14 06       	cpc	r1, r20
     9e6:	05 06       	cpc	r0, r21
     9e8:	08 95       	ret

000009ea <__fp_round>:
     9ea:	09 2e       	mov	r0, r25
     9ec:	03 94       	inc	r0
     9ee:	00 0c       	add	r0, r0
     9f0:	11 f4       	brne	.+4      	; 0x9f6 <__fp_round+0xc>
     9f2:	88 23       	and	r24, r24
     9f4:	52 f0       	brmi	.+20     	; 0xa0a <__fp_round+0x20>
     9f6:	bb 0f       	add	r27, r27
     9f8:	40 f4       	brcc	.+16     	; 0xa0a <__fp_round+0x20>
     9fa:	bf 2b       	or	r27, r31
     9fc:	11 f4       	brne	.+4      	; 0xa02 <__fp_round+0x18>
     9fe:	60 ff       	sbrs	r22, 0
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <__fp_round+0x20>
     a02:	6f 5f       	subi	r22, 0xFF	; 255
     a04:	7f 4f       	sbci	r23, 0xFF	; 255
     a06:	8f 4f       	sbci	r24, 0xFF	; 255
     a08:	9f 4f       	sbci	r25, 0xFF	; 255
     a0a:	08 95       	ret

00000a0c <__fp_split3>:
     a0c:	57 fd       	sbrc	r21, 7
     a0e:	90 58       	subi	r25, 0x80	; 128
     a10:	44 0f       	add	r20, r20
     a12:	55 1f       	adc	r21, r21
     a14:	59 f0       	breq	.+22     	; 0xa2c <__fp_splitA+0x10>
     a16:	5f 3f       	cpi	r21, 0xFF	; 255
     a18:	71 f0       	breq	.+28     	; 0xa36 <__fp_splitA+0x1a>
     a1a:	47 95       	ror	r20

00000a1c <__fp_splitA>:
     a1c:	88 0f       	add	r24, r24
     a1e:	97 fb       	bst	r25, 7
     a20:	99 1f       	adc	r25, r25
     a22:	61 f0       	breq	.+24     	; 0xa3c <__fp_splitA+0x20>
     a24:	9f 3f       	cpi	r25, 0xFF	; 255
     a26:	79 f0       	breq	.+30     	; 0xa46 <__fp_splitA+0x2a>
     a28:	87 95       	ror	r24
     a2a:	08 95       	ret
     a2c:	12 16       	cp	r1, r18
     a2e:	13 06       	cpc	r1, r19
     a30:	14 06       	cpc	r1, r20
     a32:	55 1f       	adc	r21, r21
     a34:	f2 cf       	rjmp	.-28     	; 0xa1a <__fp_split3+0xe>
     a36:	46 95       	lsr	r20
     a38:	f1 df       	rcall	.-30     	; 0xa1c <__fp_splitA>
     a3a:	08 c0       	rjmp	.+16     	; 0xa4c <__fp_splitA+0x30>
     a3c:	16 16       	cp	r1, r22
     a3e:	17 06       	cpc	r1, r23
     a40:	18 06       	cpc	r1, r24
     a42:	99 1f       	adc	r25, r25
     a44:	f1 cf       	rjmp	.-30     	; 0xa28 <__fp_splitA+0xc>
     a46:	86 95       	lsr	r24
     a48:	71 05       	cpc	r23, r1
     a4a:	61 05       	cpc	r22, r1
     a4c:	08 94       	sec
     a4e:	08 95       	ret

00000a50 <__fp_zero>:
     a50:	e8 94       	clt

00000a52 <__fp_szero>:
     a52:	bb 27       	eor	r27, r27
     a54:	66 27       	eor	r22, r22
     a56:	77 27       	eor	r23, r23
     a58:	cb 01       	movw	r24, r22
     a5a:	97 f9       	bld	r25, 7
     a5c:	08 95       	ret

00000a5e <__mulsf3>:
     a5e:	0b d0       	rcall	.+22     	; 0xa76 <__mulsf3x>
     a60:	c4 cf       	rjmp	.-120    	; 0x9ea <__fp_round>
     a62:	b5 df       	rcall	.-150    	; 0x9ce <__fp_pscA>
     a64:	28 f0       	brcs	.+10     	; 0xa70 <__mulsf3+0x12>
     a66:	ba df       	rcall	.-140    	; 0x9dc <__fp_pscB>
     a68:	18 f0       	brcs	.+6      	; 0xa70 <__mulsf3+0x12>
     a6a:	95 23       	and	r25, r21
     a6c:	09 f0       	breq	.+2      	; 0xa70 <__mulsf3+0x12>
     a6e:	a6 cf       	rjmp	.-180    	; 0x9bc <__fp_inf>
     a70:	ab cf       	rjmp	.-170    	; 0x9c8 <__fp_nan>
     a72:	11 24       	eor	r1, r1
     a74:	ee cf       	rjmp	.-36     	; 0xa52 <__fp_szero>

00000a76 <__mulsf3x>:
     a76:	ca df       	rcall	.-108    	; 0xa0c <__fp_split3>
     a78:	a0 f3       	brcs	.-24     	; 0xa62 <__mulsf3+0x4>

00000a7a <__mulsf3_pse>:
     a7a:	95 9f       	mul	r25, r21
     a7c:	d1 f3       	breq	.-12     	; 0xa72 <__mulsf3+0x14>
     a7e:	95 0f       	add	r25, r21
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	55 1f       	adc	r21, r21
     a84:	62 9f       	mul	r22, r18
     a86:	f0 01       	movw	r30, r0
     a88:	72 9f       	mul	r23, r18
     a8a:	bb 27       	eor	r27, r27
     a8c:	f0 0d       	add	r31, r0
     a8e:	b1 1d       	adc	r27, r1
     a90:	63 9f       	mul	r22, r19
     a92:	aa 27       	eor	r26, r26
     a94:	f0 0d       	add	r31, r0
     a96:	b1 1d       	adc	r27, r1
     a98:	aa 1f       	adc	r26, r26
     a9a:	64 9f       	mul	r22, r20
     a9c:	66 27       	eor	r22, r22
     a9e:	b0 0d       	add	r27, r0
     aa0:	a1 1d       	adc	r26, r1
     aa2:	66 1f       	adc	r22, r22
     aa4:	82 9f       	mul	r24, r18
     aa6:	22 27       	eor	r18, r18
     aa8:	b0 0d       	add	r27, r0
     aaa:	a1 1d       	adc	r26, r1
     aac:	62 1f       	adc	r22, r18
     aae:	73 9f       	mul	r23, r19
     ab0:	b0 0d       	add	r27, r0
     ab2:	a1 1d       	adc	r26, r1
     ab4:	62 1f       	adc	r22, r18
     ab6:	83 9f       	mul	r24, r19
     ab8:	a0 0d       	add	r26, r0
     aba:	61 1d       	adc	r22, r1
     abc:	22 1f       	adc	r18, r18
     abe:	74 9f       	mul	r23, r20
     ac0:	33 27       	eor	r19, r19
     ac2:	a0 0d       	add	r26, r0
     ac4:	61 1d       	adc	r22, r1
     ac6:	23 1f       	adc	r18, r19
     ac8:	84 9f       	mul	r24, r20
     aca:	60 0d       	add	r22, r0
     acc:	21 1d       	adc	r18, r1
     ace:	82 2f       	mov	r24, r18
     ad0:	76 2f       	mov	r23, r22
     ad2:	6a 2f       	mov	r22, r26
     ad4:	11 24       	eor	r1, r1
     ad6:	9f 57       	subi	r25, 0x7F	; 127
     ad8:	50 40       	sbci	r21, 0x00	; 0
     ada:	8a f0       	brmi	.+34     	; 0xafe <__mulsf3_pse+0x84>
     adc:	e1 f0       	breq	.+56     	; 0xb16 <__mulsf3_pse+0x9c>
     ade:	88 23       	and	r24, r24
     ae0:	4a f0       	brmi	.+18     	; 0xaf4 <__mulsf3_pse+0x7a>
     ae2:	ee 0f       	add	r30, r30
     ae4:	ff 1f       	adc	r31, r31
     ae6:	bb 1f       	adc	r27, r27
     ae8:	66 1f       	adc	r22, r22
     aea:	77 1f       	adc	r23, r23
     aec:	88 1f       	adc	r24, r24
     aee:	91 50       	subi	r25, 0x01	; 1
     af0:	50 40       	sbci	r21, 0x00	; 0
     af2:	a9 f7       	brne	.-22     	; 0xade <__mulsf3_pse+0x64>
     af4:	9e 3f       	cpi	r25, 0xFE	; 254
     af6:	51 05       	cpc	r21, r1
     af8:	70 f0       	brcs	.+28     	; 0xb16 <__mulsf3_pse+0x9c>
     afa:	60 cf       	rjmp	.-320    	; 0x9bc <__fp_inf>
     afc:	aa cf       	rjmp	.-172    	; 0xa52 <__fp_szero>
     afe:	5f 3f       	cpi	r21, 0xFF	; 255
     b00:	ec f3       	brlt	.-6      	; 0xafc <__mulsf3_pse+0x82>
     b02:	98 3e       	cpi	r25, 0xE8	; 232
     b04:	dc f3       	brlt	.-10     	; 0xafc <__mulsf3_pse+0x82>
     b06:	86 95       	lsr	r24
     b08:	77 95       	ror	r23
     b0a:	67 95       	ror	r22
     b0c:	b7 95       	ror	r27
     b0e:	f7 95       	ror	r31
     b10:	e7 95       	ror	r30
     b12:	9f 5f       	subi	r25, 0xFF	; 255
     b14:	c1 f7       	brne	.-16     	; 0xb06 <__mulsf3_pse+0x8c>
     b16:	fe 2b       	or	r31, r30
     b18:	88 0f       	add	r24, r24
     b1a:	91 1d       	adc	r25, r1
     b1c:	96 95       	lsr	r25
     b1e:	87 95       	ror	r24
     b20:	97 f9       	bld	r25, 7
     b22:	08 95       	ret

00000b24 <__tablejump2__>:
     b24:	ee 0f       	add	r30, r30
     b26:	ff 1f       	adc	r31, r31

00000b28 <__tablejump__>:
     b28:	05 90       	lpm	r0, Z+
     b2a:	f4 91       	lpm	r31, Z
     b2c:	e0 2d       	mov	r30, r0
     b2e:	19 94       	eijmp

00000b30 <fdevopen>:
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	ec 01       	movw	r28, r24
     b3a:	8b 01       	movw	r16, r22
     b3c:	00 97       	sbiw	r24, 0x00	; 0
     b3e:	31 f4       	brne	.+12     	; 0xb4c <fdevopen+0x1c>
     b40:	61 15       	cp	r22, r1
     b42:	71 05       	cpc	r23, r1
     b44:	19 f4       	brne	.+6      	; 0xb4c <fdevopen+0x1c>
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	37 c0       	rjmp	.+110    	; 0xbba <fdevopen+0x8a>
     b4c:	6e e0       	ldi	r22, 0x0E	; 14
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	63 d2       	rcall	.+1222   	; 0x101c <calloc>
     b56:	fc 01       	movw	r30, r24
     b58:	00 97       	sbiw	r24, 0x00	; 0
     b5a:	a9 f3       	breq	.-22     	; 0xb46 <fdevopen+0x16>
     b5c:	80 e8       	ldi	r24, 0x80	; 128
     b5e:	83 83       	std	Z+3, r24	; 0x03
     b60:	01 15       	cp	r16, r1
     b62:	11 05       	cpc	r17, r1
     b64:	71 f0       	breq	.+28     	; 0xb82 <fdevopen+0x52>
     b66:	13 87       	std	Z+11, r17	; 0x0b
     b68:	02 87       	std	Z+10, r16	; 0x0a
     b6a:	81 e8       	ldi	r24, 0x81	; 129
     b6c:	83 83       	std	Z+3, r24	; 0x03
     b6e:	80 91 dc 02 	lds	r24, 0x02DC
     b72:	90 91 dd 02 	lds	r25, 0x02DD
     b76:	89 2b       	or	r24, r25
     b78:	21 f4       	brne	.+8      	; 0xb82 <fdevopen+0x52>
     b7a:	f0 93 dd 02 	sts	0x02DD, r31
     b7e:	e0 93 dc 02 	sts	0x02DC, r30
     b82:	20 97       	sbiw	r28, 0x00	; 0
     b84:	c9 f0       	breq	.+50     	; 0xbb8 <fdevopen+0x88>
     b86:	d1 87       	std	Z+9, r29	; 0x09
     b88:	c0 87       	std	Z+8, r28	; 0x08
     b8a:	83 81       	ldd	r24, Z+3	; 0x03
     b8c:	82 60       	ori	r24, 0x02	; 2
     b8e:	83 83       	std	Z+3, r24	; 0x03
     b90:	80 91 de 02 	lds	r24, 0x02DE
     b94:	90 91 df 02 	lds	r25, 0x02DF
     b98:	89 2b       	or	r24, r25
     b9a:	71 f4       	brne	.+28     	; 0xbb8 <fdevopen+0x88>
     b9c:	f0 93 df 02 	sts	0x02DF, r31
     ba0:	e0 93 de 02 	sts	0x02DE, r30
     ba4:	80 91 e0 02 	lds	r24, 0x02E0
     ba8:	90 91 e1 02 	lds	r25, 0x02E1
     bac:	89 2b       	or	r24, r25
     bae:	21 f4       	brne	.+8      	; 0xbb8 <fdevopen+0x88>
     bb0:	f0 93 e1 02 	sts	0x02E1, r31
     bb4:	e0 93 e0 02 	sts	0x02E0, r30
     bb8:	cf 01       	movw	r24, r30
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	08 95       	ret

00000bc4 <printf>:
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	fe 01       	movw	r30, r28
     bce:	36 96       	adiw	r30, 0x06	; 6
     bd0:	61 91       	ld	r22, Z+
     bd2:	71 91       	ld	r23, Z+
     bd4:	af 01       	movw	r20, r30
     bd6:	80 91 de 02 	lds	r24, 0x02DE
     bda:	90 91 df 02 	lds	r25, 0x02DF
     bde:	30 d0       	rcall	.+96     	; 0xc40 <vfprintf>
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <puts>:
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	e0 91 de 02 	lds	r30, 0x02DE
     bf2:	f0 91 df 02 	lds	r31, 0x02DF
     bf6:	23 81       	ldd	r18, Z+3	; 0x03
     bf8:	21 ff       	sbrs	r18, 1
     bfa:	1b c0       	rjmp	.+54     	; 0xc32 <puts+0x4c>
     bfc:	ec 01       	movw	r28, r24
     bfe:	00 e0       	ldi	r16, 0x00	; 0
     c00:	10 e0       	ldi	r17, 0x00	; 0
     c02:	89 91       	ld	r24, Y+
     c04:	60 91 de 02 	lds	r22, 0x02DE
     c08:	70 91 df 02 	lds	r23, 0x02DF
     c0c:	db 01       	movw	r26, r22
     c0e:	18 96       	adiw	r26, 0x08	; 8
     c10:	ed 91       	ld	r30, X+
     c12:	fc 91       	ld	r31, X
     c14:	19 97       	sbiw	r26, 0x09	; 9
     c16:	88 23       	and	r24, r24
     c18:	31 f0       	breq	.+12     	; 0xc26 <puts+0x40>
     c1a:	19 95       	eicall
     c1c:	89 2b       	or	r24, r25
     c1e:	89 f3       	breq	.-30     	; 0xc02 <puts+0x1c>
     c20:	0f ef       	ldi	r16, 0xFF	; 255
     c22:	1f ef       	ldi	r17, 0xFF	; 255
     c24:	ee cf       	rjmp	.-36     	; 0xc02 <puts+0x1c>
     c26:	8a e0       	ldi	r24, 0x0A	; 10
     c28:	19 95       	eicall
     c2a:	89 2b       	or	r24, r25
     c2c:	11 f4       	brne	.+4      	; 0xc32 <puts+0x4c>
     c2e:	c8 01       	movw	r24, r16
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <puts+0x50>
     c32:	8f ef       	ldi	r24, 0xFF	; 255
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	08 95       	ret

00000c40 <vfprintf>:
     c40:	2f 92       	push	r2
     c42:	3f 92       	push	r3
     c44:	4f 92       	push	r4
     c46:	5f 92       	push	r5
     c48:	6f 92       	push	r6
     c4a:	7f 92       	push	r7
     c4c:	8f 92       	push	r8
     c4e:	9f 92       	push	r9
     c50:	af 92       	push	r10
     c52:	bf 92       	push	r11
     c54:	cf 92       	push	r12
     c56:	df 92       	push	r13
     c58:	ef 92       	push	r14
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	2c 97       	sbiw	r28, 0x0c	; 12
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	7c 01       	movw	r14, r24
     c76:	6b 01       	movw	r12, r22
     c78:	8a 01       	movw	r16, r20
     c7a:	fc 01       	movw	r30, r24
     c7c:	17 82       	std	Z+7, r1	; 0x07
     c7e:	16 82       	std	Z+6, r1	; 0x06
     c80:	83 81       	ldd	r24, Z+3	; 0x03
     c82:	81 ff       	sbrs	r24, 1
     c84:	b0 c1       	rjmp	.+864    	; 0xfe6 <vfprintf+0x3a6>
     c86:	ce 01       	movw	r24, r28
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	4c 01       	movw	r8, r24
     c8c:	f7 01       	movw	r30, r14
     c8e:	93 81       	ldd	r25, Z+3	; 0x03
     c90:	f6 01       	movw	r30, r12
     c92:	93 fd       	sbrc	r25, 3
     c94:	85 91       	lpm	r24, Z+
     c96:	93 ff       	sbrs	r25, 3
     c98:	81 91       	ld	r24, Z+
     c9a:	6f 01       	movw	r12, r30
     c9c:	88 23       	and	r24, r24
     c9e:	09 f4       	brne	.+2      	; 0xca2 <vfprintf+0x62>
     ca0:	9e c1       	rjmp	.+828    	; 0xfde <vfprintf+0x39e>
     ca2:	85 32       	cpi	r24, 0x25	; 37
     ca4:	39 f4       	brne	.+14     	; 0xcb4 <vfprintf+0x74>
     ca6:	93 fd       	sbrc	r25, 3
     ca8:	85 91       	lpm	r24, Z+
     caa:	93 ff       	sbrs	r25, 3
     cac:	81 91       	ld	r24, Z+
     cae:	6f 01       	movw	r12, r30
     cb0:	85 32       	cpi	r24, 0x25	; 37
     cb2:	21 f4       	brne	.+8      	; 0xcbc <vfprintf+0x7c>
     cb4:	b7 01       	movw	r22, r14
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0f d3       	rcall	.+1566   	; 0x12d8 <fputc>
     cba:	e8 cf       	rjmp	.-48     	; 0xc8c <vfprintf+0x4c>
     cbc:	51 2c       	mov	r5, r1
     cbe:	31 2c       	mov	r3, r1
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	20 32       	cpi	r18, 0x20	; 32
     cc4:	a0 f4       	brcc	.+40     	; 0xcee <vfprintf+0xae>
     cc6:	8b 32       	cpi	r24, 0x2B	; 43
     cc8:	69 f0       	breq	.+26     	; 0xce4 <vfprintf+0xa4>
     cca:	30 f4       	brcc	.+12     	; 0xcd8 <vfprintf+0x98>
     ccc:	80 32       	cpi	r24, 0x20	; 32
     cce:	59 f0       	breq	.+22     	; 0xce6 <vfprintf+0xa6>
     cd0:	83 32       	cpi	r24, 0x23	; 35
     cd2:	69 f4       	brne	.+26     	; 0xcee <vfprintf+0xae>
     cd4:	20 61       	ori	r18, 0x10	; 16
     cd6:	2c c0       	rjmp	.+88     	; 0xd30 <vfprintf+0xf0>
     cd8:	8d 32       	cpi	r24, 0x2D	; 45
     cda:	39 f0       	breq	.+14     	; 0xcea <vfprintf+0xaa>
     cdc:	80 33       	cpi	r24, 0x30	; 48
     cde:	39 f4       	brne	.+14     	; 0xcee <vfprintf+0xae>
     ce0:	21 60       	ori	r18, 0x01	; 1
     ce2:	26 c0       	rjmp	.+76     	; 0xd30 <vfprintf+0xf0>
     ce4:	22 60       	ori	r18, 0x02	; 2
     ce6:	24 60       	ori	r18, 0x04	; 4
     ce8:	23 c0       	rjmp	.+70     	; 0xd30 <vfprintf+0xf0>
     cea:	28 60       	ori	r18, 0x08	; 8
     cec:	21 c0       	rjmp	.+66     	; 0xd30 <vfprintf+0xf0>
     cee:	27 fd       	sbrc	r18, 7
     cf0:	27 c0       	rjmp	.+78     	; 0xd40 <vfprintf+0x100>
     cf2:	30 ed       	ldi	r19, 0xD0	; 208
     cf4:	38 0f       	add	r19, r24
     cf6:	3a 30       	cpi	r19, 0x0A	; 10
     cf8:	78 f4       	brcc	.+30     	; 0xd18 <vfprintf+0xd8>
     cfa:	26 ff       	sbrs	r18, 6
     cfc:	06 c0       	rjmp	.+12     	; 0xd0a <vfprintf+0xca>
     cfe:	fa e0       	ldi	r31, 0x0A	; 10
     d00:	5f 9e       	mul	r5, r31
     d02:	30 0d       	add	r19, r0
     d04:	11 24       	eor	r1, r1
     d06:	53 2e       	mov	r5, r19
     d08:	13 c0       	rjmp	.+38     	; 0xd30 <vfprintf+0xf0>
     d0a:	8a e0       	ldi	r24, 0x0A	; 10
     d0c:	38 9e       	mul	r3, r24
     d0e:	30 0d       	add	r19, r0
     d10:	11 24       	eor	r1, r1
     d12:	33 2e       	mov	r3, r19
     d14:	20 62       	ori	r18, 0x20	; 32
     d16:	0c c0       	rjmp	.+24     	; 0xd30 <vfprintf+0xf0>
     d18:	8e 32       	cpi	r24, 0x2E	; 46
     d1a:	21 f4       	brne	.+8      	; 0xd24 <vfprintf+0xe4>
     d1c:	26 fd       	sbrc	r18, 6
     d1e:	5f c1       	rjmp	.+702    	; 0xfde <vfprintf+0x39e>
     d20:	20 64       	ori	r18, 0x40	; 64
     d22:	06 c0       	rjmp	.+12     	; 0xd30 <vfprintf+0xf0>
     d24:	8c 36       	cpi	r24, 0x6C	; 108
     d26:	11 f4       	brne	.+4      	; 0xd2c <vfprintf+0xec>
     d28:	20 68       	ori	r18, 0x80	; 128
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <vfprintf+0xf0>
     d2c:	88 36       	cpi	r24, 0x68	; 104
     d2e:	41 f4       	brne	.+16     	; 0xd40 <vfprintf+0x100>
     d30:	f6 01       	movw	r30, r12
     d32:	93 fd       	sbrc	r25, 3
     d34:	85 91       	lpm	r24, Z+
     d36:	93 ff       	sbrs	r25, 3
     d38:	81 91       	ld	r24, Z+
     d3a:	6f 01       	movw	r12, r30
     d3c:	81 11       	cpse	r24, r1
     d3e:	c1 cf       	rjmp	.-126    	; 0xcc2 <vfprintf+0x82>
     d40:	98 2f       	mov	r25, r24
     d42:	9f 7d       	andi	r25, 0xDF	; 223
     d44:	95 54       	subi	r25, 0x45	; 69
     d46:	93 30       	cpi	r25, 0x03	; 3
     d48:	28 f4       	brcc	.+10     	; 0xd54 <vfprintf+0x114>
     d4a:	0c 5f       	subi	r16, 0xFC	; 252
     d4c:	1f 4f       	sbci	r17, 0xFF	; 255
     d4e:	ff e3       	ldi	r31, 0x3F	; 63
     d50:	f9 83       	std	Y+1, r31	; 0x01
     d52:	0d c0       	rjmp	.+26     	; 0xd6e <vfprintf+0x12e>
     d54:	83 36       	cpi	r24, 0x63	; 99
     d56:	31 f0       	breq	.+12     	; 0xd64 <vfprintf+0x124>
     d58:	83 37       	cpi	r24, 0x73	; 115
     d5a:	71 f0       	breq	.+28     	; 0xd78 <vfprintf+0x138>
     d5c:	83 35       	cpi	r24, 0x53	; 83
     d5e:	09 f0       	breq	.+2      	; 0xd62 <vfprintf+0x122>
     d60:	57 c0       	rjmp	.+174    	; 0xe10 <vfprintf+0x1d0>
     d62:	21 c0       	rjmp	.+66     	; 0xda6 <vfprintf+0x166>
     d64:	f8 01       	movw	r30, r16
     d66:	80 81       	ld	r24, Z
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	0e 5f       	subi	r16, 0xFE	; 254
     d6c:	1f 4f       	sbci	r17, 0xFF	; 255
     d6e:	44 24       	eor	r4, r4
     d70:	43 94       	inc	r4
     d72:	51 2c       	mov	r5, r1
     d74:	54 01       	movw	r10, r8
     d76:	14 c0       	rjmp	.+40     	; 0xda0 <vfprintf+0x160>
     d78:	38 01       	movw	r6, r16
     d7a:	f2 e0       	ldi	r31, 0x02	; 2
     d7c:	6f 0e       	add	r6, r31
     d7e:	71 1c       	adc	r7, r1
     d80:	f8 01       	movw	r30, r16
     d82:	a0 80       	ld	r10, Z
     d84:	b1 80       	ldd	r11, Z+1	; 0x01
     d86:	26 ff       	sbrs	r18, 6
     d88:	03 c0       	rjmp	.+6      	; 0xd90 <vfprintf+0x150>
     d8a:	65 2d       	mov	r22, r5
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <vfprintf+0x154>
     d90:	6f ef       	ldi	r22, 0xFF	; 255
     d92:	7f ef       	ldi	r23, 0xFF	; 255
     d94:	c5 01       	movw	r24, r10
     d96:	2c 87       	std	Y+12, r18	; 0x0c
     d98:	94 d2       	rcall	.+1320   	; 0x12c2 <strnlen>
     d9a:	2c 01       	movw	r4, r24
     d9c:	83 01       	movw	r16, r6
     d9e:	2c 85       	ldd	r18, Y+12	; 0x0c
     da0:	2f 77       	andi	r18, 0x7F	; 127
     da2:	22 2e       	mov	r2, r18
     da4:	16 c0       	rjmp	.+44     	; 0xdd2 <vfprintf+0x192>
     da6:	38 01       	movw	r6, r16
     da8:	f2 e0       	ldi	r31, 0x02	; 2
     daa:	6f 0e       	add	r6, r31
     dac:	71 1c       	adc	r7, r1
     dae:	f8 01       	movw	r30, r16
     db0:	a0 80       	ld	r10, Z
     db2:	b1 80       	ldd	r11, Z+1	; 0x01
     db4:	26 ff       	sbrs	r18, 6
     db6:	03 c0       	rjmp	.+6      	; 0xdbe <vfprintf+0x17e>
     db8:	65 2d       	mov	r22, r5
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <vfprintf+0x182>
     dbe:	6f ef       	ldi	r22, 0xFF	; 255
     dc0:	7f ef       	ldi	r23, 0xFF	; 255
     dc2:	c5 01       	movw	r24, r10
     dc4:	2c 87       	std	Y+12, r18	; 0x0c
     dc6:	6b d2       	rcall	.+1238   	; 0x129e <strnlen_P>
     dc8:	2c 01       	movw	r4, r24
     dca:	2c 85       	ldd	r18, Y+12	; 0x0c
     dcc:	20 68       	ori	r18, 0x80	; 128
     dce:	22 2e       	mov	r2, r18
     dd0:	83 01       	movw	r16, r6
     dd2:	23 fc       	sbrc	r2, 3
     dd4:	19 c0       	rjmp	.+50     	; 0xe08 <vfprintf+0x1c8>
     dd6:	83 2d       	mov	r24, r3
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	48 16       	cp	r4, r24
     ddc:	59 06       	cpc	r5, r25
     dde:	a0 f4       	brcc	.+40     	; 0xe08 <vfprintf+0x1c8>
     de0:	b7 01       	movw	r22, r14
     de2:	80 e2       	ldi	r24, 0x20	; 32
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	78 d2       	rcall	.+1264   	; 0x12d8 <fputc>
     de8:	3a 94       	dec	r3
     dea:	f5 cf       	rjmp	.-22     	; 0xdd6 <vfprintf+0x196>
     dec:	f5 01       	movw	r30, r10
     dee:	27 fc       	sbrc	r2, 7
     df0:	85 91       	lpm	r24, Z+
     df2:	27 fe       	sbrs	r2, 7
     df4:	81 91       	ld	r24, Z+
     df6:	5f 01       	movw	r10, r30
     df8:	b7 01       	movw	r22, r14
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	6d d2       	rcall	.+1242   	; 0x12d8 <fputc>
     dfe:	31 10       	cpse	r3, r1
     e00:	3a 94       	dec	r3
     e02:	f1 e0       	ldi	r31, 0x01	; 1
     e04:	4f 1a       	sub	r4, r31
     e06:	51 08       	sbc	r5, r1
     e08:	41 14       	cp	r4, r1
     e0a:	51 04       	cpc	r5, r1
     e0c:	79 f7       	brne	.-34     	; 0xdec <vfprintf+0x1ac>
     e0e:	de c0       	rjmp	.+444    	; 0xfcc <vfprintf+0x38c>
     e10:	84 36       	cpi	r24, 0x64	; 100
     e12:	11 f0       	breq	.+4      	; 0xe18 <vfprintf+0x1d8>
     e14:	89 36       	cpi	r24, 0x69	; 105
     e16:	31 f5       	brne	.+76     	; 0xe64 <vfprintf+0x224>
     e18:	f8 01       	movw	r30, r16
     e1a:	27 ff       	sbrs	r18, 7
     e1c:	07 c0       	rjmp	.+14     	; 0xe2c <vfprintf+0x1ec>
     e1e:	60 81       	ld	r22, Z
     e20:	71 81       	ldd	r23, Z+1	; 0x01
     e22:	82 81       	ldd	r24, Z+2	; 0x02
     e24:	93 81       	ldd	r25, Z+3	; 0x03
     e26:	0c 5f       	subi	r16, 0xFC	; 252
     e28:	1f 4f       	sbci	r17, 0xFF	; 255
     e2a:	08 c0       	rjmp	.+16     	; 0xe3c <vfprintf+0x1fc>
     e2c:	60 81       	ld	r22, Z
     e2e:	71 81       	ldd	r23, Z+1	; 0x01
     e30:	88 27       	eor	r24, r24
     e32:	77 fd       	sbrc	r23, 7
     e34:	80 95       	com	r24
     e36:	98 2f       	mov	r25, r24
     e38:	0e 5f       	subi	r16, 0xFE	; 254
     e3a:	1f 4f       	sbci	r17, 0xFF	; 255
     e3c:	2f 76       	andi	r18, 0x6F	; 111
     e3e:	b2 2e       	mov	r11, r18
     e40:	97 ff       	sbrs	r25, 7
     e42:	09 c0       	rjmp	.+18     	; 0xe56 <vfprintf+0x216>
     e44:	90 95       	com	r25
     e46:	80 95       	com	r24
     e48:	70 95       	com	r23
     e4a:	61 95       	neg	r22
     e4c:	7f 4f       	sbci	r23, 0xFF	; 255
     e4e:	8f 4f       	sbci	r24, 0xFF	; 255
     e50:	9f 4f       	sbci	r25, 0xFF	; 255
     e52:	20 68       	ori	r18, 0x80	; 128
     e54:	b2 2e       	mov	r11, r18
     e56:	2a e0       	ldi	r18, 0x0A	; 10
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	a4 01       	movw	r20, r8
     e5c:	6f d2       	rcall	.+1246   	; 0x133c <__ultoa_invert>
     e5e:	a8 2e       	mov	r10, r24
     e60:	a8 18       	sub	r10, r8
     e62:	43 c0       	rjmp	.+134    	; 0xeea <vfprintf+0x2aa>
     e64:	85 37       	cpi	r24, 0x75	; 117
     e66:	29 f4       	brne	.+10     	; 0xe72 <vfprintf+0x232>
     e68:	2f 7e       	andi	r18, 0xEF	; 239
     e6a:	b2 2e       	mov	r11, r18
     e6c:	2a e0       	ldi	r18, 0x0A	; 10
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	25 c0       	rjmp	.+74     	; 0xebc <vfprintf+0x27c>
     e72:	f2 2f       	mov	r31, r18
     e74:	f9 7f       	andi	r31, 0xF9	; 249
     e76:	bf 2e       	mov	r11, r31
     e78:	8f 36       	cpi	r24, 0x6F	; 111
     e7a:	c1 f0       	breq	.+48     	; 0xeac <vfprintf+0x26c>
     e7c:	18 f4       	brcc	.+6      	; 0xe84 <vfprintf+0x244>
     e7e:	88 35       	cpi	r24, 0x58	; 88
     e80:	79 f0       	breq	.+30     	; 0xea0 <vfprintf+0x260>
     e82:	ad c0       	rjmp	.+346    	; 0xfde <vfprintf+0x39e>
     e84:	80 37       	cpi	r24, 0x70	; 112
     e86:	19 f0       	breq	.+6      	; 0xe8e <vfprintf+0x24e>
     e88:	88 37       	cpi	r24, 0x78	; 120
     e8a:	21 f0       	breq	.+8      	; 0xe94 <vfprintf+0x254>
     e8c:	a8 c0       	rjmp	.+336    	; 0xfde <vfprintf+0x39e>
     e8e:	2f 2f       	mov	r18, r31
     e90:	20 61       	ori	r18, 0x10	; 16
     e92:	b2 2e       	mov	r11, r18
     e94:	b4 fe       	sbrs	r11, 4
     e96:	0d c0       	rjmp	.+26     	; 0xeb2 <vfprintf+0x272>
     e98:	8b 2d       	mov	r24, r11
     e9a:	84 60       	ori	r24, 0x04	; 4
     e9c:	b8 2e       	mov	r11, r24
     e9e:	09 c0       	rjmp	.+18     	; 0xeb2 <vfprintf+0x272>
     ea0:	24 ff       	sbrs	r18, 4
     ea2:	0a c0       	rjmp	.+20     	; 0xeb8 <vfprintf+0x278>
     ea4:	9f 2f       	mov	r25, r31
     ea6:	96 60       	ori	r25, 0x06	; 6
     ea8:	b9 2e       	mov	r11, r25
     eaa:	06 c0       	rjmp	.+12     	; 0xeb8 <vfprintf+0x278>
     eac:	28 e0       	ldi	r18, 0x08	; 8
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	05 c0       	rjmp	.+10     	; 0xebc <vfprintf+0x27c>
     eb2:	20 e1       	ldi	r18, 0x10	; 16
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <vfprintf+0x27c>
     eb8:	20 e1       	ldi	r18, 0x10	; 16
     eba:	32 e0       	ldi	r19, 0x02	; 2
     ebc:	f8 01       	movw	r30, r16
     ebe:	b7 fe       	sbrs	r11, 7
     ec0:	07 c0       	rjmp	.+14     	; 0xed0 <vfprintf+0x290>
     ec2:	60 81       	ld	r22, Z
     ec4:	71 81       	ldd	r23, Z+1	; 0x01
     ec6:	82 81       	ldd	r24, Z+2	; 0x02
     ec8:	93 81       	ldd	r25, Z+3	; 0x03
     eca:	0c 5f       	subi	r16, 0xFC	; 252
     ecc:	1f 4f       	sbci	r17, 0xFF	; 255
     ece:	06 c0       	rjmp	.+12     	; 0xedc <vfprintf+0x29c>
     ed0:	60 81       	ld	r22, Z
     ed2:	71 81       	ldd	r23, Z+1	; 0x01
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 5f       	subi	r16, 0xFE	; 254
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
     edc:	a4 01       	movw	r20, r8
     ede:	2e d2       	rcall	.+1116   	; 0x133c <__ultoa_invert>
     ee0:	a8 2e       	mov	r10, r24
     ee2:	a8 18       	sub	r10, r8
     ee4:	fb 2d       	mov	r31, r11
     ee6:	ff 77       	andi	r31, 0x7F	; 127
     ee8:	bf 2e       	mov	r11, r31
     eea:	b6 fe       	sbrs	r11, 6
     eec:	0b c0       	rjmp	.+22     	; 0xf04 <vfprintf+0x2c4>
     eee:	2b 2d       	mov	r18, r11
     ef0:	2e 7f       	andi	r18, 0xFE	; 254
     ef2:	a5 14       	cp	r10, r5
     ef4:	50 f4       	brcc	.+20     	; 0xf0a <vfprintf+0x2ca>
     ef6:	b4 fe       	sbrs	r11, 4
     ef8:	0a c0       	rjmp	.+20     	; 0xf0e <vfprintf+0x2ce>
     efa:	b2 fc       	sbrc	r11, 2
     efc:	08 c0       	rjmp	.+16     	; 0xf0e <vfprintf+0x2ce>
     efe:	2b 2d       	mov	r18, r11
     f00:	2e 7e       	andi	r18, 0xEE	; 238
     f02:	05 c0       	rjmp	.+10     	; 0xf0e <vfprintf+0x2ce>
     f04:	7a 2c       	mov	r7, r10
     f06:	2b 2d       	mov	r18, r11
     f08:	03 c0       	rjmp	.+6      	; 0xf10 <vfprintf+0x2d0>
     f0a:	7a 2c       	mov	r7, r10
     f0c:	01 c0       	rjmp	.+2      	; 0xf10 <vfprintf+0x2d0>
     f0e:	75 2c       	mov	r7, r5
     f10:	24 ff       	sbrs	r18, 4
     f12:	0d c0       	rjmp	.+26     	; 0xf2e <vfprintf+0x2ee>
     f14:	fe 01       	movw	r30, r28
     f16:	ea 0d       	add	r30, r10
     f18:	f1 1d       	adc	r31, r1
     f1a:	80 81       	ld	r24, Z
     f1c:	80 33       	cpi	r24, 0x30	; 48
     f1e:	11 f4       	brne	.+4      	; 0xf24 <vfprintf+0x2e4>
     f20:	29 7e       	andi	r18, 0xE9	; 233
     f22:	09 c0       	rjmp	.+18     	; 0xf36 <vfprintf+0x2f6>
     f24:	22 ff       	sbrs	r18, 2
     f26:	06 c0       	rjmp	.+12     	; 0xf34 <vfprintf+0x2f4>
     f28:	73 94       	inc	r7
     f2a:	73 94       	inc	r7
     f2c:	04 c0       	rjmp	.+8      	; 0xf36 <vfprintf+0x2f6>
     f2e:	82 2f       	mov	r24, r18
     f30:	86 78       	andi	r24, 0x86	; 134
     f32:	09 f0       	breq	.+2      	; 0xf36 <vfprintf+0x2f6>
     f34:	73 94       	inc	r7
     f36:	23 fd       	sbrc	r18, 3
     f38:	12 c0       	rjmp	.+36     	; 0xf5e <vfprintf+0x31e>
     f3a:	20 ff       	sbrs	r18, 0
     f3c:	06 c0       	rjmp	.+12     	; 0xf4a <vfprintf+0x30a>
     f3e:	5a 2c       	mov	r5, r10
     f40:	73 14       	cp	r7, r3
     f42:	18 f4       	brcc	.+6      	; 0xf4a <vfprintf+0x30a>
     f44:	53 0c       	add	r5, r3
     f46:	57 18       	sub	r5, r7
     f48:	73 2c       	mov	r7, r3
     f4a:	73 14       	cp	r7, r3
     f4c:	60 f4       	brcc	.+24     	; 0xf66 <vfprintf+0x326>
     f4e:	b7 01       	movw	r22, r14
     f50:	80 e2       	ldi	r24, 0x20	; 32
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	2c 87       	std	Y+12, r18	; 0x0c
     f56:	c0 d1       	rcall	.+896    	; 0x12d8 <fputc>
     f58:	73 94       	inc	r7
     f5a:	2c 85       	ldd	r18, Y+12	; 0x0c
     f5c:	f6 cf       	rjmp	.-20     	; 0xf4a <vfprintf+0x30a>
     f5e:	73 14       	cp	r7, r3
     f60:	10 f4       	brcc	.+4      	; 0xf66 <vfprintf+0x326>
     f62:	37 18       	sub	r3, r7
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <vfprintf+0x328>
     f66:	31 2c       	mov	r3, r1
     f68:	24 ff       	sbrs	r18, 4
     f6a:	11 c0       	rjmp	.+34     	; 0xf8e <vfprintf+0x34e>
     f6c:	b7 01       	movw	r22, r14
     f6e:	80 e3       	ldi	r24, 0x30	; 48
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	2c 87       	std	Y+12, r18	; 0x0c
     f74:	b1 d1       	rcall	.+866    	; 0x12d8 <fputc>
     f76:	2c 85       	ldd	r18, Y+12	; 0x0c
     f78:	22 ff       	sbrs	r18, 2
     f7a:	16 c0       	rjmp	.+44     	; 0xfa8 <vfprintf+0x368>
     f7c:	21 ff       	sbrs	r18, 1
     f7e:	03 c0       	rjmp	.+6      	; 0xf86 <vfprintf+0x346>
     f80:	88 e5       	ldi	r24, 0x58	; 88
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <vfprintf+0x34a>
     f86:	88 e7       	ldi	r24, 0x78	; 120
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	b7 01       	movw	r22, r14
     f8c:	0c c0       	rjmp	.+24     	; 0xfa6 <vfprintf+0x366>
     f8e:	82 2f       	mov	r24, r18
     f90:	86 78       	andi	r24, 0x86	; 134
     f92:	51 f0       	breq	.+20     	; 0xfa8 <vfprintf+0x368>
     f94:	21 fd       	sbrc	r18, 1
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <vfprintf+0x35c>
     f98:	80 e2       	ldi	r24, 0x20	; 32
     f9a:	01 c0       	rjmp	.+2      	; 0xf9e <vfprintf+0x35e>
     f9c:	8b e2       	ldi	r24, 0x2B	; 43
     f9e:	27 fd       	sbrc	r18, 7
     fa0:	8d e2       	ldi	r24, 0x2D	; 45
     fa2:	b7 01       	movw	r22, r14
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	98 d1       	rcall	.+816    	; 0x12d8 <fputc>
     fa8:	a5 14       	cp	r10, r5
     faa:	30 f4       	brcc	.+12     	; 0xfb8 <vfprintf+0x378>
     fac:	b7 01       	movw	r22, r14
     fae:	80 e3       	ldi	r24, 0x30	; 48
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	92 d1       	rcall	.+804    	; 0x12d8 <fputc>
     fb4:	5a 94       	dec	r5
     fb6:	f8 cf       	rjmp	.-16     	; 0xfa8 <vfprintf+0x368>
     fb8:	aa 94       	dec	r10
     fba:	f4 01       	movw	r30, r8
     fbc:	ea 0d       	add	r30, r10
     fbe:	f1 1d       	adc	r31, r1
     fc0:	80 81       	ld	r24, Z
     fc2:	b7 01       	movw	r22, r14
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	88 d1       	rcall	.+784    	; 0x12d8 <fputc>
     fc8:	a1 10       	cpse	r10, r1
     fca:	f6 cf       	rjmp	.-20     	; 0xfb8 <vfprintf+0x378>
     fcc:	33 20       	and	r3, r3
     fce:	09 f4       	brne	.+2      	; 0xfd2 <vfprintf+0x392>
     fd0:	5d ce       	rjmp	.-838    	; 0xc8c <vfprintf+0x4c>
     fd2:	b7 01       	movw	r22, r14
     fd4:	80 e2       	ldi	r24, 0x20	; 32
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	7f d1       	rcall	.+766    	; 0x12d8 <fputc>
     fda:	3a 94       	dec	r3
     fdc:	f7 cf       	rjmp	.-18     	; 0xfcc <vfprintf+0x38c>
     fde:	f7 01       	movw	r30, r14
     fe0:	86 81       	ldd	r24, Z+6	; 0x06
     fe2:	97 81       	ldd	r25, Z+7	; 0x07
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <vfprintf+0x3aa>
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	9f ef       	ldi	r25, 0xFF	; 255
     fea:	2c 96       	adiw	r28, 0x0c	; 12
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	ff 90       	pop	r15
    1000:	ef 90       	pop	r14
    1002:	df 90       	pop	r13
    1004:	cf 90       	pop	r12
    1006:	bf 90       	pop	r11
    1008:	af 90       	pop	r10
    100a:	9f 90       	pop	r9
    100c:	8f 90       	pop	r8
    100e:	7f 90       	pop	r7
    1010:	6f 90       	pop	r6
    1012:	5f 90       	pop	r5
    1014:	4f 90       	pop	r4
    1016:	3f 90       	pop	r3
    1018:	2f 90       	pop	r2
    101a:	08 95       	ret

0000101c <calloc>:
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	86 9f       	mul	r24, r22
    1026:	80 01       	movw	r16, r0
    1028:	87 9f       	mul	r24, r23
    102a:	10 0d       	add	r17, r0
    102c:	96 9f       	mul	r25, r22
    102e:	10 0d       	add	r17, r0
    1030:	11 24       	eor	r1, r1
    1032:	c8 01       	movw	r24, r16
    1034:	0d d0       	rcall	.+26     	; 0x1050 <malloc>
    1036:	ec 01       	movw	r28, r24
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	21 f0       	breq	.+8      	; 0x1044 <calloc+0x28>
    103c:	a8 01       	movw	r20, r16
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	38 d1       	rcall	.+624    	; 0x12b4 <memset>
    1044:	ce 01       	movw	r24, r28
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	08 95       	ret

00001050 <malloc>:
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	82 30       	cpi	r24, 0x02	; 2
    1056:	91 05       	cpc	r25, r1
    1058:	10 f4       	brcc	.+4      	; 0x105e <malloc+0xe>
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	e0 91 e4 02 	lds	r30, 0x02E4
    1062:	f0 91 e5 02 	lds	r31, 0x02E5
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	a0 e0       	ldi	r26, 0x00	; 0
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	30 97       	sbiw	r30, 0x00	; 0
    1070:	39 f1       	breq	.+78     	; 0x10c0 <malloc+0x70>
    1072:	40 81       	ld	r20, Z
    1074:	51 81       	ldd	r21, Z+1	; 0x01
    1076:	48 17       	cp	r20, r24
    1078:	59 07       	cpc	r21, r25
    107a:	b8 f0       	brcs	.+46     	; 0x10aa <malloc+0x5a>
    107c:	48 17       	cp	r20, r24
    107e:	59 07       	cpc	r21, r25
    1080:	71 f4       	brne	.+28     	; 0x109e <malloc+0x4e>
    1082:	82 81       	ldd	r24, Z+2	; 0x02
    1084:	93 81       	ldd	r25, Z+3	; 0x03
    1086:	10 97       	sbiw	r26, 0x00	; 0
    1088:	29 f0       	breq	.+10     	; 0x1094 <malloc+0x44>
    108a:	13 96       	adiw	r26, 0x03	; 3
    108c:	9c 93       	st	X, r25
    108e:	8e 93       	st	-X, r24
    1090:	12 97       	sbiw	r26, 0x02	; 2
    1092:	2c c0       	rjmp	.+88     	; 0x10ec <malloc+0x9c>
    1094:	90 93 e5 02 	sts	0x02E5, r25
    1098:	80 93 e4 02 	sts	0x02E4, r24
    109c:	27 c0       	rjmp	.+78     	; 0x10ec <malloc+0x9c>
    109e:	21 15       	cp	r18, r1
    10a0:	31 05       	cpc	r19, r1
    10a2:	31 f0       	breq	.+12     	; 0x10b0 <malloc+0x60>
    10a4:	42 17       	cp	r20, r18
    10a6:	53 07       	cpc	r21, r19
    10a8:	18 f0       	brcs	.+6      	; 0x10b0 <malloc+0x60>
    10aa:	a9 01       	movw	r20, r18
    10ac:	db 01       	movw	r26, r22
    10ae:	01 c0       	rjmp	.+2      	; 0x10b2 <malloc+0x62>
    10b0:	ef 01       	movw	r28, r30
    10b2:	9a 01       	movw	r18, r20
    10b4:	bd 01       	movw	r22, r26
    10b6:	df 01       	movw	r26, r30
    10b8:	02 80       	ldd	r0, Z+2	; 0x02
    10ba:	f3 81       	ldd	r31, Z+3	; 0x03
    10bc:	e0 2d       	mov	r30, r0
    10be:	d7 cf       	rjmp	.-82     	; 0x106e <malloc+0x1e>
    10c0:	21 15       	cp	r18, r1
    10c2:	31 05       	cpc	r19, r1
    10c4:	f9 f0       	breq	.+62     	; 0x1104 <malloc+0xb4>
    10c6:	28 1b       	sub	r18, r24
    10c8:	39 0b       	sbc	r19, r25
    10ca:	24 30       	cpi	r18, 0x04	; 4
    10cc:	31 05       	cpc	r19, r1
    10ce:	80 f4       	brcc	.+32     	; 0x10f0 <malloc+0xa0>
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	9b 81       	ldd	r25, Y+3	; 0x03
    10d4:	61 15       	cp	r22, r1
    10d6:	71 05       	cpc	r23, r1
    10d8:	21 f0       	breq	.+8      	; 0x10e2 <malloc+0x92>
    10da:	fb 01       	movw	r30, r22
    10dc:	93 83       	std	Z+3, r25	; 0x03
    10de:	82 83       	std	Z+2, r24	; 0x02
    10e0:	04 c0       	rjmp	.+8      	; 0x10ea <malloc+0x9a>
    10e2:	90 93 e5 02 	sts	0x02E5, r25
    10e6:	80 93 e4 02 	sts	0x02E4, r24
    10ea:	fe 01       	movw	r30, r28
    10ec:	32 96       	adiw	r30, 0x02	; 2
    10ee:	44 c0       	rjmp	.+136    	; 0x1178 <malloc+0x128>
    10f0:	fe 01       	movw	r30, r28
    10f2:	e2 0f       	add	r30, r18
    10f4:	f3 1f       	adc	r31, r19
    10f6:	81 93       	st	Z+, r24
    10f8:	91 93       	st	Z+, r25
    10fa:	22 50       	subi	r18, 0x02	; 2
    10fc:	31 09       	sbc	r19, r1
    10fe:	39 83       	std	Y+1, r19	; 0x01
    1100:	28 83       	st	Y, r18
    1102:	3a c0       	rjmp	.+116    	; 0x1178 <malloc+0x128>
    1104:	20 91 e2 02 	lds	r18, 0x02E2
    1108:	30 91 e3 02 	lds	r19, 0x02E3
    110c:	23 2b       	or	r18, r19
    110e:	41 f4       	brne	.+16     	; 0x1120 <malloc+0xd0>
    1110:	20 91 02 02 	lds	r18, 0x0202
    1114:	30 91 03 02 	lds	r19, 0x0203
    1118:	30 93 e3 02 	sts	0x02E3, r19
    111c:	20 93 e2 02 	sts	0x02E2, r18
    1120:	20 91 00 02 	lds	r18, 0x0200
    1124:	30 91 01 02 	lds	r19, 0x0201
    1128:	21 15       	cp	r18, r1
    112a:	31 05       	cpc	r19, r1
    112c:	41 f4       	brne	.+16     	; 0x113e <malloc+0xee>
    112e:	2d b7       	in	r18, 0x3d	; 61
    1130:	3e b7       	in	r19, 0x3e	; 62
    1132:	40 91 04 02 	lds	r20, 0x0204
    1136:	50 91 05 02 	lds	r21, 0x0205
    113a:	24 1b       	sub	r18, r20
    113c:	35 0b       	sbc	r19, r21
    113e:	e0 91 e2 02 	lds	r30, 0x02E2
    1142:	f0 91 e3 02 	lds	r31, 0x02E3
    1146:	e2 17       	cp	r30, r18
    1148:	f3 07       	cpc	r31, r19
    114a:	a0 f4       	brcc	.+40     	; 0x1174 <malloc+0x124>
    114c:	2e 1b       	sub	r18, r30
    114e:	3f 0b       	sbc	r19, r31
    1150:	28 17       	cp	r18, r24
    1152:	39 07       	cpc	r19, r25
    1154:	78 f0       	brcs	.+30     	; 0x1174 <malloc+0x124>
    1156:	ac 01       	movw	r20, r24
    1158:	4e 5f       	subi	r20, 0xFE	; 254
    115a:	5f 4f       	sbci	r21, 0xFF	; 255
    115c:	24 17       	cp	r18, r20
    115e:	35 07       	cpc	r19, r21
    1160:	48 f0       	brcs	.+18     	; 0x1174 <malloc+0x124>
    1162:	4e 0f       	add	r20, r30
    1164:	5f 1f       	adc	r21, r31
    1166:	50 93 e3 02 	sts	0x02E3, r21
    116a:	40 93 e2 02 	sts	0x02E2, r20
    116e:	81 93       	st	Z+, r24
    1170:	91 93       	st	Z+, r25
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <malloc+0x128>
    1174:	e0 e0       	ldi	r30, 0x00	; 0
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	cf 01       	movw	r24, r30
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

00001180 <free>:
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	09 f4       	brne	.+2      	; 0x118a <free+0xa>
    1188:	87 c0       	rjmp	.+270    	; 0x1298 <free+0x118>
    118a:	fc 01       	movw	r30, r24
    118c:	32 97       	sbiw	r30, 0x02	; 2
    118e:	13 82       	std	Z+3, r1	; 0x03
    1190:	12 82       	std	Z+2, r1	; 0x02
    1192:	c0 91 e4 02 	lds	r28, 0x02E4
    1196:	d0 91 e5 02 	lds	r29, 0x02E5
    119a:	20 97       	sbiw	r28, 0x00	; 0
    119c:	81 f4       	brne	.+32     	; 0x11be <free+0x3e>
    119e:	20 81       	ld	r18, Z
    11a0:	31 81       	ldd	r19, Z+1	; 0x01
    11a2:	28 0f       	add	r18, r24
    11a4:	39 1f       	adc	r19, r25
    11a6:	80 91 e2 02 	lds	r24, 0x02E2
    11aa:	90 91 e3 02 	lds	r25, 0x02E3
    11ae:	82 17       	cp	r24, r18
    11b0:	93 07       	cpc	r25, r19
    11b2:	79 f5       	brne	.+94     	; 0x1212 <free+0x92>
    11b4:	f0 93 e3 02 	sts	0x02E3, r31
    11b8:	e0 93 e2 02 	sts	0x02E2, r30
    11bc:	6d c0       	rjmp	.+218    	; 0x1298 <free+0x118>
    11be:	de 01       	movw	r26, r28
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	ae 17       	cp	r26, r30
    11c6:	bf 07       	cpc	r27, r31
    11c8:	50 f4       	brcc	.+20     	; 0x11de <free+0x5e>
    11ca:	12 96       	adiw	r26, 0x02	; 2
    11cc:	4d 91       	ld	r20, X+
    11ce:	5c 91       	ld	r21, X
    11d0:	13 97       	sbiw	r26, 0x03	; 3
    11d2:	9d 01       	movw	r18, r26
    11d4:	41 15       	cp	r20, r1
    11d6:	51 05       	cpc	r21, r1
    11d8:	09 f1       	breq	.+66     	; 0x121c <free+0x9c>
    11da:	da 01       	movw	r26, r20
    11dc:	f3 cf       	rjmp	.-26     	; 0x11c4 <free+0x44>
    11de:	b3 83       	std	Z+3, r27	; 0x03
    11e0:	a2 83       	std	Z+2, r26	; 0x02
    11e2:	40 81       	ld	r20, Z
    11e4:	51 81       	ldd	r21, Z+1	; 0x01
    11e6:	84 0f       	add	r24, r20
    11e8:	95 1f       	adc	r25, r21
    11ea:	8a 17       	cp	r24, r26
    11ec:	9b 07       	cpc	r25, r27
    11ee:	71 f4       	brne	.+28     	; 0x120c <free+0x8c>
    11f0:	8d 91       	ld	r24, X+
    11f2:	9c 91       	ld	r25, X
    11f4:	11 97       	sbiw	r26, 0x01	; 1
    11f6:	84 0f       	add	r24, r20
    11f8:	95 1f       	adc	r25, r21
    11fa:	02 96       	adiw	r24, 0x02	; 2
    11fc:	91 83       	std	Z+1, r25	; 0x01
    11fe:	80 83       	st	Z, r24
    1200:	12 96       	adiw	r26, 0x02	; 2
    1202:	8d 91       	ld	r24, X+
    1204:	9c 91       	ld	r25, X
    1206:	13 97       	sbiw	r26, 0x03	; 3
    1208:	93 83       	std	Z+3, r25	; 0x03
    120a:	82 83       	std	Z+2, r24	; 0x02
    120c:	21 15       	cp	r18, r1
    120e:	31 05       	cpc	r19, r1
    1210:	29 f4       	brne	.+10     	; 0x121c <free+0x9c>
    1212:	f0 93 e5 02 	sts	0x02E5, r31
    1216:	e0 93 e4 02 	sts	0x02E4, r30
    121a:	3e c0       	rjmp	.+124    	; 0x1298 <free+0x118>
    121c:	d9 01       	movw	r26, r18
    121e:	13 96       	adiw	r26, 0x03	; 3
    1220:	fc 93       	st	X, r31
    1222:	ee 93       	st	-X, r30
    1224:	12 97       	sbiw	r26, 0x02	; 2
    1226:	4d 91       	ld	r20, X+
    1228:	5d 91       	ld	r21, X+
    122a:	a4 0f       	add	r26, r20
    122c:	b5 1f       	adc	r27, r21
    122e:	ea 17       	cp	r30, r26
    1230:	fb 07       	cpc	r31, r27
    1232:	79 f4       	brne	.+30     	; 0x1252 <free+0xd2>
    1234:	80 81       	ld	r24, Z
    1236:	91 81       	ldd	r25, Z+1	; 0x01
    1238:	84 0f       	add	r24, r20
    123a:	95 1f       	adc	r25, r21
    123c:	02 96       	adiw	r24, 0x02	; 2
    123e:	d9 01       	movw	r26, r18
    1240:	11 96       	adiw	r26, 0x01	; 1
    1242:	9c 93       	st	X, r25
    1244:	8e 93       	st	-X, r24
    1246:	82 81       	ldd	r24, Z+2	; 0x02
    1248:	93 81       	ldd	r25, Z+3	; 0x03
    124a:	13 96       	adiw	r26, 0x03	; 3
    124c:	9c 93       	st	X, r25
    124e:	8e 93       	st	-X, r24
    1250:	12 97       	sbiw	r26, 0x02	; 2
    1252:	e0 e0       	ldi	r30, 0x00	; 0
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	9b 81       	ldd	r25, Y+3	; 0x03
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	19 f0       	breq	.+6      	; 0x1264 <free+0xe4>
    125e:	fe 01       	movw	r30, r28
    1260:	ec 01       	movw	r28, r24
    1262:	f9 cf       	rjmp	.-14     	; 0x1256 <free+0xd6>
    1264:	ce 01       	movw	r24, r28
    1266:	02 96       	adiw	r24, 0x02	; 2
    1268:	28 81       	ld	r18, Y
    126a:	39 81       	ldd	r19, Y+1	; 0x01
    126c:	82 0f       	add	r24, r18
    126e:	93 1f       	adc	r25, r19
    1270:	20 91 e2 02 	lds	r18, 0x02E2
    1274:	30 91 e3 02 	lds	r19, 0x02E3
    1278:	28 17       	cp	r18, r24
    127a:	39 07       	cpc	r19, r25
    127c:	69 f4       	brne	.+26     	; 0x1298 <free+0x118>
    127e:	30 97       	sbiw	r30, 0x00	; 0
    1280:	29 f4       	brne	.+10     	; 0x128c <free+0x10c>
    1282:	10 92 e5 02 	sts	0x02E5, r1
    1286:	10 92 e4 02 	sts	0x02E4, r1
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <free+0x110>
    128c:	13 82       	std	Z+3, r1	; 0x03
    128e:	12 82       	std	Z+2, r1	; 0x02
    1290:	d0 93 e3 02 	sts	0x02E3, r29
    1294:	c0 93 e2 02 	sts	0x02E2, r28
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	08 95       	ret

0000129e <strnlen_P>:
    129e:	fc 01       	movw	r30, r24
    12a0:	05 90       	lpm	r0, Z+
    12a2:	61 50       	subi	r22, 0x01	; 1
    12a4:	70 40       	sbci	r23, 0x00	; 0
    12a6:	01 10       	cpse	r0, r1
    12a8:	d8 f7       	brcc	.-10     	; 0x12a0 <strnlen_P+0x2>
    12aa:	80 95       	com	r24
    12ac:	90 95       	com	r25
    12ae:	8e 0f       	add	r24, r30
    12b0:	9f 1f       	adc	r25, r31
    12b2:	08 95       	ret

000012b4 <memset>:
    12b4:	dc 01       	movw	r26, r24
    12b6:	01 c0       	rjmp	.+2      	; 0x12ba <memset+0x6>
    12b8:	6d 93       	st	X+, r22
    12ba:	41 50       	subi	r20, 0x01	; 1
    12bc:	50 40       	sbci	r21, 0x00	; 0
    12be:	e0 f7       	brcc	.-8      	; 0x12b8 <memset+0x4>
    12c0:	08 95       	ret

000012c2 <strnlen>:
    12c2:	fc 01       	movw	r30, r24
    12c4:	61 50       	subi	r22, 0x01	; 1
    12c6:	70 40       	sbci	r23, 0x00	; 0
    12c8:	01 90       	ld	r0, Z+
    12ca:	01 10       	cpse	r0, r1
    12cc:	d8 f7       	brcc	.-10     	; 0x12c4 <strnlen+0x2>
    12ce:	80 95       	com	r24
    12d0:	90 95       	com	r25
    12d2:	8e 0f       	add	r24, r30
    12d4:	9f 1f       	adc	r25, r31
    12d6:	08 95       	ret

000012d8 <fputc>:
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	18 2f       	mov	r17, r24
    12e2:	09 2f       	mov	r16, r25
    12e4:	eb 01       	movw	r28, r22
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	81 fd       	sbrc	r24, 1
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <fputc+0x1a>
    12ec:	8f ef       	ldi	r24, 0xFF	; 255
    12ee:	9f ef       	ldi	r25, 0xFF	; 255
    12f0:	20 c0       	rjmp	.+64     	; 0x1332 <fputc+0x5a>
    12f2:	82 ff       	sbrs	r24, 2
    12f4:	10 c0       	rjmp	.+32     	; 0x1316 <fputc+0x3e>
    12f6:	4e 81       	ldd	r20, Y+6	; 0x06
    12f8:	5f 81       	ldd	r21, Y+7	; 0x07
    12fa:	2c 81       	ldd	r18, Y+4	; 0x04
    12fc:	3d 81       	ldd	r19, Y+5	; 0x05
    12fe:	42 17       	cp	r20, r18
    1300:	53 07       	cpc	r21, r19
    1302:	7c f4       	brge	.+30     	; 0x1322 <fputc+0x4a>
    1304:	e8 81       	ld	r30, Y
    1306:	f9 81       	ldd	r31, Y+1	; 0x01
    1308:	9f 01       	movw	r18, r30
    130a:	2f 5f       	subi	r18, 0xFF	; 255
    130c:	3f 4f       	sbci	r19, 0xFF	; 255
    130e:	39 83       	std	Y+1, r19	; 0x01
    1310:	28 83       	st	Y, r18
    1312:	10 83       	st	Z, r17
    1314:	06 c0       	rjmp	.+12     	; 0x1322 <fputc+0x4a>
    1316:	e8 85       	ldd	r30, Y+8	; 0x08
    1318:	f9 85       	ldd	r31, Y+9	; 0x09
    131a:	81 2f       	mov	r24, r17
    131c:	19 95       	eicall
    131e:	89 2b       	or	r24, r25
    1320:	29 f7       	brne	.-54     	; 0x12ec <fputc+0x14>
    1322:	2e 81       	ldd	r18, Y+6	; 0x06
    1324:	3f 81       	ldd	r19, Y+7	; 0x07
    1326:	2f 5f       	subi	r18, 0xFF	; 255
    1328:	3f 4f       	sbci	r19, 0xFF	; 255
    132a:	3f 83       	std	Y+7, r19	; 0x07
    132c:	2e 83       	std	Y+6, r18	; 0x06
    132e:	81 2f       	mov	r24, r17
    1330:	90 2f       	mov	r25, r16
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	1f 91       	pop	r17
    1338:	0f 91       	pop	r16
    133a:	08 95       	ret

0000133c <__ultoa_invert>:
    133c:	fa 01       	movw	r30, r20
    133e:	aa 27       	eor	r26, r26
    1340:	28 30       	cpi	r18, 0x08	; 8
    1342:	51 f1       	breq	.+84     	; 0x1398 <__ultoa_invert+0x5c>
    1344:	20 31       	cpi	r18, 0x10	; 16
    1346:	81 f1       	breq	.+96     	; 0x13a8 <__ultoa_invert+0x6c>
    1348:	e8 94       	clt
    134a:	6f 93       	push	r22
    134c:	6e 7f       	andi	r22, 0xFE	; 254
    134e:	6e 5f       	subi	r22, 0xFE	; 254
    1350:	7f 4f       	sbci	r23, 0xFF	; 255
    1352:	8f 4f       	sbci	r24, 0xFF	; 255
    1354:	9f 4f       	sbci	r25, 0xFF	; 255
    1356:	af 4f       	sbci	r26, 0xFF	; 255
    1358:	b1 e0       	ldi	r27, 0x01	; 1
    135a:	3e d0       	rcall	.+124    	; 0x13d8 <__ultoa_invert+0x9c>
    135c:	b4 e0       	ldi	r27, 0x04	; 4
    135e:	3c d0       	rcall	.+120    	; 0x13d8 <__ultoa_invert+0x9c>
    1360:	67 0f       	add	r22, r23
    1362:	78 1f       	adc	r23, r24
    1364:	89 1f       	adc	r24, r25
    1366:	9a 1f       	adc	r25, r26
    1368:	a1 1d       	adc	r26, r1
    136a:	68 0f       	add	r22, r24
    136c:	79 1f       	adc	r23, r25
    136e:	8a 1f       	adc	r24, r26
    1370:	91 1d       	adc	r25, r1
    1372:	a1 1d       	adc	r26, r1
    1374:	6a 0f       	add	r22, r26
    1376:	71 1d       	adc	r23, r1
    1378:	81 1d       	adc	r24, r1
    137a:	91 1d       	adc	r25, r1
    137c:	a1 1d       	adc	r26, r1
    137e:	20 d0       	rcall	.+64     	; 0x13c0 <__ultoa_invert+0x84>
    1380:	09 f4       	brne	.+2      	; 0x1384 <__ultoa_invert+0x48>
    1382:	68 94       	set
    1384:	3f 91       	pop	r19
    1386:	2a e0       	ldi	r18, 0x0A	; 10
    1388:	26 9f       	mul	r18, r22
    138a:	11 24       	eor	r1, r1
    138c:	30 19       	sub	r19, r0
    138e:	30 5d       	subi	r19, 0xD0	; 208
    1390:	31 93       	st	Z+, r19
    1392:	de f6       	brtc	.-74     	; 0x134a <__ultoa_invert+0xe>
    1394:	cf 01       	movw	r24, r30
    1396:	08 95       	ret
    1398:	46 2f       	mov	r20, r22
    139a:	47 70       	andi	r20, 0x07	; 7
    139c:	40 5d       	subi	r20, 0xD0	; 208
    139e:	41 93       	st	Z+, r20
    13a0:	b3 e0       	ldi	r27, 0x03	; 3
    13a2:	0f d0       	rcall	.+30     	; 0x13c2 <__ultoa_invert+0x86>
    13a4:	c9 f7       	brne	.-14     	; 0x1398 <__ultoa_invert+0x5c>
    13a6:	f6 cf       	rjmp	.-20     	; 0x1394 <__ultoa_invert+0x58>
    13a8:	46 2f       	mov	r20, r22
    13aa:	4f 70       	andi	r20, 0x0F	; 15
    13ac:	40 5d       	subi	r20, 0xD0	; 208
    13ae:	4a 33       	cpi	r20, 0x3A	; 58
    13b0:	18 f0       	brcs	.+6      	; 0x13b8 <__ultoa_invert+0x7c>
    13b2:	49 5d       	subi	r20, 0xD9	; 217
    13b4:	31 fd       	sbrc	r19, 1
    13b6:	40 52       	subi	r20, 0x20	; 32
    13b8:	41 93       	st	Z+, r20
    13ba:	02 d0       	rcall	.+4      	; 0x13c0 <__ultoa_invert+0x84>
    13bc:	a9 f7       	brne	.-22     	; 0x13a8 <__ultoa_invert+0x6c>
    13be:	ea cf       	rjmp	.-44     	; 0x1394 <__ultoa_invert+0x58>
    13c0:	b4 e0       	ldi	r27, 0x04	; 4
    13c2:	a6 95       	lsr	r26
    13c4:	97 95       	ror	r25
    13c6:	87 95       	ror	r24
    13c8:	77 95       	ror	r23
    13ca:	67 95       	ror	r22
    13cc:	ba 95       	dec	r27
    13ce:	c9 f7       	brne	.-14     	; 0x13c2 <__ultoa_invert+0x86>
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	61 05       	cpc	r22, r1
    13d4:	71 05       	cpc	r23, r1
    13d6:	08 95       	ret
    13d8:	9b 01       	movw	r18, r22
    13da:	ac 01       	movw	r20, r24
    13dc:	0a 2e       	mov	r0, r26
    13de:	06 94       	lsr	r0
    13e0:	57 95       	ror	r21
    13e2:	47 95       	ror	r20
    13e4:	37 95       	ror	r19
    13e6:	27 95       	ror	r18
    13e8:	ba 95       	dec	r27
    13ea:	c9 f7       	brne	.-14     	; 0x13de <__ultoa_invert+0xa2>
    13ec:	62 0f       	add	r22, r18
    13ee:	73 1f       	adc	r23, r19
    13f0:	84 1f       	adc	r24, r20
    13f2:	95 1f       	adc	r25, r21
    13f4:	a0 1d       	adc	r26, r0
    13f6:	08 95       	ret

000013f8 <_exit>:
    13f8:	f8 94       	cli

000013fa <__stop_program>:
    13fa:	ff cf       	rjmp	.-2      	; 0x13fa <__stop_program>
