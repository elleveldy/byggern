
ByggernGruppe48H2015.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e0  00800100  00001e70  00001f04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  008002e0  008002e0  000020e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000020e4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003c8  00000000  00000000  00002140  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000037e3  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001457  00000000  00000000  00005ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001401  00000000  00000000  00007142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000998  00000000  00000000  00008544  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000976  00000000  00000000  00008edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001c98  00000000  00000000  00009852  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000328  00000000  00000000  0000b4ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <new_Menuitem>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e0 e7       	ldi	r30, 0x70	; 112
     37c:	fe e1       	ldi	r31, 0x1E	; 30
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a0 3e       	cpi	r26, 0xE0	; 224
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a0 ee       	ldi	r26, 0xE0	; 224
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a0 30       	cpi	r26, 0x00	; 0
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 24 05 	call	0xa48	; 0xa48 <main>
     39e:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_init>:
#include <string.h>
#include <util/delay.h>



void can_init(int mode){
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	ec 01       	movw	r28, r24

	mcp2515_init();
     3ac:	0e 94 8a 05 	call	0xb14	; 0xb14 <mcp2515_init>
	mcp2515_bit_modify(MCP_RXB0CTRL, MCP_MASK_FILTER, 0xff);
     3b0:	4f ef       	ldi	r20, 0xFF	; 255
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	60 e6       	ldi	r22, 0x60	; 96
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	80 e6       	ldi	r24, 0x60	; 96
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 6c 05 	call	0xad8	; 0xad8 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXB1CTRL, MCP_MASK_FILTER, 0xff);
     3c0:	4f ef       	ldi	r20, 0xFF	; 255
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	60 e6       	ldi	r22, 0x60	; 96
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 e7       	ldi	r24, 0x70	; 112
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 6c 05 	call	0xad8	; 0xad8 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, mode);
     3d0:	ae 01       	movw	r20, r28
     3d2:	60 ee       	ldi	r22, 0xE0	; 224
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	8f e0       	ldi	r24, 0x0F	; 15
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 6c 05 	call	0xad8	; 0xad8 <mcp2515_bit_modify>
	DDRE &= ~(1 << PE0);
     3de:	30 98       	cbi	0x06, 0	; 6
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <can_transmit>:

void can_transmit(can_message* msg, int buffer_select){
     3e6:	8f 92       	push	r8
     3e8:	9f 92       	push	r9
     3ea:	af 92       	push	r10
     3ec:	bf 92       	push	r11
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	00 d0       	rcall	.+0      	; 0x400 <can_transmit+0x1a>
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
     404:	5c 01       	movw	r10, r24
     406:	7b 01       	movw	r14, r22
	
	mcp2515_bit_modify(buffer_select, 0x08, 0xff);
     408:	4f ef       	ldi	r20, 0xFF	; 255
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	68 e0       	ldi	r22, 0x08	; 8
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	c7 01       	movw	r24, r14
     412:	0e 94 6c 05 	call	0xad8	; 0xad8 <mcp2515_bit_modify>
	
	while(mcp2515_read(buffer_select) & (1 << MCP_TXREQ));
     416:	c7 01       	movw	r24, r14
     418:	0e 94 46 05 	call	0xa8c	; 0xa8c <mcp2515_read>
     41c:	83 fd       	sbrc	r24, 3
     41e:	fb cf       	rjmp	.-10     	; 0x416 <can_transmit+0x30>
	
	volatile uint8_t idl = MCP2515_MASK_IDL & (msg->id << 5);
     420:	f5 01       	movw	r30, r10
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	28 2f       	mov	r18, r24
     428:	22 95       	swap	r18
     42a:	22 0f       	add	r18, r18
     42c:	20 7e       	andi	r18, 0xE0	; 224
     42e:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t idh = MCP2515_MASK_IDH & (msg->id >> 3);
     430:	96 95       	lsr	r25
     432:	87 95       	ror	r24
     434:	96 95       	lsr	r25
     436:	87 95       	ror	r24
     438:	96 95       	lsr	r25
     43a:	87 95       	ror	r24
     43c:	8a 83       	std	Y+2, r24	; 0x02
	
	mcp2515_write(buffer_select + MCP2515_IDL_OFFSET, idl); //3 LSB
     43e:	69 81       	ldd	r22, Y+1	; 0x01
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	c7 01       	movw	r24, r14
     444:	02 96       	adiw	r24, 0x02	; 2
     446:	0e 94 55 05 	call	0xaaa	; 0xaaa <mcp2515_write>
	mcp2515_write(buffer_select + MCP2515_IDH_OFFSET, idh); //8 MSB
     44a:	6a 81       	ldd	r22, Y+2	; 0x02
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	c7 01       	movw	r24, r14
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	0e 94 55 05 	call	0xaaa	; 0xaaa <mcp2515_write>
	
	mcp2515_write(buffer_select + MCP2515_DLC_OFFSET, MCP2515_MASK_DLC & (msg->length));
     456:	f5 01       	movw	r30, r10
     458:	62 81       	ldd	r22, Z+2	; 0x02
     45a:	6f 70       	andi	r22, 0x0F	; 15
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	c7 01       	movw	r24, r14
     460:	05 96       	adiw	r24, 0x05	; 5
     462:	0e 94 55 05 	call	0xaaa	; 0xaaa <mcp2515_write>
	
	
	for(int i = 0; i < msg->length; i++){
     466:	f5 01       	movw	r30, r10
     468:	82 81       	ldd	r24, Z+2	; 0x02
     46a:	88 23       	and	r24, r24
     46c:	d9 f0       	breq	.+54     	; 0x4a4 <can_transmit+0xbe>
     46e:	65 01       	movw	r12, r10
     470:	f3 e0       	ldi	r31, 0x03	; 3
     472:	cf 0e       	add	r12, r31
     474:	d1 1c       	adc	r13, r1
     476:	00 e0       	ldi	r16, 0x00	; 0
     478:	10 e0       	ldi	r17, 0x00	; 0
     47a:	47 01       	movw	r8, r14
     47c:	86 e0       	ldi	r24, 0x06	; 6
     47e:	88 0e       	add	r8, r24
     480:	91 1c       	adc	r9, r1
		mcp2515_write(buffer_select + MCP2515_TXB_OFFSET + i, msg->data[i]);
     482:	f6 01       	movw	r30, r12
     484:	61 91       	ld	r22, Z+
     486:	6f 01       	movw	r12, r30
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	c4 01       	movw	r24, r8
     48c:	80 0f       	add	r24, r16
     48e:	91 1f       	adc	r25, r17
     490:	0e 94 55 05 	call	0xaaa	; 0xaaa <mcp2515_write>
	mcp2515_write(buffer_select + MCP2515_IDH_OFFSET, idh); //8 MSB
	
	mcp2515_write(buffer_select + MCP2515_DLC_OFFSET, MCP2515_MASK_DLC & (msg->length));
	
	
	for(int i = 0; i < msg->length; i++){
     494:	0f 5f       	subi	r16, 0xFF	; 255
     496:	1f 4f       	sbci	r17, 0xFF	; 255
     498:	f5 01       	movw	r30, r10
     49a:	82 81       	ldd	r24, Z+2	; 0x02
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	08 17       	cp	r16, r24
     4a0:	19 07       	cpc	r17, r25
     4a2:	7c f3       	brlt	.-34     	; 0x482 <can_transmit+0x9c>
		
	}
	
	int buffer_control;
	
	if (buffer_select == MCP_TXB0CTRL){
     4a4:	f0 e3       	ldi	r31, 0x30	; 48
     4a6:	ef 16       	cp	r14, r31
     4a8:	f1 04       	cpc	r15, r1
     4aa:	59 f0       	breq	.+22     	; 0x4c2 <can_transmit+0xdc>
		buffer_control = MCP_RTS_TX0;
	}
	else if (buffer_select == MCP_TXB1CTRL){
     4ac:	80 e4       	ldi	r24, 0x40	; 64
     4ae:	e8 16       	cp	r14, r24
     4b0:	f1 04       	cpc	r15, r1
     4b2:	51 f0       	breq	.+20     	; 0x4c8 <can_transmit+0xe2>
		buffer_control = MCP_RTS_TX1;
	}
	else if (buffer_select == MCP_TXB2CTRL){
     4b4:	e0 e5       	ldi	r30, 0x50	; 80
     4b6:	ee 16       	cp	r14, r30
     4b8:	f1 04       	cpc	r15, r1
     4ba:	51 f4       	brne	.+20     	; 0x4d0 <can_transmit+0xea>
		buffer_control=MCP_RTS_TX2;
     4bc:	84 e8       	ldi	r24, 0x84	; 132
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	05 c0       	rjmp	.+10     	; 0x4cc <can_transmit+0xe6>
	}
	
	int buffer_control;
	
	if (buffer_select == MCP_TXB0CTRL){
		buffer_control = MCP_RTS_TX0;
     4c2:	81 e8       	ldi	r24, 0x81	; 129
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <can_transmit+0xe6>
	}
	else if (buffer_select == MCP_TXB1CTRL){
		buffer_control = MCP_RTS_TX1;
     4c8:	82 e8       	ldi	r24, 0x82	; 130
     4ca:	90 e0       	ldi	r25, 0x00	; 0
		return; 
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
     4cc:	0e 94 67 05 	call	0xace	; 0xace <mcp2515_request_to_send>
}
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	9f 90       	pop	r9
     4ea:	8f 90       	pop	r8
     4ec:	08 95       	ret

000004ee <can_poll_interrupt>:
}


uint8_t can_poll_interrupt(){
	
	while(!(PINE & (1 << PE0))){}
     4ee:	28 9b       	sbis	0x05, 0	; 5
     4f0:	fe cf       	rjmp	.-4      	; 0x4ee <can_poll_interrupt>
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
     4f2:	8c e2       	ldi	r24, 0x2C	; 44
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 46 05 	call	0xa8c	; 0xa8c <mcp2515_read>
     4fa:	80 fd       	sbrc	r24, 0
     4fc:	08 c0       	rjmp	.+16     	; 0x50e <__stack+0xf>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
	}
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
     4fe:	8c e2       	ldi	r24, 0x2C	; 44
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 46 05 	call	0xa8c	; 0xa8c <mcp2515_read>
     506:	81 ff       	sbrs	r24, 1
     508:	04 c0       	rjmp	.+8      	; 0x512 <__stack+0x13>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
     50a:	80 e7       	ldi	r24, 0x70	; 112
     50c:	08 95       	ret
	
	while(!(PINE & (1 << PE0))){}
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
     50e:	80 e6       	ldi	r24, 0x60	; 96
     510:	08 95       	ret
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
	}
	return -1;
     512:	8f ef       	ldi	r24, 0xFF	; 255
}
     514:	08 95       	ret

00000516 <can_recieve>:
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
}

can_message can_recieve(can_message* msg){
     516:	7f 92       	push	r7
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	2b 97       	sbiw	r28, 0x0b	; 11
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	6c 01       	movw	r12, r24
	can_message m;
	
	uint8_t buffer_select = can_poll_interrupt();
     542:	0e 94 77 02 	call	0x4ee	; 0x4ee <can_poll_interrupt>
     546:	98 2e       	mov	r9, r24
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
     548:	08 2f       	mov	r16, r24
     54a:	10 e0       	ldi	r17, 0x00	; 0
     54c:	c8 01       	movw	r24, r16
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	0e 94 46 05 	call	0xa8c	; 0xa8c <mcp2515_read>
     554:	7c 01       	movw	r14, r24
     556:	c8 01       	movw	r24, r16
     558:	02 96       	adiw	r24, 0x02	; 2
     55a:	0e 94 46 05 	call	0xa8c	; 0xa8c <mcp2515_read>
     55e:	95 95       	asr	r25
     560:	87 95       	ror	r24
     562:	95 95       	asr	r25
     564:	87 95       	ror	r24
     566:	95 95       	asr	r25
     568:	87 95       	ror	r24
     56a:	95 95       	asr	r25
     56c:	87 95       	ror	r24
     56e:	95 95       	asr	r25
     570:	87 95       	ror	r24
     572:	ee 0c       	add	r14, r14
     574:	ff 1c       	adc	r15, r15
     576:	ee 0c       	add	r14, r14
     578:	ff 1c       	adc	r15, r15
     57a:	ee 0c       	add	r14, r14
     57c:	ff 1c       	adc	r15, r15
     57e:	5c 01       	movw	r10, r24
     580:	ae 28       	or	r10, r14
     582:	bf 28       	or	r11, r15
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
     584:	c8 01       	movw	r24, r16
     586:	05 96       	adiw	r24, 0x05	; 5
     588:	0e 94 46 05 	call	0xa8c	; 0xa8c <mcp2515_read>
     58c:	8f 70       	andi	r24, 0x0F	; 15
     58e:	78 2e       	mov	r7, r24
	
	for(uint8_t i = 0; i < m.length; i++){
     590:	b1 f0       	breq	.+44     	; 0x5be <can_recieve+0xa8>
     592:	8e 01       	movw	r16, r28
     594:	0c 5f       	subi	r16, 0xFC	; 252
     596:	1f 4f       	sbci	r17, 0xFF	; 255
     598:	81 2c       	mov	r8, r1
     59a:	ce 01       	movw	r24, r28
     59c:	80 95       	com	r24
     59e:	90 95       	com	r25
     5a0:	03 96       	adiw	r24, 0x03	; 3
     5a2:	7c 01       	movw	r14, r24
     5a4:	e9 0c       	add	r14, r9
     5a6:	f1 1c       	adc	r15, r1
		m.data[i] = mcp2515_read(buffer_select + MCP2515_RXB_OFFSET + i);// + i, msg->data[i]);
     5a8:	c7 01       	movw	r24, r14
     5aa:	80 0f       	add	r24, r16
     5ac:	91 1f       	adc	r25, r17
     5ae:	0e 94 46 05 	call	0xa8c	; 0xa8c <mcp2515_read>
     5b2:	f8 01       	movw	r30, r16
     5b4:	81 93       	st	Z+, r24
     5b6:	8f 01       	movw	r16, r30
	uint8_t buffer_select = can_poll_interrupt();
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
	
	for(uint8_t i = 0; i < m.length; i++){
     5b8:	83 94       	inc	r8
     5ba:	87 10       	cpse	r8, r7
     5bc:	f5 cf       	rjmp	.-22     	; 0x5a8 <can_recieve+0x92>
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	
	switch(buffer_select){
     5be:	f0 e6       	ldi	r31, 0x60	; 96
     5c0:	9f 16       	cp	r9, r31
     5c2:	21 f0       	breq	.+8      	; 0x5cc <can_recieve+0xb6>
     5c4:	80 e7       	ldi	r24, 0x70	; 112
     5c6:	98 16       	cp	r9, r24
     5c8:	51 f0       	breq	.+20     	; 0x5de <can_recieve+0xc8>
     5ca:	11 c0       	rjmp	.+34     	; 0x5ee <can_recieve+0xd8>
		case MCP_RXB0CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	61 e0       	ldi	r22, 0x01	; 1
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	8c e2       	ldi	r24, 0x2C	; 44
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 6c 05 	call	0xad8	; 0xad8 <mcp2515_bit_modify>
		break;
     5dc:	08 c0       	rjmp	.+16     	; 0x5ee <can_recieve+0xd8>
		case MCP_RXB1CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	62 e0       	ldi	r22, 0x02	; 2
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	8c e2       	ldi	r24, 0x2C	; 44
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 6c 05 	call	0xad8	; 0xad8 <mcp2515_bit_modify>
		break;
	}
	
	return m;
     5ee:	ba 82       	std	Y+2, r11	; 0x02
     5f0:	a9 82       	std	Y+1, r10	; 0x01
     5f2:	7b 82       	std	Y+3, r7	; 0x03
     5f4:	8b e0       	ldi	r24, 0x0B	; 11
     5f6:	fe 01       	movw	r30, r28
     5f8:	31 96       	adiw	r30, 0x01	; 1
     5fa:	d6 01       	movw	r26, r12
     5fc:	01 90       	ld	r0, Z+
     5fe:	0d 92       	st	X+, r0
     600:	8a 95       	dec	r24
     602:	e1 f7       	brne	.-8      	; 0x5fc <can_recieve+0xe6>
}
     604:	c6 01       	movw	r24, r12
     606:	2b 96       	adiw	r28, 0x0b	; 11
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	cd bf       	out	0x3d, r28	; 61
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	ff 90       	pop	r15
     61c:	ef 90       	pop	r14
     61e:	df 90       	pop	r13
     620:	cf 90       	pop	r12
     622:	bf 90       	pop	r11
     624:	af 90       	pop	r10
     626:	9f 90       	pop	r9
     628:	8f 90       	pop	r8
     62a:	7f 90       	pop	r7
     62c:	08 95       	ret

0000062e <can_test_loopback>:

In other words, Node 2 is told to test the can driver
by a can message. Yes, CAN see the irony.
**********************************************************/

void can_test_loopback(){
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
     636:	a1 97       	sbiw	r28, 0x21	; 33
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	cd bf       	out	0x3d, r28	; 61
	can_init(MODE_LOOPBACK);
     642:	80 e4       	ldi	r24, 0x40	; 64
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
	
	can_message msg;
	msg.id = CAN_TEST_LOOPBACK;
     64a:	8c e2       	ldi	r24, 0x2C	; 44
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	9a 83       	std	Y+2, r25	; 0x02
     650:	89 83       	std	Y+1, r24	; 0x01
	msg.length = 1;
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	8b 83       	std	Y+3, r24	; 0x03
	msg.data[0] = 'T';
     656:	84 e5       	ldi	r24, 0x54	; 84
     658:	8c 83       	std	Y+4, r24	; 0x04
	
	can_transmit(&msg, MCP_TXB0CTRL);
     65a:	60 e3       	ldi	r22, 0x30	; 48
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	ce 01       	movw	r24, r28
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <can_transmit>
	
	can_message recieved;
	can_message done = can_recieve(&recieved);
     666:	be 01       	movw	r22, r28
     668:	64 5f       	subi	r22, 0xF4	; 244
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	ce 01       	movw	r24, r28
     66e:	47 96       	adiw	r24, 0x17	; 23
     670:	0e 94 8b 02 	call	0x516	; 0x516 <can_recieve>
	
	printf("\n\nSend ID = 10\tRecieved ID = %d\nSend Length = 1\tRecieved Length = %d\nSend Data = 'T'\tRecieved Data = %c\n\n", done.id, done.length, done.data[0]);
     674:	8a 8d       	ldd	r24, Y+26	; 0x1a
     676:	1f 92       	push	r1
     678:	8f 93       	push	r24
     67a:	89 8d       	ldd	r24, Y+25	; 0x19
     67c:	1f 92       	push	r1
     67e:	8f 93       	push	r24
     680:	88 8d       	ldd	r24, Y+24	; 0x18
     682:	8f 93       	push	r24
     684:	8f 89       	ldd	r24, Y+23	; 0x17
     686:	8f 93       	push	r24
     688:	8a e0       	ldi	r24, 0x0A	; 10
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	9f 93       	push	r25
     68e:	8f 93       	push	r24
     690:	0e 94 c0 0b 	call	0x1780	; 0x1780 <printf>
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	de bf       	out	0x3e, r29	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	cd bf       	out	0x3d, r28	; 61
	
	
}
     69e:	a1 96       	adiw	r28, 0x21	; 33
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	08 95       	ret

000006b0 <canjoy_recieve>:

}


//Not needed in Node1
can_message canjoy_recieve(){
     6b0:	8f 92       	push	r8
     6b2:	9f 92       	push	r9
     6b4:	af 92       	push	r10
     6b6:	bf 92       	push	r11
     6b8:	cf 92       	push	r12
     6ba:	df 92       	push	r13
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	2b 97       	sbiw	r28, 0x0b	; 11
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	8c 01       	movw	r16, r24
	
	can_message unused;
	
	can_message joy = can_recieve(&unused);
     6da:	be 01       	movw	r22, r28
     6dc:	6f 5f       	subi	r22, 0xFF	; 255
     6de:	7f 4f       	sbci	r23, 0xFF	; 255
     6e0:	0e 94 8b 02 	call	0x516	; 0x516 <can_recieve>
     6e4:	f8 01       	movw	r30, r16
     6e6:	82 80       	ldd	r8, Z+2	; 0x02
     6e8:	93 80       	ldd	r9, Z+3	; 0x03
     6ea:	a4 80       	ldd	r10, Z+4	; 0x04
     6ec:	b5 80       	ldd	r11, Z+5	; 0x05
     6ee:	c6 80       	ldd	r12, Z+6	; 0x06
     6f0:	d7 80       	ldd	r13, Z+7	; 0x07
     6f2:	e0 84       	ldd	r14, Z+8	; 0x08
     6f4:	f1 84       	ldd	r15, Z+9	; 0x09
	
	if(joy.id == GAME_ID){
     6f6:	80 81       	ld	r24, Z
     6f8:	91 81       	ldd	r25, Z+1	; 0x01
     6fa:	07 97       	sbiw	r24, 0x07	; 7
     6fc:	f1 f4       	brne	.+60     	; 0x73a <canjoy_recieve+0x8a>
		printf("Correct ID\n");
     6fe:	85 ea       	ldi	r24, 0xA5	; 165
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <puts>
		canjoy_msg = joy;
     706:	f8 01       	movw	r30, r16
     708:	82 82       	std	Z+2, r8	; 0x02
     70a:	93 82       	std	Z+3, r9	; 0x03
     70c:	a4 82       	std	Z+4, r10	; 0x04
     70e:	b5 82       	std	Z+5, r11	; 0x05
     710:	c6 82       	std	Z+6, r12	; 0x06
     712:	d7 82       	std	Z+7, r13	; 0x07
     714:	e0 86       	std	Z+8, r14	; 0x08
     716:	f1 86       	std	Z+9, r15	; 0x09
     718:	8b e0       	ldi	r24, 0x0B	; 11
     71a:	a1 ee       	ldi	r26, 0xE1	; 225
     71c:	b2 e0       	ldi	r27, 0x02	; 2
     71e:	01 90       	ld	r0, Z+
     720:	0d 92       	st	X+, r0
     722:	8a 95       	dec	r24
     724:	e1 f7       	brne	.-8      	; 0x71e <canjoy_recieve+0x6e>
		return joy;
     726:	f8 01       	movw	r30, r16
     728:	82 82       	std	Z+2, r8	; 0x02
     72a:	93 82       	std	Z+3, r9	; 0x03
     72c:	a4 82       	std	Z+4, r10	; 0x04
     72e:	b5 82       	std	Z+5, r11	; 0x05
     730:	c6 82       	std	Z+6, r12	; 0x06
     732:	d7 82       	std	Z+7, r13	; 0x07
     734:	e0 86       	std	Z+8, r14	; 0x08
     736:	f1 86       	std	Z+9, r15	; 0x09
     738:	0a c0       	rjmp	.+20     	; 0x74e <canjoy_recieve+0x9e>
	joy.data[2] = 0;
	joy.data[3] = 0;
	joy.data[4] = 0;
	joy.data[5] = 0;
	joy.data[6] = 0;
	return joy;
     73a:	87 e0       	ldi	r24, 0x07	; 7
     73c:	f8 01       	movw	r30, r16
     73e:	82 83       	std	Z+2, r24	; 0x02
     740:	13 82       	std	Z+3, r1	; 0x03
     742:	14 82       	std	Z+4, r1	; 0x04
     744:	15 82       	std	Z+5, r1	; 0x05
     746:	16 82       	std	Z+6, r1	; 0x06
     748:	17 82       	std	Z+7, r1	; 0x07
     74a:	10 86       	std	Z+8, r1	; 0x08
     74c:	11 86       	std	Z+9, r1	; 0x09
}
     74e:	c8 01       	movw	r24, r16
     750:	2b 96       	adiw	r28, 0x0b	; 11
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	bf 90       	pop	r11
     76e:	af 90       	pop	r10
     770:	9f 90       	pop	r9
     772:	8f 90       	pop	r8
     774:	08 95       	ret

00000776 <game_play>:


//transmitts input through can bus
//Allows you to leave game by button pressing

void game_play(){
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	6f 97       	sbiw	r28, 0x1f	; 31
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
		//fiks this
	can_message mode = canjoy_recieve(&mode);
     78e:	be 01       	movw	r22, r28
     790:	6b 5e       	subi	r22, 0xEB	; 235
     792:	7f 4f       	sbci	r23, 0xFF	; 255
     794:	cb 01       	movw	r24, r22
     796:	0e 94 58 03 	call	0x6b0	; 0x6b0 <canjoy_recieve>
	
	
	
	oled_alt_clear_screen();
     79a:	0e 94 4d 08 	call	0x109a	; 0x109a <oled_alt_clear_screen>
	
	while(1){
		
		//oled_alt_clear_screen();
		
		oled_store_string((char[7]){"Return"}, 0, 7);
     79e:	07 e0       	ldi	r16, 0x07	; 7
		oled_store_string((char[13]){"Playing game"}, 2*8, 3);
     7a0:	1d e0       	ldi	r17, 0x0D	; 13
	
	while(1){
		
		//oled_alt_clear_screen();
		
		oled_store_string((char[7]){"Return"}, 0, 7);
     7a2:	e0 eb       	ldi	r30, 0xB0	; 176
     7a4:	f1 e0       	ldi	r31, 0x01	; 1
     7a6:	de 01       	movw	r26, r28
     7a8:	1e 96       	adiw	r26, 0x0e	; 14
     7aa:	80 2f       	mov	r24, r16
     7ac:	01 90       	ld	r0, Z+
     7ae:	0d 92       	st	X+, r0
     7b0:	8a 95       	dec	r24
     7b2:	e1 f7       	brne	.-8      	; 0x7ac <game_play+0x36>
     7b4:	47 e0       	ldi	r20, 0x07	; 7
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	ce 01       	movw	r24, r28
     7be:	0e 96       	adiw	r24, 0x0e	; 14
     7c0:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <oled_store_string>
		oled_store_string((char[13]){"Playing game"}, 2*8, 3);
     7c4:	e7 eb       	ldi	r30, 0xB7	; 183
     7c6:	f1 e0       	ldi	r31, 0x01	; 1
     7c8:	de 01       	movw	r26, r28
     7ca:	11 96       	adiw	r26, 0x01	; 1
     7cc:	81 2f       	mov	r24, r17
     7ce:	01 90       	ld	r0, Z+
     7d0:	0d 92       	st	X+, r0
     7d2:	8a 95       	dec	r24
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <game_play+0x58>
     7d6:	43 e0       	ldi	r20, 0x03	; 3
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	60 e1       	ldi	r22, 0x10	; 16
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	ce 01       	movw	r24, r28
     7e0:	01 96       	adiw	r24, 0x01	; 1
     7e2:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <oled_store_string>
		//printf("Timer3: %u", timer_read(TIMER_3));
		
		
		
		//leave game
		if(button_left_read()){
     7e6:	0e 94 1c 05 	call	0xa38	; 0xa38 <button_left_read>
     7ea:	88 23       	and	r24, r24
     7ec:	d1 f2       	breq	.-76     	; 0x7a2 <game_play+0x2c>
		
		
		
	}
	
     7ee:	6f 96       	adiw	r28, 0x1f	; 31
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	08 95       	ret

00000804 <gui_alt_print_menu>:

}


//Prints the menu you're in and it's submenues
void gui_alt_print_menu(Menuitem* menu){
     804:	ef 92       	push	r14
     806:	ff 92       	push	r15
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
	Menuitem* parent = menu_parent(menu);
     810:	0e 94 cc 06 	call	0xd98	; 0xd98 <menu_parent>
     814:	7c 01       	movw	r14, r24
	
	oled_alt_clear_screen();
     816:	0e 94 4d 08 	call	0x109a	; 0x109a <oled_alt_clear_screen>
	oled_store_string(menu_name(parent), 0, 0);
     81a:	c7 01       	movw	r24, r14
     81c:	0e 94 5f 07 	call	0xebe	; 0xebe <menu_name>
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <oled_store_string>
	//oled_store((char[sizeof(menu_name(parent)) + 1]){menu_name(parent)}, (int[2]){0,0});
	
	for(int n = 0; n < parent->num_submenus; n++){
     82c:	d7 01       	movw	r26, r14
     82e:	8c 91       	ld	r24, X
     830:	88 23       	and	r24, r24
     832:	e9 f0       	breq	.+58     	; 0x86e <gui_alt_print_menu+0x6a>
     834:	00 e0       	ldi	r16, 0x00	; 0
     836:	10 e0       	ldi	r17, 0x00	; 0
     838:	c0 e0       	ldi	r28, 0x00	; 0
     83a:	d0 e0       	ldi	r29, 0x00	; 0
		oled_store_string(menu_name(parent->submenus[n] ), 8, n+1);
     83c:	21 96       	adiw	r28, 0x01	; 1
     83e:	d7 01       	movw	r26, r14
     840:	11 96       	adiw	r26, 0x01	; 1
     842:	ed 91       	ld	r30, X+
     844:	fc 91       	ld	r31, X
     846:	12 97       	sbiw	r26, 0x02	; 2
     848:	e0 0f       	add	r30, r16
     84a:	f1 1f       	adc	r31, r17
     84c:	80 81       	ld	r24, Z
     84e:	91 81       	ldd	r25, Z+1	; 0x01
     850:	0e 94 5f 07 	call	0xebe	; 0xebe <menu_name>
     854:	ae 01       	movw	r20, r28
     856:	68 e0       	ldi	r22, 0x08	; 8
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <oled_store_string>
     85e:	0e 5f       	subi	r16, 0xFE	; 254
     860:	1f 4f       	sbci	r17, 0xFF	; 255
	
	oled_alt_clear_screen();
	oled_store_string(menu_name(parent), 0, 0);
	//oled_store((char[sizeof(menu_name(parent)) + 1]){menu_name(parent)}, (int[2]){0,0});
	
	for(int n = 0; n < parent->num_submenus; n++){
     862:	f7 01       	movw	r30, r14
     864:	80 81       	ld	r24, Z
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	c8 17       	cp	r28, r24
     86a:	d9 07       	cpc	r29, r25
     86c:	3c f3       	brlt	.-50     	; 0x83c <gui_alt_print_menu+0x38>
		oled_store_string(menu_name(parent->submenus[n] ), 8, n+1);
		//oled_store((char[sizeof(menu_name(parent->submenus[n])) + 1]){menu_name(parent->submenus[n])}, (int[2]){0,0});
		
	}
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	ef 90       	pop	r14
     87a:	08 95       	ret

0000087c <gui_alt_navigate>:


//uses global variable menu_selector and changes 
//what submenu it points to according to joystick movement.
//Must be run in a while loop
void gui_alt_navigate(){
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
	
	
	//If we're pointing at Main menu, point to first submenu instead
	if(strcmp(menu_selector->name, "Main") == 0){
     880:	c0 91 f2 02 	lds	r28, 0x02F2
     884:	d0 91 f3 02 	lds	r29, 0x02F3
     888:	64 ec       	ldi	r22, 0xC4	; 196
     88a:	71 e0       	ldi	r23, 0x01	; 1
     88c:	8d 81       	ldd	r24, Y+5	; 0x05
     88e:	9e 81       	ldd	r25, Y+6	; 0x06
     890:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <strcmp>
     894:	89 2b       	or	r24, r25
     896:	39 f4       	brne	.+14     	; 0x8a6 <gui_alt_navigate+0x2a>
		menu_selector = menu_submenu(menu_selector);
     898:	ce 01       	movw	r24, r28
     89a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <menu_submenu>
     89e:	90 93 f3 02 	sts	0x02F3, r25
     8a2:	80 93 f2 02 	sts	0x02F2, r24
	}

	int threshold = 70;
	
	
	if(joystick_x_value() > threshold){
     8a6:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <joystick_x_value>
     8aa:	87 34       	cpi	r24, 0x47	; 71
     8ac:	a4 f0       	brlt	.+40     	; 0x8d6 <gui_alt_navigate+0x5a>
		menu_selector = menu_submenu(menu_selector);
     8ae:	80 91 f2 02 	lds	r24, 0x02F2
     8b2:	90 91 f3 02 	lds	r25, 0x02F3
     8b6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <menu_submenu>
     8ba:	90 93 f3 02 	sts	0x02F3, r25
     8be:	80 93 f2 02 	sts	0x02F2, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8c2:	2f ef       	ldi	r18, 0xFF	; 255
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	92 e0       	ldi	r25, 0x02	; 2
     8c8:	21 50       	subi	r18, 0x01	; 1
     8ca:	80 40       	sbci	r24, 0x00	; 0
     8cc:	90 40       	sbci	r25, 0x00	; 0
     8ce:	e1 f7       	brne	.-8      	; 0x8c8 <gui_alt_navigate+0x4c>
     8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <gui_alt_navigate+0x56>
     8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <gui_alt_navigate+0x58>
     8d4:	67 c0       	rjmp	.+206    	; 0x9a4 <gui_alt_navigate+0x128>
		_delay_ms(200);
	}
	else if(joystick_x_value() < -threshold){
     8d6:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <joystick_x_value>
     8da:	8a 3b       	cpi	r24, 0xBA	; 186
     8dc:	a4 f4       	brge	.+40     	; 0x906 <gui_alt_navigate+0x8a>
		menu_selector = menu_parent(menu_selector);
     8de:	80 91 f2 02 	lds	r24, 0x02F2
     8e2:	90 91 f3 02 	lds	r25, 0x02F3
     8e6:	0e 94 cc 06 	call	0xd98	; 0xd98 <menu_parent>
     8ea:	90 93 f3 02 	sts	0x02F3, r25
     8ee:	80 93 f2 02 	sts	0x02F2, r24
     8f2:	2f ef       	ldi	r18, 0xFF	; 255
     8f4:	8f ef       	ldi	r24, 0xFF	; 255
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	21 50       	subi	r18, 0x01	; 1
     8fa:	80 40       	sbci	r24, 0x00	; 0
     8fc:	90 40       	sbci	r25, 0x00	; 0
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <gui_alt_navigate+0x7c>
     900:	00 c0       	rjmp	.+0      	; 0x902 <gui_alt_navigate+0x86>
     902:	00 c0       	rjmp	.+0      	; 0x904 <gui_alt_navigate+0x88>
     904:	4f c0       	rjmp	.+158    	; 0x9a4 <gui_alt_navigate+0x128>
		_delay_ms(200);
		
	}
	else if(joystick_y_value() > threshold){
     906:	0e 94 fe 04 	call	0x9fc	; 0x9fc <joystick_y_value>
     90a:	87 34       	cpi	r24, 0x47	; 71
     90c:	a4 f0       	brlt	.+40     	; 0x936 <gui_alt_navigate+0xba>
		menu_selector = menu_prev(menu_selector);
     90e:	80 91 f2 02 	lds	r24, 0x02F2
     912:	90 91 f3 02 	lds	r25, 0x02F3
     916:	0e 94 01 07 	call	0xe02	; 0xe02 <menu_prev>
     91a:	90 93 f3 02 	sts	0x02F3, r25
     91e:	80 93 f2 02 	sts	0x02F2, r24
     922:	2f ef       	ldi	r18, 0xFF	; 255
     924:	8f ef       	ldi	r24, 0xFF	; 255
     926:	92 e0       	ldi	r25, 0x02	; 2
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	80 40       	sbci	r24, 0x00	; 0
     92c:	90 40       	sbci	r25, 0x00	; 0
     92e:	e1 f7       	brne	.-8      	; 0x928 <gui_alt_navigate+0xac>
     930:	00 c0       	rjmp	.+0      	; 0x932 <gui_alt_navigate+0xb6>
     932:	00 c0       	rjmp	.+0      	; 0x934 <gui_alt_navigate+0xb8>
     934:	37 c0       	rjmp	.+110    	; 0x9a4 <gui_alt_navigate+0x128>
		_delay_ms(200);

		
	}
	else if(joystick_y_value() < -threshold){
     936:	0e 94 fe 04 	call	0x9fc	; 0x9fc <joystick_y_value>
     93a:	8a 3b       	cpi	r24, 0xBA	; 186
     93c:	e4 f4       	brge	.+56     	; 0x976 <gui_alt_navigate+0xfa>
		//if there is a next item:
		if(menu_next(menu_selector) != NULL){
     93e:	80 91 f2 02 	lds	r24, 0x02F2
     942:	90 91 f3 02 	lds	r25, 0x02F3
     946:	0e 94 d3 06 	call	0xda6	; 0xda6 <menu_next>
     94a:	89 2b       	or	r24, r25
     94c:	59 f1       	breq	.+86     	; 0x9a4 <gui_alt_navigate+0x128>
			menu_selector = menu_next(menu_selector);
     94e:	80 91 f2 02 	lds	r24, 0x02F2
     952:	90 91 f3 02 	lds	r25, 0x02F3
     956:	0e 94 d3 06 	call	0xda6	; 0xda6 <menu_next>
     95a:	90 93 f3 02 	sts	0x02F3, r25
     95e:	80 93 f2 02 	sts	0x02F2, r24
     962:	2f ef       	ldi	r18, 0xFF	; 255
     964:	8f ef       	ldi	r24, 0xFF	; 255
     966:	92 e0       	ldi	r25, 0x02	; 2
     968:	21 50       	subi	r18, 0x01	; 1
     96a:	80 40       	sbci	r24, 0x00	; 0
     96c:	90 40       	sbci	r25, 0x00	; 0
     96e:	e1 f7       	brne	.-8      	; 0x968 <gui_alt_navigate+0xec>
     970:	00 c0       	rjmp	.+0      	; 0x972 <gui_alt_navigate+0xf6>
     972:	00 c0       	rjmp	.+0      	; 0x974 <gui_alt_navigate+0xf8>
     974:	17 c0       	rjmp	.+46     	; 0x9a4 <gui_alt_navigate+0x128>
			_delay_ms(200);
		}
	}
	else if(joystick_button_read()){
     976:	0e 94 18 05 	call	0xa30	; 0xa30 <joystick_button_read>
     97a:	88 23       	and	r24, r24
     97c:	99 f0       	breq	.+38     	; 0x9a4 <gui_alt_navigate+0x128>
		if(menu_selector->fn != NULL ){	//if the function pointer points to a function, call it
     97e:	e0 91 f2 02 	lds	r30, 0x02F2
     982:	f0 91 f3 02 	lds	r31, 0x02F3
     986:	07 80       	ldd	r0, Z+7	; 0x07
     988:	f0 85       	ldd	r31, Z+8	; 0x08
     98a:	e0 2d       	mov	r30, r0
     98c:	30 97       	sbiw	r30, 0x00	; 0
     98e:	51 f0       	breq	.+20     	; 0x9a4 <gui_alt_navigate+0x128>
			menu_selector->fn();
     990:	09 95       	icall
     992:	2f ef       	ldi	r18, 0xFF	; 255
     994:	8f ef       	ldi	r24, 0xFF	; 255
     996:	92 e0       	ldi	r25, 0x02	; 2
     998:	21 50       	subi	r18, 0x01	; 1
     99a:	80 40       	sbci	r24, 0x00	; 0
     99c:	90 40       	sbci	r25, 0x00	; 0
     99e:	e1 f7       	brne	.-8      	; 0x998 <gui_alt_navigate+0x11c>
     9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <gui_alt_navigate+0x126>
     9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <gui_alt_navigate+0x128>
		}
		else{}
	}
	
	
}
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <gui_alt_run>:
#include "gui_alt.h"


void gui_alt_run()
{
	gui_alt_print_menu(menu_selector);
     9aa:	80 91 f2 02 	lds	r24, 0x02F2
     9ae:	90 91 f3 02 	lds	r25, 0x02F3
     9b2:	0e 94 02 04 	call	0x804	; 0x804 <gui_alt_print_menu>
	
	gui_alt_navigate();
     9b6:	0e 94 3e 04 	call	0x87c	; 0x87c <gui_alt_navigate>
	

	oled_invert_line(menu_submenu_number(menu_selector));
     9ba:	80 91 f2 02 	lds	r24, 0x02F2
     9be:	90 91 f3 02 	lds	r25, 0x02F3
     9c2:	0e 94 30 07 	call	0xe60	; 0xe60 <menu_submenu_number>
     9c6:	0e 94 09 08 	call	0x1012	; 0x1012 <oled_invert_line>
     9ca:	08 95       	ret

000009cc <joystick_read_x>:


uint8_t joystick_read_x(){
	
	volatile char *ext_joy = (char *) 0x1400;
	ext_joy[0] = 0x04;
     9cc:	84 e0       	ldi	r24, 0x04	; 4
     9ce:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9d2:	81 e4       	ldi	r24, 0x41	; 65
     9d4:	8a 95       	dec	r24
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <joystick_read_x+0x8>
     9d8:	00 c0       	rjmp	.+0      	; 0x9da <joystick_read_x+0xe>
	_delay_us(40);
	return (uint8_t)ext_joy[0];
     9da:	80 91 00 14 	lds	r24, 0x1400
	
}
     9de:	08 95       	ret

000009e0 <joystick_read_y>:


uint8_t joystick_read_y(){
	
	volatile char *ext_joy = (char *) 0x1400;
	ext_joy[0] = 0x05;
     9e0:	85 e0       	ldi	r24, 0x05	; 5
     9e2:	80 93 00 14 	sts	0x1400, r24
     9e6:	81 e4       	ldi	r24, 0x41	; 65
     9e8:	8a 95       	dec	r24
     9ea:	f1 f7       	brne	.-4      	; 0x9e8 <joystick_read_y+0x8>
     9ec:	00 c0       	rjmp	.+0      	; 0x9ee <joystick_read_y+0xe>
	_delay_us(40);
	return (uint8_t)ext_joy[0];
     9ee:	80 91 00 14 	lds	r24, 0x1400
	
}
     9f2:	08 95       	ret

000009f4 <joystick_x_value>:

int8_t joystick_x_value(){
	return (joystick_read_x() - 127);
     9f4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <joystick_read_x>
}
     9f8:	8f 57       	subi	r24, 0x7F	; 127
     9fa:	08 95       	ret

000009fc <joystick_y_value>:

int8_t joystick_y_value(){
	return (joystick_read_y() - 127);
     9fc:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <joystick_read_y>
}
     a00:	8f 57       	subi	r24, 0x7F	; 127
     a02:	08 95       	ret

00000a04 <slider_left_read>:



uint8_t slider_left_read(){
	volatile char *ext_slide = (char *) 0x1400;
	ext_slide[0] = 0x06;
     a04:	86 e0       	ldi	r24, 0x06	; 6
     a06:	80 93 00 14 	sts	0x1400, r24
     a0a:	81 e4       	ldi	r24, 0x41	; 65
     a0c:	8a 95       	dec	r24
     a0e:	f1 f7       	brne	.-4      	; 0xa0c <slider_left_read+0x8>
     a10:	00 c0       	rjmp	.+0      	; 0xa12 <slider_left_read+0xe>
	_delay_us(40);
	return (uint8_t)ext_slide[0];
     a12:	80 91 00 14 	lds	r24, 0x1400
}
     a16:	08 95       	ret

00000a18 <buttons_init>:
int8_t slider_right_value(){
	return (slider_right_read() - 127);	
}

void buttons_init(){
	DDRB &= ~(1 << DDB1);	// ????
     a18:	b9 98       	cbi	0x17, 1	; 23
	
	//left & right
	DDRB &= (1<< PINB0); //right
     a1a:	87 b3       	in	r24, 0x17	; 23
     a1c:	81 70       	andi	r24, 0x01	; 1
     a1e:	87 bb       	out	0x17, r24	; 23
	DDRB &= (1<< PINB1); //left
     a20:	87 b3       	in	r24, 0x17	; 23
     a22:	82 70       	andi	r24, 0x02	; 2
     a24:	87 bb       	out	0x17, r24	; 23

	//joystick button activate
	DDRB &= (1 << PINB2);
     a26:	87 b3       	in	r24, 0x17	; 23
     a28:	84 70       	andi	r24, 0x04	; 4
     a2a:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << PINB2);
     a2c:	c2 9a       	sbi	0x18, 2	; 24
     a2e:	08 95       	ret

00000a30 <joystick_button_read>:
}

uint8_t joystick_button_read(){
	int button = (PINB & (1 << PINB3));
	if (button > 0){
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	b3 99       	sbic	0x16, 3	; 22
     a34:	80 e0       	ldi	r24, 0x00	; 0
	else{
		return 1;
	}
	
	
}
     a36:	08 95       	ret

00000a38 <button_left_read>:

uint8_t button_left_read(){
	int button = (PINB & (1 << PINB1));
	if (button > 0){
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	b1 9b       	sbis	0x16, 1	; 22
     a3c:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
}
     a3e:	08 95       	ret

00000a40 <button_right_read>:

uint8_t button_right_read(){
	int button = (PINB & (1 << PINB0));
	if (button > 0){
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	b0 9b       	sbis	0x16, 0	; 22
     a44:	80 e0       	ldi	r24, 0x00	; 0
	}
	else{
		return 0;
	}
	
}
     a46:	08 95       	ret

00000a48 <main>:

*/


int main(void){
	fdevopen(uart_Transmit, uart_Receive);
     a48:	66 ed       	ldi	r22, 0xD6	; 214
     a4a:	79 e0       	ldi	r23, 0x09	; 9
     a4c:	82 ed       	ldi	r24, 0xD2	; 210
     a4e:	99 e0       	ldi	r25, 0x09	; 9
     a50:	0e 94 75 0b 	call	0x16ea	; 0x16ea <fdevopen>
	
	MCUCR |= (1 << SRE);
     a54:	85 b7       	in	r24, 0x35	; 53
     a56:	80 68       	ori	r24, 0x80	; 128
     a58:	85 bf       	out	0x35, r24	; 53
	
	uart_Init(MYUBRR);
     a5a:	8f e1       	ldi	r24, 0x1F	; 31
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 da 09 	call	0x13b4	; 0x13b4 <uart_Init>
	
	
	buttons_init(); // useless thus far
     a62:	0e 94 0c 05 	call	0xa18	; 0xa18 <buttons_init>

	
	Menuitem* menu = create_menu();
     a66:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <create_menu>
	menu_selector = menu;
     a6a:	90 93 f3 02 	sts	0x02F3, r25
     a6e:	80 93 f2 02 	sts	0x02F2, r24
	//menu_line_nr = 0; 
	
	
	//consider putting this elsewhere, to
	//allow selection of can tests in runtime
	can_init(MODE_NORMAL);
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
	
	timer_init();	
     a7a:	0e 94 80 09 	call	0x1300	; 0x1300 <timer_init>
	oled_alt_init();
     a7e:	0e 94 63 07 	call	0xec6	; 0xec6 <oled_alt_init>

	
	while(1){


		gui_alt_run();
     a82:	0e 94 d5 04 	call	0x9aa	; 0x9aa <gui_alt_run>

		oled_refresh_60Hz();
     a86:	0e 94 fd 07 	call	0xffa	; 0xffa <oled_refresh_60Hz>
     a8a:	fb cf       	rjmp	.-10     	; 0xa82 <main+0x3a>

00000a8c <mcp2515_read>:
	}
	return 0;
}


int mcp2515_read(int address){
     a8c:	cf 93       	push	r28
     a8e:	c8 2f       	mov	r28, r24
	
	int result;
	
	PORTB &= ~(1 << MCP2515_CS);
     a90:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_READ);
     a92:	83 e0       	ldi	r24, 0x03	; 3
     a94:	0e 94 2f 09 	call	0x125e	; 0x125e <spi_write>
	spi_write(address);
     a98:	8c 2f       	mov	r24, r28
     a9a:	0e 94 2f 09 	call	0x125e	; 0x125e <spi_write>
	
	result = spi_write(0x00);
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	0e 94 2f 09 	call	0x125e	; 0x125e <spi_write>
	
	PORTB |= (1 << MCP2515_CS);
     aa4:	c4 9a       	sbi	0x18, 4	; 24
	return result;
}
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <mcp2515_write>:

void mcp2515_write(int address, int data){
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	d8 2f       	mov	r29, r24
     ab0:	c6 2f       	mov	r28, r22
	
	PORTB &= ~(1 << MCP2515_CS);
     ab2:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_WRITE);
     ab4:	82 e0       	ldi	r24, 0x02	; 2
     ab6:	0e 94 2f 09 	call	0x125e	; 0x125e <spi_write>
	spi_write(address);
     aba:	8d 2f       	mov	r24, r29
     abc:	0e 94 2f 09 	call	0x125e	; 0x125e <spi_write>
	spi_write(data);
     ac0:	8c 2f       	mov	r24, r28
     ac2:	0e 94 2f 09 	call	0x125e	; 0x125e <spi_write>
	
	PORTB |= (1 << MCP2515_CS);	
     ac6:	c4 9a       	sbi	0x18, 4	; 24
}
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	08 95       	ret

00000ace <mcp2515_request_to_send>:

void mcp2515_request_to_send(int buffer_select){
	PORTB &= ~(1 << MCP2515_CS);
     ace:	c4 98       	cbi	0x18, 4	; 24
	spi_write(buffer_select);
     ad0:	0e 94 2f 09 	call	0x125e	; 0x125e <spi_write>
	PORTB |= (1 << MCP2515_CS);
     ad4:	c4 9a       	sbi	0x18, 4	; 24
     ad6:	08 95       	ret

00000ad8 <mcp2515_bit_modify>:
}

void mcp2515_bit_modify(int address, int mask, int data){
     ad8:	1f 93       	push	r17
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	18 2f       	mov	r17, r24
     ae0:	d6 2f       	mov	r29, r22
     ae2:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS);
     ae4:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_BITMOD);
     ae6:	85 e0       	ldi	r24, 0x05	; 5
     ae8:	0e 94 2f 09 	call	0x125e	; 0x125e <spi_write>
	spi_write(address);
     aec:	81 2f       	mov	r24, r17
     aee:	0e 94 2f 09 	call	0x125e	; 0x125e <spi_write>
	spi_write(mask);
     af2:	8d 2f       	mov	r24, r29
     af4:	0e 94 2f 09 	call	0x125e	; 0x125e <spi_write>
	spi_write(data);
     af8:	8c 2f       	mov	r24, r28
     afa:	0e 94 2f 09 	call	0x125e	; 0x125e <spi_write>

	PORTB |= (1 << MCP2515_CS);
     afe:	c4 9a       	sbi	0x18, 4	; 24
	
}
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	08 95       	ret

00000b08 <mcp2515_reset>:

void mcp2515_reset(){
	PORTB &= ~(1 << MCP2515_CS);
     b08:	c4 98       	cbi	0x18, 4	; 24
	spi_write(MCP_RESET);
     b0a:	80 ec       	ldi	r24, 0xC0	; 192
     b0c:	0e 94 2f 09 	call	0x125e	; 0x125e <spi_write>
	PORTB |= (1 << MCP2515_CS);
     b10:	c4 9a       	sbi	0x18, 4	; 24
     b12:	08 95       	ret

00000b14 <mcp2515_init>:
#include "SPI.h"
#include "mcp2515_define.h"


int mcp2515_init(){
	spi_init();
     b14:	0e 94 28 09 	call	0x1250	; 0x1250 <spi_init>
	mcp2515_reset();
     b18:	0e 94 84 05 	call	0xb08	; 0xb08 <mcp2515_reset>
	
	uint8_t value = mcp2515_read(MCP_CANSTAT);
     b1c:	8e e0       	ldi	r24, 0x0E	; 14
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	0e 94 46 05 	call	0xa8c	; 0xa8c <mcp2515_read>
	if((value & MODE_MASK) != MODE_CONFIG){
     b24:	80 7e       	andi	r24, 0xE0	; 224
     b26:	99 27       	eor	r25, r25
     b28:	80 38       	cpi	r24, 0x80	; 128
     b2a:	91 05       	cpc	r25, r1
     b2c:	39 f0       	breq	.+14     	; 0xb3c <mcp2515_init+0x28>
		printf("ERROR: MCP2515 is NOT in config mode after reset!\n");
     b2e:	89 ec       	ldi	r24, 0xC9	; 201
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <puts>
		return 1;
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	08 95       	ret
	}
	return 0;
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
}
     b40:	08 95       	ret

00000b42 <new_Menuitem>:

Menuitem* new_Menuitem(
char* name,				
void (*fn)(void),		//pointer to function
uint8_t num_submenus	
){
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	7c 01       	movw	r14, r24
     b52:	8b 01       	movw	r16, r22
     b54:	d4 2e       	mov	r13, r20
	Menuitem* this = malloc(sizeof(Menuitem));
     b56:	89 e0       	ldi	r24, 0x09	; 9
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 e7 09 	call	0x13ce	; 0x13ce <malloc>
     b5e:	ec 01       	movw	r28, r24
	this->name = name;
     b60:	fe 82       	std	Y+6, r15	; 0x06
     b62:	ed 82       	std	Y+5, r14	; 0x05
	this->fn = fn;
     b64:	18 87       	std	Y+8, r17	; 0x08
     b66:	0f 83       	std	Y+7, r16	; 0x07
	
	this->num_submenus = num_submenus;
     b68:	d8 82       	st	Y, r13
	this->submenus = malloc(sizeof(Menuitem) * num_submenus);
     b6a:	4d 2d       	mov	r20, r13
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	ca 01       	movw	r24, r20
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	88 0f       	add	r24, r24
     b76:	99 1f       	adc	r25, r25
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	84 0f       	add	r24, r20
     b7e:	95 1f       	adc	r25, r21
     b80:	0e 94 e7 09 	call	0x13ce	; 0x13ce <malloc>
     b84:	9a 83       	std	Y+2, r25	; 0x02
     b86:	89 83       	std	Y+1, r24	; 0x01
	
	return this;
}
     b88:	ce 01       	movw	r24, r28
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	df 90       	pop	r13
     b98:	08 95       	ret

00000b9a <assign_parents>:


void assign_parents(Menuitem* menu){
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	ec 01       	movw	r28, r24
	for(uint8_t n = 0; n < menu->num_submenus; n++){
     ba2:	88 81       	ld	r24, Y
     ba4:	88 23       	and	r24, r24
     ba6:	01 f1       	breq	.+64     	; 0xbe8 <assign_parents+0x4e>
     ba8:	10 e0       	ldi	r17, 0x00	; 0
		menu->submenus[n]->parent = menu;
     baa:	81 2f       	mov	r24, r17
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	e9 81       	ldd	r30, Y+1	; 0x01
     bb4:	fa 81       	ldd	r31, Y+2	; 0x02
     bb6:	e8 0f       	add	r30, r24
     bb8:	f9 1f       	adc	r31, r25
     bba:	01 90       	ld	r0, Z+
     bbc:	f0 81       	ld	r31, Z
     bbe:	e0 2d       	mov	r30, r0
     bc0:	d4 83       	std	Z+4, r29	; 0x04
     bc2:	c3 83       	std	Z+3, r28	; 0x03
		if(menu->submenus[n]->num_submenus > 0){
     bc4:	29 81       	ldd	r18, Y+1	; 0x01
     bc6:	3a 81       	ldd	r19, Y+2	; 0x02
     bc8:	f9 01       	movw	r30, r18
     bca:	e8 0f       	add	r30, r24
     bcc:	f9 1f       	adc	r31, r25
     bce:	01 90       	ld	r0, Z+
     bd0:	f0 81       	ld	r31, Z
     bd2:	e0 2d       	mov	r30, r0
     bd4:	80 81       	ld	r24, Z
     bd6:	88 23       	and	r24, r24
     bd8:	19 f0       	breq	.+6      	; 0xbe0 <assign_parents+0x46>
			assign_parents(menu->submenus[n]);
     bda:	cf 01       	movw	r24, r30
     bdc:	0e 94 cd 05 	call	0xb9a	; 0xb9a <assign_parents>
	return this;
}


void assign_parents(Menuitem* menu){
	for(uint8_t n = 0; n < menu->num_submenus; n++){
     be0:	1f 5f       	subi	r17, 0xFF	; 255
     be2:	88 81       	ld	r24, Y
     be4:	18 17       	cp	r17, r24
     be6:	08 f3       	brcs	.-62     	; 0xbaa <assign_parents+0x10>
		menu->submenus[n]->parent = menu;
		if(menu->submenus[n]->num_submenus > 0){
			assign_parents(menu->submenus[n]);
		}
	}
}
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	1f 91       	pop	r17
     bee:	08 95       	ret

00000bf0 <create_menu>:


Menuitem* create_menu(){
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
base->submenus[1] = new_Menuitem("Games", NULL, 2);
base->submenus[0]->submenus[0] = new_Menuitem("Ping Pong", NULL, 0);
base->submenus[0]->submenus[1] = new_Menuitem("Snake", NULL, 0);
*/

	Menuitem* base = new_Menuitem("Main", NULL, 3);
     bf8:	43 e0       	ldi	r20, 0x03	; 3
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	84 ec       	ldi	r24, 0xC4	; 196
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	0e 94 a1 05 	call	0xb42	; 0xb42 <new_Menuitem>
     c06:	ec 01       	movw	r28, r24
	
	base->submenus[0] = new_Menuitem("Games", NULL, 2);
     c08:	09 81       	ldd	r16, Y+1	; 0x01
     c0a:	1a 81       	ldd	r17, Y+2	; 0x02
     c0c:	42 e0       	ldi	r20, 0x02	; 2
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	8b ef       	ldi	r24, 0xFB	; 251
     c14:	91 e0       	ldi	r25, 0x01	; 1
     c16:	0e 94 a1 05 	call	0xb42	; 0xb42 <new_Menuitem>
     c1a:	f8 01       	movw	r30, r16
     c1c:	91 83       	std	Z+1, r25	; 0x01
     c1e:	80 83       	st	Z, r24
		base->submenus[0]->submenus[0] = new_Menuitem("Game", game_play, 0);
     c20:	e9 81       	ldd	r30, Y+1	; 0x01
     c22:	fa 81       	ldd	r31, Y+2	; 0x02
     c24:	01 90       	ld	r0, Z+
     c26:	f0 81       	ld	r31, Z
     c28:	e0 2d       	mov	r30, r0
     c2a:	01 81       	ldd	r16, Z+1	; 0x01
     c2c:	12 81       	ldd	r17, Z+2	; 0x02
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	6b eb       	ldi	r22, 0xBB	; 187
     c32:	73 e0       	ldi	r23, 0x03	; 3
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	92 e0       	ldi	r25, 0x02	; 2
     c38:	0e 94 a1 05 	call	0xb42	; 0xb42 <new_Menuitem>
     c3c:	f8 01       	movw	r30, r16
     c3e:	91 83       	std	Z+1, r25	; 0x01
     c40:	80 83       	st	Z, r24
		base->submenus[0]->submenus[1] = new_Menuitem("Snake", NULL, 0);
     c42:	e9 81       	ldd	r30, Y+1	; 0x01
     c44:	fa 81       	ldd	r31, Y+2	; 0x02
     c46:	01 90       	ld	r0, Z+
     c48:	f0 81       	ld	r31, Z
     c4a:	e0 2d       	mov	r30, r0
     c4c:	01 81       	ldd	r16, Z+1	; 0x01
     c4e:	12 81       	ldd	r17, Z+2	; 0x02
     c50:	40 e0       	ldi	r20, 0x00	; 0
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	86 e0       	ldi	r24, 0x06	; 6
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	0e 94 a1 05 	call	0xb42	; 0xb42 <new_Menuitem>
     c5e:	f8 01       	movw	r30, r16
     c60:	93 83       	std	Z+3, r25	; 0x03
     c62:	82 83       	std	Z+2, r24	; 0x02
	
	base->submenus[1] = new_Menuitem("Settings", NULL, 3);
     c64:	09 81       	ldd	r16, Y+1	; 0x01
     c66:	1a 81       	ldd	r17, Y+2	; 0x02
     c68:	43 e0       	ldi	r20, 0x03	; 3
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	8c e0       	ldi	r24, 0x0C	; 12
     c70:	92 e0       	ldi	r25, 0x02	; 2
     c72:	0e 94 a1 05 	call	0xb42	; 0xb42 <new_Menuitem>
     c76:	f8 01       	movw	r30, r16
     c78:	93 83       	std	Z+3, r25	; 0x03
     c7a:	82 83       	std	Z+2, r24	; 0x02
		base->submenus[1]->submenus[0] = new_Menuitem("Contrast", oled_alt_change_contrast, 0);
     c7c:	e9 81       	ldd	r30, Y+1	; 0x01
     c7e:	fa 81       	ldd	r31, Y+2	; 0x02
     c80:	02 80       	ldd	r0, Z+2	; 0x02
     c82:	f3 81       	ldd	r31, Z+3	; 0x03
     c84:	e0 2d       	mov	r30, r0
     c86:	01 81       	ldd	r16, Z+1	; 0x01
     c88:	12 81       	ldd	r17, Z+2	; 0x02
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	6c e6       	ldi	r22, 0x6C	; 108
     c8e:	78 e0       	ldi	r23, 0x08	; 8
     c90:	85 e1       	ldi	r24, 0x15	; 21
     c92:	92 e0       	ldi	r25, 0x02	; 2
     c94:	0e 94 a1 05 	call	0xb42	; 0xb42 <new_Menuitem>
     c98:	f8 01       	movw	r30, r16
     c9a:	91 83       	std	Z+1, r25	; 0x01
     c9c:	80 83       	st	Z, r24
		base->submenus[1]->submenus[1] = new_Menuitem("Toggle negative", oled_alt_toggle_negative, 0);
     c9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ca0:	fa 81       	ldd	r31, Y+2	; 0x02
     ca2:	02 80       	ldd	r0, Z+2	; 0x02
     ca4:	f3 81       	ldd	r31, Z+3	; 0x03
     ca6:	e0 2d       	mov	r30, r0
     ca8:	01 81       	ldd	r16, Z+1	; 0x01
     caa:	12 81       	ldd	r17, Z+2	; 0x02
     cac:	40 e0       	ldi	r20, 0x00	; 0
     cae:	6b e5       	ldi	r22, 0x5B	; 91
     cb0:	78 e0       	ldi	r23, 0x08	; 8
     cb2:	8e e1       	ldi	r24, 0x1E	; 30
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	0e 94 a1 05 	call	0xb42	; 0xb42 <new_Menuitem>
     cba:	f8 01       	movw	r30, r16
     cbc:	93 83       	std	Z+3, r25	; 0x03
     cbe:	82 83       	std	Z+2, r24	; 0x02
		base->submenus[1]->submenus[2] = new_Menuitem("Seizure", oled_epleptic_seizure, 0);
     cc0:	e9 81       	ldd	r30, Y+1	; 0x01
     cc2:	fa 81       	ldd	r31, Y+2	; 0x02
     cc4:	02 80       	ldd	r0, Z+2	; 0x02
     cc6:	f3 81       	ldd	r31, Z+3	; 0x03
     cc8:	e0 2d       	mov	r30, r0
     cca:	01 81       	ldd	r16, Z+1	; 0x01
     ccc:	12 81       	ldd	r17, Z+2	; 0x02
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	6d e1       	ldi	r22, 0x1D	; 29
     cd2:	79 e0       	ldi	r23, 0x09	; 9
     cd4:	8e e2       	ldi	r24, 0x2E	; 46
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	0e 94 a1 05 	call	0xb42	; 0xb42 <new_Menuitem>
     cdc:	f8 01       	movw	r30, r16
     cde:	95 83       	std	Z+5, r25	; 0x05
     ce0:	84 83       	std	Z+4, r24	; 0x04
		
		
	base->submenus[2] = new_Menuitem("Tests", NULL, 2);
     ce2:	09 81       	ldd	r16, Y+1	; 0x01
     ce4:	1a 81       	ldd	r17, Y+2	; 0x02
     ce6:	42 e0       	ldi	r20, 0x02	; 2
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	86 e3       	ldi	r24, 0x36	; 54
     cee:	92 e0       	ldi	r25, 0x02	; 2
     cf0:	0e 94 a1 05 	call	0xb42	; 0xb42 <new_Menuitem>
     cf4:	f8 01       	movw	r30, r16
     cf6:	95 83       	std	Z+5, r25	; 0x05
     cf8:	84 83       	std	Z+4, r24	; 0x04
		base->submenus[2]->submenus[0] = new_Menuitem("Can", NULL, 1);
     cfa:	e9 81       	ldd	r30, Y+1	; 0x01
     cfc:	fa 81       	ldd	r31, Y+2	; 0x02
     cfe:	04 80       	ldd	r0, Z+4	; 0x04
     d00:	f5 81       	ldd	r31, Z+5	; 0x05
     d02:	e0 2d       	mov	r30, r0
     d04:	01 81       	ldd	r16, Z+1	; 0x01
     d06:	12 81       	ldd	r17, Z+2	; 0x02
     d08:	41 e0       	ldi	r20, 0x01	; 1
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	8c e3       	ldi	r24, 0x3C	; 60
     d10:	92 e0       	ldi	r25, 0x02	; 2
     d12:	0e 94 a1 05 	call	0xb42	; 0xb42 <new_Menuitem>
     d16:	f8 01       	movw	r30, r16
     d18:	91 83       	std	Z+1, r25	; 0x01
     d1a:	80 83       	st	Z, r24
			base->submenus[2]->submenus[0]->submenus[0] = new_Menuitem("Loopback", can_test_loopback, 0);
     d1c:	e9 81       	ldd	r30, Y+1	; 0x01
     d1e:	fa 81       	ldd	r31, Y+2	; 0x02
     d20:	04 80       	ldd	r0, Z+4	; 0x04
     d22:	f5 81       	ldd	r31, Z+5	; 0x05
     d24:	e0 2d       	mov	r30, r0
     d26:	01 80       	ldd	r0, Z+1	; 0x01
     d28:	f2 81       	ldd	r31, Z+2	; 0x02
     d2a:	e0 2d       	mov	r30, r0
     d2c:	01 90       	ld	r0, Z+
     d2e:	f0 81       	ld	r31, Z
     d30:	e0 2d       	mov	r30, r0
     d32:	01 81       	ldd	r16, Z+1	; 0x01
     d34:	12 81       	ldd	r17, Z+2	; 0x02
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	67 e1       	ldi	r22, 0x17	; 23
     d3a:	73 e0       	ldi	r23, 0x03	; 3
     d3c:	80 e4       	ldi	r24, 0x40	; 64
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	0e 94 a1 05 	call	0xb42	; 0xb42 <new_Menuitem>
     d44:	f8 01       	movw	r30, r16
     d46:	91 83       	std	Z+1, r25	; 0x01
     d48:	80 83       	st	Z, r24
			//base->submenus[2]->submenus[0]->submenus[1] = new_Menuitem("Node1 to Node2", can_test_transmit, 0);
			//base->submenus[2]->submenus[0]->submenus[2] = new_Menuitem("Node2 to Node1", can_test_recieve, 0);
			
		base->submenus[2]->submenus[1] = new_Menuitem("SRAM", SRAM_test, 0);
     d4a:	e9 81       	ldd	r30, Y+1	; 0x01
     d4c:	fa 81       	ldd	r31, Y+2	; 0x02
     d4e:	04 80       	ldd	r0, Z+4	; 0x04
     d50:	f5 81       	ldd	r31, Z+5	; 0x05
     d52:	e0 2d       	mov	r30, r0
     d54:	01 81       	ldd	r16, Z+1	; 0x01
     d56:	12 81       	ldd	r17, Z+2	; 0x02
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	65 e3       	ldi	r22, 0x35	; 53
     d5c:	79 e0       	ldi	r23, 0x09	; 9
     d5e:	89 e4       	ldi	r24, 0x49	; 73
     d60:	92 e0       	ldi	r25, 0x02	; 2
     d62:	0e 94 a1 05 	call	0xb42	; 0xb42 <new_Menuitem>
     d66:	f8 01       	movw	r30, r16
     d68:	93 83       	std	Z+3, r25	; 0x03
     d6a:	82 83       	std	Z+2, r24	; 0x02
		
		
		
	assign_parents(base);
     d6c:	ce 01       	movw	r24, r28
     d6e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <assign_parents>
	
	return base;
}
     d72:	ce 01       	movw	r24, r28
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	08 95       	ret

00000d7e <menu_submenu>:



//works
Menuitem* menu_submenu(Menuitem* m){
     d7e:	fc 01       	movw	r30, r24
	if (m->num_submenus != 0){
     d80:	80 81       	ld	r24, Z
     d82:	88 23       	and	r24, r24
     d84:	31 f0       	breq	.+12     	; 0xd92 <menu_submenu+0x14>
		return m->submenus[0];
     d86:	01 80       	ldd	r0, Z+1	; 0x01
     d88:	f2 81       	ldd	r31, Z+2	; 0x02
     d8a:	e0 2d       	mov	r30, r0
     d8c:	80 81       	ld	r24, Z
     d8e:	91 81       	ldd	r25, Z+1	; 0x01
     d90:	08 95       	ret
	}
	else{
		return m;
     d92:	8e 2f       	mov	r24, r30
     d94:	9f 2f       	mov	r25, r31
	}
}
     d96:	08 95       	ret

00000d98 <menu_parent>:

//works
Menuitem* menu_parent(Menuitem* m){
     d98:	fc 01       	movw	r30, r24
	if (m->parent != NULL){
     d9a:	83 81       	ldd	r24, Z+3	; 0x03
     d9c:	94 81       	ldd	r25, Z+4	; 0x04
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	09 f4       	brne	.+2      	; 0xda4 <menu_parent+0xc>
		return m->parent;
	}
	else{
		return m;
     da2:	cf 01       	movw	r24, r30
	}
}
     da4:	08 95       	ret

00000da6 <menu_next>:

//works
Menuitem* menu_next(Menuitem* m){
     da6:	cf 93       	push	r28
     da8:	dc 01       	movw	r26, r24
	}
}

//works
Menuitem* menu_parent(Menuitem* m){
	if (m->parent != NULL){
     daa:	13 96       	adiw	r26, 0x03	; 3
     dac:	ed 91       	ld	r30, X+
     dae:	fc 91       	ld	r31, X
     db0:	14 97       	sbiw	r26, 0x04	; 4
     db2:	30 97       	sbiw	r30, 0x00	; 0
     db4:	09 f4       	brne	.+2      	; 0xdb8 <menu_next+0x12>
		return m->parent;
	}
	else{
		return m;
     db6:	fc 01       	movw	r30, r24
}

//works
Menuitem* menu_next(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	for(uint8_t n = 0; n < parent->num_submenus; n++){
     db8:	c0 81       	ld	r28, Z
     dba:	cc 23       	and	r28, r28
     dbc:	d9 f0       	breq	.+54     	; 0xdf4 <menu_next+0x4e>
		if(parent->submenus[n] == m  &&  n < parent->num_submenus){
     dbe:	61 81       	ldd	r22, Z+1	; 0x01
     dc0:	72 81       	ldd	r23, Z+2	; 0x02
     dc2:	fb 01       	movw	r30, r22
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	c9 01       	movw	r24, r18
     dca:	41 91       	ld	r20, Z+
     dcc:	51 91       	ld	r21, Z+
     dce:	4a 17       	cp	r20, r26
     dd0:	5b 07       	cpc	r21, r27
     dd2:	59 f4       	brne	.+22     	; 0xdea <menu_next+0x44>
     dd4:	2c 17       	cp	r18, r28
     dd6:	48 f4       	brcc	.+18     	; 0xdea <menu_next+0x44>
			return parent->submenus[n+1];
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	fc 01       	movw	r30, r24
     ddc:	ee 0f       	add	r30, r30
     dde:	ff 1f       	adc	r31, r31
     de0:	e6 0f       	add	r30, r22
     de2:	f7 1f       	adc	r31, r23
     de4:	80 81       	ld	r24, Z
     de6:	91 81       	ldd	r25, Z+1	; 0x01
     de8:	0a c0       	rjmp	.+20     	; 0xdfe <menu_next+0x58>
     dea:	2f 5f       	subi	r18, 0xFF	; 255
     dec:	3f 4f       	sbci	r19, 0xFF	; 255
}

//works
Menuitem* menu_next(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	for(uint8_t n = 0; n < parent->num_submenus; n++){
     dee:	2c 17       	cp	r18, r28
     df0:	58 f3       	brcs	.-42     	; 0xdc8 <menu_next+0x22>
     df2:	03 c0       	rjmp	.+6      	; 0xdfa <menu_next+0x54>
		if(parent->submenus[n] == m  &&  n < parent->num_submenus){
			return parent->submenus[n+1];
		}
	}
	return m;
     df4:	8a 2f       	mov	r24, r26
     df6:	9b 2f       	mov	r25, r27
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <menu_next+0x58>
     dfa:	8a 2f       	mov	r24, r26
     dfc:	9b 2f       	mov	r25, r27
}
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <menu_prev>:

//works
Menuitem* menu_prev(Menuitem* m){
     e02:	cf 93       	push	r28
     e04:	dc 01       	movw	r26, r24
	}
}

//works
Menuitem* menu_parent(Menuitem* m){
	if (m->parent != NULL){
     e06:	13 96       	adiw	r26, 0x03	; 3
     e08:	ed 91       	ld	r30, X+
     e0a:	fc 91       	ld	r31, X
     e0c:	14 97       	sbiw	r26, 0x04	; 4
     e0e:	30 97       	sbiw	r30, 0x00	; 0
     e10:	09 f4       	brne	.+2      	; 0xe14 <menu_prev+0x12>
		return m->parent;
	}
	else{
		return m;
     e12:	fc 01       	movw	r30, r24

//works
Menuitem* menu_prev(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	
	for(uint8_t n = 0; n < parent->num_submenus; n++){
     e14:	c0 81       	ld	r28, Z
     e16:	cc 23       	and	r28, r28
     e18:	e1 f0       	breq	.+56     	; 0xe52 <menu_prev+0x50>
		if(parent->submenus[n] == m  &&  n > 0){
     e1a:	61 81       	ldd	r22, Z+1	; 0x01
     e1c:	72 81       	ldd	r23, Z+2	; 0x02
     e1e:	fb 01       	movw	r30, r22
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	c9 01       	movw	r24, r18
     e26:	41 91       	ld	r20, Z+
     e28:	51 91       	ld	r21, Z+
     e2a:	4a 17       	cp	r20, r26
     e2c:	5b 07       	cpc	r21, r27
     e2e:	61 f4       	brne	.+24     	; 0xe48 <menu_prev+0x46>
     e30:	22 23       	and	r18, r18
     e32:	51 f0       	breq	.+20     	; 0xe48 <menu_prev+0x46>
			return parent->submenus[n-1];
     e34:	81 50       	subi	r24, 0x01	; 1
     e36:	90 48       	sbci	r25, 0x80	; 128
     e38:	fc 01       	movw	r30, r24
     e3a:	ee 0f       	add	r30, r30
     e3c:	ff 1f       	adc	r31, r31
     e3e:	e6 0f       	add	r30, r22
     e40:	f7 1f       	adc	r31, r23
     e42:	80 81       	ld	r24, Z
     e44:	91 81       	ldd	r25, Z+1	; 0x01
     e46:	0a c0       	rjmp	.+20     	; 0xe5c <menu_prev+0x5a>
     e48:	2f 5f       	subi	r18, 0xFF	; 255
     e4a:	3f 4f       	sbci	r19, 0xFF	; 255

//works
Menuitem* menu_prev(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	
	for(uint8_t n = 0; n < parent->num_submenus; n++){
     e4c:	2c 17       	cp	r18, r28
     e4e:	50 f3       	brcs	.-44     	; 0xe24 <menu_prev+0x22>
     e50:	03 c0       	rjmp	.+6      	; 0xe58 <menu_prev+0x56>
		if(parent->submenus[n] == m  &&  n > 0){
			return parent->submenus[n-1];
		}
	}
	return m;
     e52:	8a 2f       	mov	r24, r26
     e54:	9b 2f       	mov	r25, r27
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <menu_prev+0x5a>
     e58:	8a 2f       	mov	r24, r26
     e5a:	9b 2f       	mov	r25, r27
}
     e5c:	cf 91       	pop	r28
     e5e:	08 95       	ret

00000e60 <menu_submenu_number>:
	}
}

//works
Menuitem* menu_parent(Menuitem* m){
	if (m->parent != NULL){
     e60:	dc 01       	movw	r26, r24
     e62:	13 96       	adiw	r26, 0x03	; 3
     e64:	ed 91       	ld	r30, X+
     e66:	fc 91       	ld	r31, X
     e68:	14 97       	sbiw	r26, 0x04	; 4
     e6a:	30 97       	sbiw	r30, 0x00	; 0
     e6c:	09 f4       	brne	.+2      	; 0xe70 <menu_submenu_number+0x10>
		return m->parent;
	}
	else{
		return m;
     e6e:	fc 01       	movw	r30, r24

//works
int menu_submenu_number(Menuitem* m){
	//oled_goto_pos(0,5); removed in conjunction with oled_alt/gui_alt
	Menuitem* parent = menu_parent(m);
	for(int i = 0; i < parent->num_submenus; i++){
     e70:	60 81       	ld	r22, Z
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	16 16       	cp	r1, r22
     e76:	17 06       	cpc	r1, r23
     e78:	fc f4       	brge	.+62     	; 0xeb8 <menu_submenu_number+0x58>
		if(parent->submenus[i] == m)
     e7a:	01 80       	ldd	r0, Z+1	; 0x01
     e7c:	f2 81       	ldd	r31, Z+2	; 0x02
     e7e:	e0 2d       	mov	r30, r0
     e80:	20 81       	ld	r18, Z
     e82:	31 81       	ldd	r19, Z+1	; 0x01
     e84:	28 17       	cp	r18, r24
     e86:	39 07       	cpc	r19, r25
     e88:	61 f4       	brne	.+24     	; 0xea2 <menu_submenu_number+0x42>
     e8a:	06 c0       	rjmp	.+12     	; 0xe98 <menu_submenu_number+0x38>
     e8c:	41 91       	ld	r20, Z+
     e8e:	51 91       	ld	r21, Z+
     e90:	48 17       	cp	r20, r24
     e92:	59 07       	cpc	r21, r25
     e94:	49 f4       	brne	.+18     	; 0xea8 <menu_submenu_number+0x48>
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <menu_submenu_number+0x3c>

//works
int menu_submenu_number(Menuitem* m){
	//oled_goto_pos(0,5); removed in conjunction with oled_alt/gui_alt
	Menuitem* parent = menu_parent(m);
	for(int i = 0; i < parent->num_submenus; i++){
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
		if(parent->submenus[i] == m)

			return i + 1;
     e9c:	c9 01       	movw	r24, r18
     e9e:	01 96       	adiw	r24, 0x01	; 1
     ea0:	08 95       	ret
     ea2:	32 96       	adiw	r30, 0x02	; 2

//works
int menu_submenu_number(Menuitem* m){
	//oled_goto_pos(0,5); removed in conjunction with oled_alt/gui_alt
	Menuitem* parent = menu_parent(m);
	for(int i = 0; i < parent->num_submenus; i++){
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	2f 5f       	subi	r18, 0xFF	; 255
     eaa:	3f 4f       	sbci	r19, 0xFF	; 255
     eac:	26 17       	cp	r18, r22
     eae:	37 07       	cpc	r19, r23
     eb0:	6c f3       	brlt	.-38     	; 0xe8c <menu_submenu_number+0x2c>
		if(parent->submenus[i] == m)

			return i + 1;
	}
	return 0; 		//make safeguarding from this?
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	08 95       	ret
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
}
     ebc:	08 95       	ret

00000ebe <menu_name>:
	//return this->name;
//}

char* menu_name(Menuitem* m){
	return m->name;
}
     ebe:	fc 01       	movw	r30, r24
     ec0:	85 81       	ldd	r24, Z+5	; 0x05
     ec2:	96 81       	ldd	r25, Z+6	; 0x06
     ec4:	08 95       	ret

00000ec6 <oled_alt_init>:
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
     ec6:	e0 e0       	ldi	r30, 0x00	; 0
     ec8:	f0 e1       	ldi	r31, 0x10	; 16
     eca:	8e ea       	ldi	r24, 0xAE	; 174
     ecc:	80 83       	st	Z, r24
     ece:	81 ea       	ldi	r24, 0xA1	; 161
     ed0:	80 83       	st	Z, r24
     ed2:	8a ed       	ldi	r24, 0xDA	; 218
     ed4:	80 83       	st	Z, r24
     ed6:	82 e1       	ldi	r24, 0x12	; 18
     ed8:	80 83       	st	Z, r24
     eda:	88 ec       	ldi	r24, 0xC8	; 200
     edc:	80 83       	st	Z, r24
     ede:	88 ea       	ldi	r24, 0xA8	; 168
     ee0:	80 83       	st	Z, r24
     ee2:	8f e3       	ldi	r24, 0x3F	; 63
     ee4:	80 83       	st	Z, r24
     ee6:	85 ed       	ldi	r24, 0xD5	; 213
     ee8:	80 83       	st	Z, r24
     eea:	80 e8       	ldi	r24, 0x80	; 128
     eec:	80 83       	st	Z, r24
     eee:	81 e8       	ldi	r24, 0x81	; 129
     ef0:	80 83       	st	Z, r24
     ef2:	80 e5       	ldi	r24, 0x50	; 80
     ef4:	80 83       	st	Z, r24
     ef6:	89 ed       	ldi	r24, 0xD9	; 217
     ef8:	80 83       	st	Z, r24
     efa:	81 e2       	ldi	r24, 0x21	; 33
     efc:	80 83       	st	Z, r24
     efe:	90 e2       	ldi	r25, 0x20	; 32
     f00:	90 83       	st	Z, r25
     f02:	10 82       	st	Z, r1
     f04:	9b ed       	ldi	r25, 0xDB	; 219
     f06:	90 83       	st	Z, r25
     f08:	90 e3       	ldi	r25, 0x30	; 48
     f0a:	90 83       	st	Z, r25
     f0c:	9d ea       	ldi	r25, 0xAD	; 173
     f0e:	90 83       	st	Z, r25
     f10:	10 82       	st	Z, r1
     f12:	94 ea       	ldi	r25, 0xA4	; 164
     f14:	90 83       	st	Z, r25
     f16:	96 ea       	ldi	r25, 0xA6	; 166
     f18:	90 83       	st	Z, r25
     f1a:	9f ea       	ldi	r25, 0xAF	; 175
     f1c:	90 83       	st	Z, r25
     f1e:	80 83       	st	Z, r24
     f20:	10 82       	st	Z, r1
     f22:	8f e7       	ldi	r24, 0x7F	; 127
     f24:	80 83       	st	Z, r24
     f26:	92 e2       	ldi	r25, 0x22	; 34
     f28:	90 83       	st	Z, r25
     f2a:	10 82       	st	Z, r1
     f2c:	80 83       	st	Z, r24
     f2e:	08 95       	ret

00000f30 <oled_store>:
	
	//to allow 60Hz refresh rate	
	
}

void oled_store(char* string, int* position){
     f30:	0f 93       	push	r16
     f32:	1f 93       	push	r17
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
	//calculate position offset
	int start_position = position[0]*128 + position[1];
     f38:	fb 01       	movw	r30, r22
     f3a:	40 81       	ld	r20, Z
     f3c:	51 81       	ldd	r21, Z+1	; 0x01
     f3e:	56 95       	lsr	r21
     f40:	54 2f       	mov	r21, r20
     f42:	44 27       	eor	r20, r20
     f44:	57 95       	ror	r21
     f46:	47 95       	ror	r20
     f48:	22 81       	ldd	r18, Z+2	; 0x02
     f4a:	33 81       	ldd	r19, Z+3	; 0x03
     f4c:	42 0f       	add	r20, r18
     f4e:	53 1f       	adc	r21, r19
	for(int i = 0; string[i] != '\0'; ++i){
     f50:	fc 01       	movw	r30, r24
     f52:	20 81       	ld	r18, Z
     f54:	22 23       	and	r18, r18
     f56:	59 f1       	breq	.+86     	; 0xfae <oled_store+0x7e>
     f58:	bc 01       	movw	r22, r24
     f5a:	6f 5f       	subi	r22, 0xFF	; 255
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	ec 01       	movw	r28, r24
	
	//to allow 60Hz refresh rate	
	
}

void oled_store(char* string, int* position){
     f60:	00 e0       	ldi	r16, 0x00	; 0
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	1f c0       	rjmp	.+62     	; 0xfa4 <oled_store+0x74>
     f66:	dc 01       	movw	r26, r24
     f68:	a2 0f       	add	r26, r18
     f6a:	b3 1f       	adc	r27, r19
	int start_position = position[0]*128 + position[1];
	for(int i = 0; string[i] != '\0'; ++i){
		//j goes through each col	n of the char in font
		for(int j = 0; j < FONT_SIZE; ++j){
			//font[char index in font][column of char]
			*(SRAM_ADRESS + start_position + i * FONT_SIZE + j) = pgm_read_byte(&font[(int)string[i] - 32][j]);
     f6c:	e8 81       	ld	r30, Y
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	b0 97       	sbiw	r30, 0x20	; 32
     f72:	ee 0f       	add	r30, r30
     f74:	ff 1f       	adc	r31, r31
     f76:	ee 0f       	add	r30, r30
     f78:	ff 1f       	adc	r31, r31
     f7a:	ee 0f       	add	r30, r30
     f7c:	ff 1f       	adc	r31, r31
     f7e:	e2 0f       	add	r30, r18
     f80:	f3 1f       	adc	r31, r19
     f82:	e0 59       	subi	r30, 0x90	; 144
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	e4 91       	lpm	r30, Z
     f88:	ec 93       	st	X, r30
void oled_store(char* string, int* position){
	//calculate position offset
	int start_position = position[0]*128 + position[1];
	for(int i = 0; string[i] != '\0'; ++i){
		//j goes through each col	n of the char in font
		for(int j = 0; j < FONT_SIZE; ++j){
     f8a:	2f 5f       	subi	r18, 0xFF	; 255
     f8c:	3f 4f       	sbci	r19, 0xFF	; 255
     f8e:	28 30       	cpi	r18, 0x08	; 8
     f90:	31 05       	cpc	r19, r1
     f92:	49 f7       	brne	.-46     	; 0xf66 <oled_store+0x36>
}

void oled_store(char* string, int* position){
	//calculate position offset
	int start_position = position[0]*128 + position[1];
	for(int i = 0; string[i] != '\0'; ++i){
     f94:	eb 01       	movw	r28, r22
     f96:	6f 5f       	subi	r22, 0xFF	; 255
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	48 5f       	subi	r20, 0xF8	; 248
     f9c:	5f 4f       	sbci	r21, 0xFF	; 255
     f9e:	88 81       	ld	r24, Y
     fa0:	88 23       	and	r24, r24
     fa2:	29 f0       	breq	.+10     	; 0xfae <oled_store+0x7e>
	
	//to allow 60Hz refresh rate	
	
}

void oled_store(char* string, int* position){
     fa4:	20 2f       	mov	r18, r16
     fa6:	31 2f       	mov	r19, r17
     fa8:	ca 01       	movw	r24, r20
     faa:	98 5e       	subi	r25, 0xE8	; 232
     fac:	dc cf       	rjmp	.-72     	; 0xf66 <oled_store+0x36>
		for(int j = 0; j < FONT_SIZE; ++j){
			//font[char index in font][column of char]
			*(SRAM_ADRESS + start_position + i * FONT_SIZE + j) = pgm_read_byte(&font[(int)string[i] - 32][j]);
		}
	}
}
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	08 95       	ret

00000fb8 <oled_store_string>:


//might be unreliable, due to uncertain string length
void oled_store_string(char* string, int col, int line){
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <oled_store_string+0x6>
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <oled_store_string+0x8>
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
	
	oled_store(string, (int[2]){line, col});
     fc4:	5a 83       	std	Y+2, r21	; 0x02
     fc6:	49 83       	std	Y+1, r20	; 0x01
     fc8:	7c 83       	std	Y+4, r23	; 0x04
     fca:	6b 83       	std	Y+3, r22	; 0x03
     fcc:	be 01       	movw	r22, r28
     fce:	6f 5f       	subi	r22, 0xFF	; 255
     fd0:	7f 4f       	sbci	r23, 0xFF	; 255
     fd2:	0e 94 98 07 	call	0xf30	; 0xf30 <oled_store>
	
}
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <oled_write_screen>:





void oled_write_screen(){
     fe4:	e0 e0       	ldi	r30, 0x00	; 0
     fe6:	f8 e1       	ldi	r31, 0x18	; 24
	for(int i = 0; i < 1024; ++i){
		*OLED_DATA_ADRESS = *(SRAM_ADRESS + i);
     fe8:	a0 e0       	ldi	r26, 0x00	; 0
     fea:	b2 e1       	ldi	r27, 0x12	; 18
     fec:	81 91       	ld	r24, Z+
     fee:	8c 93       	st	X, r24




void oled_write_screen(){
	for(int i = 0; i < 1024; ++i){
     ff0:	e1 15       	cp	r30, r1
     ff2:	8c e1       	ldi	r24, 0x1C	; 28
     ff4:	f8 07       	cpc	r31, r24
     ff6:	d1 f7       	brne	.-12     	; 0xfec <oled_write_screen+0x8>
		*OLED_DATA_ADRESS = *(SRAM_ADRESS + i);
	}
}
     ff8:	08 95       	ret

00000ffa <oled_refresh_60Hz>:
//Seems work at 60Hz
void oled_refresh_60Hz(){
	
	//F_CPU = 4.9152MHz, prescaler = 1024
	//F_CPU / prescaler = 4800Hz = 60Hz * 80
	if(timer_read(TIMER_1) > 80){
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	0e 94 ad 09 	call	0x135a	; 0x135a <timer_read>
    1000:	81 35       	cpi	r24, 0x51	; 81
    1002:	91 05       	cpc	r25, r1
    1004:	28 f0       	brcs	.+10     	; 0x1010 <oled_refresh_60Hz+0x16>
		oled_write_screen();
    1006:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <oled_write_screen>
		timer_reset(TIMER_1);
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	0e 94 c2 09 	call	0x1384	; 0x1384 <timer_reset>
    1010:	08 95       	ret

00001012 <oled_invert_line>:
}


void oled_invert_line(uint8_t line){
	
	uint16_t start_position = line * 128;
    1012:	20 e8       	ldi	r18, 0x80	; 128
    1014:	82 9f       	mul	r24, r18
    1016:	c0 01       	movw	r24, r0
    1018:	11 24       	eor	r1, r1
    101a:	fc 01       	movw	r30, r24
    101c:	f8 5e       	subi	r31, 0xE8	; 232
    101e:	80 58       	subi	r24, 0x80	; 128
    1020:	97 4e       	sbci	r25, 0xE7	; 231
	uint8_t col_byte;
	
	for(int col = 0; col < 128; ++col){
		col_byte = ~*(SRAM_ADRESS + start_position + col);
    1022:	20 81       	ld	r18, Z
    1024:	20 95       	com	r18
		*(SRAM_ADRESS + start_position + col) = col_byte;
    1026:	21 93       	st	Z+, r18
void oled_invert_line(uint8_t line){
	
	uint16_t start_position = line * 128;
	uint8_t col_byte;
	
	for(int col = 0; col < 128; ++col){
    1028:	e8 17       	cp	r30, r24
    102a:	f9 07       	cpc	r31, r25
    102c:	d1 f7       	brne	.-12     	; 0x1022 <oled_invert_line+0x10>
		col_byte = ~*(SRAM_ADRESS + start_position + col);
		*(SRAM_ADRESS + start_position + col) = col_byte;
	}

}
    102e:	08 95       	ret

00001030 <oled_alt_clear_line>:

void oled_alt_clear_line(int line){
    1030:	cf 92       	push	r12
    1032:	df 92       	push	r13
    1034:	ef 92       	push	r14
    1036:	ff 92       	push	r15
    1038:	0f 93       	push	r16
    103a:	1f 93       	push	r17
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	00 d0       	rcall	.+0      	; 0x1042 <oled_alt_clear_line+0x12>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <oled_alt_clear_line+0x14>
    1044:	00 d0       	rcall	.+0      	; 0x1046 <oled_alt_clear_line+0x16>
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	6c 01       	movw	r12, r24
	
	for(int col = 0; col < NR_COL; col += 8){
    104c:	00 e0       	ldi	r16, 0x00	; 0
    104e:	10 e0       	ldi	r17, 0x00	; 0
		oled_store((char[2]){" "}, (int[2]){line, col});
    1050:	68 94       	set
    1052:	ee 24       	eor	r14, r14
    1054:	e5 f8       	bld	r14, 5
    1056:	f1 2c       	mov	r15, r1
    1058:	dc 82       	std	Y+4, r13	; 0x04
    105a:	cb 82       	std	Y+3, r12	; 0x03
    105c:	1e 83       	std	Y+6, r17	; 0x06
    105e:	0d 83       	std	Y+5, r16	; 0x05
    1060:	fa 82       	std	Y+2, r15	; 0x02
    1062:	e9 82       	std	Y+1, r14	; 0x01
    1064:	be 01       	movw	r22, r28
    1066:	6d 5f       	subi	r22, 0xFD	; 253
    1068:	7f 4f       	sbci	r23, 0xFF	; 255
    106a:	ce 01       	movw	r24, r28
    106c:	01 96       	adiw	r24, 0x01	; 1
    106e:	0e 94 98 07 	call	0xf30	; 0xf30 <oled_store>

}

void oled_alt_clear_line(int line){
	
	for(int col = 0; col < NR_COL; col += 8){
    1072:	08 5f       	subi	r16, 0xF8	; 248
    1074:	1f 4f       	sbci	r17, 0xFF	; 255
    1076:	00 38       	cpi	r16, 0x80	; 128
    1078:	11 05       	cpc	r17, r1
    107a:	71 f7       	brne	.-36     	; 0x1058 <oled_alt_clear_line+0x28>
		oled_store((char[2]){" "}, (int[2]){line, col});
	}
	
}
    107c:	26 96       	adiw	r28, 0x06	; 6
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	df 90       	pop	r13
    1096:	cf 90       	pop	r12
    1098:	08 95       	ret

0000109a <oled_alt_clear_screen>:
	
}



void oled_alt_clear_screen(){
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
	for(int line = 0; line < NR_LINES; ++line){
    109e:	c0 e0       	ldi	r28, 0x00	; 0
    10a0:	d0 e0       	ldi	r29, 0x00	; 0
		oled_alt_clear_line(line);
    10a2:	ce 01       	movw	r24, r28
    10a4:	0e 94 18 08 	call	0x1030	; 0x1030 <oled_alt_clear_line>
}



void oled_alt_clear_screen(){
	for(int line = 0; line < NR_LINES; ++line){
    10a8:	21 96       	adiw	r28, 0x01	; 1
    10aa:	c8 30       	cpi	r28, 0x08	; 8
    10ac:	d1 05       	cpc	r29, r1
    10ae:	c9 f7       	brne	.-14     	; 0x10a2 <oled_alt_clear_screen+0x8>
		oled_alt_clear_line(line);
	}
}
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	08 95       	ret

000010b6 <oled_alt_toggle_negative>:


uint8_t screen_negative = 0;

void oled_alt_toggle_negative(){
	if(screen_negative){
    10b6:	80 91 e0 02 	lds	r24, 0x02E0
    10ba:	88 23       	and	r24, r24
    10bc:	31 f0       	breq	.+12     	; 0x10ca <oled_alt_toggle_negative+0x14>
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
    10be:	86 ea       	ldi	r24, 0xA6	; 166
    10c0:	80 93 00 10 	sts	0x1000, r24
uint8_t screen_negative = 0;

void oled_alt_toggle_negative(){
	if(screen_negative){
		oled_alt_mode_normal();
		screen_negative = 0;
    10c4:	10 92 e0 02 	sts	0x02E0, r1
    10c8:	08 95       	ret
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
    10ca:	87 ea       	ldi	r24, 0xA7	; 167
    10cc:	80 93 00 10 	sts	0x1000, r24
		oled_alt_mode_normal();
		screen_negative = 0;
	}
	else{
		oled_alt_mode_negative();
		screen_negative = 1;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	80 93 e0 02 	sts	0x02E0, r24
    10d6:	08 95       	ret

000010d8 <oled_alt_change_contrast>:
	}
}


void oled_alt_change_contrast(){
    10d8:	4f 92       	push	r4
    10da:	5f 92       	push	r5
    10dc:	6f 92       	push	r6
    10de:	7f 92       	push	r7
    10e0:	8f 92       	push	r8
    10e2:	9f 92       	push	r9
    10e4:	af 92       	push	r10
    10e6:	bf 92       	push	r11
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	ac 97       	sbiw	r28, 0x2c	; 44
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
	while(1){
		//oled_alt_clear_screen();
		
		oled_alt_clear_screen();
		
		oled_store((char[9]){"Contrast"}, (int[2]){0, 0});
    1108:	0f 2e       	mov	r0, r31
    110a:	f9 e0       	ldi	r31, 0x09	; 9
    110c:	8f 2e       	mov	r8, r31
    110e:	f0 2d       	mov	r31, r0
		oled_store((char[12]){"left slider"}, (int[2]){4, 3*8});
    1110:	68 94       	set
    1112:	aa 24       	eor	r10, r10
    1114:	a2 f8       	bld	r10, 2
    1116:	b1 2c       	mov	r11, r1
    1118:	0f 2e       	mov	r0, r31
    111a:	f8 e1       	ldi	r31, 0x18	; 24
    111c:	cf 2e       	mov	r12, r31
    111e:	d1 2c       	mov	r13, r1
    1120:	f0 2d       	mov	r31, r0
    1122:	0f 2e       	mov	r0, r31
    1124:	fc e0       	ldi	r31, 0x0C	; 12
    1126:	9f 2e       	mov	r9, r31
    1128:	f0 2d       	mov	r31, r0
		oled_store((char[7]){"Return"}, (int[2]){7, 0});
    112a:	0f 2e       	mov	r0, r31
    112c:	f7 e0       	ldi	r31, 0x07	; 7
    112e:	ef 2e       	mov	r14, r31
    1130:	f1 2c       	mov	r15, r1
    1132:	f0 2d       	mov	r31, r0
		//oled_store((char[4]){"Max"}, (int[2]){7, 12*8});
		oled_store_string((char[4]){"Max"}, 12*8, 7);
    1134:	0f 2e       	mov	r0, r31
    1136:	fd e4       	ldi	r31, 0x4D	; 77
    1138:	4f 2e       	mov	r4, r31
    113a:	f1 e6       	ldi	r31, 0x61	; 97
    113c:	5f 2e       	mov	r5, r31
    113e:	f8 e7       	ldi	r31, 0x78	; 120
    1140:	6f 2e       	mov	r6, r31
    1142:	71 2c       	mov	r7, r1
    1144:	f0 2d       	mov	r31, r0
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
    1146:	00 e0       	ldi	r16, 0x00	; 0
    1148:	10 e1       	ldi	r17, 0x10	; 16
	
	
	while(1){
		//oled_alt_clear_screen();
		
		oled_alt_clear_screen();
    114a:	0e 94 4d 08 	call	0x109a	; 0x109a <oled_alt_clear_screen>
		
		oled_store((char[9]){"Contrast"}, (int[2]){0, 0});
    114e:	1a a6       	std	Y+42, r1	; 0x2a
    1150:	19 a6       	std	Y+41, r1	; 0x29
    1152:	1c a6       	std	Y+44, r1	; 0x2c
    1154:	1b a6       	std	Y+43, r1	; 0x2b
    1156:	e5 e1       	ldi	r30, 0x15	; 21
    1158:	f2 e0       	ldi	r31, 0x02	; 2
    115a:	de 01       	movw	r26, r28
    115c:	90 96       	adiw	r26, 0x20	; 32
    115e:	88 2d       	mov	r24, r8
    1160:	01 90       	ld	r0, Z+
    1162:	0d 92       	st	X+, r0
    1164:	8a 95       	dec	r24
    1166:	e1 f7       	brne	.-8      	; 0x1160 <oled_alt_change_contrast+0x88>
    1168:	be 01       	movw	r22, r28
    116a:	67 5d       	subi	r22, 0xD7	; 215
    116c:	7f 4f       	sbci	r23, 0xFF	; 255
    116e:	ce 01       	movw	r24, r28
    1170:	80 96       	adiw	r24, 0x20	; 32
    1172:	0e 94 98 07 	call	0xf30	; 0xf30 <oled_store>
		oled_store((char[12]){"left slider"}, (int[2]){4, 3*8});
    1176:	bd 8e       	std	Y+29, r11	; 0x1d
    1178:	ac 8e       	std	Y+28, r10	; 0x1c
    117a:	df 8e       	std	Y+31, r13	; 0x1f
    117c:	ce 8e       	std	Y+30, r12	; 0x1e
    117e:	e5 e6       	ldi	r30, 0x65	; 101
    1180:	f2 e0       	ldi	r31, 0x02	; 2
    1182:	de 01       	movw	r26, r28
    1184:	50 96       	adiw	r26, 0x10	; 16
    1186:	89 2d       	mov	r24, r9
    1188:	01 90       	ld	r0, Z+
    118a:	0d 92       	st	X+, r0
    118c:	8a 95       	dec	r24
    118e:	e1 f7       	brne	.-8      	; 0x1188 <oled_alt_change_contrast+0xb0>
    1190:	be 01       	movw	r22, r28
    1192:	64 5e       	subi	r22, 0xE4	; 228
    1194:	7f 4f       	sbci	r23, 0xFF	; 255
    1196:	ce 01       	movw	r24, r28
    1198:	40 96       	adiw	r24, 0x10	; 16
    119a:	0e 94 98 07 	call	0xf30	; 0xf30 <oled_store>
		oled_store((char[7]){"Return"}, (int[2]){7, 0});
    119e:	fd 86       	std	Y+13, r15	; 0x0d
    11a0:	ec 86       	std	Y+12, r14	; 0x0c
    11a2:	1f 86       	std	Y+15, r1	; 0x0f
    11a4:	1e 86       	std	Y+14, r1	; 0x0e
    11a6:	87 e0       	ldi	r24, 0x07	; 7
    11a8:	e0 eb       	ldi	r30, 0xB0	; 176
    11aa:	f1 e0       	ldi	r31, 0x01	; 1
    11ac:	de 01       	movw	r26, r28
    11ae:	15 96       	adiw	r26, 0x05	; 5
    11b0:	01 90       	ld	r0, Z+
    11b2:	0d 92       	st	X+, r0
    11b4:	8a 95       	dec	r24
    11b6:	e1 f7       	brne	.-8      	; 0x11b0 <oled_alt_change_contrast+0xd8>
    11b8:	be 01       	movw	r22, r28
    11ba:	64 5f       	subi	r22, 0xF4	; 244
    11bc:	7f 4f       	sbci	r23, 0xFF	; 255
    11be:	ce 01       	movw	r24, r28
    11c0:	05 96       	adiw	r24, 0x05	; 5
    11c2:	0e 94 98 07 	call	0xf30	; 0xf30 <oled_store>
		//oled_store((char[4]){"Max"}, (int[2]){7, 12*8});
		oled_store_string((char[4]){"Max"}, 12*8, 7);
    11c6:	49 82       	std	Y+1, r4	; 0x01
    11c8:	5a 82       	std	Y+2, r5	; 0x02
    11ca:	6b 82       	std	Y+3, r6	; 0x03
    11cc:	7c 82       	std	Y+4, r7	; 0x04
    11ce:	a7 01       	movw	r20, r14
    11d0:	60 e6       	ldi	r22, 0x60	; 96
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	ce 01       	movw	r24, r28
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <oled_store_string>
			
			
		
		oled_write_screen();
    11dc:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <oled_write_screen>
		
		contrast = slider_left_read() - 2;
    11e0:	0e 94 02 05 	call	0xa04	; 0xa04 <slider_left_read>
    11e4:	82 50       	subi	r24, 0x02	; 2
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
    11e6:	91 e8       	ldi	r25, 0x81	; 129
    11e8:	f8 01       	movw	r30, r16
    11ea:	90 83       	st	Z, r25
    11ec:	80 83       	st	Z, r24
		contrast = slider_left_read() - 2;
		oled_command_write(0x81);    //contrast control
		oled_command_write(contrast);  
		
		
		if(button_left_read()){
    11ee:	0e 94 1c 05 	call	0xa38	; 0xa38 <button_left_read>
    11f2:	81 11       	cpse	r24, r1
    11f4:	0b c0       	rjmp	.+22     	; 0x120c <oled_alt_change_contrast+0x134>
			return;
		}
		if(button_right_read()){
    11f6:	0e 94 20 05 	call	0xa40	; 0xa40 <button_right_read>
    11fa:	88 23       	and	r24, r24
    11fc:	09 f4       	brne	.+2      	; 0x1200 <oled_alt_change_contrast+0x128>
    11fe:	a5 cf       	rjmp	.-182    	; 0x114a <oled_alt_change_contrast+0x72>
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
    1200:	e0 e0       	ldi	r30, 0x00	; 0
    1202:	f0 e1       	ldi	r31, 0x10	; 16
    1204:	81 e8       	ldi	r24, 0x81	; 129
    1206:	80 83       	st	Z, r24
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	80 83       	st	Z, r24
			oled_command_write(0xff);
			return;
		}
	}	

}
    120c:	ac 96       	adiw	r28, 0x2c	; 44
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	df 90       	pop	r13
    1226:	cf 90       	pop	r12
    1228:	bf 90       	pop	r11
    122a:	af 90       	pop	r10
    122c:	9f 90       	pop	r9
    122e:	8f 90       	pop	r8
    1230:	7f 90       	pop	r7
    1232:	6f 90       	pop	r6
    1234:	5f 90       	pop	r5
    1236:	4f 90       	pop	r4
    1238:	08 95       	ret

0000123a <oled_epleptic_seizure>:


void oled_epleptic_seizure(){
	while(1){
		oled_alt_toggle_negative();
    123a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <oled_alt_toggle_negative>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    123e:	2c ec       	ldi	r18, 0xCC	; 204
    1240:	8c e0       	ldi	r24, 0x0C	; 12
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	21 50       	subi	r18, 0x01	; 1
    1246:	80 40       	sbci	r24, 0x00	; 0
    1248:	90 40       	sbci	r25, 0x00	; 0
    124a:	e1 f7       	brne	.-8      	; 0x1244 <oled_epleptic_seizure+0xa>
    124c:	00 c0       	rjmp	.+0      	; 0x124e <oled_epleptic_seizure+0x14>
    124e:	f5 cf       	rjmp	.-22     	; 0x123a <oled_epleptic_seizure>

00001250 <spi_init>:
#include "SPI.h"
#include <avr/io.h>

void spi_init(){
			//SI out		SS out		SCK out
	DDRB |= ( 1 << PB5) | (1 << PB4) | (1 << PB7);
    1250:	87 b3       	in	r24, 0x17	; 23
    1252:	80 6b       	ori	r24, 0xB0	; 176
    1254:	87 bb       	out	0x17, r24	; 23
			//SO in
	DDRB &= ~(1 << PB6);
    1256:	be 98       	cbi	0x17, 6	; 23
	
	//								 frequency / 16
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
    1258:	81 e5       	ldi	r24, 0x51	; 81
    125a:	8d b9       	out	0x0d, r24	; 13
    125c:	08 95       	ret

0000125e <spi_write>:

//both read and write
int spi_write(char data){
	//SPDR = data;
	//while(!(SPSR & (1<<SPIF)));
	SPDR = data;
    125e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
    1260:	77 9b       	sbis	0x0e, 7	; 14
    1262:	fe cf       	rjmp	.-4      	; 0x1260 <spi_write+0x2>
	return SPDR;
    1264:	8f b1       	in	r24, 0x0f	; 15
}
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	08 95       	ret

0000126a <SRAM_test>:
#include <avr/io.h>

void SRAM_test(void)
{
    126a:	ef 92       	push	r14
    126c:	ff 92       	push	r15
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;

	printf("Starting SRAM test...\n");
    1276:	81 e7       	ldi	r24, 0x71	; 113
    1278:	92 e0       	ldi	r25, 0x02	; 2
    127a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <puts>

	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
    127e:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <rand>
    1282:	7c 01       	movw	r14, r24

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
    1284:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <srand>
    1288:	c0 e0       	ldi	r28, 0x00	; 0
    128a:	d8 e1       	ldi	r29, 0x18	; 24

void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
    128c:	00 e0       	ldi	r16, 0x00	; 0
    128e:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
    1290:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <rand>
		ext_ram[i] = some_value;
    1294:	88 83       	st	Y, r24
		uint8_t retreived_value = ext_ram[i];
    1296:	98 81       	ld	r25, Y
		if (retreived_value != some_value) {
    1298:	98 17       	cp	r25, r24
    129a:	11 f0       	breq	.+4      	; 0x12a0 <SRAM_test+0x36>
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
    129c:	0f 5f       	subi	r16, 0xFF	; 255
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	21 96       	adiw	r28, 0x01	; 1
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
    12a2:	c1 15       	cp	r28, r1
    12a4:	80 e2       	ldi	r24, 0x20	; 32
    12a6:	d8 07       	cpc	r29, r24
    12a8:	99 f7       	brne	.-26     	; 0x1290 <SRAM_test+0x26>
			write_errors++;
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
    12aa:	c7 01       	movw	r24, r14
    12ac:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <srand>
    12b0:	c0 e0       	ldi	r28, 0x00	; 0
    12b2:	d8 e1       	ldi	r29, 0x18	; 24
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;
    12b4:	e1 2c       	mov	r14, r1
    12b6:	f1 2c       	mov	r15, r1
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
    12b8:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <rand>
		uint8_t retreived_value = ext_ram[i];
    12bc:	98 81       	ld	r25, Y
		if (retreived_value != some_value) {
    12be:	98 17       	cp	r25, r24
    12c0:	19 f0       	breq	.+6      	; 0x12c8 <SRAM_test+0x5e>
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	e8 1a       	sub	r14, r24
    12c6:	f8 0a       	sbc	r15, r24
    12c8:	21 96       	adiw	r28, 0x01	; 1
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
    12ca:	c1 15       	cp	r28, r1
    12cc:	80 e2       	ldi	r24, 0x20	; 32
    12ce:	d8 07       	cpc	r29, r24
    12d0:	99 f7       	brne	.-26     	; 0x12b8 <SRAM_test+0x4e>
		if (retreived_value != some_value) {
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
    12d2:	ff 92       	push	r15
    12d4:	ef 92       	push	r14
    12d6:	1f 93       	push	r17
    12d8:	0f 93       	push	r16
    12da:	87 e8       	ldi	r24, 0x87	; 135
    12dc:	92 e0       	ldi	r25, 0x02	; 2
    12de:	9f 93       	push	r25
    12e0:	8f 93       	push	r24
    12e2:	0e 94 c0 0b 	call	0x1780	; 0x1780 <printf>
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
}
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	1f 91       	pop	r17
    12f8:	0f 91       	pop	r16
    12fa:	ff 90       	pop	r15
    12fc:	ef 90       	pop	r14
    12fe:	08 95       	ret

00001300 <timer_init>:
//timer 1 and 3 are 16 bit timers

void timer_init(){
	//timer1 to be used for Oled_refresh at 60 Hz
	
	TCCR1A = 0;
    1300:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
    1302:	1e bc       	out	0x2e, r1	; 46
	
	//prescaler = 1024. Clock now counts at F_CPU / 1024 Hz = 4800 Hz
	TCCR1B |= (1<<CS12) | (1<<CS10);
    1304:	8e b5       	in	r24, 0x2e	; 46
    1306:	85 60       	ori	r24, 0x05	; 5
    1308:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<CS11);
    130a:	8e b5       	in	r24, 0x2e	; 46
    130c:	8d 7f       	andi	r24, 0xFD	; 253
    130e:	8e bd       	out	0x2e, r24	; 46
	//or simpler, but makes it impossible for other modules
	//to use timer1, just reset and refresh oled after
	//80 clock ticks
	
	//Mode 0, clock max = 0xFFFF
	TCCR1A &= ~(1<<WGM10);
    1310:	8f b5       	in	r24, 0x2f	; 47
    1312:	8e 7f       	andi	r24, 0xFE	; 254
    1314:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1<<WGM11);
    1316:	8f b5       	in	r24, 0x2f	; 47
    1318:	8d 7f       	andi	r24, 0xFD	; 253
    131a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B &= ~(1<<WGM12);
    131c:	8e b5       	in	r24, 0x2e	; 46
    131e:	87 7f       	andi	r24, 0xF7	; 247
    1320:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<WGM13);
    1322:	8e b5       	in	r24, 0x2e	; 46
    1324:	8f 7e       	andi	r24, 0xEF	; 239
    1326:	8e bd       	out	0x2e, r24	; 46
	
	
	//timer 3 to avoid can message spam
	//same mode and prescalre as timer 1
	TCCR3A = 0;
    1328:	ab e8       	ldi	r26, 0x8B	; 139
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	1c 92       	st	X, r1
	TCCR3B = 0;
    132e:	ea e8       	ldi	r30, 0x8A	; 138
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	10 82       	st	Z, r1
	
	TCCR3B |= (1<<CS32) | (1<<CS30);
    1334:	80 81       	ld	r24, Z
    1336:	85 60       	ori	r24, 0x05	; 5
    1338:	80 83       	st	Z, r24
	TCCR3B &= ~(1<<CS31);
    133a:	80 81       	ld	r24, Z
    133c:	8d 7f       	andi	r24, 0xFD	; 253
    133e:	80 83       	st	Z, r24
	
	TCCR3A &= ~(1<<WGM10);
    1340:	8c 91       	ld	r24, X
    1342:	8e 7f       	andi	r24, 0xFE	; 254
    1344:	8c 93       	st	X, r24
	TCCR3A &= ~(1<<WGM11);
    1346:	8c 91       	ld	r24, X
    1348:	8d 7f       	andi	r24, 0xFD	; 253
    134a:	8c 93       	st	X, r24
	TCCR3B &= ~(1<<WGM12);
    134c:	80 81       	ld	r24, Z
    134e:	87 7f       	andi	r24, 0xF7	; 247
    1350:	80 83       	st	Z, r24
	TCCR3B &= ~(1<<WGM13);
    1352:	80 81       	ld	r24, Z
    1354:	8f 7e       	andi	r24, 0xEF	; 239
    1356:	80 83       	st	Z, r24
    1358:	08 95       	ret

0000135a <timer_read>:
}

uint16_t timer_read(timer nr){
	if(nr == TIMER_1)
    135a:	81 11       	cpse	r24, r1
    135c:	03 c0       	rjmp	.+6      	; 0x1364 <timer_read+0xa>
		return TCNT1;
    135e:	2c b5       	in	r18, 0x2c	; 44
    1360:	3d b5       	in	r19, 0x2d	; 45
    1362:	0d c0       	rjmp	.+26     	; 0x137e <timer_read+0x24>
	else if(nr == TIMER_2)
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	19 f4       	brne	.+6      	; 0x136e <timer_read+0x14>
		return TCNT2;
    1368:	23 b5       	in	r18, 0x23	; 35
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	08 c0       	rjmp	.+16     	; 0x137e <timer_read+0x24>
	else if(nr == TIMER_3)
    136e:	82 30       	cpi	r24, 0x02	; 2
    1370:	29 f4       	brne	.+10     	; 0x137c <timer_read+0x22>
		return TCNT3;
    1372:	20 91 88 00 	lds	r18, 0x0088
    1376:	30 91 89 00 	lds	r19, 0x0089
    137a:	01 c0       	rjmp	.+2      	; 0x137e <timer_read+0x24>
    137c:	08 95       	ret
    137e:	82 2f       	mov	r24, r18
    1380:	93 2f       	mov	r25, r19
}
    1382:	08 95       	ret

00001384 <timer_reset>:

void timer_reset(timer nr){
	if(nr == TIMER_1)
    1384:	81 11       	cpse	r24, r1
    1386:	03 c0       	rjmp	.+6      	; 0x138e <timer_reset+0xa>
		TCNT1 = 0;
    1388:	1d bc       	out	0x2d, r1	; 45
    138a:	1c bc       	out	0x2c, r1	; 44
    138c:	08 95       	ret
	else if(nr == TIMER_2)
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	11 f4       	brne	.+4      	; 0x1396 <timer_reset+0x12>
		TCNT2 = 0;
    1392:	13 bc       	out	0x23, r1	; 35
    1394:	08 95       	ret
	else if(nr == TIMER_3)
    1396:	82 30       	cpi	r24, 0x02	; 2
    1398:	21 f4       	brne	.+8      	; 0x13a2 <timer_reset+0x1e>
		TCNT3 = 0;
    139a:	10 92 89 00 	sts	0x0089, r1
    139e:	10 92 88 00 	sts	0x0088, r1
    13a2:	08 95       	ret

000013a4 <uart_Transmit>:
}

void uart_Transmit( unsigned char data ){
	
	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
    13a4:	5d 9b       	sbis	0x0b, 5	; 11
    13a6:	fe cf       	rjmp	.-4      	; 0x13a4 <uart_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;
    13a8:	8c b9       	out	0x0c, r24	; 12
    13aa:	08 95       	ret

000013ac <uart_Receive>:

unsigned char uart_Receive(void){
	
	//Wait for data to be received
	
	while( !(UCSR0A & (1<<RXC0)) );
    13ac:	5f 9b       	sbis	0x0b, 7	; 11
    13ae:	fe cf       	rjmp	.-4      	; 0x13ac <uart_Receive>
	
	//Get and return received data from buffer
	
	return UDR0;
    13b0:	8c b1       	in	r24, 0x0c	; 12
}
    13b2:	08 95       	ret

000013b4 <uart_Init>:
#include "uart.h"

void uart_Init(unsigned int ubrr){
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
    13b4:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
    13b6:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN1)|(1<<TXEN1);
    13b8:	88 e1       	ldi	r24, 0x18	; 24
    13ba:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8data, 1stop bit
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    13bc:	86 e8       	ldi	r24, 0x86	; 134
    13be:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uart_Transmit, uart_Receive);
    13c0:	66 ed       	ldi	r22, 0xD6	; 214
    13c2:	79 e0       	ldi	r23, 0x09	; 9
    13c4:	82 ed       	ldi	r24, 0xD2	; 210
    13c6:	99 e0       	ldi	r25, 0x09	; 9
    13c8:	0e 94 75 0b 	call	0x16ea	; 0x16ea <fdevopen>
    13cc:	08 95       	ret

000013ce <malloc>:
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	82 30       	cpi	r24, 0x02	; 2
    13d4:	91 05       	cpc	r25, r1
    13d6:	10 f4       	brcc	.+4      	; 0x13dc <malloc+0xe>
    13d8:	82 e0       	ldi	r24, 0x02	; 2
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	e0 91 f8 02 	lds	r30, 0x02F8
    13e0:	f0 91 f9 02 	lds	r31, 0x02F9
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	a0 e0       	ldi	r26, 0x00	; 0
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	30 97       	sbiw	r30, 0x00	; 0
    13ee:	39 f1       	breq	.+78     	; 0x143e <malloc+0x70>
    13f0:	40 81       	ld	r20, Z
    13f2:	51 81       	ldd	r21, Z+1	; 0x01
    13f4:	48 17       	cp	r20, r24
    13f6:	59 07       	cpc	r21, r25
    13f8:	b8 f0       	brcs	.+46     	; 0x1428 <malloc+0x5a>
    13fa:	48 17       	cp	r20, r24
    13fc:	59 07       	cpc	r21, r25
    13fe:	71 f4       	brne	.+28     	; 0x141c <malloc+0x4e>
    1400:	82 81       	ldd	r24, Z+2	; 0x02
    1402:	93 81       	ldd	r25, Z+3	; 0x03
    1404:	10 97       	sbiw	r26, 0x00	; 0
    1406:	29 f0       	breq	.+10     	; 0x1412 <malloc+0x44>
    1408:	13 96       	adiw	r26, 0x03	; 3
    140a:	9c 93       	st	X, r25
    140c:	8e 93       	st	-X, r24
    140e:	12 97       	sbiw	r26, 0x02	; 2
    1410:	2c c0       	rjmp	.+88     	; 0x146a <malloc+0x9c>
    1412:	90 93 f9 02 	sts	0x02F9, r25
    1416:	80 93 f8 02 	sts	0x02F8, r24
    141a:	27 c0       	rjmp	.+78     	; 0x146a <malloc+0x9c>
    141c:	21 15       	cp	r18, r1
    141e:	31 05       	cpc	r19, r1
    1420:	31 f0       	breq	.+12     	; 0x142e <malloc+0x60>
    1422:	42 17       	cp	r20, r18
    1424:	53 07       	cpc	r21, r19
    1426:	18 f0       	brcs	.+6      	; 0x142e <malloc+0x60>
    1428:	a9 01       	movw	r20, r18
    142a:	db 01       	movw	r26, r22
    142c:	01 c0       	rjmp	.+2      	; 0x1430 <malloc+0x62>
    142e:	ef 01       	movw	r28, r30
    1430:	9a 01       	movw	r18, r20
    1432:	bd 01       	movw	r22, r26
    1434:	df 01       	movw	r26, r30
    1436:	02 80       	ldd	r0, Z+2	; 0x02
    1438:	f3 81       	ldd	r31, Z+3	; 0x03
    143a:	e0 2d       	mov	r30, r0
    143c:	d7 cf       	rjmp	.-82     	; 0x13ec <malloc+0x1e>
    143e:	21 15       	cp	r18, r1
    1440:	31 05       	cpc	r19, r1
    1442:	f9 f0       	breq	.+62     	; 0x1482 <malloc+0xb4>
    1444:	28 1b       	sub	r18, r24
    1446:	39 0b       	sbc	r19, r25
    1448:	24 30       	cpi	r18, 0x04	; 4
    144a:	31 05       	cpc	r19, r1
    144c:	80 f4       	brcc	.+32     	; 0x146e <malloc+0xa0>
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	9b 81       	ldd	r25, Y+3	; 0x03
    1452:	61 15       	cp	r22, r1
    1454:	71 05       	cpc	r23, r1
    1456:	21 f0       	breq	.+8      	; 0x1460 <malloc+0x92>
    1458:	fb 01       	movw	r30, r22
    145a:	93 83       	std	Z+3, r25	; 0x03
    145c:	82 83       	std	Z+2, r24	; 0x02
    145e:	04 c0       	rjmp	.+8      	; 0x1468 <malloc+0x9a>
    1460:	90 93 f9 02 	sts	0x02F9, r25
    1464:	80 93 f8 02 	sts	0x02F8, r24
    1468:	fe 01       	movw	r30, r28
    146a:	32 96       	adiw	r30, 0x02	; 2
    146c:	44 c0       	rjmp	.+136    	; 0x14f6 <malloc+0x128>
    146e:	fe 01       	movw	r30, r28
    1470:	e2 0f       	add	r30, r18
    1472:	f3 1f       	adc	r31, r19
    1474:	81 93       	st	Z+, r24
    1476:	91 93       	st	Z+, r25
    1478:	22 50       	subi	r18, 0x02	; 2
    147a:	31 09       	sbc	r19, r1
    147c:	39 83       	std	Y+1, r19	; 0x01
    147e:	28 83       	st	Y, r18
    1480:	3a c0       	rjmp	.+116    	; 0x14f6 <malloc+0x128>
    1482:	20 91 f6 02 	lds	r18, 0x02F6
    1486:	30 91 f7 02 	lds	r19, 0x02F7
    148a:	23 2b       	or	r18, r19
    148c:	41 f4       	brne	.+16     	; 0x149e <malloc+0xd0>
    148e:	20 91 02 01 	lds	r18, 0x0102
    1492:	30 91 03 01 	lds	r19, 0x0103
    1496:	30 93 f7 02 	sts	0x02F7, r19
    149a:	20 93 f6 02 	sts	0x02F6, r18
    149e:	20 91 00 01 	lds	r18, 0x0100
    14a2:	30 91 01 01 	lds	r19, 0x0101
    14a6:	21 15       	cp	r18, r1
    14a8:	31 05       	cpc	r19, r1
    14aa:	41 f4       	brne	.+16     	; 0x14bc <malloc+0xee>
    14ac:	2d b7       	in	r18, 0x3d	; 61
    14ae:	3e b7       	in	r19, 0x3e	; 62
    14b0:	40 91 04 01 	lds	r20, 0x0104
    14b4:	50 91 05 01 	lds	r21, 0x0105
    14b8:	24 1b       	sub	r18, r20
    14ba:	35 0b       	sbc	r19, r21
    14bc:	e0 91 f6 02 	lds	r30, 0x02F6
    14c0:	f0 91 f7 02 	lds	r31, 0x02F7
    14c4:	e2 17       	cp	r30, r18
    14c6:	f3 07       	cpc	r31, r19
    14c8:	a0 f4       	brcc	.+40     	; 0x14f2 <malloc+0x124>
    14ca:	2e 1b       	sub	r18, r30
    14cc:	3f 0b       	sbc	r19, r31
    14ce:	28 17       	cp	r18, r24
    14d0:	39 07       	cpc	r19, r25
    14d2:	78 f0       	brcs	.+30     	; 0x14f2 <malloc+0x124>
    14d4:	ac 01       	movw	r20, r24
    14d6:	4e 5f       	subi	r20, 0xFE	; 254
    14d8:	5f 4f       	sbci	r21, 0xFF	; 255
    14da:	24 17       	cp	r18, r20
    14dc:	35 07       	cpc	r19, r21
    14de:	48 f0       	brcs	.+18     	; 0x14f2 <malloc+0x124>
    14e0:	4e 0f       	add	r20, r30
    14e2:	5f 1f       	adc	r21, r31
    14e4:	50 93 f7 02 	sts	0x02F7, r21
    14e8:	40 93 f6 02 	sts	0x02F6, r20
    14ec:	81 93       	st	Z+, r24
    14ee:	91 93       	st	Z+, r25
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <malloc+0x128>
    14f2:	e0 e0       	ldi	r30, 0x00	; 0
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	cf 01       	movw	r24, r30
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	08 95       	ret

000014fe <free>:
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	09 f4       	brne	.+2      	; 0x1508 <free+0xa>
    1506:	87 c0       	rjmp	.+270    	; 0x1616 <free+0x118>
    1508:	fc 01       	movw	r30, r24
    150a:	32 97       	sbiw	r30, 0x02	; 2
    150c:	13 82       	std	Z+3, r1	; 0x03
    150e:	12 82       	std	Z+2, r1	; 0x02
    1510:	c0 91 f8 02 	lds	r28, 0x02F8
    1514:	d0 91 f9 02 	lds	r29, 0x02F9
    1518:	20 97       	sbiw	r28, 0x00	; 0
    151a:	81 f4       	brne	.+32     	; 0x153c <free+0x3e>
    151c:	20 81       	ld	r18, Z
    151e:	31 81       	ldd	r19, Z+1	; 0x01
    1520:	28 0f       	add	r18, r24
    1522:	39 1f       	adc	r19, r25
    1524:	80 91 f6 02 	lds	r24, 0x02F6
    1528:	90 91 f7 02 	lds	r25, 0x02F7
    152c:	82 17       	cp	r24, r18
    152e:	93 07       	cpc	r25, r19
    1530:	79 f5       	brne	.+94     	; 0x1590 <free+0x92>
    1532:	f0 93 f7 02 	sts	0x02F7, r31
    1536:	e0 93 f6 02 	sts	0x02F6, r30
    153a:	6d c0       	rjmp	.+218    	; 0x1616 <free+0x118>
    153c:	de 01       	movw	r26, r28
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	ae 17       	cp	r26, r30
    1544:	bf 07       	cpc	r27, r31
    1546:	50 f4       	brcc	.+20     	; 0x155c <free+0x5e>
    1548:	12 96       	adiw	r26, 0x02	; 2
    154a:	4d 91       	ld	r20, X+
    154c:	5c 91       	ld	r21, X
    154e:	13 97       	sbiw	r26, 0x03	; 3
    1550:	9d 01       	movw	r18, r26
    1552:	41 15       	cp	r20, r1
    1554:	51 05       	cpc	r21, r1
    1556:	09 f1       	breq	.+66     	; 0x159a <free+0x9c>
    1558:	da 01       	movw	r26, r20
    155a:	f3 cf       	rjmp	.-26     	; 0x1542 <free+0x44>
    155c:	b3 83       	std	Z+3, r27	; 0x03
    155e:	a2 83       	std	Z+2, r26	; 0x02
    1560:	40 81       	ld	r20, Z
    1562:	51 81       	ldd	r21, Z+1	; 0x01
    1564:	84 0f       	add	r24, r20
    1566:	95 1f       	adc	r25, r21
    1568:	8a 17       	cp	r24, r26
    156a:	9b 07       	cpc	r25, r27
    156c:	71 f4       	brne	.+28     	; 0x158a <free+0x8c>
    156e:	8d 91       	ld	r24, X+
    1570:	9c 91       	ld	r25, X
    1572:	11 97       	sbiw	r26, 0x01	; 1
    1574:	84 0f       	add	r24, r20
    1576:	95 1f       	adc	r25, r21
    1578:	02 96       	adiw	r24, 0x02	; 2
    157a:	91 83       	std	Z+1, r25	; 0x01
    157c:	80 83       	st	Z, r24
    157e:	12 96       	adiw	r26, 0x02	; 2
    1580:	8d 91       	ld	r24, X+
    1582:	9c 91       	ld	r25, X
    1584:	13 97       	sbiw	r26, 0x03	; 3
    1586:	93 83       	std	Z+3, r25	; 0x03
    1588:	82 83       	std	Z+2, r24	; 0x02
    158a:	21 15       	cp	r18, r1
    158c:	31 05       	cpc	r19, r1
    158e:	29 f4       	brne	.+10     	; 0x159a <free+0x9c>
    1590:	f0 93 f9 02 	sts	0x02F9, r31
    1594:	e0 93 f8 02 	sts	0x02F8, r30
    1598:	3e c0       	rjmp	.+124    	; 0x1616 <free+0x118>
    159a:	d9 01       	movw	r26, r18
    159c:	13 96       	adiw	r26, 0x03	; 3
    159e:	fc 93       	st	X, r31
    15a0:	ee 93       	st	-X, r30
    15a2:	12 97       	sbiw	r26, 0x02	; 2
    15a4:	4d 91       	ld	r20, X+
    15a6:	5d 91       	ld	r21, X+
    15a8:	a4 0f       	add	r26, r20
    15aa:	b5 1f       	adc	r27, r21
    15ac:	ea 17       	cp	r30, r26
    15ae:	fb 07       	cpc	r31, r27
    15b0:	79 f4       	brne	.+30     	; 0x15d0 <free+0xd2>
    15b2:	80 81       	ld	r24, Z
    15b4:	91 81       	ldd	r25, Z+1	; 0x01
    15b6:	84 0f       	add	r24, r20
    15b8:	95 1f       	adc	r25, r21
    15ba:	02 96       	adiw	r24, 0x02	; 2
    15bc:	d9 01       	movw	r26, r18
    15be:	11 96       	adiw	r26, 0x01	; 1
    15c0:	9c 93       	st	X, r25
    15c2:	8e 93       	st	-X, r24
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	93 81       	ldd	r25, Z+3	; 0x03
    15c8:	13 96       	adiw	r26, 0x03	; 3
    15ca:	9c 93       	st	X, r25
    15cc:	8e 93       	st	-X, r24
    15ce:	12 97       	sbiw	r26, 0x02	; 2
    15d0:	e0 e0       	ldi	r30, 0x00	; 0
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	9b 81       	ldd	r25, Y+3	; 0x03
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	19 f0       	breq	.+6      	; 0x15e2 <free+0xe4>
    15dc:	fe 01       	movw	r30, r28
    15de:	ec 01       	movw	r28, r24
    15e0:	f9 cf       	rjmp	.-14     	; 0x15d4 <free+0xd6>
    15e2:	ce 01       	movw	r24, r28
    15e4:	02 96       	adiw	r24, 0x02	; 2
    15e6:	28 81       	ld	r18, Y
    15e8:	39 81       	ldd	r19, Y+1	; 0x01
    15ea:	82 0f       	add	r24, r18
    15ec:	93 1f       	adc	r25, r19
    15ee:	20 91 f6 02 	lds	r18, 0x02F6
    15f2:	30 91 f7 02 	lds	r19, 0x02F7
    15f6:	28 17       	cp	r18, r24
    15f8:	39 07       	cpc	r19, r25
    15fa:	69 f4       	brne	.+26     	; 0x1616 <free+0x118>
    15fc:	30 97       	sbiw	r30, 0x00	; 0
    15fe:	29 f4       	brne	.+10     	; 0x160a <free+0x10c>
    1600:	10 92 f9 02 	sts	0x02F9, r1
    1604:	10 92 f8 02 	sts	0x02F8, r1
    1608:	02 c0       	rjmp	.+4      	; 0x160e <free+0x110>
    160a:	13 82       	std	Z+3, r1	; 0x03
    160c:	12 82       	std	Z+2, r1	; 0x02
    160e:	d0 93 f7 02 	sts	0x02F7, r29
    1612:	c0 93 f6 02 	sts	0x02F6, r28
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	08 95       	ret

0000161c <do_rand>:
    161c:	8f 92       	push	r8
    161e:	9f 92       	push	r9
    1620:	af 92       	push	r10
    1622:	bf 92       	push	r11
    1624:	cf 92       	push	r12
    1626:	df 92       	push	r13
    1628:	ef 92       	push	r14
    162a:	ff 92       	push	r15
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	ec 01       	movw	r28, r24
    1632:	68 81       	ld	r22, Y
    1634:	79 81       	ldd	r23, Y+1	; 0x01
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	9b 81       	ldd	r25, Y+3	; 0x03
    163a:	61 15       	cp	r22, r1
    163c:	71 05       	cpc	r23, r1
    163e:	81 05       	cpc	r24, r1
    1640:	91 05       	cpc	r25, r1
    1642:	21 f4       	brne	.+8      	; 0x164c <do_rand+0x30>
    1644:	64 e2       	ldi	r22, 0x24	; 36
    1646:	79 ed       	ldi	r23, 0xD9	; 217
    1648:	8b e5       	ldi	r24, 0x5B	; 91
    164a:	97 e0       	ldi	r25, 0x07	; 7
    164c:	2d e1       	ldi	r18, 0x1D	; 29
    164e:	33 ef       	ldi	r19, 0xF3	; 243
    1650:	41 e0       	ldi	r20, 0x01	; 1
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__divmodsi4>
    1658:	49 01       	movw	r8, r18
    165a:	5a 01       	movw	r10, r20
    165c:	9b 01       	movw	r18, r22
    165e:	ac 01       	movw	r20, r24
    1660:	a7 ea       	ldi	r26, 0xA7	; 167
    1662:	b1 e4       	ldi	r27, 0x41	; 65
    1664:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__muluhisi3>
    1668:	6b 01       	movw	r12, r22
    166a:	7c 01       	movw	r14, r24
    166c:	ac ee       	ldi	r26, 0xEC	; 236
    166e:	b4 ef       	ldi	r27, 0xF4	; 244
    1670:	a5 01       	movw	r20, r10
    1672:	94 01       	movw	r18, r8
    1674:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__mulohisi3>
    1678:	c6 0e       	add	r12, r22
    167a:	d7 1e       	adc	r13, r23
    167c:	e8 1e       	adc	r14, r24
    167e:	f9 1e       	adc	r15, r25
    1680:	f7 fe       	sbrs	r15, 7
    1682:	06 c0       	rjmp	.+12     	; 0x1690 <do_rand+0x74>
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	c8 1a       	sub	r12, r24
    1688:	d1 08       	sbc	r13, r1
    168a:	e1 08       	sbc	r14, r1
    168c:	80 e8       	ldi	r24, 0x80	; 128
    168e:	f8 0a       	sbc	r15, r24
    1690:	c8 82       	st	Y, r12
    1692:	d9 82       	std	Y+1, r13	; 0x01
    1694:	ea 82       	std	Y+2, r14	; 0x02
    1696:	fb 82       	std	Y+3, r15	; 0x03
    1698:	c6 01       	movw	r24, r12
    169a:	9f 77       	andi	r25, 0x7F	; 127
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	ff 90       	pop	r15
    16a2:	ef 90       	pop	r14
    16a4:	df 90       	pop	r13
    16a6:	cf 90       	pop	r12
    16a8:	bf 90       	pop	r11
    16aa:	af 90       	pop	r10
    16ac:	9f 90       	pop	r9
    16ae:	8f 90       	pop	r8
    16b0:	08 95       	ret

000016b2 <rand_r>:
    16b2:	0e 94 0e 0b 	call	0x161c	; 0x161c <do_rand>
    16b6:	08 95       	ret

000016b8 <rand>:
    16b8:	86 e0       	ldi	r24, 0x06	; 6
    16ba:	91 e0       	ldi	r25, 0x01	; 1
    16bc:	0e 94 0e 0b 	call	0x161c	; 0x161c <do_rand>
    16c0:	08 95       	ret

000016c2 <srand>:
    16c2:	a0 e0       	ldi	r26, 0x00	; 0
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	80 93 06 01 	sts	0x0106, r24
    16ca:	90 93 07 01 	sts	0x0107, r25
    16ce:	a0 93 08 01 	sts	0x0108, r26
    16d2:	b0 93 09 01 	sts	0x0109, r27
    16d6:	08 95       	ret

000016d8 <strcmp>:
    16d8:	fb 01       	movw	r30, r22
    16da:	dc 01       	movw	r26, r24
    16dc:	8d 91       	ld	r24, X+
    16de:	01 90       	ld	r0, Z+
    16e0:	80 19       	sub	r24, r0
    16e2:	01 10       	cpse	r0, r1
    16e4:	d9 f3       	breq	.-10     	; 0x16dc <strcmp+0x4>
    16e6:	99 0b       	sbc	r25, r25
    16e8:	08 95       	ret

000016ea <fdevopen>:
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	ec 01       	movw	r28, r24
    16f4:	8b 01       	movw	r16, r22
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	31 f4       	brne	.+12     	; 0x1706 <fdevopen+0x1c>
    16fa:	61 15       	cp	r22, r1
    16fc:	71 05       	cpc	r23, r1
    16fe:	19 f4       	brne	.+6      	; 0x1706 <fdevopen+0x1c>
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	38 c0       	rjmp	.+112    	; 0x1776 <fdevopen+0x8c>
    1706:	6e e0       	ldi	r22, 0x0E	; 14
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <calloc>
    1712:	fc 01       	movw	r30, r24
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	a1 f3       	breq	.-24     	; 0x1700 <fdevopen+0x16>
    1718:	80 e8       	ldi	r24, 0x80	; 128
    171a:	83 83       	std	Z+3, r24	; 0x03
    171c:	01 15       	cp	r16, r1
    171e:	11 05       	cpc	r17, r1
    1720:	71 f0       	breq	.+28     	; 0x173e <fdevopen+0x54>
    1722:	13 87       	std	Z+11, r17	; 0x0b
    1724:	02 87       	std	Z+10, r16	; 0x0a
    1726:	81 e8       	ldi	r24, 0x81	; 129
    1728:	83 83       	std	Z+3, r24	; 0x03
    172a:	80 91 fa 02 	lds	r24, 0x02FA
    172e:	90 91 fb 02 	lds	r25, 0x02FB
    1732:	89 2b       	or	r24, r25
    1734:	21 f4       	brne	.+8      	; 0x173e <fdevopen+0x54>
    1736:	f0 93 fb 02 	sts	0x02FB, r31
    173a:	e0 93 fa 02 	sts	0x02FA, r30
    173e:	20 97       	sbiw	r28, 0x00	; 0
    1740:	c9 f0       	breq	.+50     	; 0x1774 <fdevopen+0x8a>
    1742:	d1 87       	std	Z+9, r29	; 0x09
    1744:	c0 87       	std	Z+8, r28	; 0x08
    1746:	83 81       	ldd	r24, Z+3	; 0x03
    1748:	82 60       	ori	r24, 0x02	; 2
    174a:	83 83       	std	Z+3, r24	; 0x03
    174c:	80 91 fc 02 	lds	r24, 0x02FC
    1750:	90 91 fd 02 	lds	r25, 0x02FD
    1754:	89 2b       	or	r24, r25
    1756:	71 f4       	brne	.+28     	; 0x1774 <fdevopen+0x8a>
    1758:	f0 93 fd 02 	sts	0x02FD, r31
    175c:	e0 93 fc 02 	sts	0x02FC, r30
    1760:	80 91 fe 02 	lds	r24, 0x02FE
    1764:	90 91 ff 02 	lds	r25, 0x02FF
    1768:	89 2b       	or	r24, r25
    176a:	21 f4       	brne	.+8      	; 0x1774 <fdevopen+0x8a>
    176c:	f0 93 ff 02 	sts	0x02FF, r31
    1770:	e0 93 fe 02 	sts	0x02FE, r30
    1774:	cf 01       	movw	r24, r30
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	08 95       	ret

00001780 <printf>:
    1780:	a0 e0       	ldi	r26, 0x00	; 0
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e6 ec       	ldi	r30, 0xC6	; 198
    1786:	fb e0       	ldi	r31, 0x0B	; 11
    1788:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <__prologue_saves__+0x20>
    178c:	fe 01       	movw	r30, r28
    178e:	35 96       	adiw	r30, 0x05	; 5
    1790:	61 91       	ld	r22, Z+
    1792:	71 91       	ld	r23, Z+
    1794:	af 01       	movw	r20, r30
    1796:	80 91 fc 02 	lds	r24, 0x02FC
    179a:	90 91 fd 02 	lds	r25, 0x02FD
    179e:	0e 94 01 0c 	call	0x1802	; 0x1802 <vfprintf>
    17a2:	e2 e0       	ldi	r30, 0x02	; 2
    17a4:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__epilogue_restores__+0x20>

000017a8 <puts>:
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	e0 91 fc 02 	lds	r30, 0x02FC
    17b4:	f0 91 fd 02 	lds	r31, 0x02FD
    17b8:	23 81       	ldd	r18, Z+3	; 0x03
    17ba:	21 ff       	sbrs	r18, 1
    17bc:	1b c0       	rjmp	.+54     	; 0x17f4 <puts+0x4c>
    17be:	ec 01       	movw	r28, r24
    17c0:	00 e0       	ldi	r16, 0x00	; 0
    17c2:	10 e0       	ldi	r17, 0x00	; 0
    17c4:	89 91       	ld	r24, Y+
    17c6:	60 91 fc 02 	lds	r22, 0x02FC
    17ca:	70 91 fd 02 	lds	r23, 0x02FD
    17ce:	db 01       	movw	r26, r22
    17d0:	18 96       	adiw	r26, 0x08	; 8
    17d2:	ed 91       	ld	r30, X+
    17d4:	fc 91       	ld	r31, X
    17d6:	19 97       	sbiw	r26, 0x09	; 9
    17d8:	88 23       	and	r24, r24
    17da:	31 f0       	breq	.+12     	; 0x17e8 <puts+0x40>
    17dc:	09 95       	icall
    17de:	89 2b       	or	r24, r25
    17e0:	89 f3       	breq	.-30     	; 0x17c4 <puts+0x1c>
    17e2:	0f ef       	ldi	r16, 0xFF	; 255
    17e4:	1f ef       	ldi	r17, 0xFF	; 255
    17e6:	ee cf       	rjmp	.-36     	; 0x17c4 <puts+0x1c>
    17e8:	8a e0       	ldi	r24, 0x0A	; 10
    17ea:	09 95       	icall
    17ec:	89 2b       	or	r24, r25
    17ee:	11 f4       	brne	.+4      	; 0x17f4 <puts+0x4c>
    17f0:	c8 01       	movw	r24, r16
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <puts+0x50>
    17f4:	8f ef       	ldi	r24, 0xFF	; 255
    17f6:	9f ef       	ldi	r25, 0xFF	; 255
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	08 95       	ret

00001802 <vfprintf>:
    1802:	ac e0       	ldi	r26, 0x0C	; 12
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e7 e0       	ldi	r30, 0x07	; 7
    1808:	fc e0       	ldi	r31, 0x0C	; 12
    180a:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__prologue_saves__>
    180e:	7c 01       	movw	r14, r24
    1810:	6b 01       	movw	r12, r22
    1812:	8a 01       	movw	r16, r20
    1814:	fc 01       	movw	r30, r24
    1816:	17 82       	std	Z+7, r1	; 0x07
    1818:	16 82       	std	Z+6, r1	; 0x06
    181a:	83 81       	ldd	r24, Z+3	; 0x03
    181c:	81 ff       	sbrs	r24, 1
    181e:	bd c1       	rjmp	.+890    	; 0x1b9a <vfprintf+0x398>
    1820:	ce 01       	movw	r24, r28
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	4c 01       	movw	r8, r24
    1826:	f7 01       	movw	r30, r14
    1828:	93 81       	ldd	r25, Z+3	; 0x03
    182a:	f6 01       	movw	r30, r12
    182c:	93 fd       	sbrc	r25, 3
    182e:	85 91       	lpm	r24, Z+
    1830:	93 ff       	sbrs	r25, 3
    1832:	81 91       	ld	r24, Z+
    1834:	6f 01       	movw	r12, r30
    1836:	88 23       	and	r24, r24
    1838:	09 f4       	brne	.+2      	; 0x183c <vfprintf+0x3a>
    183a:	ab c1       	rjmp	.+854    	; 0x1b92 <vfprintf+0x390>
    183c:	85 32       	cpi	r24, 0x25	; 37
    183e:	39 f4       	brne	.+14     	; 0x184e <vfprintf+0x4c>
    1840:	93 fd       	sbrc	r25, 3
    1842:	85 91       	lpm	r24, Z+
    1844:	93 ff       	sbrs	r25, 3
    1846:	81 91       	ld	r24, Z+
    1848:	6f 01       	movw	r12, r30
    184a:	85 32       	cpi	r24, 0x25	; 37
    184c:	29 f4       	brne	.+10     	; 0x1858 <vfprintf+0x56>
    184e:	b7 01       	movw	r22, r14
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    1856:	e7 cf       	rjmp	.-50     	; 0x1826 <vfprintf+0x24>
    1858:	51 2c       	mov	r5, r1
    185a:	31 2c       	mov	r3, r1
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	20 32       	cpi	r18, 0x20	; 32
    1860:	a0 f4       	brcc	.+40     	; 0x188a <vfprintf+0x88>
    1862:	8b 32       	cpi	r24, 0x2B	; 43
    1864:	69 f0       	breq	.+26     	; 0x1880 <vfprintf+0x7e>
    1866:	30 f4       	brcc	.+12     	; 0x1874 <vfprintf+0x72>
    1868:	80 32       	cpi	r24, 0x20	; 32
    186a:	59 f0       	breq	.+22     	; 0x1882 <vfprintf+0x80>
    186c:	83 32       	cpi	r24, 0x23	; 35
    186e:	69 f4       	brne	.+26     	; 0x188a <vfprintf+0x88>
    1870:	20 61       	ori	r18, 0x10	; 16
    1872:	2c c0       	rjmp	.+88     	; 0x18cc <vfprintf+0xca>
    1874:	8d 32       	cpi	r24, 0x2D	; 45
    1876:	39 f0       	breq	.+14     	; 0x1886 <vfprintf+0x84>
    1878:	80 33       	cpi	r24, 0x30	; 48
    187a:	39 f4       	brne	.+14     	; 0x188a <vfprintf+0x88>
    187c:	21 60       	ori	r18, 0x01	; 1
    187e:	26 c0       	rjmp	.+76     	; 0x18cc <vfprintf+0xca>
    1880:	22 60       	ori	r18, 0x02	; 2
    1882:	24 60       	ori	r18, 0x04	; 4
    1884:	23 c0       	rjmp	.+70     	; 0x18cc <vfprintf+0xca>
    1886:	28 60       	ori	r18, 0x08	; 8
    1888:	21 c0       	rjmp	.+66     	; 0x18cc <vfprintf+0xca>
    188a:	27 fd       	sbrc	r18, 7
    188c:	27 c0       	rjmp	.+78     	; 0x18dc <vfprintf+0xda>
    188e:	30 ed       	ldi	r19, 0xD0	; 208
    1890:	38 0f       	add	r19, r24
    1892:	3a 30       	cpi	r19, 0x0A	; 10
    1894:	78 f4       	brcc	.+30     	; 0x18b4 <vfprintf+0xb2>
    1896:	26 ff       	sbrs	r18, 6
    1898:	06 c0       	rjmp	.+12     	; 0x18a6 <vfprintf+0xa4>
    189a:	fa e0       	ldi	r31, 0x0A	; 10
    189c:	5f 9e       	mul	r5, r31
    189e:	30 0d       	add	r19, r0
    18a0:	11 24       	eor	r1, r1
    18a2:	53 2e       	mov	r5, r19
    18a4:	13 c0       	rjmp	.+38     	; 0x18cc <vfprintf+0xca>
    18a6:	8a e0       	ldi	r24, 0x0A	; 10
    18a8:	38 9e       	mul	r3, r24
    18aa:	30 0d       	add	r19, r0
    18ac:	11 24       	eor	r1, r1
    18ae:	33 2e       	mov	r3, r19
    18b0:	20 62       	ori	r18, 0x20	; 32
    18b2:	0c c0       	rjmp	.+24     	; 0x18cc <vfprintf+0xca>
    18b4:	8e 32       	cpi	r24, 0x2E	; 46
    18b6:	21 f4       	brne	.+8      	; 0x18c0 <vfprintf+0xbe>
    18b8:	26 fd       	sbrc	r18, 6
    18ba:	6b c1       	rjmp	.+726    	; 0x1b92 <vfprintf+0x390>
    18bc:	20 64       	ori	r18, 0x40	; 64
    18be:	06 c0       	rjmp	.+12     	; 0x18cc <vfprintf+0xca>
    18c0:	8c 36       	cpi	r24, 0x6C	; 108
    18c2:	11 f4       	brne	.+4      	; 0x18c8 <vfprintf+0xc6>
    18c4:	20 68       	ori	r18, 0x80	; 128
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <vfprintf+0xca>
    18c8:	88 36       	cpi	r24, 0x68	; 104
    18ca:	41 f4       	brne	.+16     	; 0x18dc <vfprintf+0xda>
    18cc:	f6 01       	movw	r30, r12
    18ce:	93 fd       	sbrc	r25, 3
    18d0:	85 91       	lpm	r24, Z+
    18d2:	93 ff       	sbrs	r25, 3
    18d4:	81 91       	ld	r24, Z+
    18d6:	6f 01       	movw	r12, r30
    18d8:	81 11       	cpse	r24, r1
    18da:	c1 cf       	rjmp	.-126    	; 0x185e <vfprintf+0x5c>
    18dc:	98 2f       	mov	r25, r24
    18de:	9f 7d       	andi	r25, 0xDF	; 223
    18e0:	95 54       	subi	r25, 0x45	; 69
    18e2:	93 30       	cpi	r25, 0x03	; 3
    18e4:	28 f4       	brcc	.+10     	; 0x18f0 <vfprintf+0xee>
    18e6:	0c 5f       	subi	r16, 0xFC	; 252
    18e8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ea:	ff e3       	ldi	r31, 0x3F	; 63
    18ec:	f9 83       	std	Y+1, r31	; 0x01
    18ee:	0d c0       	rjmp	.+26     	; 0x190a <vfprintf+0x108>
    18f0:	83 36       	cpi	r24, 0x63	; 99
    18f2:	31 f0       	breq	.+12     	; 0x1900 <vfprintf+0xfe>
    18f4:	83 37       	cpi	r24, 0x73	; 115
    18f6:	71 f0       	breq	.+28     	; 0x1914 <vfprintf+0x112>
    18f8:	83 35       	cpi	r24, 0x53	; 83
    18fa:	09 f0       	breq	.+2      	; 0x18fe <vfprintf+0xfc>
    18fc:	5b c0       	rjmp	.+182    	; 0x19b4 <vfprintf+0x1b2>
    18fe:	22 c0       	rjmp	.+68     	; 0x1944 <vfprintf+0x142>
    1900:	f8 01       	movw	r30, r16
    1902:	80 81       	ld	r24, Z
    1904:	89 83       	std	Y+1, r24	; 0x01
    1906:	0e 5f       	subi	r16, 0xFE	; 254
    1908:	1f 4f       	sbci	r17, 0xFF	; 255
    190a:	44 24       	eor	r4, r4
    190c:	43 94       	inc	r4
    190e:	51 2c       	mov	r5, r1
    1910:	54 01       	movw	r10, r8
    1912:	15 c0       	rjmp	.+42     	; 0x193e <vfprintf+0x13c>
    1914:	38 01       	movw	r6, r16
    1916:	f2 e0       	ldi	r31, 0x02	; 2
    1918:	6f 0e       	add	r6, r31
    191a:	71 1c       	adc	r7, r1
    191c:	f8 01       	movw	r30, r16
    191e:	a0 80       	ld	r10, Z
    1920:	b1 80       	ldd	r11, Z+1	; 0x01
    1922:	26 ff       	sbrs	r18, 6
    1924:	03 c0       	rjmp	.+6      	; 0x192c <vfprintf+0x12a>
    1926:	65 2d       	mov	r22, r5
    1928:	70 e0       	ldi	r23, 0x00	; 0
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <vfprintf+0x12e>
    192c:	6f ef       	ldi	r22, 0xFF	; 255
    192e:	7f ef       	ldi	r23, 0xFF	; 255
    1930:	c5 01       	movw	r24, r10
    1932:	2c 87       	std	Y+12, r18	; 0x0c
    1934:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <strnlen>
    1938:	2c 01       	movw	r4, r24
    193a:	83 01       	movw	r16, r6
    193c:	2c 85       	ldd	r18, Y+12	; 0x0c
    193e:	2f 77       	andi	r18, 0x7F	; 127
    1940:	22 2e       	mov	r2, r18
    1942:	17 c0       	rjmp	.+46     	; 0x1972 <vfprintf+0x170>
    1944:	38 01       	movw	r6, r16
    1946:	f2 e0       	ldi	r31, 0x02	; 2
    1948:	6f 0e       	add	r6, r31
    194a:	71 1c       	adc	r7, r1
    194c:	f8 01       	movw	r30, r16
    194e:	a0 80       	ld	r10, Z
    1950:	b1 80       	ldd	r11, Z+1	; 0x01
    1952:	26 ff       	sbrs	r18, 6
    1954:	03 c0       	rjmp	.+6      	; 0x195c <vfprintf+0x15a>
    1956:	65 2d       	mov	r22, r5
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <vfprintf+0x15e>
    195c:	6f ef       	ldi	r22, 0xFF	; 255
    195e:	7f ef       	ldi	r23, 0xFF	; 255
    1960:	c5 01       	movw	r24, r10
    1962:	2c 87       	std	Y+12, r18	; 0x0c
    1964:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <strnlen_P>
    1968:	2c 01       	movw	r4, r24
    196a:	2c 85       	ldd	r18, Y+12	; 0x0c
    196c:	20 68       	ori	r18, 0x80	; 128
    196e:	22 2e       	mov	r2, r18
    1970:	83 01       	movw	r16, r6
    1972:	23 fc       	sbrc	r2, 3
    1974:	1b c0       	rjmp	.+54     	; 0x19ac <vfprintf+0x1aa>
    1976:	83 2d       	mov	r24, r3
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	48 16       	cp	r4, r24
    197c:	59 06       	cpc	r5, r25
    197e:	b0 f4       	brcc	.+44     	; 0x19ac <vfprintf+0x1aa>
    1980:	b7 01       	movw	r22, r14
    1982:	80 e2       	ldi	r24, 0x20	; 32
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    198a:	3a 94       	dec	r3
    198c:	f4 cf       	rjmp	.-24     	; 0x1976 <vfprintf+0x174>
    198e:	f5 01       	movw	r30, r10
    1990:	27 fc       	sbrc	r2, 7
    1992:	85 91       	lpm	r24, Z+
    1994:	27 fe       	sbrs	r2, 7
    1996:	81 91       	ld	r24, Z+
    1998:	5f 01       	movw	r10, r30
    199a:	b7 01       	movw	r22, r14
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    19a2:	31 10       	cpse	r3, r1
    19a4:	3a 94       	dec	r3
    19a6:	f1 e0       	ldi	r31, 0x01	; 1
    19a8:	4f 1a       	sub	r4, r31
    19aa:	51 08       	sbc	r5, r1
    19ac:	41 14       	cp	r4, r1
    19ae:	51 04       	cpc	r5, r1
    19b0:	71 f7       	brne	.-36     	; 0x198e <vfprintf+0x18c>
    19b2:	e5 c0       	rjmp	.+458    	; 0x1b7e <vfprintf+0x37c>
    19b4:	84 36       	cpi	r24, 0x64	; 100
    19b6:	11 f0       	breq	.+4      	; 0x19bc <vfprintf+0x1ba>
    19b8:	89 36       	cpi	r24, 0x69	; 105
    19ba:	39 f5       	brne	.+78     	; 0x1a0a <vfprintf+0x208>
    19bc:	f8 01       	movw	r30, r16
    19be:	27 ff       	sbrs	r18, 7
    19c0:	07 c0       	rjmp	.+14     	; 0x19d0 <vfprintf+0x1ce>
    19c2:	60 81       	ld	r22, Z
    19c4:	71 81       	ldd	r23, Z+1	; 0x01
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	0c 5f       	subi	r16, 0xFC	; 252
    19cc:	1f 4f       	sbci	r17, 0xFF	; 255
    19ce:	08 c0       	rjmp	.+16     	; 0x19e0 <vfprintf+0x1de>
    19d0:	60 81       	ld	r22, Z
    19d2:	71 81       	ldd	r23, Z+1	; 0x01
    19d4:	88 27       	eor	r24, r24
    19d6:	77 fd       	sbrc	r23, 7
    19d8:	80 95       	com	r24
    19da:	98 2f       	mov	r25, r24
    19dc:	0e 5f       	subi	r16, 0xFE	; 254
    19de:	1f 4f       	sbci	r17, 0xFF	; 255
    19e0:	2f 76       	andi	r18, 0x6F	; 111
    19e2:	b2 2e       	mov	r11, r18
    19e4:	97 ff       	sbrs	r25, 7
    19e6:	09 c0       	rjmp	.+18     	; 0x19fa <vfprintf+0x1f8>
    19e8:	90 95       	com	r25
    19ea:	80 95       	com	r24
    19ec:	70 95       	com	r23
    19ee:	61 95       	neg	r22
    19f0:	7f 4f       	sbci	r23, 0xFF	; 255
    19f2:	8f 4f       	sbci	r24, 0xFF	; 255
    19f4:	9f 4f       	sbci	r25, 0xFF	; 255
    19f6:	20 68       	ori	r18, 0x80	; 128
    19f8:	b2 2e       	mov	r11, r18
    19fa:	2a e0       	ldi	r18, 0x0A	; 10
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	a4 01       	movw	r20, r8
    1a00:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__ultoa_invert>
    1a04:	a8 2e       	mov	r10, r24
    1a06:	a8 18       	sub	r10, r8
    1a08:	44 c0       	rjmp	.+136    	; 0x1a92 <vfprintf+0x290>
    1a0a:	85 37       	cpi	r24, 0x75	; 117
    1a0c:	29 f4       	brne	.+10     	; 0x1a18 <vfprintf+0x216>
    1a0e:	2f 7e       	andi	r18, 0xEF	; 239
    1a10:	b2 2e       	mov	r11, r18
    1a12:	2a e0       	ldi	r18, 0x0A	; 10
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	25 c0       	rjmp	.+74     	; 0x1a62 <vfprintf+0x260>
    1a18:	f2 2f       	mov	r31, r18
    1a1a:	f9 7f       	andi	r31, 0xF9	; 249
    1a1c:	bf 2e       	mov	r11, r31
    1a1e:	8f 36       	cpi	r24, 0x6F	; 111
    1a20:	c1 f0       	breq	.+48     	; 0x1a52 <vfprintf+0x250>
    1a22:	18 f4       	brcc	.+6      	; 0x1a2a <vfprintf+0x228>
    1a24:	88 35       	cpi	r24, 0x58	; 88
    1a26:	79 f0       	breq	.+30     	; 0x1a46 <vfprintf+0x244>
    1a28:	b4 c0       	rjmp	.+360    	; 0x1b92 <vfprintf+0x390>
    1a2a:	80 37       	cpi	r24, 0x70	; 112
    1a2c:	19 f0       	breq	.+6      	; 0x1a34 <vfprintf+0x232>
    1a2e:	88 37       	cpi	r24, 0x78	; 120
    1a30:	21 f0       	breq	.+8      	; 0x1a3a <vfprintf+0x238>
    1a32:	af c0       	rjmp	.+350    	; 0x1b92 <vfprintf+0x390>
    1a34:	2f 2f       	mov	r18, r31
    1a36:	20 61       	ori	r18, 0x10	; 16
    1a38:	b2 2e       	mov	r11, r18
    1a3a:	b4 fe       	sbrs	r11, 4
    1a3c:	0d c0       	rjmp	.+26     	; 0x1a58 <vfprintf+0x256>
    1a3e:	8b 2d       	mov	r24, r11
    1a40:	84 60       	ori	r24, 0x04	; 4
    1a42:	b8 2e       	mov	r11, r24
    1a44:	09 c0       	rjmp	.+18     	; 0x1a58 <vfprintf+0x256>
    1a46:	24 ff       	sbrs	r18, 4
    1a48:	0a c0       	rjmp	.+20     	; 0x1a5e <vfprintf+0x25c>
    1a4a:	9f 2f       	mov	r25, r31
    1a4c:	96 60       	ori	r25, 0x06	; 6
    1a4e:	b9 2e       	mov	r11, r25
    1a50:	06 c0       	rjmp	.+12     	; 0x1a5e <vfprintf+0x25c>
    1a52:	28 e0       	ldi	r18, 0x08	; 8
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	05 c0       	rjmp	.+10     	; 0x1a62 <vfprintf+0x260>
    1a58:	20 e1       	ldi	r18, 0x10	; 16
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <vfprintf+0x260>
    1a5e:	20 e1       	ldi	r18, 0x10	; 16
    1a60:	32 e0       	ldi	r19, 0x02	; 2
    1a62:	f8 01       	movw	r30, r16
    1a64:	b7 fe       	sbrs	r11, 7
    1a66:	07 c0       	rjmp	.+14     	; 0x1a76 <vfprintf+0x274>
    1a68:	60 81       	ld	r22, Z
    1a6a:	71 81       	ldd	r23, Z+1	; 0x01
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	0c 5f       	subi	r16, 0xFC	; 252
    1a72:	1f 4f       	sbci	r17, 0xFF	; 255
    1a74:	06 c0       	rjmp	.+12     	; 0x1a82 <vfprintf+0x280>
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	0e 5f       	subi	r16, 0xFE	; 254
    1a80:	1f 4f       	sbci	r17, 0xFF	; 255
    1a82:	a4 01       	movw	r20, r8
    1a84:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__ultoa_invert>
    1a88:	a8 2e       	mov	r10, r24
    1a8a:	a8 18       	sub	r10, r8
    1a8c:	fb 2d       	mov	r31, r11
    1a8e:	ff 77       	andi	r31, 0x7F	; 127
    1a90:	bf 2e       	mov	r11, r31
    1a92:	b6 fe       	sbrs	r11, 6
    1a94:	0b c0       	rjmp	.+22     	; 0x1aac <vfprintf+0x2aa>
    1a96:	2b 2d       	mov	r18, r11
    1a98:	2e 7f       	andi	r18, 0xFE	; 254
    1a9a:	a5 14       	cp	r10, r5
    1a9c:	50 f4       	brcc	.+20     	; 0x1ab2 <vfprintf+0x2b0>
    1a9e:	b4 fe       	sbrs	r11, 4
    1aa0:	0a c0       	rjmp	.+20     	; 0x1ab6 <vfprintf+0x2b4>
    1aa2:	b2 fc       	sbrc	r11, 2
    1aa4:	08 c0       	rjmp	.+16     	; 0x1ab6 <vfprintf+0x2b4>
    1aa6:	2b 2d       	mov	r18, r11
    1aa8:	2e 7e       	andi	r18, 0xEE	; 238
    1aaa:	05 c0       	rjmp	.+10     	; 0x1ab6 <vfprintf+0x2b4>
    1aac:	7a 2c       	mov	r7, r10
    1aae:	2b 2d       	mov	r18, r11
    1ab0:	03 c0       	rjmp	.+6      	; 0x1ab8 <vfprintf+0x2b6>
    1ab2:	7a 2c       	mov	r7, r10
    1ab4:	01 c0       	rjmp	.+2      	; 0x1ab8 <vfprintf+0x2b6>
    1ab6:	75 2c       	mov	r7, r5
    1ab8:	24 ff       	sbrs	r18, 4
    1aba:	0d c0       	rjmp	.+26     	; 0x1ad6 <vfprintf+0x2d4>
    1abc:	fe 01       	movw	r30, r28
    1abe:	ea 0d       	add	r30, r10
    1ac0:	f1 1d       	adc	r31, r1
    1ac2:	80 81       	ld	r24, Z
    1ac4:	80 33       	cpi	r24, 0x30	; 48
    1ac6:	11 f4       	brne	.+4      	; 0x1acc <vfprintf+0x2ca>
    1ac8:	29 7e       	andi	r18, 0xE9	; 233
    1aca:	09 c0       	rjmp	.+18     	; 0x1ade <vfprintf+0x2dc>
    1acc:	22 ff       	sbrs	r18, 2
    1ace:	06 c0       	rjmp	.+12     	; 0x1adc <vfprintf+0x2da>
    1ad0:	73 94       	inc	r7
    1ad2:	73 94       	inc	r7
    1ad4:	04 c0       	rjmp	.+8      	; 0x1ade <vfprintf+0x2dc>
    1ad6:	82 2f       	mov	r24, r18
    1ad8:	86 78       	andi	r24, 0x86	; 134
    1ada:	09 f0       	breq	.+2      	; 0x1ade <vfprintf+0x2dc>
    1adc:	73 94       	inc	r7
    1ade:	23 fd       	sbrc	r18, 3
    1ae0:	13 c0       	rjmp	.+38     	; 0x1b08 <vfprintf+0x306>
    1ae2:	20 ff       	sbrs	r18, 0
    1ae4:	06 c0       	rjmp	.+12     	; 0x1af2 <vfprintf+0x2f0>
    1ae6:	5a 2c       	mov	r5, r10
    1ae8:	73 14       	cp	r7, r3
    1aea:	18 f4       	brcc	.+6      	; 0x1af2 <vfprintf+0x2f0>
    1aec:	53 0c       	add	r5, r3
    1aee:	57 18       	sub	r5, r7
    1af0:	73 2c       	mov	r7, r3
    1af2:	73 14       	cp	r7, r3
    1af4:	68 f4       	brcc	.+26     	; 0x1b10 <vfprintf+0x30e>
    1af6:	b7 01       	movw	r22, r14
    1af8:	80 e2       	ldi	r24, 0x20	; 32
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	2c 87       	std	Y+12, r18	; 0x0c
    1afe:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    1b02:	73 94       	inc	r7
    1b04:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b06:	f5 cf       	rjmp	.-22     	; 0x1af2 <vfprintf+0x2f0>
    1b08:	73 14       	cp	r7, r3
    1b0a:	10 f4       	brcc	.+4      	; 0x1b10 <vfprintf+0x30e>
    1b0c:	37 18       	sub	r3, r7
    1b0e:	01 c0       	rjmp	.+2      	; 0x1b12 <vfprintf+0x310>
    1b10:	31 2c       	mov	r3, r1
    1b12:	24 ff       	sbrs	r18, 4
    1b14:	12 c0       	rjmp	.+36     	; 0x1b3a <vfprintf+0x338>
    1b16:	b7 01       	movw	r22, r14
    1b18:	80 e3       	ldi	r24, 0x30	; 48
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	2c 87       	std	Y+12, r18	; 0x0c
    1b1e:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    1b22:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b24:	22 ff       	sbrs	r18, 2
    1b26:	17 c0       	rjmp	.+46     	; 0x1b56 <vfprintf+0x354>
    1b28:	21 ff       	sbrs	r18, 1
    1b2a:	03 c0       	rjmp	.+6      	; 0x1b32 <vfprintf+0x330>
    1b2c:	88 e5       	ldi	r24, 0x58	; 88
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <vfprintf+0x334>
    1b32:	88 e7       	ldi	r24, 0x78	; 120
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	b7 01       	movw	r22, r14
    1b38:	0c c0       	rjmp	.+24     	; 0x1b52 <vfprintf+0x350>
    1b3a:	82 2f       	mov	r24, r18
    1b3c:	86 78       	andi	r24, 0x86	; 134
    1b3e:	59 f0       	breq	.+22     	; 0x1b56 <vfprintf+0x354>
    1b40:	21 fd       	sbrc	r18, 1
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <vfprintf+0x346>
    1b44:	80 e2       	ldi	r24, 0x20	; 32
    1b46:	01 c0       	rjmp	.+2      	; 0x1b4a <vfprintf+0x348>
    1b48:	8b e2       	ldi	r24, 0x2B	; 43
    1b4a:	27 fd       	sbrc	r18, 7
    1b4c:	8d e2       	ldi	r24, 0x2D	; 45
    1b4e:	b7 01       	movw	r22, r14
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    1b56:	a5 14       	cp	r10, r5
    1b58:	38 f4       	brcc	.+14     	; 0x1b68 <vfprintf+0x366>
    1b5a:	b7 01       	movw	r22, r14
    1b5c:	80 e3       	ldi	r24, 0x30	; 48
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    1b64:	5a 94       	dec	r5
    1b66:	f7 cf       	rjmp	.-18     	; 0x1b56 <vfprintf+0x354>
    1b68:	aa 94       	dec	r10
    1b6a:	f4 01       	movw	r30, r8
    1b6c:	ea 0d       	add	r30, r10
    1b6e:	f1 1d       	adc	r31, r1
    1b70:	80 81       	ld	r24, Z
    1b72:	b7 01       	movw	r22, r14
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    1b7a:	a1 10       	cpse	r10, r1
    1b7c:	f5 cf       	rjmp	.-22     	; 0x1b68 <vfprintf+0x366>
    1b7e:	33 20       	and	r3, r3
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <vfprintf+0x382>
    1b82:	51 ce       	rjmp	.-862    	; 0x1826 <vfprintf+0x24>
    1b84:	b7 01       	movw	r22, r14
    1b86:	80 e2       	ldi	r24, 0x20	; 32
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    1b8e:	3a 94       	dec	r3
    1b90:	f6 cf       	rjmp	.-20     	; 0x1b7e <vfprintf+0x37c>
    1b92:	f7 01       	movw	r30, r14
    1b94:	86 81       	ldd	r24, Z+6	; 0x06
    1b96:	97 81       	ldd	r25, Z+7	; 0x07
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <vfprintf+0x39c>
    1b9a:	8f ef       	ldi	r24, 0xFF	; 255
    1b9c:	9f ef       	ldi	r25, 0xFF	; 255
    1b9e:	2c 96       	adiw	r28, 0x0c	; 12
    1ba0:	e2 e1       	ldi	r30, 0x12	; 18
    1ba2:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <__epilogue_restores__>

00001ba6 <calloc>:
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	86 9f       	mul	r24, r22
    1bb0:	80 01       	movw	r16, r0
    1bb2:	87 9f       	mul	r24, r23
    1bb4:	10 0d       	add	r17, r0
    1bb6:	96 9f       	mul	r25, r22
    1bb8:	10 0d       	add	r17, r0
    1bba:	11 24       	eor	r1, r1
    1bbc:	c8 01       	movw	r24, r16
    1bbe:	0e 94 e7 09 	call	0x13ce	; 0x13ce <malloc>
    1bc2:	ec 01       	movw	r28, r24
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	29 f0       	breq	.+10     	; 0x1bd2 <calloc+0x2c>
    1bc8:	a8 01       	movw	r20, r16
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	70 e0       	ldi	r23, 0x00	; 0
    1bce:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <memset>
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	1f 91       	pop	r17
    1bda:	0f 91       	pop	r16
    1bdc:	08 95       	ret

00001bde <strnlen_P>:
    1bde:	fc 01       	movw	r30, r24
    1be0:	05 90       	lpm	r0, Z+
    1be2:	61 50       	subi	r22, 0x01	; 1
    1be4:	70 40       	sbci	r23, 0x00	; 0
    1be6:	01 10       	cpse	r0, r1
    1be8:	d8 f7       	brcc	.-10     	; 0x1be0 <strnlen_P+0x2>
    1bea:	80 95       	com	r24
    1bec:	90 95       	com	r25
    1bee:	8e 0f       	add	r24, r30
    1bf0:	9f 1f       	adc	r25, r31
    1bf2:	08 95       	ret

00001bf4 <memset>:
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	01 c0       	rjmp	.+2      	; 0x1bfa <memset+0x6>
    1bf8:	6d 93       	st	X+, r22
    1bfa:	41 50       	subi	r20, 0x01	; 1
    1bfc:	50 40       	sbci	r21, 0x00	; 0
    1bfe:	e0 f7       	brcc	.-8      	; 0x1bf8 <memset+0x4>
    1c00:	08 95       	ret

00001c02 <strnlen>:
    1c02:	fc 01       	movw	r30, r24
    1c04:	61 50       	subi	r22, 0x01	; 1
    1c06:	70 40       	sbci	r23, 0x00	; 0
    1c08:	01 90       	ld	r0, Z+
    1c0a:	01 10       	cpse	r0, r1
    1c0c:	d8 f7       	brcc	.-10     	; 0x1c04 <strnlen+0x2>
    1c0e:	80 95       	com	r24
    1c10:	90 95       	com	r25
    1c12:	8e 0f       	add	r24, r30
    1c14:	9f 1f       	adc	r25, r31
    1c16:	08 95       	ret

00001c18 <fputc>:
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	18 2f       	mov	r17, r24
    1c22:	09 2f       	mov	r16, r25
    1c24:	eb 01       	movw	r28, r22
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	81 fd       	sbrc	r24, 1
    1c2a:	03 c0       	rjmp	.+6      	; 0x1c32 <fputc+0x1a>
    1c2c:	8f ef       	ldi	r24, 0xFF	; 255
    1c2e:	9f ef       	ldi	r25, 0xFF	; 255
    1c30:	20 c0       	rjmp	.+64     	; 0x1c72 <fputc+0x5a>
    1c32:	82 ff       	sbrs	r24, 2
    1c34:	10 c0       	rjmp	.+32     	; 0x1c56 <fputc+0x3e>
    1c36:	4e 81       	ldd	r20, Y+6	; 0x06
    1c38:	5f 81       	ldd	r21, Y+7	; 0x07
    1c3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c3e:	42 17       	cp	r20, r18
    1c40:	53 07       	cpc	r21, r19
    1c42:	7c f4       	brge	.+30     	; 0x1c62 <fputc+0x4a>
    1c44:	e8 81       	ld	r30, Y
    1c46:	f9 81       	ldd	r31, Y+1	; 0x01
    1c48:	9f 01       	movw	r18, r30
    1c4a:	2f 5f       	subi	r18, 0xFF	; 255
    1c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4e:	39 83       	std	Y+1, r19	; 0x01
    1c50:	28 83       	st	Y, r18
    1c52:	10 83       	st	Z, r17
    1c54:	06 c0       	rjmp	.+12     	; 0x1c62 <fputc+0x4a>
    1c56:	e8 85       	ldd	r30, Y+8	; 0x08
    1c58:	f9 85       	ldd	r31, Y+9	; 0x09
    1c5a:	81 2f       	mov	r24, r17
    1c5c:	09 95       	icall
    1c5e:	89 2b       	or	r24, r25
    1c60:	29 f7       	brne	.-54     	; 0x1c2c <fputc+0x14>
    1c62:	2e 81       	ldd	r18, Y+6	; 0x06
    1c64:	3f 81       	ldd	r19, Y+7	; 0x07
    1c66:	2f 5f       	subi	r18, 0xFF	; 255
    1c68:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6a:	3f 83       	std	Y+7, r19	; 0x07
    1c6c:	2e 83       	std	Y+6, r18	; 0x06
    1c6e:	81 2f       	mov	r24, r17
    1c70:	90 2f       	mov	r25, r16
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	1f 91       	pop	r17
    1c78:	0f 91       	pop	r16
    1c7a:	08 95       	ret

00001c7c <__ultoa_invert>:
    1c7c:	fa 01       	movw	r30, r20
    1c7e:	aa 27       	eor	r26, r26
    1c80:	28 30       	cpi	r18, 0x08	; 8
    1c82:	51 f1       	breq	.+84     	; 0x1cd8 <__ultoa_invert+0x5c>
    1c84:	20 31       	cpi	r18, 0x10	; 16
    1c86:	81 f1       	breq	.+96     	; 0x1ce8 <__ultoa_invert+0x6c>
    1c88:	e8 94       	clt
    1c8a:	6f 93       	push	r22
    1c8c:	6e 7f       	andi	r22, 0xFE	; 254
    1c8e:	6e 5f       	subi	r22, 0xFE	; 254
    1c90:	7f 4f       	sbci	r23, 0xFF	; 255
    1c92:	8f 4f       	sbci	r24, 0xFF	; 255
    1c94:	9f 4f       	sbci	r25, 0xFF	; 255
    1c96:	af 4f       	sbci	r26, 0xFF	; 255
    1c98:	b1 e0       	ldi	r27, 0x01	; 1
    1c9a:	3e d0       	rcall	.+124    	; 0x1d18 <__ultoa_invert+0x9c>
    1c9c:	b4 e0       	ldi	r27, 0x04	; 4
    1c9e:	3c d0       	rcall	.+120    	; 0x1d18 <__ultoa_invert+0x9c>
    1ca0:	67 0f       	add	r22, r23
    1ca2:	78 1f       	adc	r23, r24
    1ca4:	89 1f       	adc	r24, r25
    1ca6:	9a 1f       	adc	r25, r26
    1ca8:	a1 1d       	adc	r26, r1
    1caa:	68 0f       	add	r22, r24
    1cac:	79 1f       	adc	r23, r25
    1cae:	8a 1f       	adc	r24, r26
    1cb0:	91 1d       	adc	r25, r1
    1cb2:	a1 1d       	adc	r26, r1
    1cb4:	6a 0f       	add	r22, r26
    1cb6:	71 1d       	adc	r23, r1
    1cb8:	81 1d       	adc	r24, r1
    1cba:	91 1d       	adc	r25, r1
    1cbc:	a1 1d       	adc	r26, r1
    1cbe:	20 d0       	rcall	.+64     	; 0x1d00 <__ultoa_invert+0x84>
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <__ultoa_invert+0x48>
    1cc2:	68 94       	set
    1cc4:	3f 91       	pop	r19
    1cc6:	2a e0       	ldi	r18, 0x0A	; 10
    1cc8:	26 9f       	mul	r18, r22
    1cca:	11 24       	eor	r1, r1
    1ccc:	30 19       	sub	r19, r0
    1cce:	30 5d       	subi	r19, 0xD0	; 208
    1cd0:	31 93       	st	Z+, r19
    1cd2:	de f6       	brtc	.-74     	; 0x1c8a <__ultoa_invert+0xe>
    1cd4:	cf 01       	movw	r24, r30
    1cd6:	08 95       	ret
    1cd8:	46 2f       	mov	r20, r22
    1cda:	47 70       	andi	r20, 0x07	; 7
    1cdc:	40 5d       	subi	r20, 0xD0	; 208
    1cde:	41 93       	st	Z+, r20
    1ce0:	b3 e0       	ldi	r27, 0x03	; 3
    1ce2:	0f d0       	rcall	.+30     	; 0x1d02 <__ultoa_invert+0x86>
    1ce4:	c9 f7       	brne	.-14     	; 0x1cd8 <__ultoa_invert+0x5c>
    1ce6:	f6 cf       	rjmp	.-20     	; 0x1cd4 <__ultoa_invert+0x58>
    1ce8:	46 2f       	mov	r20, r22
    1cea:	4f 70       	andi	r20, 0x0F	; 15
    1cec:	40 5d       	subi	r20, 0xD0	; 208
    1cee:	4a 33       	cpi	r20, 0x3A	; 58
    1cf0:	18 f0       	brcs	.+6      	; 0x1cf8 <__ultoa_invert+0x7c>
    1cf2:	49 5d       	subi	r20, 0xD9	; 217
    1cf4:	31 fd       	sbrc	r19, 1
    1cf6:	40 52       	subi	r20, 0x20	; 32
    1cf8:	41 93       	st	Z+, r20
    1cfa:	02 d0       	rcall	.+4      	; 0x1d00 <__ultoa_invert+0x84>
    1cfc:	a9 f7       	brne	.-22     	; 0x1ce8 <__ultoa_invert+0x6c>
    1cfe:	ea cf       	rjmp	.-44     	; 0x1cd4 <__ultoa_invert+0x58>
    1d00:	b4 e0       	ldi	r27, 0x04	; 4
    1d02:	a6 95       	lsr	r26
    1d04:	97 95       	ror	r25
    1d06:	87 95       	ror	r24
    1d08:	77 95       	ror	r23
    1d0a:	67 95       	ror	r22
    1d0c:	ba 95       	dec	r27
    1d0e:	c9 f7       	brne	.-14     	; 0x1d02 <__ultoa_invert+0x86>
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	61 05       	cpc	r22, r1
    1d14:	71 05       	cpc	r23, r1
    1d16:	08 95       	ret
    1d18:	9b 01       	movw	r18, r22
    1d1a:	ac 01       	movw	r20, r24
    1d1c:	0a 2e       	mov	r0, r26
    1d1e:	06 94       	lsr	r0
    1d20:	57 95       	ror	r21
    1d22:	47 95       	ror	r20
    1d24:	37 95       	ror	r19
    1d26:	27 95       	ror	r18
    1d28:	ba 95       	dec	r27
    1d2a:	c9 f7       	brne	.-14     	; 0x1d1e <__ultoa_invert+0xa2>
    1d2c:	62 0f       	add	r22, r18
    1d2e:	73 1f       	adc	r23, r19
    1d30:	84 1f       	adc	r24, r20
    1d32:	95 1f       	adc	r25, r21
    1d34:	a0 1d       	adc	r26, r0
    1d36:	08 95       	ret

00001d38 <__divmodsi4>:
    1d38:	05 2e       	mov	r0, r21
    1d3a:	97 fb       	bst	r25, 7
    1d3c:	1e f4       	brtc	.+6      	; 0x1d44 <__divmodsi4+0xc>
    1d3e:	00 94       	com	r0
    1d40:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__negsi2>
    1d44:	57 fd       	sbrc	r21, 7
    1d46:	07 d0       	rcall	.+14     	; 0x1d56 <__divmodsi4_neg2>
    1d48:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__udivmodsi4>
    1d4c:	07 fc       	sbrc	r0, 7
    1d4e:	03 d0       	rcall	.+6      	; 0x1d56 <__divmodsi4_neg2>
    1d50:	4e f4       	brtc	.+18     	; 0x1d64 <__divmodsi4_exit>
    1d52:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__negsi2>

00001d56 <__divmodsi4_neg2>:
    1d56:	50 95       	com	r21
    1d58:	40 95       	com	r20
    1d5a:	30 95       	com	r19
    1d5c:	21 95       	neg	r18
    1d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d60:	4f 4f       	sbci	r20, 0xFF	; 255
    1d62:	5f 4f       	sbci	r21, 0xFF	; 255

00001d64 <__divmodsi4_exit>:
    1d64:	08 95       	ret

00001d66 <__negsi2>:
    1d66:	90 95       	com	r25
    1d68:	80 95       	com	r24
    1d6a:	70 95       	com	r23
    1d6c:	61 95       	neg	r22
    1d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d70:	8f 4f       	sbci	r24, 0xFF	; 255
    1d72:	9f 4f       	sbci	r25, 0xFF	; 255
    1d74:	08 95       	ret

00001d76 <__muluhisi3>:
    1d76:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__umulhisi3>
    1d7a:	a5 9f       	mul	r26, r21
    1d7c:	90 0d       	add	r25, r0
    1d7e:	b4 9f       	mul	r27, r20
    1d80:	90 0d       	add	r25, r0
    1d82:	a4 9f       	mul	r26, r20
    1d84:	80 0d       	add	r24, r0
    1d86:	91 1d       	adc	r25, r1
    1d88:	11 24       	eor	r1, r1
    1d8a:	08 95       	ret

00001d8c <__mulshisi3>:
    1d8c:	b7 ff       	sbrs	r27, 7
    1d8e:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__muluhisi3>

00001d92 <__mulohisi3>:
    1d92:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__muluhisi3>
    1d96:	82 1b       	sub	r24, r18
    1d98:	93 0b       	sbc	r25, r19
    1d9a:	08 95       	ret

00001d9c <__prologue_saves__>:
    1d9c:	2f 92       	push	r2
    1d9e:	3f 92       	push	r3
    1da0:	4f 92       	push	r4
    1da2:	5f 92       	push	r5
    1da4:	6f 92       	push	r6
    1da6:	7f 92       	push	r7
    1da8:	8f 92       	push	r8
    1daa:	9f 92       	push	r9
    1dac:	af 92       	push	r10
    1dae:	bf 92       	push	r11
    1db0:	cf 92       	push	r12
    1db2:	df 92       	push	r13
    1db4:	ef 92       	push	r14
    1db6:	ff 92       	push	r15
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	ca 1b       	sub	r28, r26
    1dc6:	db 0b       	sbc	r29, r27
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	09 94       	ijmp

00001dd4 <__epilogue_restores__>:
    1dd4:	2a 88       	ldd	r2, Y+18	; 0x12
    1dd6:	39 88       	ldd	r3, Y+17	; 0x11
    1dd8:	48 88       	ldd	r4, Y+16	; 0x10
    1dda:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ddc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1dde:	7d 84       	ldd	r7, Y+13	; 0x0d
    1de0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1de2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1de4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1de6:	b9 84       	ldd	r11, Y+9	; 0x09
    1de8:	c8 84       	ldd	r12, Y+8	; 0x08
    1dea:	df 80       	ldd	r13, Y+7	; 0x07
    1dec:	ee 80       	ldd	r14, Y+6	; 0x06
    1dee:	fd 80       	ldd	r15, Y+5	; 0x05
    1df0:	0c 81       	ldd	r16, Y+4	; 0x04
    1df2:	1b 81       	ldd	r17, Y+3	; 0x03
    1df4:	aa 81       	ldd	r26, Y+2	; 0x02
    1df6:	b9 81       	ldd	r27, Y+1	; 0x01
    1df8:	ce 0f       	add	r28, r30
    1dfa:	d1 1d       	adc	r29, r1
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	ed 01       	movw	r28, r26
    1e08:	08 95       	ret

00001e0a <__udivmodsi4>:
    1e0a:	a1 e2       	ldi	r26, 0x21	; 33
    1e0c:	1a 2e       	mov	r1, r26
    1e0e:	aa 1b       	sub	r26, r26
    1e10:	bb 1b       	sub	r27, r27
    1e12:	fd 01       	movw	r30, r26
    1e14:	0d c0       	rjmp	.+26     	; 0x1e30 <__udivmodsi4_ep>

00001e16 <__udivmodsi4_loop>:
    1e16:	aa 1f       	adc	r26, r26
    1e18:	bb 1f       	adc	r27, r27
    1e1a:	ee 1f       	adc	r30, r30
    1e1c:	ff 1f       	adc	r31, r31
    1e1e:	a2 17       	cp	r26, r18
    1e20:	b3 07       	cpc	r27, r19
    1e22:	e4 07       	cpc	r30, r20
    1e24:	f5 07       	cpc	r31, r21
    1e26:	20 f0       	brcs	.+8      	; 0x1e30 <__udivmodsi4_ep>
    1e28:	a2 1b       	sub	r26, r18
    1e2a:	b3 0b       	sbc	r27, r19
    1e2c:	e4 0b       	sbc	r30, r20
    1e2e:	f5 0b       	sbc	r31, r21

00001e30 <__udivmodsi4_ep>:
    1e30:	66 1f       	adc	r22, r22
    1e32:	77 1f       	adc	r23, r23
    1e34:	88 1f       	adc	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	1a 94       	dec	r1
    1e3a:	69 f7       	brne	.-38     	; 0x1e16 <__udivmodsi4_loop>
    1e3c:	60 95       	com	r22
    1e3e:	70 95       	com	r23
    1e40:	80 95       	com	r24
    1e42:	90 95       	com	r25
    1e44:	9b 01       	movw	r18, r22
    1e46:	ac 01       	movw	r20, r24
    1e48:	bd 01       	movw	r22, r26
    1e4a:	cf 01       	movw	r24, r30
    1e4c:	08 95       	ret

00001e4e <__umulhisi3>:
    1e4e:	a2 9f       	mul	r26, r18
    1e50:	b0 01       	movw	r22, r0
    1e52:	b3 9f       	mul	r27, r19
    1e54:	c0 01       	movw	r24, r0
    1e56:	a3 9f       	mul	r26, r19
    1e58:	70 0d       	add	r23, r0
    1e5a:	81 1d       	adc	r24, r1
    1e5c:	11 24       	eor	r1, r1
    1e5e:	91 1d       	adc	r25, r1
    1e60:	b2 9f       	mul	r27, r18
    1e62:	70 0d       	add	r23, r0
    1e64:	81 1d       	adc	r24, r1
    1e66:	11 24       	eor	r1, r1
    1e68:	91 1d       	adc	r25, r1
    1e6a:	08 95       	ret

00001e6c <_exit>:
    1e6c:	f8 94       	cli

00001e6e <__stop_program>:
    1e6e:	ff cf       	rjmp	.-2      	; 0x1e6e <__stop_program>
