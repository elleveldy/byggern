
ByggernGruppe48H2015.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  00000fb4  00001048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800186  00800186  000010ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010ce  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000348  00000000  00000000  000010fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000036a1  00000000  00000000  00001446  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011cc  00000000  00000000  00004ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000117b  00000000  00000000  00005cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000890  00000000  00000000  00006e30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008b8  00000000  00000000  000076c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e34  00000000  00000000  00007f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002c0  00000000  00000000  00009dac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

}

//uses menu_selector and changes it according to joystick movement

void gui_navigate(){
   0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
	
	//
	if(strcmp(menu_selector->name, "Main") == 0){
   4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
		menu_selector = menu_submenu(menu_selector);
  1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
	}

	int threshold = 70;
	
	if(joystick_x_value() > threshold){
  2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
		oled_printf("x");
  34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
		menu_selector = menu_submenu(menu_selector);
  3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
		_delay_ms(200);
	}
	else if(joystick_x_value() < - threshold){
  64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
		oled_printf("-x");
		menu_selector = menu_parent(menu_selector);
  78:	00 06       	cpc	r0, r16
  7a:	5f 5f       	subi	r21, 0xFF	; 255
  7c:	06 00       	.word	0x0006	; ????
  7e:	00 00       	nop
  80:	00 07       	cpc	r16, r16
  82:	07 00       	.word	0x0007	; ????
  84:	07 07       	cpc	r16, r23
  86:	00 00       	nop
  88:	14 7f       	andi	r17, 0xF4	; 244
  8a:	7f 14       	cp	r7, r15
  8c:	7f 7f       	andi	r23, 0xFF	; 255
  8e:	14 00       	.word	0x0014	; ????
  90:	24 2e       	mov	r2, r20
  92:	6b 6b       	ori	r22, 0xBB	; 187
  94:	3a 12       	cpse	r3, r26
  96:	00 00       	nop
  98:	46 66       	ori	r20, 0x66	; 102
  9a:	30 18       	sub	r3, r0
  9c:	0c 66       	ori	r16, 0x6C	; 108
		_delay_ms(200);
		
		
	}
	else if(joystick_y_value() > threshold){
  9e:	62 00       	.word	0x0062	; ????
  a0:	30 7a       	andi	r19, 0xA0	; 160
  a2:	4f 5d       	subi	r20, 0xDF	; 223
  a4:	37 7a       	andi	r19, 0xA7	; 167
  a6:	48 00       	.word	0x0048	; ????
		oled_printf("y");
  a8:	04 07       	cpc	r16, r20
  aa:	03 00       	.word	0x0003	; ????
  ac:	00 00       	nop
  ae:	00 00       	nop
		menu_selector = menu_prev(menu_selector);
  b0:	00 1c       	adc	r0, r0
  b2:	3e 63       	ori	r19, 0x3E	; 62
  b4:	41 00       	.word	0x0041	; ????
  b6:	00 00       	nop
  b8:	00 41       	sbci	r16, 0x10	; 16
  ba:	63 3e       	cpi	r22, 0xE3	; 227
  bc:	1c 00       	.word	0x001c	; ????
  be:	00 00       	nop
  c0:	08 2a       	or	r0, r24
  c2:	3e 1c       	adc	r3, r14
  c4:	1c 3e       	cpi	r17, 0xEC	; 236
  c6:	2a 08       	sbc	r2, r10
  c8:	08 08       	sbc	r0, r8
  ca:	3e 3e       	cpi	r19, 0xEE	; 238
  cc:	08 08       	sbc	r0, r8
  ce:	00 00       	nop
  d0:	00 a0       	ldd	r0, Z+32	; 0x20
  d2:	e0 60       	ori	r30, 0x00	; 0
  d4:	00 00       	nop
  d6:	00 00       	nop
		_delay_ms(200);

		
	}
	else if(joystick_y_value() < - threshold){
  d8:	08 08       	sbc	r0, r8
  da:	08 08       	sbc	r0, r8
  dc:	08 08       	sbc	r0, r8
  de:	00 00       	nop
  e0:	00 00       	nop
		oled_printf("-y");
  e2:	60 60       	ori	r22, 0x00	; 0
  e4:	00 00       	nop
  e6:	00 00       	nop
  e8:	60 30       	cpi	r22, 0x00	; 0
		//if there is a next item:
		if(menu_next(menu_selector) != NULL){
  ea:	18 0c       	add	r1, r8
  ec:	06 03       	mulsu	r16, r22
  ee:	01 00       	.word	0x0001	; ????
  f0:	3e 7f       	andi	r19, 0xFE	; 254
  f2:	59 4d       	sbci	r21, 0xD9	; 217
  f4:	7f 3e       	cpi	r23, 0xEF	; 239
  f6:	00 00       	nop
  f8:	42 42       	sbci	r20, 0x22	; 34
			menu_selector = menu_next(menu_selector);
  fa:	7f 7f       	andi	r23, 0xFF	; 255
  fc:	40 40       	sbci	r20, 0x00	; 0
  fe:	00 00       	nop
 100:	62 73       	andi	r22, 0x32	; 50
 102:	59 49       	sbci	r21, 0x99	; 153
 104:	6f 66       	ori	r22, 0x6F	; 111
 106:	00 00       	nop
 108:	22 63       	ori	r18, 0x32	; 50
 10a:	49 49       	sbci	r20, 0x99	; 153
 10c:	7f 36       	cpi	r23, 0x6F	; 111
 10e:	00 00       	nop
 110:	18 1c       	adc	r1, r8
 112:	16 13       	cpse	r17, r22
 114:	7f 7f       	andi	r23, 0xFF	; 255
 116:	10 00       	.word	0x0010	; ????
 118:	27 67       	ori	r18, 0x77	; 119
 11a:	45 45       	sbci	r20, 0x55	; 85
 11c:	7d 39       	cpi	r23, 0x9D	; 157
 11e:	00 00       	nop
 120:	3c 7e       	andi	r19, 0xEC	; 236
			_delay_ms(200);
		}
	}
	else if(joystick_button_read()){
 122:	4b 49       	sbci	r20, 0x9B	; 155
 124:	79 30       	cpi	r23, 0x09	; 9
 126:	00 00       	nop
 128:	03 63       	ori	r16, 0x33	; 51
		oled_printf("button");
 12a:	71 19       	sub	r23, r1
 12c:	0f 07       	cpc	r16, r31
 12e:	00 00       	nop
 130:	36 7f       	andi	r19, 0xF6	; 246
		if(menu_selector->fn != NULL ){	//if the function pointer points to a function, call it
 132:	49 49       	sbci	r20, 0x99	; 153
 134:	7f 36       	cpi	r23, 0x6F	; 111
 136:	00 00       	nop
 138:	06 4f       	sbci	r16, 0xF6	; 246
 13a:	49 69       	ori	r20, 0x99	; 153
 13c:	3f 1e       	adc	r3, r31
 13e:	00 00       	nop
 140:	00 00       	nop
 142:	6c 6c       	ori	r22, 0xCC	; 204
			menu_selector->fn();
 144:	00 00       	nop
 146:	00 00       	nop
 148:	00 a0       	ldd	r0, Z+32	; 0x20
 14a:	ec 6c       	ori	r30, 0xCC	; 204
 14c:	00 00       	nop
 14e:	00 00       	nop
 150:	08 1c       	adc	r0, r8
 152:	36 63       	ori	r19, 0x36	; 54
 154:	41 00       	.word	0x0041	; ????
 156:	00 00       	nop
			
		}
	}
	
	
}
 158:	14 14       	cp	r1, r4
 15a:	14 14       	cp	r1, r4
 15c:	14 14       	cp	r1, r4
 15e:	00 00       	nop
 160:	00 41       	sbci	r16, 0x10	; 16
 162:	63 36       	cpi	r22, 0x63	; 99
 164:	1c 08       	sbc	r1, r12
 166:	00 00       	nop
 168:	02 03       	mulsu	r16, r18
 16a:	51 59       	subi	r21, 0x91	; 145
 16c:	0f 06       	cpc	r0, r31
 16e:	00 00       	nop
 170:	3e 7f       	andi	r19, 0xFE	; 254
 172:	41 5d       	subi	r20, 0xD1	; 209
 174:	5d 1f       	adc	r21, r29
 176:	1e 00       	.word	0x001e	; ????
 178:	7c 7e       	andi	r23, 0xEC	; 236
 17a:	13 13       	cpse	r17, r19
 17c:	7e 7c       	andi	r23, 0xCE	; 206
 17e:	00 00       	nop
 180:	41 7f       	andi	r20, 0xF1	; 241
 182:	7f 49       	sbci	r23, 0x9F	; 159
 184:	49 7f       	andi	r20, 0xF9	; 249
 186:	36 00       	.word	0x0036	; ????
 188:	1c 3e       	cpi	r17, 0xEC	; 236
 18a:	63 41       	sbci	r22, 0x13	; 19
 18c:	41 63       	ori	r20, 0x31	; 49
 18e:	22 00       	.word	0x0022	; ????
 190:	41 7f       	andi	r20, 0xF1	; 241
 192:	7f 41       	sbci	r23, 0x1F	; 31
 194:	63 7f       	andi	r22, 0xF3	; 243
 196:	1c 00       	.word	0x001c	; ????
 198:	41 7f       	andi	r20, 0xF1	; 241
 19a:	7f 49       	sbci	r23, 0x9F	; 159
 19c:	5d 41       	sbci	r21, 0x1D	; 29
 19e:	63 00       	.word	0x0063	; ????
 1a0:	41 7f       	andi	r20, 0xF1	; 241
 1a2:	7f 49       	sbci	r23, 0x9F	; 159
 1a4:	1d 01       	movw	r2, r26
 1a6:	03 00       	.word	0x0003	; ????
 1a8:	1c 3e       	cpi	r17, 0xEC	; 236
 1aa:	63 41       	sbci	r22, 0x13	; 19
 1ac:	51 73       	andi	r21, 0x31	; 49
 1ae:	72 00       	.word	0x0072	; ????
 1b0:	7f 7f       	andi	r23, 0xFF	; 255
 1b2:	08 08       	sbc	r0, r8
 1b4:	7f 7f       	andi	r23, 0xFF	; 255
 1b6:	00 00       	nop
 1b8:	00 41       	sbci	r16, 0x10	; 16
 1ba:	7f 7f       	andi	r23, 0xFF	; 255
 1bc:	41 00       	.word	0x0041	; ????
 1be:	00 00       	nop
 1c0:	30 70       	andi	r19, 0x00	; 0
 1c2:	40 41       	sbci	r20, 0x10	; 16
 1c4:	7f 3f       	cpi	r23, 0xFF	; 255
 1c6:	01 00       	.word	0x0001	; ????
 1c8:	41 7f       	andi	r20, 0xF1	; 241
 1ca:	7f 08       	sbc	r7, r15
 1cc:	1c 77       	andi	r17, 0x7C	; 124
 1ce:	63 00       	.word	0x0063	; ????
 1d0:	41 7f       	andi	r20, 0xF1	; 241
 1d2:	7f 41       	sbci	r23, 0x1F	; 31
 1d4:	40 60       	ori	r20, 0x00	; 0
 1d6:	70 00       	.word	0x0070	; ????
 1d8:	7f 7f       	andi	r23, 0xFF	; 255
 1da:	06 0c       	add	r0, r6
 1dc:	06 7f       	andi	r16, 0xF6	; 246
 1de:	7f 00       	.word	0x007f	; ????
 1e0:	7f 7f       	andi	r23, 0xFF	; 255
 1e2:	06 0c       	add	r0, r6
 1e4:	18 7f       	andi	r17, 0xF8	; 248
 1e6:	7f 00       	.word	0x007f	; ????
 1e8:	1c 3e       	cpi	r17, 0xEC	; 236
 1ea:	63 41       	sbci	r22, 0x13	; 19
 1ec:	63 3e       	cpi	r22, 0xE3	; 227
 1ee:	1c 00       	.word	0x001c	; ????
 1f0:	41 7f       	andi	r20, 0xF1	; 241
 1f2:	7f 49       	sbci	r23, 0x9F	; 159
 1f4:	09 0f       	add	r16, r25
 1f6:	06 00       	.word	0x0006	; ????
 1f8:	1e 3f       	cpi	r17, 0xFE	; 254
 1fa:	21 71       	andi	r18, 0x11	; 17
 1fc:	7f 5e       	subi	r23, 0xEF	; 239
 1fe:	00 00       	nop
 200:	41 7f       	andi	r20, 0xF1	; 241
 202:	7f 19       	sub	r23, r15
 204:	39 6f       	ori	r19, 0xF9	; 249
 206:	46 00       	.word	0x0046	; ????
 208:	26 67       	ori	r18, 0x76	; 118
 20a:	4d 59       	subi	r20, 0x9D	; 157
 20c:	7b 32       	cpi	r23, 0x2B	; 43
 20e:	00 00       	nop
 210:	03 41       	sbci	r16, 0x13	; 19
 212:	7f 7f       	andi	r23, 0xFF	; 255
 214:	41 03       	mulsu	r20, r17
 216:	00 00       	nop
 218:	7f 7f       	andi	r23, 0xFF	; 255
 21a:	40 40       	sbci	r20, 0x00	; 0
 21c:	7f 7f       	andi	r23, 0xFF	; 255
 21e:	00 00       	nop
 220:	1f 3f       	cpi	r17, 0xFF	; 255
 222:	60 60       	ori	r22, 0x00	; 0
 224:	3f 1f       	adc	r19, r31
 226:	00 00       	nop
 228:	7f 7f       	andi	r23, 0xFF	; 255
 22a:	30 18       	sub	r3, r0
 22c:	30 7f       	andi	r19, 0xF0	; 240
 22e:	7f 00       	.word	0x007f	; ????
 230:	63 77       	andi	r22, 0x73	; 115
 232:	1c 08       	sbc	r1, r12
 234:	1c 77       	andi	r17, 0x7C	; 124
 236:	63 00       	.word	0x0063	; ????
 238:	07 4f       	sbci	r16, 0xF7	; 247
 23a:	78 78       	andi	r23, 0x88	; 136
 23c:	4f 07       	cpc	r20, r31
 23e:	00 00       	nop
 240:	67 73       	andi	r22, 0x37	; 55
 242:	59 4d       	sbci	r21, 0xD9	; 217
 244:	47 63       	ori	r20, 0x37	; 55
 246:	71 00       	.word	0x0071	; ????
 248:	00 7f       	andi	r16, 0xF0	; 240
 24a:	7f 41       	sbci	r23, 0x1F	; 31
 24c:	41 00       	.word	0x0041	; ????
 24e:	00 00       	nop
 250:	01 03       	mulsu	r16, r17
 252:	06 0c       	add	r0, r6
 254:	18 30       	cpi	r17, 0x08	; 8
 256:	60 00       	.word	0x0060	; ????
 258:	00 41       	sbci	r16, 0x10	; 16
 25a:	41 7f       	andi	r20, 0xF1	; 241
 25c:	7f 00       	.word	0x007f	; ????
 25e:	00 00       	nop
 260:	08 0c       	add	r0, r8
 262:	06 03       	mulsu	r16, r22
 264:	06 0c       	add	r0, r6
 266:	08 00       	.word	0x0008	; ????
 268:	80 80       	ld	r8, Z
 26a:	80 80       	ld	r8, Z
 26c:	80 80       	ld	r8, Z
 26e:	80 80       	ld	r8, Z
 270:	00 00       	nop
 272:	03 07       	cpc	r16, r19
 274:	04 00       	.word	0x0004	; ????
 276:	00 00       	nop
 278:	20 74       	andi	r18, 0x40	; 64
 27a:	54 54       	subi	r21, 0x44	; 68
 27c:	3c 78       	andi	r19, 0x8C	; 140
 27e:	40 00       	.word	0x0040	; ????
 280:	41 3f       	cpi	r20, 0xF1	; 241
 282:	7f 44       	sbci	r23, 0x4F	; 79
 284:	44 7c       	andi	r20, 0xC4	; 196
 286:	38 00       	.word	0x0038	; ????
 288:	38 7c       	andi	r19, 0xC8	; 200
 28a:	44 44       	sbci	r20, 0x44	; 68
 28c:	6c 28       	or	r6, r12
 28e:	00 00       	nop
 290:	30 78       	andi	r19, 0x80	; 128
 292:	48 49       	sbci	r20, 0x98	; 152
 294:	3f 7f       	andi	r19, 0xFF	; 255
 296:	40 00       	.word	0x0040	; ????
 298:	38 7c       	andi	r19, 0xC8	; 200
 29a:	54 54       	subi	r21, 0x44	; 68
 29c:	5c 18       	sub	r5, r12
 29e:	00 00       	nop
 2a0:	48 7e       	andi	r20, 0xE8	; 232
 2a2:	7f 49       	sbci	r23, 0x9F	; 159
 2a4:	03 02       	muls	r16, r19
 2a6:	00 00       	nop
 2a8:	98 bc       	out	0x28, r9	; 40
 2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
 2ac:	f8 7c       	andi	r31, 0xC8	; 200
 2ae:	04 00       	.word	0x0004	; ????
 2b0:	41 7f       	andi	r20, 0xF1	; 241
 2b2:	7f 08       	sbc	r7, r15
 2b4:	04 7c       	andi	r16, 0xC4	; 196
 2b6:	78 00       	.word	0x0078	; ????
 2b8:	00 44       	sbci	r16, 0x40	; 64
 2ba:	7d 7d       	andi	r23, 0xDD	; 221
 2bc:	40 00       	.word	0x0040	; ????
 2be:	00 00       	nop
 2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <oled_alt_clear_line+0x24>
 2c2:	84 fd       	sbrc	r24, 4
 2c4:	7d 00       	.word	0x007d	; ????
 2c6:	00 00       	nop
 2c8:	41 7f       	andi	r20, 0xF1	; 241
 2ca:	7f 10       	cpse	r7, r15
 2cc:	38 6c       	ori	r19, 0xC8	; 200
 2ce:	44 00       	.word	0x0044	; ????
 2d0:	00 41       	sbci	r16, 0x10	; 16
 2d2:	7f 7f       	andi	r23, 0xFF	; 255
 2d4:	40 00       	.word	0x0040	; ????
 2d6:	00 00       	nop
 2d8:	7c 7c       	andi	r23, 0xCC	; 204
 2da:	0c 18       	sub	r0, r12
 2dc:	0c 7c       	andi	r16, 0xCC	; 204
 2de:	78 00       	.word	0x0078	; ????
 2e0:	7c 7c       	andi	r23, 0xCC	; 204
 2e2:	04 04       	cpc	r0, r4
 2e4:	7c 78       	andi	r23, 0x8C	; 140
 2e6:	00 00       	nop
 2e8:	38 7c       	andi	r19, 0xC8	; 200
 2ea:	44 44       	sbci	r20, 0x44	; 68
 2ec:	7c 38       	cpi	r23, 0x8C	; 140
 2ee:	00 00       	nop
 2f0:	84 fc       	sbrc	r8, 4
 2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
 2f4:	24 3c       	cpi	r18, 0xC4	; 196
 2f6:	18 00       	.word	0x0018	; ????
 2f8:	18 3c       	cpi	r17, 0xC8	; 200
 2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
 2fc:	f8 fc       	.word	0xfcf8	; ????
 2fe:	84 00       	.word	0x0084	; ????
 300:	44 7c       	andi	r20, 0xC4	; 196
 302:	78 44       	sbci	r23, 0x48	; 72
 304:	1c 18       	sub	r1, r12
 306:	00 00       	nop
 308:	48 5c       	subi	r20, 0xC8	; 200
 30a:	54 54       	subi	r21, 0x44	; 68
 30c:	74 24       	eor	r7, r4
 30e:	00 00       	nop
 310:	00 04       	cpc	r0, r0
 312:	3e 7f       	andi	r19, 0xFE	; 254
 314:	44 24       	eor	r4, r4
 316:	00 00       	nop
 318:	3c 7c       	andi	r19, 0xCC	; 204
 31a:	40 40       	sbci	r20, 0x00	; 0
 31c:	3c 7c       	andi	r19, 0xCC	; 204
 31e:	40 00       	.word	0x0040	; ????
 320:	1c 3c       	cpi	r17, 0xCC	; 204
 322:	60 60       	ori	r22, 0x00	; 0
 324:	3c 1c       	adc	r3, r12
 326:	00 00       	nop
 328:	3c 7c       	andi	r19, 0xCC	; 204
 32a:	60 30       	cpi	r22, 0x00	; 0
 32c:	60 7c       	andi	r22, 0xC0	; 192
 32e:	3c 00       	.word	0x003c	; ????
 330:	44 6c       	ori	r20, 0xC4	; 196
 332:	38 10       	cpse	r3, r8
 334:	38 6c       	ori	r19, 0xC8	; 200
 336:	44 00       	.word	0x0044	; ????
 338:	9c bc       	out	0x2c, r9	; 44
 33a:	a0 a0       	ldd	r10, Z+32	; 0x20
 33c:	fc 7c       	andi	r31, 0xCC	; 204
 33e:	00 00       	nop
 340:	4c 64       	ori	r20, 0x4C	; 76
 342:	74 5c       	subi	r23, 0xC4	; 196
 344:	4c 64       	ori	r20, 0x4C	; 76
 346:	00 00       	nop
 348:	08 08       	sbc	r0, r8
 34a:	3e 77       	andi	r19, 0x7E	; 126
 34c:	41 41       	sbci	r20, 0x11	; 17
 34e:	00 00       	nop
 350:	00 00       	nop
 352:	00 77       	andi	r16, 0x70	; 112
 354:	77 00       	.word	0x0077	; ????
 356:	00 00       	nop
 358:	41 41       	sbci	r20, 0x11	; 17
 35a:	77 3e       	cpi	r23, 0xE7	; 231
 35c:	08 08       	sbc	r0, r8
 35e:	00 00       	nop
 360:	02 03       	mulsu	r16, r18
 362:	01 03       	mulsu	r16, r17
 364:	02 03       	mulsu	r16, r18
 366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
 368:	11 24       	eor	r1, r1
 36a:	1f be       	out	0x3f, r1	; 63
 36c:	cf ef       	ldi	r28, 0xFF	; 255
 36e:	d4 e0       	ldi	r29, 0x04	; 4
 370:	de bf       	out	0x3e, r29	; 62
 372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
 374:	11 e0       	ldi	r17, 0x01	; 1
 376:	a0 e0       	ldi	r26, 0x00	; 0
 378:	b1 e0       	ldi	r27, 0x01	; 1
 37a:	e4 eb       	ldi	r30, 0xB4	; 180
 37c:	ff e0       	ldi	r31, 0x0F	; 15
 37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
 380:	05 90       	lpm	r0, Z+
 382:	0d 92       	st	X+, r0
 384:	a6 38       	cpi	r26, 0x86	; 134
 386:	b1 07       	cpc	r27, r17
 388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	a6 e8       	ldi	r26, 0x86	; 134
 38e:	b1 e0       	ldi	r27, 0x01	; 1
 390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
 392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
 394:	a8 39       	cpi	r26, 0x98	; 152
 396:	b2 07       	cpc	r27, r18
 398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
 39a:	0e 94 1d 03 	call	0x63a	; 0x63a <main>
 39e:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <_exit>

000003a2 <__bad_interrupt>:
 3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_init>:
#include <string.h>
#include <util/delay.h>



void can_init(int mode){
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	ec 01       	movw	r28, r24

	mcp2515_init();
 3ac:	0e 94 6e 03 	call	0x6dc	; 0x6dc <mcp2515_init>
	mcp2515_bit_modify(MCP_RXB0CTRL, MCP_MASK_FILTER, 0xff);
 3b0:	4f ef       	ldi	r20, 0xFF	; 255
 3b2:	50 e0       	ldi	r21, 0x00	; 0
 3b4:	60 e6       	ldi	r22, 0x60	; 96
 3b6:	70 e0       	ldi	r23, 0x00	; 0
 3b8:	80 e6       	ldi	r24, 0x60	; 96
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 50 03 	call	0x6a0	; 0x6a0 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXB1CTRL, MCP_MASK_FILTER, 0xff);
 3c0:	4f ef       	ldi	r20, 0xFF	; 255
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	60 e6       	ldi	r22, 0x60	; 96
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	80 e7       	ldi	r24, 0x70	; 112
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 50 03 	call	0x6a0	; 0x6a0 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, mode);
 3d0:	ae 01       	movw	r20, r28
 3d2:	60 ee       	ldi	r22, 0xE0	; 224
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	8f e0       	ldi	r24, 0x0F	; 15
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 50 03 	call	0x6a0	; 0x6a0 <mcp2515_bit_modify>
	DDRE &= ~(1 << PE0);
 3de:	30 98       	cbi	0x06, 0	; 6
}
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <gui_alt_print_menu>:
	
}


//Prints the menu you're in and it's submenues
void gui_alt_print_menu(Menuitem* menu){
 3e6:	ef 92       	push	r14
 3e8:	ff 92       	push	r15
 3ea:	0f 93       	push	r16
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
	
	Menuitem* parent = menu_parent(menu);
 3f2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <menu_parent>
 3f6:	7c 01       	movw	r14, r24
	
	oled_alt_clear_screen();
 3f8:	0e 94 c4 05 	call	0xb88	; 0xb88 <oled_alt_clear_screen>
	oled_store_string(menu_name(parent), 0, 0);
 3fc:	c7 01       	movw	r24, r14
 3fe:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <menu_name>
 402:	40 e0       	ldi	r20, 0x00	; 0
 404:	50 e0       	ldi	r21, 0x00	; 0
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	70 e0       	ldi	r23, 0x00	; 0
 40a:	0e 94 6e 05 	call	0xadc	; 0xadc <oled_store_string>
	
	for(int n = 0; n < parent->num_submenus; n++){
 40e:	d7 01       	movw	r26, r14
 410:	8c 91       	ld	r24, X
 412:	88 23       	and	r24, r24
 414:	e9 f0       	breq	.+58     	; 0x450 <gui_alt_print_menu+0x6a>
 416:	00 e0       	ldi	r16, 0x00	; 0
 418:	10 e0       	ldi	r17, 0x00	; 0
 41a:	c0 e0       	ldi	r28, 0x00	; 0
 41c:	d0 e0       	ldi	r29, 0x00	; 0
		oled_store_string(menu_name(parent->submenus[n] ), 8, n+1);
 41e:	21 96       	adiw	r28, 0x01	; 1
 420:	d7 01       	movw	r26, r14
 422:	11 96       	adiw	r26, 0x01	; 1
 424:	ed 91       	ld	r30, X+
 426:	fc 91       	ld	r31, X
 428:	12 97       	sbiw	r26, 0x02	; 2
 42a:	e0 0f       	add	r30, r16
 42c:	f1 1f       	adc	r31, r17
 42e:	80 81       	ld	r24, Z
 430:	91 81       	ldd	r25, Z+1	; 0x01
 432:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <menu_name>
 436:	ae 01       	movw	r20, r28
 438:	68 e0       	ldi	r22, 0x08	; 8
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	0e 94 6e 05 	call	0xadc	; 0xadc <oled_store_string>
 440:	0e 5f       	subi	r16, 0xFE	; 254
 442:	1f 4f       	sbci	r17, 0xFF	; 255
	Menuitem* parent = menu_parent(menu);
	
	oled_alt_clear_screen();
	oled_store_string(menu_name(parent), 0, 0);
	
	for(int n = 0; n < parent->num_submenus; n++){
 444:	f7 01       	movw	r30, r14
 446:	80 81       	ld	r24, Z
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	c8 17       	cp	r28, r24
 44c:	d9 07       	cpc	r29, r25
 44e:	3c f3       	brlt	.-50     	; 0x41e <gui_alt_print_menu+0x38>
		oled_store_string(menu_name(parent->submenus[n] ), 8, n+1);
	}


	
}
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	ff 90       	pop	r15
 45a:	ef 90       	pop	r14
 45c:	08 95       	ret

0000045e <gui_alt_navigate>:

//uses menu_selector and changes it according to joystick movement

void gui_alt_navigate(){
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
	

	//If we're pointing at Main menu, point to first submenu instead
	if(strcmp(menu_selector->name, "Main") == 0){
 462:	c0 91 8a 01 	lds	r28, 0x018A
 466:	d0 91 8b 01 	lds	r29, 0x018B
 46a:	66 e0       	ldi	r22, 0x06	; 6
 46c:	71 e0       	ldi	r23, 0x01	; 1
 46e:	8d 81       	ldd	r24, Y+5	; 0x05
 470:	9e 81       	ldd	r25, Y+6	; 0x06
 472:	0e 94 34 07 	call	0xe68	; 0xe68 <strcmp>
 476:	89 2b       	or	r24, r25
 478:	39 f4       	brne	.+14     	; 0x488 <gui_alt_navigate+0x2a>
		menu_selector = menu_submenu(menu_selector);
 47a:	ce 01       	movw	r24, r28
 47c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <menu_submenu>
 480:	90 93 8b 01 	sts	0x018B, r25
 484:	80 93 8a 01 	sts	0x018A, r24
	}

	int threshold = 70;
	
	if(joystick_x_value() > threshold){
 488:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <joystick_x_value>
 48c:	87 34       	cpi	r24, 0x47	; 71
 48e:	91 05       	cpc	r25, r1
 490:	a4 f0       	brlt	.+40     	; 0x4ba <gui_alt_navigate+0x5c>
		menu_selector = menu_submenu(menu_selector);
 492:	80 91 8a 01 	lds	r24, 0x018A
 496:	90 91 8b 01 	lds	r25, 0x018B
 49a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <menu_submenu>
 49e:	90 93 8b 01 	sts	0x018B, r25
 4a2:	80 93 8a 01 	sts	0x018A, r24
 4a6:	2f ef       	ldi	r18, 0xFF	; 255
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	92 e0       	ldi	r25, 0x02	; 2
 4ac:	21 50       	subi	r18, 0x01	; 1
 4ae:	80 40       	sbci	r24, 0x00	; 0
 4b0:	90 40       	sbci	r25, 0x00	; 0
 4b2:	e1 f7       	brne	.-8      	; 0x4ac <gui_alt_navigate+0x4e>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <gui_alt_navigate+0x58>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <gui_alt_navigate+0x5a>
 4b8:	6a c0       	rjmp	.+212    	; 0x58e <__stack+0x8f>
		_delay_ms(200);
	}
	else if(joystick_x_value() < -threshold){
 4ba:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <joystick_x_value>
 4be:	8a 3b       	cpi	r24, 0xBA	; 186
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
 4c2:	a4 f4       	brge	.+40     	; 0x4ec <gui_alt_navigate+0x8e>
		menu_selector = menu_parent(menu_selector);
 4c4:	80 91 8a 01 	lds	r24, 0x018A
 4c8:	90 91 8b 01 	lds	r25, 0x018B
 4cc:	0e 94 5e 04 	call	0x8bc	; 0x8bc <menu_parent>
 4d0:	90 93 8b 01 	sts	0x018B, r25
 4d4:	80 93 8a 01 	sts	0x018A, r24
 4d8:	8f ef       	ldi	r24, 0xFF	; 255
 4da:	9f ef       	ldi	r25, 0xFF	; 255
 4dc:	22 e0       	ldi	r18, 0x02	; 2
 4de:	81 50       	subi	r24, 0x01	; 1
 4e0:	90 40       	sbci	r25, 0x00	; 0
 4e2:	20 40       	sbci	r18, 0x00	; 0
 4e4:	e1 f7       	brne	.-8      	; 0x4de <gui_alt_navigate+0x80>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <gui_alt_navigate+0x8a>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <gui_alt_navigate+0x8c>
 4ea:	51 c0       	rjmp	.+162    	; 0x58e <__stack+0x8f>
		_delay_ms(200);
		
	}
	else if(joystick_y_value() > threshold){
 4ec:	0e 94 fe 02 	call	0x5fc	; 0x5fc <joystick_y_value>
 4f0:	87 34       	cpi	r24, 0x47	; 71
 4f2:	91 05       	cpc	r25, r1
 4f4:	a4 f0       	brlt	.+40     	; 0x51e <__stack+0x1f>
		menu_selector = menu_prev(menu_selector);
 4f6:	80 91 8a 01 	lds	r24, 0x018A
 4fa:	90 91 8b 01 	lds	r25, 0x018B
 4fe:	0e 94 93 04 	call	0x926	; 0x926 <menu_prev>
 502:	90 93 8b 01 	sts	0x018B, r25
 506:	80 93 8a 01 	sts	0x018A, r24
 50a:	8f ef       	ldi	r24, 0xFF	; 255
 50c:	9f ef       	ldi	r25, 0xFF	; 255
 50e:	22 e0       	ldi	r18, 0x02	; 2
 510:	81 50       	subi	r24, 0x01	; 1
 512:	90 40       	sbci	r25, 0x00	; 0
 514:	20 40       	sbci	r18, 0x00	; 0
 516:	e1 f7       	brne	.-8      	; 0x510 <__stack+0x11>
 518:	00 c0       	rjmp	.+0      	; 0x51a <__stack+0x1b>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <__stack+0x1d>
 51c:	38 c0       	rjmp	.+112    	; 0x58e <__stack+0x8f>
		_delay_ms(200);

		
	}
	else if(joystick_y_value() < -threshold){
 51e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <joystick_y_value>
 522:	8a 3b       	cpi	r24, 0xBA	; 186
 524:	9f 4f       	sbci	r25, 0xFF	; 255
 526:	e4 f4       	brge	.+56     	; 0x560 <__stack+0x61>
		//if there is a next item:
		if(menu_next(menu_selector) != NULL){
 528:	80 91 8a 01 	lds	r24, 0x018A
 52c:	90 91 8b 01 	lds	r25, 0x018B
 530:	0e 94 65 04 	call	0x8ca	; 0x8ca <menu_next>
 534:	89 2b       	or	r24, r25
 536:	59 f1       	breq	.+86     	; 0x58e <__stack+0x8f>
			menu_selector = menu_next(menu_selector);
 538:	80 91 8a 01 	lds	r24, 0x018A
 53c:	90 91 8b 01 	lds	r25, 0x018B
 540:	0e 94 65 04 	call	0x8ca	; 0x8ca <menu_next>
 544:	90 93 8b 01 	sts	0x018B, r25
 548:	80 93 8a 01 	sts	0x018A, r24
 54c:	8f ef       	ldi	r24, 0xFF	; 255
 54e:	9f ef       	ldi	r25, 0xFF	; 255
 550:	22 e0       	ldi	r18, 0x02	; 2
 552:	81 50       	subi	r24, 0x01	; 1
 554:	90 40       	sbci	r25, 0x00	; 0
 556:	20 40       	sbci	r18, 0x00	; 0
 558:	e1 f7       	brne	.-8      	; 0x552 <__stack+0x53>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <__stack+0x5d>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <__stack+0x5f>
 55e:	17 c0       	rjmp	.+46     	; 0x58e <__stack+0x8f>
			_delay_ms(200);
		}
	}
	else if(joystick_button_read()){
 560:	0e 94 0f 03 	call	0x61e	; 0x61e <joystick_button_read>
 564:	89 2b       	or	r24, r25
 566:	99 f0       	breq	.+38     	; 0x58e <__stack+0x8f>
		if(menu_selector->fn != NULL ){	//if the function pointer points to a function, call it
 568:	e0 91 8a 01 	lds	r30, 0x018A
 56c:	f0 91 8b 01 	lds	r31, 0x018B
 570:	07 80       	ldd	r0, Z+7	; 0x07
 572:	f0 85       	ldd	r31, Z+8	; 0x08
 574:	e0 2d       	mov	r30, r0
 576:	30 97       	sbiw	r30, 0x00	; 0
 578:	51 f0       	breq	.+20     	; 0x58e <__stack+0x8f>
			menu_selector->fn();
 57a:	09 95       	icall
 57c:	8f ef       	ldi	r24, 0xFF	; 255
 57e:	9f ef       	ldi	r25, 0xFF	; 255
 580:	22 e0       	ldi	r18, 0x02	; 2
 582:	81 50       	subi	r24, 0x01	; 1
 584:	90 40       	sbci	r25, 0x00	; 0
 586:	20 40       	sbci	r18, 0x00	; 0
 588:	e1 f7       	brne	.-8      	; 0x582 <__stack+0x83>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <__stack+0x8d>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <__stack+0x8f>
		}
		else{}
	}
	
	
}
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	08 95       	ret

00000594 <gui_alt_print_indicator>:
void gui_alt_print_indicator(Menuitem* m){
	
	//oled_alt_clear_col_line_interval(0, 1, 7);
	
	//oled_clear_col(0);
	int number = menu_submenu_number(m);
 594:	0e 94 c2 04 	call	0x984	; 0x984 <menu_submenu_number>

	oled_store_string("-", 0, number);
 598:	ac 01       	movw	r20, r24
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	8b e0       	ldi	r24, 0x0B	; 11
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	0e 94 6e 05 	call	0xadc	; 0xadc <oled_store_string>
 5a6:	08 95       	ret

000005a8 <gui_alt_run>:
#include "gui_alt.h"


void gui_alt_run(){
	
	gui_alt_print_menu(menu_selector);
 5a8:	80 91 8a 01 	lds	r24, 0x018A
 5ac:	90 91 8b 01 	lds	r25, 0x018B
 5b0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <gui_alt_print_menu>
	gui_alt_navigate();
 5b4:	0e 94 2f 02 	call	0x45e	; 0x45e <gui_alt_navigate>
	gui_alt_print_indicator(menu_selector);
 5b8:	80 91 8a 01 	lds	r24, 0x018A
 5bc:	90 91 8b 01 	lds	r25, 0x018B
 5c0:	0e 94 ca 02 	call	0x594	; 0x594 <gui_alt_print_indicator>
 5c4:	08 95       	ret

000005c6 <joystick_read_x>:
//}

unsigned int joystick_read_x(){
	
	volatile char *ext_joy = (char *) 0x1400;
	ext_joy[0] = 0x04;
 5c6:	84 e0       	ldi	r24, 0x04	; 4
 5c8:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5cc:	81 e4       	ldi	r24, 0x41	; 65
 5ce:	8a 95       	dec	r24
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <joystick_read_x+0x8>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <joystick_read_x+0xe>
	_delay_us(40);
	return (uint8_t)ext_joy[0];
 5d4:	80 91 00 14 	lds	r24, 0x1400
	
}
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	08 95       	ret

000005dc <joystick_read_y>:


unsigned int joystick_read_y(){
	
	volatile char *ext_joy = (char *) 0x1400;
	ext_joy[0] = 0x05;
 5dc:	85 e0       	ldi	r24, 0x05	; 5
 5de:	80 93 00 14 	sts	0x1400, r24
 5e2:	81 e4       	ldi	r24, 0x41	; 65
 5e4:	8a 95       	dec	r24
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <joystick_read_y+0x8>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <joystick_read_y+0xe>
	_delay_us(40);
	return (uint8_t)ext_joy[0];
 5ea:	80 91 00 14 	lds	r24, 0x1400
	
}
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	08 95       	ret

000005f2 <joystick_x_value>:

int joystick_x_value(){
	return (joystick_read_x() - 127);
 5f2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <joystick_read_x>
}
 5f6:	8f 57       	subi	r24, 0x7F	; 127
 5f8:	91 09       	sbc	r25, r1
 5fa:	08 95       	ret

000005fc <joystick_y_value>:

int joystick_y_value(){
	return (joystick_read_y() - 127);
 5fc:	0e 94 ee 02 	call	0x5dc	; 0x5dc <joystick_read_y>
}
 600:	8f 57       	subi	r24, 0x7F	; 127
 602:	91 09       	sbc	r25, r1
 604:	08 95       	ret

00000606 <buttons_init>:
signed int slider_right_value(){
	return (slider_right_read() - 127);	
}

void buttons_init(){
	DDRB &= ~(1 << DDB1);	// ????
 606:	b9 98       	cbi	0x17, 1	; 23
	
	//left & right
	DDRB &= (1<< PINB0); //right
 608:	87 b3       	in	r24, 0x17	; 23
 60a:	81 70       	andi	r24, 0x01	; 1
 60c:	87 bb       	out	0x17, r24	; 23
	DDRB &= (1<< PINB1); //left
 60e:	87 b3       	in	r24, 0x17	; 23
 610:	82 70       	andi	r24, 0x02	; 2
 612:	87 bb       	out	0x17, r24	; 23

	//joystick button activate
	DDRB &= (1 << PINB2);
 614:	87 b3       	in	r24, 0x17	; 23
 616:	84 70       	andi	r24, 0x04	; 4
 618:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << PINB2);
 61a:	c2 9a       	sbi	0x18, 2	; 24
 61c:	08 95       	ret

0000061e <joystick_button_read>:
}

int joystick_button_read(){
	int button = (PINB & (1 << PINB3));
	if (button > 0){
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	b3 9b       	sbis	0x16, 3	; 22
 624:	02 c0       	rjmp	.+4      	; 0x62a <joystick_button_read+0xc>
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	90 e0       	ldi	r25, 0x00	; 0
	else{
		return 1;
	}
	
	
}
 62a:	08 95       	ret

0000062c <button_left_read>:

int button_left_read(){
	int button = (PINB & (1 << PINB1));
	if (button > 0){
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	b1 99       	sbic	0x16, 1	; 22
 632:	02 c0       	rjmp	.+4      	; 0x638 <button_left_read+0xc>
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
}
 638:	08 95       	ret

0000063a <main>:
void SRAM_test(void);



int main(void){
	fdevopen(uart_Transmit, uart_Receive);
 63a:	6c ef       	ldi	r22, 0xFC	; 252
 63c:	75 e0       	ldi	r23, 0x05	; 5
 63e:	88 ef       	ldi	r24, 0xF8	; 248
 640:	95 e0       	ldi	r25, 0x05	; 5
 642:	0e 94 3d 07 	call	0xe7a	; 0xe7a <fdevopen>
	
	MCUCR |= (1 << SRE);
 646:	85 b7       	in	r24, 0x35	; 53
 648:	80 68       	ori	r24, 0x80	; 128
 64a:	85 bf       	out	0x35, r24	; 53
	
	uart_Init(MYUBRR);
 64c:	8f e1       	ldi	r24, 0x1F	; 31
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 00 06 	call	0xc00	; 0xc00 <uart_Init>
	
	
	buttons_init(); // useless thus far
 654:	0e 94 03 03 	call	0x606	; 0x606 <buttons_init>
	/*oled_init();	
	oled_clear_screen();	
	oled_home();*/
	
	
	Menuitem* menu = create_menu();
 658:	0e 94 f6 03 	call	0x7ec	; 0x7ec <create_menu>
	menu_selector = menu;
 65c:	90 93 8b 01 	sts	0x018B, r25
 660:	80 93 8a 01 	sts	0x018A, r24
	menu_line_nr = 0; 
 664:	10 92 89 01 	sts	0x0189, r1
 668:	10 92 88 01 	sts	0x0188, r1
	
	can_init(MODE_NORMAL);
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
		printf("X: %d\n", joystick_read_x());
		canjoy_transmit();
		
	}*/
	
	oled_alt_init();
 674:	0e 94 f5 04 	call	0x9ea	; 0x9ea <oled_alt_init>
	
	//gui_print_menu(menu);
	
	
	while(1){
		gui_alt_run();
 678:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <gui_alt_run>
		
		oled_write_screen();	
 67c:	0e 94 84 05 	call	0xb08	; 0xb08 <oled_write_screen>
 680:	fb cf       	rjmp	.-10     	; 0x678 <main+0x3e>

00000682 <mcp2515_read>:
	}
	return 0;
}


int mcp2515_read(int address){
 682:	cf 93       	push	r28
 684:	c8 2f       	mov	r28, r24
	
	int result;
	
	PORTB &= ~(1 << MCP2515_CS);
 686:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_READ);
 688:	83 e0       	ldi	r24, 0x03	; 3
 68a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <spi_write>
	spi_write(address);
 68e:	8c 2f       	mov	r24, r28
 690:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <spi_write>
	
	result = spi_write(0x00);
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <spi_write>
	
	PORTB |= (1 << MCP2515_CS);
 69a:	c4 9a       	sbi	0x18, 4	; 24
	return result;
}
 69c:	cf 91       	pop	r28
 69e:	08 95       	ret

000006a0 <mcp2515_bit_modify>:
	PORTB &= ~(1 << MCP2515_CS);
	spi_write(buffer_select);
	PORTB |= (1 << MCP2515_CS);
}

void mcp2515_bit_modify(int address, int mask, int data){
 6a0:	1f 93       	push	r17
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	18 2f       	mov	r17, r24
 6a8:	d6 2f       	mov	r29, r22
 6aa:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS);
 6ac:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_BITMOD);
 6ae:	85 e0       	ldi	r24, 0x05	; 5
 6b0:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <spi_write>
	spi_write(address);
 6b4:	81 2f       	mov	r24, r17
 6b6:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <spi_write>
	spi_write(mask);
 6ba:	8d 2f       	mov	r24, r29
 6bc:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <spi_write>
	spi_write(data);
 6c0:	8c 2f       	mov	r24, r28
 6c2:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <spi_write>

	PORTB |= (1 << MCP2515_CS);
 6c6:	c4 9a       	sbi	0x18, 4	; 24
	
}
 6c8:	df 91       	pop	r29
 6ca:	cf 91       	pop	r28
 6cc:	1f 91       	pop	r17
 6ce:	08 95       	ret

000006d0 <mcp2515_reset>:

void mcp2515_reset(){
	PORTB &= ~(1 << MCP2515_CS);
 6d0:	c4 98       	cbi	0x18, 4	; 24
	spi_write(MCP_RESET);
 6d2:	80 ec       	ldi	r24, 0xC0	; 192
 6d4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <spi_write>
	PORTB |= (1 << MCP2515_CS);
 6d8:	c4 9a       	sbi	0x18, 4	; 24
 6da:	08 95       	ret

000006dc <mcp2515_init>:
#include "SPI.h"
#include "mcp2515_define.h"


int mcp2515_init(){
	spi_init();
 6dc:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <spi_init>
	mcp2515_reset();
 6e0:	0e 94 68 03 	call	0x6d0	; 0x6d0 <mcp2515_reset>
	
	uint8_t value = mcp2515_read(MCP_CANSTAT);
 6e4:	8e e0       	ldi	r24, 0x0E	; 14
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	0e 94 41 03 	call	0x682	; 0x682 <mcp2515_read>
	if((value & MODE_MASK) != MODE_CONFIG){
 6ec:	80 7e       	andi	r24, 0xE0	; 224
 6ee:	99 27       	eor	r25, r25
 6f0:	80 38       	cpi	r24, 0x80	; 128
 6f2:	91 05       	cpc	r25, r1
 6f4:	39 f0       	breq	.+14     	; 0x704 <mcp2515_init+0x28>
		printf("ERROR: MCP2515 is NOT in config mode after reset!\n");
 6f6:	8d e0       	ldi	r24, 0x0D	; 13
 6f8:	91 e0       	ldi	r25, 0x01	; 1
 6fa:	0e 94 88 07 	call	0xf10	; 0xf10 <puts>
		return 1;
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	08 95       	ret
	}
	return 0;
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	90 e0       	ldi	r25, 0x00	; 0
}
 708:	08 95       	ret

0000070a <menu_toggle_negative>:
}

//volatile char *oled_data = (char *) 0x1200; //dirty fix


void menu_toggle_negative(){
 70a:	08 95       	ret

0000070c <menu_snake_fn>:
	
/*		
		printf("X: %d\n", joystick_read_x());
		canjoy_transmit();
*/		
		oled_alt_clear_screen();
 70c:	0e 94 c4 05 	call	0xb88	; 0xb88 <oled_alt_clear_screen>
		oled_store_string("no snake yet", 1*8, 3);
 710:	43 e0       	ldi	r20, 0x03	; 3
 712:	50 e0       	ldi	r21, 0x00	; 0
 714:	68 e0       	ldi	r22, 0x08	; 8
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	8f e3       	ldi	r24, 0x3F	; 63
 71a:	91 e0       	ldi	r25, 0x01	; 1
 71c:	0e 94 6e 05 	call	0xadc	; 0xadc <oled_store_string>
		oled_store_string("return", 0, 7);
 720:	47 e0       	ldi	r20, 0x07	; 7
 722:	50 e0       	ldi	r21, 0x00	; 0
 724:	60 e0       	ldi	r22, 0x00	; 0
 726:	70 e0       	ldi	r23, 0x00	; 0
 728:	8c e4       	ldi	r24, 0x4C	; 76
 72a:	91 e0       	ldi	r25, 0x01	; 1
 72c:	0e 94 6e 05 	call	0xadc	; 0xadc <oled_store_string>
		oled_write_screen();
 730:	0e 94 84 05 	call	0xb08	; 0xb08 <oled_write_screen>
		
		if(button_left_read()){
 734:	0e 94 16 03 	call	0x62c	; 0x62c <button_left_read>
 738:	89 2b       	or	r24, r25
 73a:	41 f3       	breq	.-48     	; 0x70c <menu_snake_fn>
			return;
		}
	}
	
}
 73c:	08 95       	ret

0000073e <new_Menuitem>:

Menuitem* new_Menuitem(
char* name,
void (*fn)(void),
uint8_t num_submenus
){
 73e:	df 92       	push	r13
 740:	ef 92       	push	r14
 742:	ff 92       	push	r15
 744:	0f 93       	push	r16
 746:	1f 93       	push	r17
 748:	cf 93       	push	r28
 74a:	df 93       	push	r29
 74c:	7c 01       	movw	r14, r24
 74e:	8b 01       	movw	r16, r22
 750:	d4 2e       	mov	r13, r20
	Menuitem* this = malloc(sizeof(Menuitem));
 752:	89 e0       	ldi	r24, 0x09	; 9
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	0e 94 0d 06 	call	0xc1a	; 0xc1a <malloc>
 75a:	ec 01       	movw	r28, r24
	this->name = name;
 75c:	fe 82       	std	Y+6, r15	; 0x06
 75e:	ed 82       	std	Y+5, r14	; 0x05
	this->fn = fn;
 760:	18 87       	std	Y+8, r17	; 0x08
 762:	0f 83       	std	Y+7, r16	; 0x07
	
	this->num_submenus = num_submenus;
 764:	d8 82       	st	Y, r13
	this->submenus = malloc(sizeof(Menuitem) * num_submenus);
 766:	4d 2d       	mov	r20, r13
 768:	50 e0       	ldi	r21, 0x00	; 0
 76a:	ca 01       	movw	r24, r20
 76c:	88 0f       	add	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	88 0f       	add	r24, r24
 772:	99 1f       	adc	r25, r25
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	84 0f       	add	r24, r20
 77a:	95 1f       	adc	r25, r21
 77c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <malloc>
 780:	9a 83       	std	Y+2, r25	; 0x02
 782:	89 83       	std	Y+1, r24	; 0x01
	
	return this;
}
 784:	ce 01       	movw	r24, r28
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	1f 91       	pop	r17
 78c:	0f 91       	pop	r16
 78e:	ff 90       	pop	r15
 790:	ef 90       	pop	r14
 792:	df 90       	pop	r13
 794:	08 95       	ret

00000796 <assign_parents>:


void assign_parents(Menuitem* menu){
 796:	1f 93       	push	r17
 798:	cf 93       	push	r28
 79a:	df 93       	push	r29
 79c:	ec 01       	movw	r28, r24
	for(uint8_t n = 0; n < menu->num_submenus; n++){
 79e:	88 81       	ld	r24, Y
 7a0:	88 23       	and	r24, r24
 7a2:	01 f1       	breq	.+64     	; 0x7e4 <assign_parents+0x4e>
 7a4:	10 e0       	ldi	r17, 0x00	; 0
		menu->submenus[n]->parent = menu;
 7a6:	81 2f       	mov	r24, r17
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	88 0f       	add	r24, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	e9 81       	ldd	r30, Y+1	; 0x01
 7b0:	fa 81       	ldd	r31, Y+2	; 0x02
 7b2:	e8 0f       	add	r30, r24
 7b4:	f9 1f       	adc	r31, r25
 7b6:	01 90       	ld	r0, Z+
 7b8:	f0 81       	ld	r31, Z
 7ba:	e0 2d       	mov	r30, r0
 7bc:	d4 83       	std	Z+4, r29	; 0x04
 7be:	c3 83       	std	Z+3, r28	; 0x03
		if(menu->submenus[n]->num_submenus > 0){
 7c0:	29 81       	ldd	r18, Y+1	; 0x01
 7c2:	3a 81       	ldd	r19, Y+2	; 0x02
 7c4:	f9 01       	movw	r30, r18
 7c6:	e8 0f       	add	r30, r24
 7c8:	f9 1f       	adc	r31, r25
 7ca:	01 90       	ld	r0, Z+
 7cc:	f0 81       	ld	r31, Z
 7ce:	e0 2d       	mov	r30, r0
 7d0:	80 81       	ld	r24, Z
 7d2:	88 23       	and	r24, r24
 7d4:	19 f0       	breq	.+6      	; 0x7dc <assign_parents+0x46>
			assign_parents(menu->submenus[n]);
 7d6:	cf 01       	movw	r24, r30
 7d8:	0e 94 cb 03 	call	0x796	; 0x796 <assign_parents>
	return this;
}


void assign_parents(Menuitem* menu){
	for(uint8_t n = 0; n < menu->num_submenus; n++){
 7dc:	1f 5f       	subi	r17, 0xFF	; 255
 7de:	88 81       	ld	r24, Y
 7e0:	18 17       	cp	r17, r24
 7e2:	08 f3       	brcs	.-62     	; 0x7a6 <assign_parents+0x10>
		menu->submenus[n]->parent = menu;
		if(menu->submenus[n]->num_submenus > 0){
			assign_parents(menu->submenus[n]);
		}
	}
}
 7e4:	df 91       	pop	r29
 7e6:	cf 91       	pop	r28
 7e8:	1f 91       	pop	r17
 7ea:	08 95       	ret

000007ec <create_menu>:


Menuitem* create_menu(){
 7ec:	0f 93       	push	r16
 7ee:	1f 93       	push	r17
 7f0:	cf 93       	push	r28
 7f2:	df 93       	push	r29
	
	//Store these strings in progmem maybe
	
	
	//for some reason, MENU/GUI instantly goes into first submenu in main, but this pattern doesn't repeat in sub menus, so wtf
	Menuitem* base = new_Menuitem("Main", NULL, 3);
 7f4:	43 e0       	ldi	r20, 0x03	; 3
 7f6:	60 e0       	ldi	r22, 0x00	; 0
 7f8:	70 e0       	ldi	r23, 0x00	; 0
 7fa:	86 e0       	ldi	r24, 0x06	; 6
 7fc:	91 e0       	ldi	r25, 0x01	; 1
 7fe:	0e 94 9f 03 	call	0x73e	; 0x73e <new_Menuitem>
 802:	ec 01       	movw	r28, r24
	base->submenus[0] = new_Menuitem("Snake", menu_snake_fn, 0);
 804:	09 81       	ldd	r16, Y+1	; 0x01
 806:	1a 81       	ldd	r17, Y+2	; 0x02
 808:	40 e0       	ldi	r20, 0x00	; 0
 80a:	66 e8       	ldi	r22, 0x86	; 134
 80c:	73 e0       	ldi	r23, 0x03	; 3
 80e:	83 e5       	ldi	r24, 0x53	; 83
 810:	91 e0       	ldi	r25, 0x01	; 1
 812:	0e 94 9f 03 	call	0x73e	; 0x73e <new_Menuitem>
 816:	f8 01       	movw	r30, r16
 818:	91 83       	std	Z+1, r25	; 0x01
 81a:	80 83       	st	Z, r24
	base->submenus[1] = new_Menuitem("Settings", NULL, 2);
 81c:	09 81       	ldd	r16, Y+1	; 0x01
 81e:	1a 81       	ldd	r17, Y+2	; 0x02
 820:	42 e0       	ldi	r20, 0x02	; 2
 822:	60 e0       	ldi	r22, 0x00	; 0
 824:	70 e0       	ldi	r23, 0x00	; 0
 826:	89 e5       	ldi	r24, 0x59	; 89
 828:	91 e0       	ldi	r25, 0x01	; 1
 82a:	0e 94 9f 03 	call	0x73e	; 0x73e <new_Menuitem>
 82e:	f8 01       	movw	r30, r16
 830:	93 83       	std	Z+3, r25	; 0x03
 832:	82 83       	std	Z+2, r24	; 0x02
	base->submenus[1]->submenus[0] = new_Menuitem("Contrast", oled_alt_change_contrast, 0);
 834:	e9 81       	ldd	r30, Y+1	; 0x01
 836:	fa 81       	ldd	r31, Y+2	; 0x02
 838:	02 80       	ldd	r0, Z+2	; 0x02
 83a:	f3 81       	ldd	r31, Z+3	; 0x03
 83c:	e0 2d       	mov	r30, r0
 83e:	01 81       	ldd	r16, Z+1	; 0x01
 840:	12 81       	ldd	r17, Z+2	; 0x02
 842:	40 e0       	ldi	r20, 0x00	; 0
 844:	6a ee       	ldi	r22, 0xEA	; 234
 846:	75 e0       	ldi	r23, 0x05	; 5
 848:	82 e6       	ldi	r24, 0x62	; 98
 84a:	91 e0       	ldi	r25, 0x01	; 1
 84c:	0e 94 9f 03 	call	0x73e	; 0x73e <new_Menuitem>
 850:	f8 01       	movw	r30, r16
 852:	91 83       	std	Z+1, r25	; 0x01
 854:	80 83       	st	Z, r24
	base->submenus[1]->submenus[1] = new_Menuitem("Toggle negative", oled_alt_toggle_negative, 0);
 856:	e9 81       	ldd	r30, Y+1	; 0x01
 858:	fa 81       	ldd	r31, Y+2	; 0x02
 85a:	02 80       	ldd	r0, Z+2	; 0x02
 85c:	f3 81       	ldd	r31, Z+3	; 0x03
 85e:	e0 2d       	mov	r30, r0
 860:	01 81       	ldd	r16, Z+1	; 0x01
 862:	12 81       	ldd	r17, Z+2	; 0x02
 864:	40 e0       	ldi	r20, 0x00	; 0
 866:	62 ed       	ldi	r22, 0xD2	; 210
 868:	75 e0       	ldi	r23, 0x05	; 5
 86a:	8b e6       	ldi	r24, 0x6B	; 107
 86c:	91 e0       	ldi	r25, 0x01	; 1
 86e:	0e 94 9f 03 	call	0x73e	; 0x73e <new_Menuitem>
 872:	f8 01       	movw	r30, r16
 874:	93 83       	std	Z+3, r25	; 0x03
 876:	82 83       	std	Z+2, r24	; 0x02
	base->submenus[2] = new_Menuitem("Ping Pong", menu_toggle_negative, 0);
 878:	09 81       	ldd	r16, Y+1	; 0x01
 87a:	1a 81       	ldd	r17, Y+2	; 0x02
 87c:	40 e0       	ldi	r20, 0x00	; 0
 87e:	65 e8       	ldi	r22, 0x85	; 133
 880:	73 e0       	ldi	r23, 0x03	; 3
 882:	8b e7       	ldi	r24, 0x7B	; 123
 884:	91 e0       	ldi	r25, 0x01	; 1
 886:	0e 94 9f 03 	call	0x73e	; 0x73e <new_Menuitem>
 88a:	f8 01       	movw	r30, r16
 88c:	95 83       	std	Z+5, r25	; 0x05
 88e:	84 83       	std	Z+4, r24	; 0x04
	
	assign_parents(base);
 890:	ce 01       	movw	r24, r28
 892:	0e 94 cb 03 	call	0x796	; 0x796 <assign_parents>
	
	return base;
}
 896:	ce 01       	movw	r24, r28
 898:	df 91       	pop	r29
 89a:	cf 91       	pop	r28
 89c:	1f 91       	pop	r17
 89e:	0f 91       	pop	r16
 8a0:	08 95       	ret

000008a2 <menu_submenu>:



//works
Menuitem* menu_submenu(Menuitem* m){
 8a2:	fc 01       	movw	r30, r24
	if (m->num_submenus != 0){
 8a4:	80 81       	ld	r24, Z
 8a6:	88 23       	and	r24, r24
 8a8:	31 f0       	breq	.+12     	; 0x8b6 <menu_submenu+0x14>
		return m->submenus[0];
 8aa:	01 80       	ldd	r0, Z+1	; 0x01
 8ac:	f2 81       	ldd	r31, Z+2	; 0x02
 8ae:	e0 2d       	mov	r30, r0
 8b0:	80 81       	ld	r24, Z
 8b2:	91 81       	ldd	r25, Z+1	; 0x01
 8b4:	08 95       	ret
	}
	else{
		return m;
 8b6:	8e 2f       	mov	r24, r30
 8b8:	9f 2f       	mov	r25, r31
	}
}
 8ba:	08 95       	ret

000008bc <menu_parent>:

//works
Menuitem* menu_parent(Menuitem* m){
 8bc:	fc 01       	movw	r30, r24
	if (m->parent != NULL){
 8be:	83 81       	ldd	r24, Z+3	; 0x03
 8c0:	94 81       	ldd	r25, Z+4	; 0x04
 8c2:	00 97       	sbiw	r24, 0x00	; 0
 8c4:	09 f4       	brne	.+2      	; 0x8c8 <menu_parent+0xc>
		return m->parent;
	}
	else{
		return m;
 8c6:	cf 01       	movw	r24, r30
	}
}
 8c8:	08 95       	ret

000008ca <menu_next>:

//works
Menuitem* menu_next(Menuitem* m){
 8ca:	cf 93       	push	r28
 8cc:	dc 01       	movw	r26, r24
	}
}

//works
Menuitem* menu_parent(Menuitem* m){
	if (m->parent != NULL){
 8ce:	13 96       	adiw	r26, 0x03	; 3
 8d0:	ed 91       	ld	r30, X+
 8d2:	fc 91       	ld	r31, X
 8d4:	14 97       	sbiw	r26, 0x04	; 4
 8d6:	30 97       	sbiw	r30, 0x00	; 0
 8d8:	09 f4       	brne	.+2      	; 0x8dc <menu_next+0x12>
		return m->parent;
	}
	else{
		return m;
 8da:	fc 01       	movw	r30, r24
}

//works
Menuitem* menu_next(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	for(uint8_t n = 0; n < parent->num_submenus; n++){
 8dc:	c0 81       	ld	r28, Z
 8de:	cc 23       	and	r28, r28
 8e0:	d9 f0       	breq	.+54     	; 0x918 <menu_next+0x4e>
		if(parent->submenus[n] == m  &&  n < parent->num_submenus){
 8e2:	61 81       	ldd	r22, Z+1	; 0x01
 8e4:	72 81       	ldd	r23, Z+2	; 0x02
 8e6:	fb 01       	movw	r30, r22
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	c9 01       	movw	r24, r18
 8ee:	41 91       	ld	r20, Z+
 8f0:	51 91       	ld	r21, Z+
 8f2:	4a 17       	cp	r20, r26
 8f4:	5b 07       	cpc	r21, r27
 8f6:	59 f4       	brne	.+22     	; 0x90e <menu_next+0x44>
 8f8:	2c 17       	cp	r18, r28
 8fa:	48 f4       	brcc	.+18     	; 0x90e <menu_next+0x44>
			return parent->submenus[n+1];
 8fc:	01 96       	adiw	r24, 0x01	; 1
 8fe:	fc 01       	movw	r30, r24
 900:	ee 0f       	add	r30, r30
 902:	ff 1f       	adc	r31, r31
 904:	e6 0f       	add	r30, r22
 906:	f7 1f       	adc	r31, r23
 908:	80 81       	ld	r24, Z
 90a:	91 81       	ldd	r25, Z+1	; 0x01
 90c:	0a c0       	rjmp	.+20     	; 0x922 <menu_next+0x58>
 90e:	2f 5f       	subi	r18, 0xFF	; 255
 910:	3f 4f       	sbci	r19, 0xFF	; 255
}

//works
Menuitem* menu_next(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	for(uint8_t n = 0; n < parent->num_submenus; n++){
 912:	2c 17       	cp	r18, r28
 914:	58 f3       	brcs	.-42     	; 0x8ec <menu_next+0x22>
 916:	03 c0       	rjmp	.+6      	; 0x91e <menu_next+0x54>
		if(parent->submenus[n] == m  &&  n < parent->num_submenus){
			return parent->submenus[n+1];
		}
	}
	return m;
 918:	8a 2f       	mov	r24, r26
 91a:	9b 2f       	mov	r25, r27
 91c:	02 c0       	rjmp	.+4      	; 0x922 <menu_next+0x58>
 91e:	8a 2f       	mov	r24, r26
 920:	9b 2f       	mov	r25, r27
}
 922:	cf 91       	pop	r28
 924:	08 95       	ret

00000926 <menu_prev>:

//works
Menuitem* menu_prev(Menuitem* m){
 926:	cf 93       	push	r28
 928:	dc 01       	movw	r26, r24
	}
}

//works
Menuitem* menu_parent(Menuitem* m){
	if (m->parent != NULL){
 92a:	13 96       	adiw	r26, 0x03	; 3
 92c:	ed 91       	ld	r30, X+
 92e:	fc 91       	ld	r31, X
 930:	14 97       	sbiw	r26, 0x04	; 4
 932:	30 97       	sbiw	r30, 0x00	; 0
 934:	09 f4       	brne	.+2      	; 0x938 <menu_prev+0x12>
		return m->parent;
	}
	else{
		return m;
 936:	fc 01       	movw	r30, r24

//works
Menuitem* menu_prev(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	
	for(uint8_t n = 0; n < parent->num_submenus; n++){
 938:	c0 81       	ld	r28, Z
 93a:	cc 23       	and	r28, r28
 93c:	e1 f0       	breq	.+56     	; 0x976 <menu_prev+0x50>
		if(parent->submenus[n] == m  &&  n > 0){
 93e:	61 81       	ldd	r22, Z+1	; 0x01
 940:	72 81       	ldd	r23, Z+2	; 0x02
 942:	fb 01       	movw	r30, r22
 944:	20 e0       	ldi	r18, 0x00	; 0
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	c9 01       	movw	r24, r18
 94a:	41 91       	ld	r20, Z+
 94c:	51 91       	ld	r21, Z+
 94e:	4a 17       	cp	r20, r26
 950:	5b 07       	cpc	r21, r27
 952:	61 f4       	brne	.+24     	; 0x96c <menu_prev+0x46>
 954:	22 23       	and	r18, r18
 956:	51 f0       	breq	.+20     	; 0x96c <menu_prev+0x46>
			return parent->submenus[n-1];
 958:	81 50       	subi	r24, 0x01	; 1
 95a:	90 48       	sbci	r25, 0x80	; 128
 95c:	fc 01       	movw	r30, r24
 95e:	ee 0f       	add	r30, r30
 960:	ff 1f       	adc	r31, r31
 962:	e6 0f       	add	r30, r22
 964:	f7 1f       	adc	r31, r23
 966:	80 81       	ld	r24, Z
 968:	91 81       	ldd	r25, Z+1	; 0x01
 96a:	0a c0       	rjmp	.+20     	; 0x980 <menu_prev+0x5a>
 96c:	2f 5f       	subi	r18, 0xFF	; 255
 96e:	3f 4f       	sbci	r19, 0xFF	; 255

//works
Menuitem* menu_prev(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	
	for(uint8_t n = 0; n < parent->num_submenus; n++){
 970:	2c 17       	cp	r18, r28
 972:	50 f3       	brcs	.-44     	; 0x948 <menu_prev+0x22>
 974:	03 c0       	rjmp	.+6      	; 0x97c <menu_prev+0x56>
		if(parent->submenus[n] == m  &&  n > 0){
			return parent->submenus[n-1];
		}
	}
	return m;
 976:	8a 2f       	mov	r24, r26
 978:	9b 2f       	mov	r25, r27
 97a:	02 c0       	rjmp	.+4      	; 0x980 <menu_prev+0x5a>
 97c:	8a 2f       	mov	r24, r26
 97e:	9b 2f       	mov	r25, r27
}
 980:	cf 91       	pop	r28
 982:	08 95       	ret

00000984 <menu_submenu_number>:
	}
}

//works
Menuitem* menu_parent(Menuitem* m){
	if (m->parent != NULL){
 984:	dc 01       	movw	r26, r24
 986:	13 96       	adiw	r26, 0x03	; 3
 988:	ed 91       	ld	r30, X+
 98a:	fc 91       	ld	r31, X
 98c:	14 97       	sbiw	r26, 0x04	; 4
 98e:	30 97       	sbiw	r30, 0x00	; 0
 990:	09 f4       	brne	.+2      	; 0x994 <menu_submenu_number+0x10>
		return m->parent;
	}
	else{
		return m;
 992:	fc 01       	movw	r30, r24

//works
int menu_submenu_number(Menuitem* m){
	//oled_goto_pos(0,5); removed in conjunction with oled_alt/gui_alt
	Menuitem* parent = menu_parent(m);
	for(int i = 0; i < parent->num_submenus; i++){
 994:	60 81       	ld	r22, Z
 996:	70 e0       	ldi	r23, 0x00	; 0
 998:	16 16       	cp	r1, r22
 99a:	17 06       	cpc	r1, r23
 99c:	fc f4       	brge	.+62     	; 0x9dc <menu_submenu_number+0x58>
		if(parent->submenus[i] == m)
 99e:	01 80       	ldd	r0, Z+1	; 0x01
 9a0:	f2 81       	ldd	r31, Z+2	; 0x02
 9a2:	e0 2d       	mov	r30, r0
 9a4:	20 81       	ld	r18, Z
 9a6:	31 81       	ldd	r19, Z+1	; 0x01
 9a8:	28 17       	cp	r18, r24
 9aa:	39 07       	cpc	r19, r25
 9ac:	61 f4       	brne	.+24     	; 0x9c6 <menu_submenu_number+0x42>
 9ae:	06 c0       	rjmp	.+12     	; 0x9bc <menu_submenu_number+0x38>
 9b0:	41 91       	ld	r20, Z+
 9b2:	51 91       	ld	r21, Z+
 9b4:	48 17       	cp	r20, r24
 9b6:	59 07       	cpc	r21, r25
 9b8:	49 f4       	brne	.+18     	; 0x9cc <menu_submenu_number+0x48>
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <menu_submenu_number+0x3c>

//works
int menu_submenu_number(Menuitem* m){
	//oled_goto_pos(0,5); removed in conjunction with oled_alt/gui_alt
	Menuitem* parent = menu_parent(m);
	for(int i = 0; i < parent->num_submenus; i++){
 9bc:	20 e0       	ldi	r18, 0x00	; 0
 9be:	30 e0       	ldi	r19, 0x00	; 0
		if(parent->submenus[i] == m)

			return i + 1;
 9c0:	c9 01       	movw	r24, r18
 9c2:	01 96       	adiw	r24, 0x01	; 1
 9c4:	08 95       	ret
 9c6:	32 96       	adiw	r30, 0x02	; 2

//works
int menu_submenu_number(Menuitem* m){
	//oled_goto_pos(0,5); removed in conjunction with oled_alt/gui_alt
	Menuitem* parent = menu_parent(m);
	for(int i = 0; i < parent->num_submenus; i++){
 9c8:	20 e0       	ldi	r18, 0x00	; 0
 9ca:	30 e0       	ldi	r19, 0x00	; 0
 9cc:	2f 5f       	subi	r18, 0xFF	; 255
 9ce:	3f 4f       	sbci	r19, 0xFF	; 255
 9d0:	26 17       	cp	r18, r22
 9d2:	37 07       	cpc	r19, r23
 9d4:	6c f3       	brlt	.-38     	; 0x9b0 <menu_submenu_number+0x2c>
		if(parent->submenus[i] == m)

			return i + 1;
	}
	return 0; 		//make safeguarding from this?
 9d6:	80 e0       	ldi	r24, 0x00	; 0
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	08 95       	ret
 9dc:	80 e0       	ldi	r24, 0x00	; 0
 9de:	90 e0       	ldi	r25, 0x00	; 0
}
 9e0:	08 95       	ret

000009e2 <menu_name>:
	//return this->name;
//}

char* menu_name(Menuitem* m){
	return m->name;
}
 9e2:	fc 01       	movw	r30, r24
 9e4:	85 81       	ldd	r24, Z+5	; 0x05
 9e6:	96 81       	ldd	r25, Z+6	; 0x06
 9e8:	08 95       	ret

000009ea <oled_alt_init>:
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
 9ea:	e0 e0       	ldi	r30, 0x00	; 0
 9ec:	f0 e1       	ldi	r31, 0x10	; 16
 9ee:	8e ea       	ldi	r24, 0xAE	; 174
 9f0:	80 83       	st	Z, r24
 9f2:	81 ea       	ldi	r24, 0xA1	; 161
 9f4:	80 83       	st	Z, r24
 9f6:	8a ed       	ldi	r24, 0xDA	; 218
 9f8:	80 83       	st	Z, r24
 9fa:	82 e1       	ldi	r24, 0x12	; 18
 9fc:	80 83       	st	Z, r24
 9fe:	88 ec       	ldi	r24, 0xC8	; 200
 a00:	80 83       	st	Z, r24
 a02:	88 ea       	ldi	r24, 0xA8	; 168
 a04:	80 83       	st	Z, r24
 a06:	8f e3       	ldi	r24, 0x3F	; 63
 a08:	80 83       	st	Z, r24
 a0a:	85 ed       	ldi	r24, 0xD5	; 213
 a0c:	80 83       	st	Z, r24
 a0e:	80 e8       	ldi	r24, 0x80	; 128
 a10:	80 83       	st	Z, r24
 a12:	81 e8       	ldi	r24, 0x81	; 129
 a14:	80 83       	st	Z, r24
 a16:	80 e5       	ldi	r24, 0x50	; 80
 a18:	80 83       	st	Z, r24
 a1a:	89 ed       	ldi	r24, 0xD9	; 217
 a1c:	80 83       	st	Z, r24
 a1e:	81 e2       	ldi	r24, 0x21	; 33
 a20:	80 83       	st	Z, r24
 a22:	90 e2       	ldi	r25, 0x20	; 32
 a24:	90 83       	st	Z, r25
 a26:	10 82       	st	Z, r1
 a28:	9b ed       	ldi	r25, 0xDB	; 219
 a2a:	90 83       	st	Z, r25
 a2c:	90 e3       	ldi	r25, 0x30	; 48
 a2e:	90 83       	st	Z, r25
 a30:	9d ea       	ldi	r25, 0xAD	; 173
 a32:	90 83       	st	Z, r25
 a34:	10 82       	st	Z, r1
 a36:	94 ea       	ldi	r25, 0xA4	; 164
 a38:	90 83       	st	Z, r25
 a3a:	96 ea       	ldi	r25, 0xA6	; 166
 a3c:	90 83       	st	Z, r25
 a3e:	9f ea       	ldi	r25, 0xAF	; 175
 a40:	90 83       	st	Z, r25
 a42:	80 83       	st	Z, r24
 a44:	10 82       	st	Z, r1
 a46:	8f e7       	ldi	r24, 0x7F	; 127
 a48:	80 83       	st	Z, r24
 a4a:	92 e2       	ldi	r25, 0x22	; 34
 a4c:	90 83       	st	Z, r25
 a4e:	10 82       	st	Z, r1
 a50:	80 83       	st	Z, r24
 a52:	08 95       	ret

00000a54 <oled_store>:
	
	//oled_clear_screen();
	//oled_home();
}

void oled_store(char* string, int* position){
 a54:	0f 93       	push	r16
 a56:	1f 93       	push	r17
 a58:	cf 93       	push	r28
 a5a:	df 93       	push	r29
	//calculate position offset
	int start_position = position[0]*128 + position[1];
 a5c:	fb 01       	movw	r30, r22
 a5e:	40 81       	ld	r20, Z
 a60:	51 81       	ldd	r21, Z+1	; 0x01
 a62:	56 95       	lsr	r21
 a64:	54 2f       	mov	r21, r20
 a66:	44 27       	eor	r20, r20
 a68:	57 95       	ror	r21
 a6a:	47 95       	ror	r20
 a6c:	22 81       	ldd	r18, Z+2	; 0x02
 a6e:	33 81       	ldd	r19, Z+3	; 0x03
 a70:	42 0f       	add	r20, r18
 a72:	53 1f       	adc	r21, r19
	for(int i = 0; string[i] != '\0'; ++i){
 a74:	fc 01       	movw	r30, r24
 a76:	20 81       	ld	r18, Z
 a78:	22 23       	and	r18, r18
 a7a:	59 f1       	breq	.+86     	; 0xad2 <oled_store+0x7e>
 a7c:	bc 01       	movw	r22, r24
 a7e:	6f 5f       	subi	r22, 0xFF	; 255
 a80:	7f 4f       	sbci	r23, 0xFF	; 255
 a82:	ec 01       	movw	r28, r24
	
	//oled_clear_screen();
	//oled_home();
}

void oled_store(char* string, int* position){
 a84:	00 e0       	ldi	r16, 0x00	; 0
 a86:	10 e0       	ldi	r17, 0x00	; 0
 a88:	1f c0       	rjmp	.+62     	; 0xac8 <oled_store+0x74>
 a8a:	dc 01       	movw	r26, r24
 a8c:	a2 0f       	add	r26, r18
 a8e:	b3 1f       	adc	r27, r19
	int start_position = position[0]*128 + position[1];
	for(int i = 0; string[i] != '\0'; ++i){
		//j goes through each col	n of the char in font
		for(int j = 0; j < FONT_SIZE; ++j){
			//font[char index in font][column of char]
			*(SRAM_ADRESS + start_position + i * FONT_SIZE + j) = pgm_read_byte(&font[(int)string[i] - 32][j]);
 a90:	e8 81       	ld	r30, Y
 a92:	f0 e0       	ldi	r31, 0x00	; 0
 a94:	b0 97       	sbiw	r30, 0x20	; 32
 a96:	ee 0f       	add	r30, r30
 a98:	ff 1f       	adc	r31, r31
 a9a:	ee 0f       	add	r30, r30
 a9c:	ff 1f       	adc	r31, r31
 a9e:	ee 0f       	add	r30, r30
 aa0:	ff 1f       	adc	r31, r31
 aa2:	e2 0f       	add	r30, r18
 aa4:	f3 1f       	adc	r31, r19
 aa6:	e0 59       	subi	r30, 0x90	; 144
 aa8:	ff 4f       	sbci	r31, 0xFF	; 255
 aaa:	e4 91       	lpm	r30, Z
 aac:	ec 93       	st	X, r30
void oled_store(char* string, int* position){
	//calculate position offset
	int start_position = position[0]*128 + position[1];
	for(int i = 0; string[i] != '\0'; ++i){
		//j goes through each col	n of the char in font
		for(int j = 0; j < FONT_SIZE; ++j){
 aae:	2f 5f       	subi	r18, 0xFF	; 255
 ab0:	3f 4f       	sbci	r19, 0xFF	; 255
 ab2:	28 30       	cpi	r18, 0x08	; 8
 ab4:	31 05       	cpc	r19, r1
 ab6:	49 f7       	brne	.-46     	; 0xa8a <oled_store+0x36>
}

void oled_store(char* string, int* position){
	//calculate position offset
	int start_position = position[0]*128 + position[1];
	for(int i = 0; string[i] != '\0'; ++i){
 ab8:	eb 01       	movw	r28, r22
 aba:	6f 5f       	subi	r22, 0xFF	; 255
 abc:	7f 4f       	sbci	r23, 0xFF	; 255
 abe:	48 5f       	subi	r20, 0xF8	; 248
 ac0:	5f 4f       	sbci	r21, 0xFF	; 255
 ac2:	88 81       	ld	r24, Y
 ac4:	88 23       	and	r24, r24
 ac6:	29 f0       	breq	.+10     	; 0xad2 <oled_store+0x7e>
	
	//oled_clear_screen();
	//oled_home();
}

void oled_store(char* string, int* position){
 ac8:	20 2f       	mov	r18, r16
 aca:	31 2f       	mov	r19, r17
 acc:	ca 01       	movw	r24, r20
 ace:	98 5e       	subi	r25, 0xE8	; 232
 ad0:	dc cf       	rjmp	.-72     	; 0xa8a <oled_store+0x36>
		for(int j = 0; j < FONT_SIZE; ++j){
			//font[char index in font][column of char]
			*(SRAM_ADRESS + start_position + i * FONT_SIZE + j) = pgm_read_byte(&font[(int)string[i] - 32][j]);
		}
	}
}
 ad2:	df 91       	pop	r29
 ad4:	cf 91       	pop	r28
 ad6:	1f 91       	pop	r17
 ad8:	0f 91       	pop	r16
 ada:	08 95       	ret

00000adc <oled_store_string>:



void oled_store_string(char* string, int col, int line){
 adc:	cf 93       	push	r28
 ade:	df 93       	push	r29
 ae0:	00 d0       	rcall	.+0      	; 0xae2 <oled_store_string+0x6>
 ae2:	00 d0       	rcall	.+0      	; 0xae4 <oled_store_string+0x8>
 ae4:	cd b7       	in	r28, 0x3d	; 61
 ae6:	de b7       	in	r29, 0x3e	; 62
//	oled_store_string((char[5]){}, (int[2]){line, col})
	
	//int length = strlen(string) + 1;
	
	oled_store(string, (int[2]){line, col});
 ae8:	5a 83       	std	Y+2, r21	; 0x02
 aea:	49 83       	std	Y+1, r20	; 0x01
 aec:	7c 83       	std	Y+4, r23	; 0x04
 aee:	6b 83       	std	Y+3, r22	; 0x03
 af0:	be 01       	movw	r22, r28
 af2:	6f 5f       	subi	r22, 0xFF	; 255
 af4:	7f 4f       	sbci	r23, 0xFF	; 255
 af6:	0e 94 2a 05 	call	0xa54	; 0xa54 <oled_store>
	
}
 afa:	0f 90       	pop	r0
 afc:	0f 90       	pop	r0
 afe:	0f 90       	pop	r0
 b00:	0f 90       	pop	r0
 b02:	df 91       	pop	r29
 b04:	cf 91       	pop	r28
 b06:	08 95       	ret

00000b08 <oled_write_screen>:





void oled_write_screen(){
 b08:	e0 e0       	ldi	r30, 0x00	; 0
 b0a:	f8 e1       	ldi	r31, 0x18	; 24
	for(int i = 0; i < 1024; ++i){
		*OLED_DATA_ADRESS = *(SRAM_ADRESS + i);
 b0c:	a0 e0       	ldi	r26, 0x00	; 0
 b0e:	b2 e1       	ldi	r27, 0x12	; 18
 b10:	81 91       	ld	r24, Z+
 b12:	8c 93       	st	X, r24




void oled_write_screen(){
	for(int i = 0; i < 1024; ++i){
 b14:	e1 15       	cp	r30, r1
 b16:	8c e1       	ldi	r24, 0x1C	; 28
 b18:	f8 07       	cpc	r31, r24
 b1a:	d1 f7       	brne	.-12     	; 0xb10 <oled_write_screen+0x8>
		*OLED_DATA_ADRESS = *(SRAM_ADRESS + i);
	}
}
 b1c:	08 95       	ret

00000b1e <oled_alt_clear_line>:


void oled_alt_clear_line(int line){
 b1e:	cf 92       	push	r12
 b20:	df 92       	push	r13
 b22:	ef 92       	push	r14
 b24:	ff 92       	push	r15
 b26:	0f 93       	push	r16
 b28:	1f 93       	push	r17
 b2a:	cf 93       	push	r28
 b2c:	df 93       	push	r29
 b2e:	00 d0       	rcall	.+0      	; 0xb30 <oled_alt_clear_line+0x12>
 b30:	00 d0       	rcall	.+0      	; 0xb32 <oled_alt_clear_line+0x14>
 b32:	00 d0       	rcall	.+0      	; 0xb34 <oled_alt_clear_line+0x16>
 b34:	cd b7       	in	r28, 0x3d	; 61
 b36:	de b7       	in	r29, 0x3e	; 62
 b38:	6c 01       	movw	r12, r24
	
	for(int col = 0; col < NR_COL; col += 8){
 b3a:	00 e0       	ldi	r16, 0x00	; 0
 b3c:	10 e0       	ldi	r17, 0x00	; 0
		oled_store((char[2]){" "}, (int[2]){line, col});
 b3e:	68 94       	set
 b40:	ee 24       	eor	r14, r14
 b42:	e5 f8       	bld	r14, 5
 b44:	f1 2c       	mov	r15, r1
 b46:	dc 82       	std	Y+4, r13	; 0x04
 b48:	cb 82       	std	Y+3, r12	; 0x03
 b4a:	1e 83       	std	Y+6, r17	; 0x06
 b4c:	0d 83       	std	Y+5, r16	; 0x05
 b4e:	fa 82       	std	Y+2, r15	; 0x02
 b50:	e9 82       	std	Y+1, r14	; 0x01
 b52:	be 01       	movw	r22, r28
 b54:	6d 5f       	subi	r22, 0xFD	; 253
 b56:	7f 4f       	sbci	r23, 0xFF	; 255
 b58:	ce 01       	movw	r24, r28
 b5a:	01 96       	adiw	r24, 0x01	; 1
 b5c:	0e 94 2a 05 	call	0xa54	; 0xa54 <oled_store>
}


void oled_alt_clear_line(int line){
	
	for(int col = 0; col < NR_COL; col += 8){
 b60:	08 5f       	subi	r16, 0xF8	; 248
 b62:	1f 4f       	sbci	r17, 0xFF	; 255
 b64:	00 38       	cpi	r16, 0x80	; 128
 b66:	11 05       	cpc	r17, r1
 b68:	71 f7       	brne	.-36     	; 0xb46 <oled_alt_clear_line+0x28>
		oled_store((char[2]){" "}, (int[2]){line, col});
	}
	
}
 b6a:	26 96       	adiw	r28, 0x06	; 6
 b6c:	0f b6       	in	r0, 0x3f	; 63
 b6e:	f8 94       	cli
 b70:	de bf       	out	0x3e, r29	; 62
 b72:	0f be       	out	0x3f, r0	; 63
 b74:	cd bf       	out	0x3d, r28	; 61
 b76:	df 91       	pop	r29
 b78:	cf 91       	pop	r28
 b7a:	1f 91       	pop	r17
 b7c:	0f 91       	pop	r16
 b7e:	ff 90       	pop	r15
 b80:	ef 90       	pop	r14
 b82:	df 90       	pop	r13
 b84:	cf 90       	pop	r12
 b86:	08 95       	ret

00000b88 <oled_alt_clear_screen>:
	
}



void oled_alt_clear_screen(){
 b88:	cf 93       	push	r28
 b8a:	df 93       	push	r29
	for(int line = 0; line < NR_LINES; ++line){
 b8c:	c0 e0       	ldi	r28, 0x00	; 0
 b8e:	d0 e0       	ldi	r29, 0x00	; 0
		oled_alt_clear_line(line);
 b90:	ce 01       	movw	r24, r28
 b92:	0e 94 8f 05 	call	0xb1e	; 0xb1e <oled_alt_clear_line>
}



void oled_alt_clear_screen(){
	for(int line = 0; line < NR_LINES; ++line){
 b96:	21 96       	adiw	r28, 0x01	; 1
 b98:	c8 30       	cpi	r28, 0x08	; 8
 b9a:	d1 05       	cpc	r29, r1
 b9c:	c9 f7       	brne	.-14     	; 0xb90 <oled_alt_clear_screen+0x8>
		oled_alt_clear_line(line);
	}
}
 b9e:	df 91       	pop	r29
 ba0:	cf 91       	pop	r28
 ba2:	08 95       	ret

00000ba4 <oled_alt_toggle_negative>:



int screen_negative = 0;
void oled_alt_toggle_negative(){
	if(screen_negative){
 ba4:	80 91 86 01 	lds	r24, 0x0186
 ba8:	90 91 87 01 	lds	r25, 0x0187
 bac:	89 2b       	or	r24, r25
 bae:	41 f0       	breq	.+16     	; 0xbc0 <oled_alt_toggle_negative+0x1c>
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
 bb0:	86 ea       	ldi	r24, 0xA6	; 166
 bb2:	80 93 00 10 	sts	0x1000, r24

int screen_negative = 0;
void oled_alt_toggle_negative(){
	if(screen_negative){
		oled_alt_mode_normal();
		screen_negative = 0;
 bb6:	10 92 87 01 	sts	0x0187, r1
 bba:	10 92 86 01 	sts	0x0186, r1
 bbe:	08 95       	ret
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
 bc0:	87 ea       	ldi	r24, 0xA7	; 167
 bc2:	80 93 00 10 	sts	0x1000, r24
		oled_alt_mode_normal();
		screen_negative = 0;
	}
	else{
		oled_alt_mode_negative();
		screen_negative = 1;
 bc6:	81 e0       	ldi	r24, 0x01	; 1
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	90 93 87 01 	sts	0x0187, r25
 bce:	80 93 86 01 	sts	0x0186, r24
 bd2:	08 95       	ret

00000bd4 <oled_alt_change_contrast>:
	}
}

void oled_alt_change_contrast(){
 bd4:	08 95       	ret

00000bd6 <spi_init>:
#include "SPI.h"
#include <avr/io.h>

void spi_init(){
			//SI out		SS out		SCK out
	DDRB |= ( 1 << PB5) | (1 << PB4) | (1 << PB7);
 bd6:	87 b3       	in	r24, 0x17	; 23
 bd8:	80 6b       	ori	r24, 0xB0	; 176
 bda:	87 bb       	out	0x17, r24	; 23
			//SO in
	DDRB &= ~(1 << PB6);
 bdc:	be 98       	cbi	0x17, 6	; 23
	
	//								 frequency / 16
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 bde:	81 e5       	ldi	r24, 0x51	; 81
 be0:	8d b9       	out	0x0d, r24	; 13
 be2:	08 95       	ret

00000be4 <spi_write>:

//both read and write
int spi_write(char data){
	//SPDR = data;
	//while(!(SPSR & (1<<SPIF)));
	SPDR = data;
 be4:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 be6:	77 9b       	sbis	0x0e, 7	; 14
 be8:	fe cf       	rjmp	.-4      	; 0xbe6 <spi_write+0x2>
	return SPDR;
 bea:	8f b1       	in	r24, 0x0f	; 15
}
 bec:	90 e0       	ldi	r25, 0x00	; 0
 bee:	08 95       	ret

00000bf0 <uart_Transmit>:
}

void uart_Transmit( unsigned char data ){
	
	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
 bf0:	5d 9b       	sbis	0x0b, 5	; 11
 bf2:	fe cf       	rjmp	.-4      	; 0xbf0 <uart_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;
 bf4:	8c b9       	out	0x0c, r24	; 12
 bf6:	08 95       	ret

00000bf8 <uart_Receive>:

unsigned char uart_Receive(void){
	
	//Wait for data to be received
	
	while( !(UCSR0A & (1<<RXC0)) );
 bf8:	5f 9b       	sbis	0x0b, 7	; 11
 bfa:	fe cf       	rjmp	.-4      	; 0xbf8 <uart_Receive>
	
	//Get and return received data from buffer
	
	return UDR0;
 bfc:	8c b1       	in	r24, 0x0c	; 12
}
 bfe:	08 95       	ret

00000c00 <uart_Init>:
#include "uart.h"

void uart_Init(unsigned int ubrr){
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 c00:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 c02:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN1)|(1<<TXEN1);
 c04:	88 e1       	ldi	r24, 0x18	; 24
 c06:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8data, 1stop bit
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
 c08:	86 e8       	ldi	r24, 0x86	; 134
 c0a:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uart_Transmit, uart_Receive);
 c0c:	6c ef       	ldi	r22, 0xFC	; 252
 c0e:	75 e0       	ldi	r23, 0x05	; 5
 c10:	88 ef       	ldi	r24, 0xF8	; 248
 c12:	95 e0       	ldi	r25, 0x05	; 5
 c14:	0e 94 3d 07 	call	0xe7a	; 0xe7a <fdevopen>
 c18:	08 95       	ret

00000c1a <malloc>:
 c1a:	cf 93       	push	r28
 c1c:	df 93       	push	r29
 c1e:	82 30       	cpi	r24, 0x02	; 2
 c20:	91 05       	cpc	r25, r1
 c22:	10 f4       	brcc	.+4      	; 0xc28 <malloc+0xe>
 c24:	82 e0       	ldi	r24, 0x02	; 2
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	e0 91 90 01 	lds	r30, 0x0190
 c2c:	f0 91 91 01 	lds	r31, 0x0191
 c30:	20 e0       	ldi	r18, 0x00	; 0
 c32:	30 e0       	ldi	r19, 0x00	; 0
 c34:	a0 e0       	ldi	r26, 0x00	; 0
 c36:	b0 e0       	ldi	r27, 0x00	; 0
 c38:	30 97       	sbiw	r30, 0x00	; 0
 c3a:	39 f1       	breq	.+78     	; 0xc8a <malloc+0x70>
 c3c:	40 81       	ld	r20, Z
 c3e:	51 81       	ldd	r21, Z+1	; 0x01
 c40:	48 17       	cp	r20, r24
 c42:	59 07       	cpc	r21, r25
 c44:	b8 f0       	brcs	.+46     	; 0xc74 <malloc+0x5a>
 c46:	48 17       	cp	r20, r24
 c48:	59 07       	cpc	r21, r25
 c4a:	71 f4       	brne	.+28     	; 0xc68 <malloc+0x4e>
 c4c:	82 81       	ldd	r24, Z+2	; 0x02
 c4e:	93 81       	ldd	r25, Z+3	; 0x03
 c50:	10 97       	sbiw	r26, 0x00	; 0
 c52:	29 f0       	breq	.+10     	; 0xc5e <malloc+0x44>
 c54:	13 96       	adiw	r26, 0x03	; 3
 c56:	9c 93       	st	X, r25
 c58:	8e 93       	st	-X, r24
 c5a:	12 97       	sbiw	r26, 0x02	; 2
 c5c:	2c c0       	rjmp	.+88     	; 0xcb6 <malloc+0x9c>
 c5e:	90 93 91 01 	sts	0x0191, r25
 c62:	80 93 90 01 	sts	0x0190, r24
 c66:	27 c0       	rjmp	.+78     	; 0xcb6 <malloc+0x9c>
 c68:	21 15       	cp	r18, r1
 c6a:	31 05       	cpc	r19, r1
 c6c:	31 f0       	breq	.+12     	; 0xc7a <malloc+0x60>
 c6e:	42 17       	cp	r20, r18
 c70:	53 07       	cpc	r21, r19
 c72:	18 f0       	brcs	.+6      	; 0xc7a <malloc+0x60>
 c74:	a9 01       	movw	r20, r18
 c76:	db 01       	movw	r26, r22
 c78:	01 c0       	rjmp	.+2      	; 0xc7c <malloc+0x62>
 c7a:	ef 01       	movw	r28, r30
 c7c:	9a 01       	movw	r18, r20
 c7e:	bd 01       	movw	r22, r26
 c80:	df 01       	movw	r26, r30
 c82:	02 80       	ldd	r0, Z+2	; 0x02
 c84:	f3 81       	ldd	r31, Z+3	; 0x03
 c86:	e0 2d       	mov	r30, r0
 c88:	d7 cf       	rjmp	.-82     	; 0xc38 <malloc+0x1e>
 c8a:	21 15       	cp	r18, r1
 c8c:	31 05       	cpc	r19, r1
 c8e:	f9 f0       	breq	.+62     	; 0xcce <malloc+0xb4>
 c90:	28 1b       	sub	r18, r24
 c92:	39 0b       	sbc	r19, r25
 c94:	24 30       	cpi	r18, 0x04	; 4
 c96:	31 05       	cpc	r19, r1
 c98:	80 f4       	brcc	.+32     	; 0xcba <malloc+0xa0>
 c9a:	8a 81       	ldd	r24, Y+2	; 0x02
 c9c:	9b 81       	ldd	r25, Y+3	; 0x03
 c9e:	61 15       	cp	r22, r1
 ca0:	71 05       	cpc	r23, r1
 ca2:	21 f0       	breq	.+8      	; 0xcac <malloc+0x92>
 ca4:	fb 01       	movw	r30, r22
 ca6:	93 83       	std	Z+3, r25	; 0x03
 ca8:	82 83       	std	Z+2, r24	; 0x02
 caa:	04 c0       	rjmp	.+8      	; 0xcb4 <malloc+0x9a>
 cac:	90 93 91 01 	sts	0x0191, r25
 cb0:	80 93 90 01 	sts	0x0190, r24
 cb4:	fe 01       	movw	r30, r28
 cb6:	32 96       	adiw	r30, 0x02	; 2
 cb8:	44 c0       	rjmp	.+136    	; 0xd42 <malloc+0x128>
 cba:	fe 01       	movw	r30, r28
 cbc:	e2 0f       	add	r30, r18
 cbe:	f3 1f       	adc	r31, r19
 cc0:	81 93       	st	Z+, r24
 cc2:	91 93       	st	Z+, r25
 cc4:	22 50       	subi	r18, 0x02	; 2
 cc6:	31 09       	sbc	r19, r1
 cc8:	39 83       	std	Y+1, r19	; 0x01
 cca:	28 83       	st	Y, r18
 ccc:	3a c0       	rjmp	.+116    	; 0xd42 <malloc+0x128>
 cce:	20 91 8e 01 	lds	r18, 0x018E
 cd2:	30 91 8f 01 	lds	r19, 0x018F
 cd6:	23 2b       	or	r18, r19
 cd8:	41 f4       	brne	.+16     	; 0xcea <malloc+0xd0>
 cda:	20 91 02 01 	lds	r18, 0x0102
 cde:	30 91 03 01 	lds	r19, 0x0103
 ce2:	30 93 8f 01 	sts	0x018F, r19
 ce6:	20 93 8e 01 	sts	0x018E, r18
 cea:	20 91 00 01 	lds	r18, 0x0100
 cee:	30 91 01 01 	lds	r19, 0x0101
 cf2:	21 15       	cp	r18, r1
 cf4:	31 05       	cpc	r19, r1
 cf6:	41 f4       	brne	.+16     	; 0xd08 <malloc+0xee>
 cf8:	2d b7       	in	r18, 0x3d	; 61
 cfa:	3e b7       	in	r19, 0x3e	; 62
 cfc:	40 91 04 01 	lds	r20, 0x0104
 d00:	50 91 05 01 	lds	r21, 0x0105
 d04:	24 1b       	sub	r18, r20
 d06:	35 0b       	sbc	r19, r21
 d08:	e0 91 8e 01 	lds	r30, 0x018E
 d0c:	f0 91 8f 01 	lds	r31, 0x018F
 d10:	e2 17       	cp	r30, r18
 d12:	f3 07       	cpc	r31, r19
 d14:	a0 f4       	brcc	.+40     	; 0xd3e <malloc+0x124>
 d16:	2e 1b       	sub	r18, r30
 d18:	3f 0b       	sbc	r19, r31
 d1a:	28 17       	cp	r18, r24
 d1c:	39 07       	cpc	r19, r25
 d1e:	78 f0       	brcs	.+30     	; 0xd3e <malloc+0x124>
 d20:	ac 01       	movw	r20, r24
 d22:	4e 5f       	subi	r20, 0xFE	; 254
 d24:	5f 4f       	sbci	r21, 0xFF	; 255
 d26:	24 17       	cp	r18, r20
 d28:	35 07       	cpc	r19, r21
 d2a:	48 f0       	brcs	.+18     	; 0xd3e <malloc+0x124>
 d2c:	4e 0f       	add	r20, r30
 d2e:	5f 1f       	adc	r21, r31
 d30:	50 93 8f 01 	sts	0x018F, r21
 d34:	40 93 8e 01 	sts	0x018E, r20
 d38:	81 93       	st	Z+, r24
 d3a:	91 93       	st	Z+, r25
 d3c:	02 c0       	rjmp	.+4      	; 0xd42 <malloc+0x128>
 d3e:	e0 e0       	ldi	r30, 0x00	; 0
 d40:	f0 e0       	ldi	r31, 0x00	; 0
 d42:	cf 01       	movw	r24, r30
 d44:	df 91       	pop	r29
 d46:	cf 91       	pop	r28
 d48:	08 95       	ret

00000d4a <free>:
 d4a:	cf 93       	push	r28
 d4c:	df 93       	push	r29
 d4e:	00 97       	sbiw	r24, 0x00	; 0
 d50:	09 f4       	brne	.+2      	; 0xd54 <free+0xa>
 d52:	87 c0       	rjmp	.+270    	; 0xe62 <free+0x118>
 d54:	fc 01       	movw	r30, r24
 d56:	32 97       	sbiw	r30, 0x02	; 2
 d58:	13 82       	std	Z+3, r1	; 0x03
 d5a:	12 82       	std	Z+2, r1	; 0x02
 d5c:	c0 91 90 01 	lds	r28, 0x0190
 d60:	d0 91 91 01 	lds	r29, 0x0191
 d64:	20 97       	sbiw	r28, 0x00	; 0
 d66:	81 f4       	brne	.+32     	; 0xd88 <free+0x3e>
 d68:	20 81       	ld	r18, Z
 d6a:	31 81       	ldd	r19, Z+1	; 0x01
 d6c:	28 0f       	add	r18, r24
 d6e:	39 1f       	adc	r19, r25
 d70:	80 91 8e 01 	lds	r24, 0x018E
 d74:	90 91 8f 01 	lds	r25, 0x018F
 d78:	82 17       	cp	r24, r18
 d7a:	93 07       	cpc	r25, r19
 d7c:	79 f5       	brne	.+94     	; 0xddc <free+0x92>
 d7e:	f0 93 8f 01 	sts	0x018F, r31
 d82:	e0 93 8e 01 	sts	0x018E, r30
 d86:	6d c0       	rjmp	.+218    	; 0xe62 <free+0x118>
 d88:	de 01       	movw	r26, r28
 d8a:	20 e0       	ldi	r18, 0x00	; 0
 d8c:	30 e0       	ldi	r19, 0x00	; 0
 d8e:	ae 17       	cp	r26, r30
 d90:	bf 07       	cpc	r27, r31
 d92:	50 f4       	brcc	.+20     	; 0xda8 <free+0x5e>
 d94:	12 96       	adiw	r26, 0x02	; 2
 d96:	4d 91       	ld	r20, X+
 d98:	5c 91       	ld	r21, X
 d9a:	13 97       	sbiw	r26, 0x03	; 3
 d9c:	9d 01       	movw	r18, r26
 d9e:	41 15       	cp	r20, r1
 da0:	51 05       	cpc	r21, r1
 da2:	09 f1       	breq	.+66     	; 0xde6 <free+0x9c>
 da4:	da 01       	movw	r26, r20
 da6:	f3 cf       	rjmp	.-26     	; 0xd8e <free+0x44>
 da8:	b3 83       	std	Z+3, r27	; 0x03
 daa:	a2 83       	std	Z+2, r26	; 0x02
 dac:	40 81       	ld	r20, Z
 dae:	51 81       	ldd	r21, Z+1	; 0x01
 db0:	84 0f       	add	r24, r20
 db2:	95 1f       	adc	r25, r21
 db4:	8a 17       	cp	r24, r26
 db6:	9b 07       	cpc	r25, r27
 db8:	71 f4       	brne	.+28     	; 0xdd6 <free+0x8c>
 dba:	8d 91       	ld	r24, X+
 dbc:	9c 91       	ld	r25, X
 dbe:	11 97       	sbiw	r26, 0x01	; 1
 dc0:	84 0f       	add	r24, r20
 dc2:	95 1f       	adc	r25, r21
 dc4:	02 96       	adiw	r24, 0x02	; 2
 dc6:	91 83       	std	Z+1, r25	; 0x01
 dc8:	80 83       	st	Z, r24
 dca:	12 96       	adiw	r26, 0x02	; 2
 dcc:	8d 91       	ld	r24, X+
 dce:	9c 91       	ld	r25, X
 dd0:	13 97       	sbiw	r26, 0x03	; 3
 dd2:	93 83       	std	Z+3, r25	; 0x03
 dd4:	82 83       	std	Z+2, r24	; 0x02
 dd6:	21 15       	cp	r18, r1
 dd8:	31 05       	cpc	r19, r1
 dda:	29 f4       	brne	.+10     	; 0xde6 <free+0x9c>
 ddc:	f0 93 91 01 	sts	0x0191, r31
 de0:	e0 93 90 01 	sts	0x0190, r30
 de4:	3e c0       	rjmp	.+124    	; 0xe62 <free+0x118>
 de6:	d9 01       	movw	r26, r18
 de8:	13 96       	adiw	r26, 0x03	; 3
 dea:	fc 93       	st	X, r31
 dec:	ee 93       	st	-X, r30
 dee:	12 97       	sbiw	r26, 0x02	; 2
 df0:	4d 91       	ld	r20, X+
 df2:	5d 91       	ld	r21, X+
 df4:	a4 0f       	add	r26, r20
 df6:	b5 1f       	adc	r27, r21
 df8:	ea 17       	cp	r30, r26
 dfa:	fb 07       	cpc	r31, r27
 dfc:	79 f4       	brne	.+30     	; 0xe1c <free+0xd2>
 dfe:	80 81       	ld	r24, Z
 e00:	91 81       	ldd	r25, Z+1	; 0x01
 e02:	84 0f       	add	r24, r20
 e04:	95 1f       	adc	r25, r21
 e06:	02 96       	adiw	r24, 0x02	; 2
 e08:	d9 01       	movw	r26, r18
 e0a:	11 96       	adiw	r26, 0x01	; 1
 e0c:	9c 93       	st	X, r25
 e0e:	8e 93       	st	-X, r24
 e10:	82 81       	ldd	r24, Z+2	; 0x02
 e12:	93 81       	ldd	r25, Z+3	; 0x03
 e14:	13 96       	adiw	r26, 0x03	; 3
 e16:	9c 93       	st	X, r25
 e18:	8e 93       	st	-X, r24
 e1a:	12 97       	sbiw	r26, 0x02	; 2
 e1c:	e0 e0       	ldi	r30, 0x00	; 0
 e1e:	f0 e0       	ldi	r31, 0x00	; 0
 e20:	8a 81       	ldd	r24, Y+2	; 0x02
 e22:	9b 81       	ldd	r25, Y+3	; 0x03
 e24:	00 97       	sbiw	r24, 0x00	; 0
 e26:	19 f0       	breq	.+6      	; 0xe2e <free+0xe4>
 e28:	fe 01       	movw	r30, r28
 e2a:	ec 01       	movw	r28, r24
 e2c:	f9 cf       	rjmp	.-14     	; 0xe20 <free+0xd6>
 e2e:	ce 01       	movw	r24, r28
 e30:	02 96       	adiw	r24, 0x02	; 2
 e32:	28 81       	ld	r18, Y
 e34:	39 81       	ldd	r19, Y+1	; 0x01
 e36:	82 0f       	add	r24, r18
 e38:	93 1f       	adc	r25, r19
 e3a:	20 91 8e 01 	lds	r18, 0x018E
 e3e:	30 91 8f 01 	lds	r19, 0x018F
 e42:	28 17       	cp	r18, r24
 e44:	39 07       	cpc	r19, r25
 e46:	69 f4       	brne	.+26     	; 0xe62 <free+0x118>
 e48:	30 97       	sbiw	r30, 0x00	; 0
 e4a:	29 f4       	brne	.+10     	; 0xe56 <free+0x10c>
 e4c:	10 92 91 01 	sts	0x0191, r1
 e50:	10 92 90 01 	sts	0x0190, r1
 e54:	02 c0       	rjmp	.+4      	; 0xe5a <free+0x110>
 e56:	13 82       	std	Z+3, r1	; 0x03
 e58:	12 82       	std	Z+2, r1	; 0x02
 e5a:	d0 93 8f 01 	sts	0x018F, r29
 e5e:	c0 93 8e 01 	sts	0x018E, r28
 e62:	df 91       	pop	r29
 e64:	cf 91       	pop	r28
 e66:	08 95       	ret

00000e68 <strcmp>:
 e68:	fb 01       	movw	r30, r22
 e6a:	dc 01       	movw	r26, r24
 e6c:	8d 91       	ld	r24, X+
 e6e:	01 90       	ld	r0, Z+
 e70:	80 19       	sub	r24, r0
 e72:	01 10       	cpse	r0, r1
 e74:	d9 f3       	breq	.-10     	; 0xe6c <strcmp+0x4>
 e76:	99 0b       	sbc	r25, r25
 e78:	08 95       	ret

00000e7a <fdevopen>:
 e7a:	0f 93       	push	r16
 e7c:	1f 93       	push	r17
 e7e:	cf 93       	push	r28
 e80:	df 93       	push	r29
 e82:	ec 01       	movw	r28, r24
 e84:	8b 01       	movw	r16, r22
 e86:	00 97       	sbiw	r24, 0x00	; 0
 e88:	31 f4       	brne	.+12     	; 0xe96 <fdevopen+0x1c>
 e8a:	61 15       	cp	r22, r1
 e8c:	71 05       	cpc	r23, r1
 e8e:	19 f4       	brne	.+6      	; 0xe96 <fdevopen+0x1c>
 e90:	80 e0       	ldi	r24, 0x00	; 0
 e92:	90 e0       	ldi	r25, 0x00	; 0
 e94:	38 c0       	rjmp	.+112    	; 0xf06 <fdevopen+0x8c>
 e96:	6e e0       	ldi	r22, 0x0E	; 14
 e98:	70 e0       	ldi	r23, 0x00	; 0
 e9a:	81 e0       	ldi	r24, 0x01	; 1
 e9c:	90 e0       	ldi	r25, 0x00	; 0
 e9e:	0e 94 b5 07 	call	0xf6a	; 0xf6a <calloc>
 ea2:	fc 01       	movw	r30, r24
 ea4:	00 97       	sbiw	r24, 0x00	; 0
 ea6:	a1 f3       	breq	.-24     	; 0xe90 <fdevopen+0x16>
 ea8:	80 e8       	ldi	r24, 0x80	; 128
 eaa:	83 83       	std	Z+3, r24	; 0x03
 eac:	01 15       	cp	r16, r1
 eae:	11 05       	cpc	r17, r1
 eb0:	71 f0       	breq	.+28     	; 0xece <fdevopen+0x54>
 eb2:	13 87       	std	Z+11, r17	; 0x0b
 eb4:	02 87       	std	Z+10, r16	; 0x0a
 eb6:	81 e8       	ldi	r24, 0x81	; 129
 eb8:	83 83       	std	Z+3, r24	; 0x03
 eba:	80 91 92 01 	lds	r24, 0x0192
 ebe:	90 91 93 01 	lds	r25, 0x0193
 ec2:	89 2b       	or	r24, r25
 ec4:	21 f4       	brne	.+8      	; 0xece <fdevopen+0x54>
 ec6:	f0 93 93 01 	sts	0x0193, r31
 eca:	e0 93 92 01 	sts	0x0192, r30
 ece:	20 97       	sbiw	r28, 0x00	; 0
 ed0:	c9 f0       	breq	.+50     	; 0xf04 <fdevopen+0x8a>
 ed2:	d1 87       	std	Z+9, r29	; 0x09
 ed4:	c0 87       	std	Z+8, r28	; 0x08
 ed6:	83 81       	ldd	r24, Z+3	; 0x03
 ed8:	82 60       	ori	r24, 0x02	; 2
 eda:	83 83       	std	Z+3, r24	; 0x03
 edc:	80 91 94 01 	lds	r24, 0x0194
 ee0:	90 91 95 01 	lds	r25, 0x0195
 ee4:	89 2b       	or	r24, r25
 ee6:	71 f4       	brne	.+28     	; 0xf04 <fdevopen+0x8a>
 ee8:	f0 93 95 01 	sts	0x0195, r31
 eec:	e0 93 94 01 	sts	0x0194, r30
 ef0:	80 91 96 01 	lds	r24, 0x0196
 ef4:	90 91 97 01 	lds	r25, 0x0197
 ef8:	89 2b       	or	r24, r25
 efa:	21 f4       	brne	.+8      	; 0xf04 <fdevopen+0x8a>
 efc:	f0 93 97 01 	sts	0x0197, r31
 f00:	e0 93 96 01 	sts	0x0196, r30
 f04:	cf 01       	movw	r24, r30
 f06:	df 91       	pop	r29
 f08:	cf 91       	pop	r28
 f0a:	1f 91       	pop	r17
 f0c:	0f 91       	pop	r16
 f0e:	08 95       	ret

00000f10 <puts>:
 f10:	0f 93       	push	r16
 f12:	1f 93       	push	r17
 f14:	cf 93       	push	r28
 f16:	df 93       	push	r29
 f18:	e0 91 94 01 	lds	r30, 0x0194
 f1c:	f0 91 95 01 	lds	r31, 0x0195
 f20:	23 81       	ldd	r18, Z+3	; 0x03
 f22:	21 ff       	sbrs	r18, 1
 f24:	1b c0       	rjmp	.+54     	; 0xf5c <puts+0x4c>
 f26:	ec 01       	movw	r28, r24
 f28:	00 e0       	ldi	r16, 0x00	; 0
 f2a:	10 e0       	ldi	r17, 0x00	; 0
 f2c:	89 91       	ld	r24, Y+
 f2e:	60 91 94 01 	lds	r22, 0x0194
 f32:	70 91 95 01 	lds	r23, 0x0195
 f36:	db 01       	movw	r26, r22
 f38:	18 96       	adiw	r26, 0x08	; 8
 f3a:	ed 91       	ld	r30, X+
 f3c:	fc 91       	ld	r31, X
 f3e:	19 97       	sbiw	r26, 0x09	; 9
 f40:	88 23       	and	r24, r24
 f42:	31 f0       	breq	.+12     	; 0xf50 <puts+0x40>
 f44:	09 95       	icall
 f46:	89 2b       	or	r24, r25
 f48:	89 f3       	breq	.-30     	; 0xf2c <puts+0x1c>
 f4a:	0f ef       	ldi	r16, 0xFF	; 255
 f4c:	1f ef       	ldi	r17, 0xFF	; 255
 f4e:	ee cf       	rjmp	.-36     	; 0xf2c <puts+0x1c>
 f50:	8a e0       	ldi	r24, 0x0A	; 10
 f52:	09 95       	icall
 f54:	89 2b       	or	r24, r25
 f56:	11 f4       	brne	.+4      	; 0xf5c <puts+0x4c>
 f58:	c8 01       	movw	r24, r16
 f5a:	02 c0       	rjmp	.+4      	; 0xf60 <puts+0x50>
 f5c:	8f ef       	ldi	r24, 0xFF	; 255
 f5e:	9f ef       	ldi	r25, 0xFF	; 255
 f60:	df 91       	pop	r29
 f62:	cf 91       	pop	r28
 f64:	1f 91       	pop	r17
 f66:	0f 91       	pop	r16
 f68:	08 95       	ret

00000f6a <calloc>:
 f6a:	0f 93       	push	r16
 f6c:	1f 93       	push	r17
 f6e:	cf 93       	push	r28
 f70:	df 93       	push	r29
 f72:	86 9f       	mul	r24, r22
 f74:	80 01       	movw	r16, r0
 f76:	87 9f       	mul	r24, r23
 f78:	10 0d       	add	r17, r0
 f7a:	96 9f       	mul	r25, r22
 f7c:	10 0d       	add	r17, r0
 f7e:	11 24       	eor	r1, r1
 f80:	c8 01       	movw	r24, r16
 f82:	0e 94 0d 06 	call	0xc1a	; 0xc1a <malloc>
 f86:	ec 01       	movw	r28, r24
 f88:	00 97       	sbiw	r24, 0x00	; 0
 f8a:	29 f0       	breq	.+10     	; 0xf96 <calloc+0x2c>
 f8c:	a8 01       	movw	r20, r16
 f8e:	60 e0       	ldi	r22, 0x00	; 0
 f90:	70 e0       	ldi	r23, 0x00	; 0
 f92:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <memset>
 f96:	ce 01       	movw	r24, r28
 f98:	df 91       	pop	r29
 f9a:	cf 91       	pop	r28
 f9c:	1f 91       	pop	r17
 f9e:	0f 91       	pop	r16
 fa0:	08 95       	ret

00000fa2 <memset>:
 fa2:	dc 01       	movw	r26, r24
 fa4:	01 c0       	rjmp	.+2      	; 0xfa8 <memset+0x6>
 fa6:	6d 93       	st	X+, r22
 fa8:	41 50       	subi	r20, 0x01	; 1
 faa:	50 40       	sbci	r21, 0x00	; 0
 fac:	e0 f7       	brcc	.-8      	; 0xfa6 <memset+0x4>
 fae:	08 95       	ret

00000fb0 <_exit>:
 fb0:	f8 94       	cli

00000fb2 <__stop_program>:
 fb2:	ff cf       	rjmp	.-2      	; 0xfb2 <__stop_program>
