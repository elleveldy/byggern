
ByggernGruppe48H2015.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000248  00800100  00002c74  00002d08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000056  00800348  00800348  00002f50  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002f50  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000470  00000000  00000000  00002fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004420  00000000  00000000  0000341c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000018b4  00000000  00000000  0000783c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019ca  00000000  00000000  000090f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000cfc  00000000  00000000  0000aabc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b6b  00000000  00000000  0000b7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002717  00000000  00000000  0000c323  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003e0  00000000  00000000  0000ea3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <oled_store+0x32>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e4 e7       	ldi	r30, 0x74	; 116
     37c:	fc e2       	ldi	r31, 0x2C	; 44
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 34       	cpi	r26, 0x48	; 72
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a8 e4       	ldi	r26, 0x48	; 72
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ae 39       	cpi	r26, 0x9E	; 158
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <main>
     39e:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_init>:
#include <string.h>
#include <util/delay.h>



void can_init(int mode){
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	ec 01       	movw	r28, r24

	mcp2515_init();
     3ac:	0e 94 32 04 	call	0x864	; 0x864 <mcp2515_init>
	mcp2515_bit_modify(MCP_RXB0CTRL, MCP_MASK_FILTER, 0xff);
     3b0:	4f ef       	ldi	r20, 0xFF	; 255
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	60 e6       	ldi	r22, 0x60	; 96
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	80 e6       	ldi	r24, 0x60	; 96
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 14 04 	call	0x828	; 0x828 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXB1CTRL, MCP_MASK_FILTER, 0xff);
     3c0:	4f ef       	ldi	r20, 0xFF	; 255
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	60 e6       	ldi	r22, 0x60	; 96
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 e7       	ldi	r24, 0x70	; 112
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 14 04 	call	0x828	; 0x828 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, mode);
     3d0:	ae 01       	movw	r20, r28
     3d2:	60 ee       	ldi	r22, 0xE0	; 224
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	8f e0       	ldi	r24, 0x0F	; 15
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 14 04 	call	0x828	; 0x828 <mcp2515_bit_modify>
	DDRE &= ~(1 << PE0);
     3de:	30 98       	cbi	0x06, 0	; 6
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <can_transmit>:

void can_transmit(can_message* msg, int buffer_select){
     3e6:	8f 92       	push	r8
     3e8:	9f 92       	push	r9
     3ea:	af 92       	push	r10
     3ec:	bf 92       	push	r11
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	00 d0       	rcall	.+0      	; 0x400 <can_transmit+0x1a>
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
     404:	5c 01       	movw	r10, r24
     406:	7b 01       	movw	r14, r22
	
	mcp2515_bit_modify(buffer_select, 0x08, 0xff);
     408:	4f ef       	ldi	r20, 0xFF	; 255
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	68 e0       	ldi	r22, 0x08	; 8
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	c7 01       	movw	r24, r14
     412:	0e 94 14 04 	call	0x828	; 0x828 <mcp2515_bit_modify>
	
	while(mcp2515_read(buffer_select) & (1 << MCP_TXREQ));
     416:	c7 01       	movw	r24, r14
     418:	0e 94 ee 03 	call	0x7dc	; 0x7dc <mcp2515_read>
     41c:	83 fd       	sbrc	r24, 3
     41e:	fb cf       	rjmp	.-10     	; 0x416 <can_transmit+0x30>
	
	volatile uint8_t idl = MCP2515_MASK_IDL & (msg->id << 5);
     420:	f5 01       	movw	r30, r10
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	28 2f       	mov	r18, r24
     428:	22 95       	swap	r18
     42a:	22 0f       	add	r18, r18
     42c:	20 7e       	andi	r18, 0xE0	; 224
     42e:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t idh = MCP2515_MASK_IDH & (msg->id >> 3);
     430:	96 95       	lsr	r25
     432:	87 95       	ror	r24
     434:	96 95       	lsr	r25
     436:	87 95       	ror	r24
     438:	96 95       	lsr	r25
     43a:	87 95       	ror	r24
     43c:	8a 83       	std	Y+2, r24	; 0x02
	
	mcp2515_write(buffer_select + MCP2515_IDL_OFFSET, idl); //3 LSB
     43e:	69 81       	ldd	r22, Y+1	; 0x01
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	c7 01       	movw	r24, r14
     444:	02 96       	adiw	r24, 0x02	; 2
     446:	0e 94 fd 03 	call	0x7fa	; 0x7fa <mcp2515_write>
	mcp2515_write(buffer_select + MCP2515_IDH_OFFSET, idh); //8 MSB
     44a:	6a 81       	ldd	r22, Y+2	; 0x02
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	c7 01       	movw	r24, r14
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	0e 94 fd 03 	call	0x7fa	; 0x7fa <mcp2515_write>
	
	mcp2515_write(buffer_select + MCP2515_DLC_OFFSET, MCP2515_MASK_DLC & (msg->length));
     456:	f5 01       	movw	r30, r10
     458:	62 81       	ldd	r22, Z+2	; 0x02
     45a:	6f 70       	andi	r22, 0x0F	; 15
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	c7 01       	movw	r24, r14
     460:	05 96       	adiw	r24, 0x05	; 5
     462:	0e 94 fd 03 	call	0x7fa	; 0x7fa <mcp2515_write>
	
	
	for(int i = 0; i < msg->length; i++){
     466:	f5 01       	movw	r30, r10
     468:	82 81       	ldd	r24, Z+2	; 0x02
     46a:	88 23       	and	r24, r24
     46c:	d9 f0       	breq	.+54     	; 0x4a4 <can_transmit+0xbe>
     46e:	65 01       	movw	r12, r10
     470:	f3 e0       	ldi	r31, 0x03	; 3
     472:	cf 0e       	add	r12, r31
     474:	d1 1c       	adc	r13, r1
     476:	00 e0       	ldi	r16, 0x00	; 0
     478:	10 e0       	ldi	r17, 0x00	; 0
     47a:	47 01       	movw	r8, r14
     47c:	86 e0       	ldi	r24, 0x06	; 6
     47e:	88 0e       	add	r8, r24
     480:	91 1c       	adc	r9, r1
		mcp2515_write(buffer_select + MCP2515_TXB_OFFSET + i, msg->data[i]);
     482:	f6 01       	movw	r30, r12
     484:	61 91       	ld	r22, Z+
     486:	6f 01       	movw	r12, r30
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	c4 01       	movw	r24, r8
     48c:	80 0f       	add	r24, r16
     48e:	91 1f       	adc	r25, r17
     490:	0e 94 fd 03 	call	0x7fa	; 0x7fa <mcp2515_write>
	mcp2515_write(buffer_select + MCP2515_IDH_OFFSET, idh); //8 MSB
	
	mcp2515_write(buffer_select + MCP2515_DLC_OFFSET, MCP2515_MASK_DLC & (msg->length));
	
	
	for(int i = 0; i < msg->length; i++){
     494:	0f 5f       	subi	r16, 0xFF	; 255
     496:	1f 4f       	sbci	r17, 0xFF	; 255
     498:	f5 01       	movw	r30, r10
     49a:	82 81       	ldd	r24, Z+2	; 0x02
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	08 17       	cp	r16, r24
     4a0:	19 07       	cpc	r17, r25
     4a2:	7c f3       	brlt	.-34     	; 0x482 <can_transmit+0x9c>
		
	}
	
	int buffer_control;
	
	if (buffer_select == MCP_TXB0CTRL){
     4a4:	f0 e3       	ldi	r31, 0x30	; 48
     4a6:	ef 16       	cp	r14, r31
     4a8:	f1 04       	cpc	r15, r1
     4aa:	59 f0       	breq	.+22     	; 0x4c2 <can_transmit+0xdc>
		buffer_control = MCP_RTS_TX0;
	}
	else if (buffer_select == MCP_TXB1CTRL){
     4ac:	80 e4       	ldi	r24, 0x40	; 64
     4ae:	e8 16       	cp	r14, r24
     4b0:	f1 04       	cpc	r15, r1
     4b2:	51 f0       	breq	.+20     	; 0x4c8 <can_transmit+0xe2>
		buffer_control = MCP_RTS_TX1;
	}
	else if (buffer_select == MCP_TXB2CTRL){
     4b4:	e0 e5       	ldi	r30, 0x50	; 80
     4b6:	ee 16       	cp	r14, r30
     4b8:	f1 04       	cpc	r15, r1
     4ba:	51 f4       	brne	.+20     	; 0x4d0 <can_transmit+0xea>
		buffer_control=MCP_RTS_TX2;
     4bc:	84 e8       	ldi	r24, 0x84	; 132
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	05 c0       	rjmp	.+10     	; 0x4cc <can_transmit+0xe6>
	}
	
	int buffer_control;
	
	if (buffer_select == MCP_TXB0CTRL){
		buffer_control = MCP_RTS_TX0;
     4c2:	81 e8       	ldi	r24, 0x81	; 129
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <can_transmit+0xe6>
	}
	else if (buffer_select == MCP_TXB1CTRL){
		buffer_control = MCP_RTS_TX1;
     4c8:	82 e8       	ldi	r24, 0x82	; 130
     4ca:	90 e0       	ldi	r25, 0x00	; 0
		return; 
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
     4cc:	0e 94 0f 04 	call	0x81e	; 0x81e <mcp2515_request_to_send>
}
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	9f 90       	pop	r9
     4ea:	8f 90       	pop	r8
     4ec:	08 95       	ret

000004ee <can_poll_interrupt>:
}


uint8_t can_poll_interrupt(){
	
	while(!(PINE & (1 << PE0))){}
     4ee:	28 9b       	sbis	0x05, 0	; 5
     4f0:	fe cf       	rjmp	.-4      	; 0x4ee <can_poll_interrupt>
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
     4f2:	8c e2       	ldi	r24, 0x2C	; 44
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <mcp2515_read>
     4fa:	80 fd       	sbrc	r24, 0
     4fc:	08 c0       	rjmp	.+16     	; 0x50e <__stack+0xf>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
	}
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
     4fe:	8c e2       	ldi	r24, 0x2C	; 44
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 ee 03 	call	0x7dc	; 0x7dc <mcp2515_read>
     506:	81 ff       	sbrs	r24, 1
     508:	04 c0       	rjmp	.+8      	; 0x512 <__stack+0x13>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
     50a:	80 e7       	ldi	r24, 0x70	; 112
     50c:	08 95       	ret
	
	while(!(PINE & (1 << PE0))){}
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
     50e:	80 e6       	ldi	r24, 0x60	; 96
     510:	08 95       	ret
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
	}
	return -1;
     512:	8f ef       	ldi	r24, 0xFF	; 255
}
     514:	08 95       	ret

00000516 <can_recieve>:
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
}

can_message can_recieve(can_message* msg){
     516:	7f 92       	push	r7
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	2b 97       	sbiw	r28, 0x0b	; 11
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	6c 01       	movw	r12, r24
	can_message m;
	
	uint8_t buffer_select = can_poll_interrupt();
     542:	0e 94 77 02 	call	0x4ee	; 0x4ee <can_poll_interrupt>
     546:	98 2e       	mov	r9, r24
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
     548:	08 2f       	mov	r16, r24
     54a:	10 e0       	ldi	r17, 0x00	; 0
     54c:	c8 01       	movw	r24, r16
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	0e 94 ee 03 	call	0x7dc	; 0x7dc <mcp2515_read>
     554:	7c 01       	movw	r14, r24
     556:	c8 01       	movw	r24, r16
     558:	02 96       	adiw	r24, 0x02	; 2
     55a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <mcp2515_read>
     55e:	95 95       	asr	r25
     560:	87 95       	ror	r24
     562:	95 95       	asr	r25
     564:	87 95       	ror	r24
     566:	95 95       	asr	r25
     568:	87 95       	ror	r24
     56a:	95 95       	asr	r25
     56c:	87 95       	ror	r24
     56e:	95 95       	asr	r25
     570:	87 95       	ror	r24
     572:	ee 0c       	add	r14, r14
     574:	ff 1c       	adc	r15, r15
     576:	ee 0c       	add	r14, r14
     578:	ff 1c       	adc	r15, r15
     57a:	ee 0c       	add	r14, r14
     57c:	ff 1c       	adc	r15, r15
     57e:	5c 01       	movw	r10, r24
     580:	ae 28       	or	r10, r14
     582:	bf 28       	or	r11, r15
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
     584:	c8 01       	movw	r24, r16
     586:	05 96       	adiw	r24, 0x05	; 5
     588:	0e 94 ee 03 	call	0x7dc	; 0x7dc <mcp2515_read>
     58c:	8f 70       	andi	r24, 0x0F	; 15
     58e:	78 2e       	mov	r7, r24
	
	for(uint8_t i = 0; i < m.length; i++){
     590:	b1 f0       	breq	.+44     	; 0x5be <can_recieve+0xa8>
     592:	8e 01       	movw	r16, r28
     594:	0c 5f       	subi	r16, 0xFC	; 252
     596:	1f 4f       	sbci	r17, 0xFF	; 255
     598:	81 2c       	mov	r8, r1
     59a:	ce 01       	movw	r24, r28
     59c:	80 95       	com	r24
     59e:	90 95       	com	r25
     5a0:	03 96       	adiw	r24, 0x03	; 3
     5a2:	7c 01       	movw	r14, r24
     5a4:	e9 0c       	add	r14, r9
     5a6:	f1 1c       	adc	r15, r1
		m.data[i] = mcp2515_read(buffer_select + MCP2515_RXB_OFFSET + i);// + i, msg->data[i]);
     5a8:	c7 01       	movw	r24, r14
     5aa:	80 0f       	add	r24, r16
     5ac:	91 1f       	adc	r25, r17
     5ae:	0e 94 ee 03 	call	0x7dc	; 0x7dc <mcp2515_read>
     5b2:	f8 01       	movw	r30, r16
     5b4:	81 93       	st	Z+, r24
     5b6:	8f 01       	movw	r16, r30
	uint8_t buffer_select = can_poll_interrupt();
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
	
	for(uint8_t i = 0; i < m.length; i++){
     5b8:	83 94       	inc	r8
     5ba:	87 10       	cpse	r8, r7
     5bc:	f5 cf       	rjmp	.-22     	; 0x5a8 <can_recieve+0x92>
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	
	switch(buffer_select){
     5be:	f0 e6       	ldi	r31, 0x60	; 96
     5c0:	9f 16       	cp	r9, r31
     5c2:	21 f0       	breq	.+8      	; 0x5cc <can_recieve+0xb6>
     5c4:	80 e7       	ldi	r24, 0x70	; 112
     5c6:	98 16       	cp	r9, r24
     5c8:	51 f0       	breq	.+20     	; 0x5de <can_recieve+0xc8>
     5ca:	11 c0       	rjmp	.+34     	; 0x5ee <can_recieve+0xd8>
		case MCP_RXB0CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	61 e0       	ldi	r22, 0x01	; 1
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	8c e2       	ldi	r24, 0x2C	; 44
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 14 04 	call	0x828	; 0x828 <mcp2515_bit_modify>
		break;
     5dc:	08 c0       	rjmp	.+16     	; 0x5ee <can_recieve+0xd8>
		case MCP_RXB1CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	62 e0       	ldi	r22, 0x02	; 2
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	8c e2       	ldi	r24, 0x2C	; 44
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 14 04 	call	0x828	; 0x828 <mcp2515_bit_modify>
		break;
	}
	
	return m;
     5ee:	ba 82       	std	Y+2, r11	; 0x02
     5f0:	a9 82       	std	Y+1, r10	; 0x01
     5f2:	7b 82       	std	Y+3, r7	; 0x03
     5f4:	8b e0       	ldi	r24, 0x0B	; 11
     5f6:	fe 01       	movw	r30, r28
     5f8:	31 96       	adiw	r30, 0x01	; 1
     5fa:	d6 01       	movw	r26, r12
     5fc:	01 90       	ld	r0, Z+
     5fe:	0d 92       	st	X+, r0
     600:	8a 95       	dec	r24
     602:	e1 f7       	brne	.-8      	; 0x5fc <can_recieve+0xe6>
}
     604:	c6 01       	movw	r24, r12
     606:	2b 96       	adiw	r28, 0x0b	; 11
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	cd bf       	out	0x3d, r28	; 61
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	ff 90       	pop	r15
     61c:	ef 90       	pop	r14
     61e:	df 90       	pop	r13
     620:	cf 90       	pop	r12
     622:	bf 90       	pop	r11
     624:	af 90       	pop	r10
     626:	9f 90       	pop	r9
     628:	8f 90       	pop	r8
     62a:	7f 90       	pop	r7
     62c:	08 95       	ret

0000062e <can_test_loopback>:

In other words, Node 2 is told to test the can driver
by a can message. Yes, CAN see the irony.
**********************************************************/

void can_test_loopback(){
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
     636:	a1 97       	sbiw	r28, 0x21	; 33
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	cd bf       	out	0x3d, r28	; 61
	can_init(MODE_LOOPBACK);
     642:	80 e4       	ldi	r24, 0x40	; 64
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
	
	can_message msg;
	msg.id = CAN_TEST_LOOPBACK;
     64a:	8c e2       	ldi	r24, 0x2C	; 44
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	9a 83       	std	Y+2, r25	; 0x02
     650:	89 83       	std	Y+1, r24	; 0x01
	msg.length = 1;
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	8b 83       	std	Y+3, r24	; 0x03
	msg.data[0] = 'T';
     656:	84 e5       	ldi	r24, 0x54	; 84
     658:	8c 83       	std	Y+4, r24	; 0x04
	
	can_transmit(&msg, MCP_TXB0CTRL);
     65a:	60 e3       	ldi	r22, 0x30	; 48
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	ce 01       	movw	r24, r28
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <can_transmit>
	
	can_message recieved;
	can_message done = can_recieve(&recieved);
     666:	be 01       	movw	r22, r28
     668:	64 5f       	subi	r22, 0xF4	; 244
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	ce 01       	movw	r24, r28
     66e:	47 96       	adiw	r24, 0x17	; 23
     670:	0e 94 8b 02 	call	0x516	; 0x516 <can_recieve>
	
	printf("\n\nSend ID = 10\tRecieved ID = %d\nSend Length = 1\tRecieved Length = %d\nSend Data = 'T'\tRecieved Data = %c\n\n", done.id, done.length, done.data[0]);
     674:	8a 8d       	ldd	r24, Y+26	; 0x1a
     676:	1f 92       	push	r1
     678:	8f 93       	push	r24
     67a:	89 8d       	ldd	r24, Y+25	; 0x19
     67c:	1f 92       	push	r1
     67e:	8f 93       	push	r24
     680:	88 8d       	ldd	r24, Y+24	; 0x18
     682:	8f 93       	push	r24
     684:	8f 89       	ldd	r24, Y+23	; 0x17
     686:	8f 93       	push	r24
     688:	81 e1       	ldi	r24, 0x11	; 17
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	9f 93       	push	r25
     68e:	8f 93       	push	r24
     690:	0e 94 a6 12 	call	0x254c	; 0x254c <printf>
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	de bf       	out	0x3e, r29	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	cd bf       	out	0x3d, r28	; 61
	
	
}
     69e:	a1 96       	adiw	r28, 0x21	; 33
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	08 95       	ret

000006b0 <canjoy_transmit>:


uint16_t CANJOY_ID = 7;

void canjoy_transmit()
{
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	cd b7       	in	r28, 0x3d	; 61
     6b6:	de b7       	in	r29, 0x3e	; 62
     6b8:	2b 97       	sbiw	r28, 0x0b	; 11
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	cd bf       	out	0x3d, r28	; 61
	can_message joy;
	joy.id = GAME_ID;
     6c4:	87 e0       	ldi	r24, 0x07	; 7
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	9a 83       	std	Y+2, r25	; 0x02
     6ca:	89 83       	std	Y+1, r24	; 0x01
	joy.length = 7;
     6cc:	8b 83       	std	Y+3, r24	; 0x03
	//printf("ID set to 7\n");
	
	joy.data[0] = joystick_read_x();
     6ce:	0e 94 a7 09 	call	0x134e	; 0x134e <joystick_read_x>
     6d2:	8c 83       	std	Y+4, r24	; 0x04
	joy.data[1] = joystick_read_y();
     6d4:	0e 94 b2 09 	call	0x1364	; 0x1364 <joystick_read_y>
     6d8:	8d 83       	std	Y+5, r24	; 0x05
	joy.data[2] = joystick_button_read();
     6da:	0e 94 e7 09 	call	0x13ce	; 0x13ce <joystick_button_read>
     6de:	8e 83       	std	Y+6, r24	; 0x06
	joy.data[3] = slider_left_read();
     6e0:	0e 94 c7 09 	call	0x138e	; 0x138e <slider_left_read>
     6e4:	8f 83       	std	Y+7, r24	; 0x07
	joy.data[4] = slider_right_read();
     6e6:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <slider_right_read>
     6ea:	88 87       	std	Y+8, r24	; 0x08
	joy.data[5] = button_left_read();
     6ec:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <button_left_read>
     6f0:	89 87       	std	Y+9, r24	; 0x09
	joy.data[6] = button_right_read();
     6f2:	0e 94 ef 09 	call	0x13de	; 0x13de <button_right_read>
     6f6:	8a 87       	std	Y+10, r24	; 0x0a
	
	can_transmit(&joy, MCP_TXB0CTRL);
     6f8:	60 e3       	ldi	r22, 0x30	; 48
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ce 01       	movw	r24, r28
     6fe:	01 96       	adiw	r24, 0x01	; 1
     700:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <can_transmit>
	
	

}
     704:	2b 96       	adiw	r28, 0x0b	; 11
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	de bf       	out	0x3e, r29	; 62
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <canjoy_recieve>:


//Not needed in Node1
can_message canjoy_recieve(){
     716:	8f 92       	push	r8
     718:	9f 92       	push	r9
     71a:	af 92       	push	r10
     71c:	bf 92       	push	r11
     71e:	cf 92       	push	r12
     720:	df 92       	push	r13
     722:	ef 92       	push	r14
     724:	ff 92       	push	r15
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	2b 97       	sbiw	r28, 0x0b	; 11
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	de bf       	out	0x3e, r29	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	cd bf       	out	0x3d, r28	; 61
     73e:	8c 01       	movw	r16, r24
	
	can_message unused;
	
	can_message joy = can_recieve(&unused);
     740:	be 01       	movw	r22, r28
     742:	6f 5f       	subi	r22, 0xFF	; 255
     744:	7f 4f       	sbci	r23, 0xFF	; 255
     746:	0e 94 8b 02 	call	0x516	; 0x516 <can_recieve>
     74a:	f8 01       	movw	r30, r16
     74c:	82 80       	ldd	r8, Z+2	; 0x02
     74e:	93 80       	ldd	r9, Z+3	; 0x03
     750:	a4 80       	ldd	r10, Z+4	; 0x04
     752:	b5 80       	ldd	r11, Z+5	; 0x05
     754:	c6 80       	ldd	r12, Z+6	; 0x06
     756:	d7 80       	ldd	r13, Z+7	; 0x07
     758:	e0 84       	ldd	r14, Z+8	; 0x08
     75a:	f1 84       	ldd	r15, Z+9	; 0x09
	
	if(joy.id == GAME_ID){
     75c:	80 81       	ld	r24, Z
     75e:	91 81       	ldd	r25, Z+1	; 0x01
     760:	07 97       	sbiw	r24, 0x07	; 7
     762:	f1 f4       	brne	.+60     	; 0x7a0 <canjoy_recieve+0x8a>
		printf("Correct ID\n");
     764:	8c ea       	ldi	r24, 0xAC	; 172
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	0e 94 ba 12 	call	0x2574	; 0x2574 <puts>
		canjoy_msg = joy;
     76c:	f8 01       	movw	r30, r16
     76e:	82 82       	std	Z+2, r8	; 0x02
     770:	93 82       	std	Z+3, r9	; 0x03
     772:	a4 82       	std	Z+4, r10	; 0x04
     774:	b5 82       	std	Z+5, r11	; 0x05
     776:	c6 82       	std	Z+6, r12	; 0x06
     778:	d7 82       	std	Z+7, r13	; 0x07
     77a:	e0 86       	std	Z+8, r14	; 0x08
     77c:	f1 86       	std	Z+9, r15	; 0x09
     77e:	8b e0       	ldi	r24, 0x0B	; 11
     780:	ac e4       	ldi	r26, 0x4C	; 76
     782:	b3 e0       	ldi	r27, 0x03	; 3
     784:	01 90       	ld	r0, Z+
     786:	0d 92       	st	X+, r0
     788:	8a 95       	dec	r24
     78a:	e1 f7       	brne	.-8      	; 0x784 <canjoy_recieve+0x6e>
		return joy;
     78c:	f8 01       	movw	r30, r16
     78e:	82 82       	std	Z+2, r8	; 0x02
     790:	93 82       	std	Z+3, r9	; 0x03
     792:	a4 82       	std	Z+4, r10	; 0x04
     794:	b5 82       	std	Z+5, r11	; 0x05
     796:	c6 82       	std	Z+6, r12	; 0x06
     798:	d7 82       	std	Z+7, r13	; 0x07
     79a:	e0 86       	std	Z+8, r14	; 0x08
     79c:	f1 86       	std	Z+9, r15	; 0x09
     79e:	0a c0       	rjmp	.+20     	; 0x7b4 <canjoy_recieve+0x9e>
	joy.data[2] = 0;
	joy.data[3] = 0;
	joy.data[4] = 0;
	joy.data[5] = 0;
	joy.data[6] = 0;
	return joy;
     7a0:	87 e0       	ldi	r24, 0x07	; 7
     7a2:	f8 01       	movw	r30, r16
     7a4:	82 83       	std	Z+2, r24	; 0x02
     7a6:	13 82       	std	Z+3, r1	; 0x03
     7a8:	14 82       	std	Z+4, r1	; 0x04
     7aa:	15 82       	std	Z+5, r1	; 0x05
     7ac:	16 82       	std	Z+6, r1	; 0x06
     7ae:	17 82       	std	Z+7, r1	; 0x07
     7b0:	10 86       	std	Z+8, r1	; 0x08
     7b2:	11 86       	std	Z+9, r1	; 0x09
}
     7b4:	c8 01       	movw	r24, r16
     7b6:	2b 96       	adiw	r28, 0x0b	; 11
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	df 90       	pop	r13
     7d0:	cf 90       	pop	r12
     7d2:	bf 90       	pop	r11
     7d4:	af 90       	pop	r10
     7d6:	9f 90       	pop	r9
     7d8:	8f 90       	pop	r8
     7da:	08 95       	ret

000007dc <mcp2515_read>:
	}
	return 0;
}


int mcp2515_read(int address){
     7dc:	cf 93       	push	r28
     7de:	c8 2f       	mov	r28, r24
	
	int result;
	
	PORTB &= ~(1 << MCP2515_CS);
     7e0:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_READ);
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <spi_write>
	spi_write(address);
     7e8:	8c 2f       	mov	r24, r28
     7ea:	0e 94 50 04 	call	0x8a0	; 0x8a0 <spi_write>
	
	result = spi_write(0x00);
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <spi_write>
	
	PORTB |= (1 << MCP2515_CS);
     7f4:	c4 9a       	sbi	0x18, 4	; 24
	return result;
}
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <mcp2515_write>:

void mcp2515_write(int address, int data){
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	d8 2f       	mov	r29, r24
     800:	c6 2f       	mov	r28, r22
	
	PORTB &= ~(1 << MCP2515_CS);
     802:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_WRITE);
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	0e 94 50 04 	call	0x8a0	; 0x8a0 <spi_write>
	spi_write(address);
     80a:	8d 2f       	mov	r24, r29
     80c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <spi_write>
	spi_write(data);
     810:	8c 2f       	mov	r24, r28
     812:	0e 94 50 04 	call	0x8a0	; 0x8a0 <spi_write>
	
	PORTB |= (1 << MCP2515_CS);	
     816:	c4 9a       	sbi	0x18, 4	; 24
}
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <mcp2515_request_to_send>:

void mcp2515_request_to_send(int buffer_select){
	PORTB &= ~(1 << MCP2515_CS);
     81e:	c4 98       	cbi	0x18, 4	; 24
	spi_write(buffer_select);
     820:	0e 94 50 04 	call	0x8a0	; 0x8a0 <spi_write>
	PORTB |= (1 << MCP2515_CS);
     824:	c4 9a       	sbi	0x18, 4	; 24
     826:	08 95       	ret

00000828 <mcp2515_bit_modify>:
}

void mcp2515_bit_modify(int address, int mask, int data){
     828:	1f 93       	push	r17
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	18 2f       	mov	r17, r24
     830:	d6 2f       	mov	r29, r22
     832:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS);
     834:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_BITMOD);
     836:	85 e0       	ldi	r24, 0x05	; 5
     838:	0e 94 50 04 	call	0x8a0	; 0x8a0 <spi_write>
	spi_write(address);
     83c:	81 2f       	mov	r24, r17
     83e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <spi_write>
	spi_write(mask);
     842:	8d 2f       	mov	r24, r29
     844:	0e 94 50 04 	call	0x8a0	; 0x8a0 <spi_write>
	spi_write(data);
     848:	8c 2f       	mov	r24, r28
     84a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <spi_write>

	PORTB |= (1 << MCP2515_CS);
     84e:	c4 9a       	sbi	0x18, 4	; 24
	
}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	08 95       	ret

00000858 <mcp2515_reset>:

void mcp2515_reset(){
	PORTB &= ~(1 << MCP2515_CS);
     858:	c4 98       	cbi	0x18, 4	; 24
	spi_write(MCP_RESET);
     85a:	80 ec       	ldi	r24, 0xC0	; 192
     85c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <spi_write>
	PORTB |= (1 << MCP2515_CS);
     860:	c4 9a       	sbi	0x18, 4	; 24
     862:	08 95       	ret

00000864 <mcp2515_init>:
#include "SPI.h"
#include "mcp2515_define.h"


int mcp2515_init(){
	spi_init();
     864:	0e 94 49 04 	call	0x892	; 0x892 <spi_init>
	mcp2515_reset();
     868:	0e 94 2c 04 	call	0x858	; 0x858 <mcp2515_reset>
	
	uint8_t value = mcp2515_read(MCP_CANSTAT);
     86c:	8e e0       	ldi	r24, 0x0E	; 14
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 ee 03 	call	0x7dc	; 0x7dc <mcp2515_read>
	if((value & MODE_MASK) != MODE_CONFIG){
     874:	80 7e       	andi	r24, 0xE0	; 224
     876:	99 27       	eor	r25, r25
     878:	80 38       	cpi	r24, 0x80	; 128
     87a:	91 05       	cpc	r25, r1
     87c:	39 f0       	breq	.+14     	; 0x88c <mcp2515_init+0x28>
		printf("ERROR: MCP2515 is NOT in config mode after reset!\n");
     87e:	87 eb       	ldi	r24, 0xB7	; 183
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	0e 94 ba 12 	call	0x2574	; 0x2574 <puts>
		return 1;
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	08 95       	ret
	}
	return 0;
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
}
     890:	08 95       	ret

00000892 <spi_init>:
#include "SPI.h"
#include <avr/io.h>

void spi_init(){
			//SI out		SS out		SCK out
	DDRB |= ( 1 << PB5) | (1 << PB4) | (1 << PB7);
     892:	87 b3       	in	r24, 0x17	; 23
     894:	80 6b       	ori	r24, 0xB0	; 176
     896:	87 bb       	out	0x17, r24	; 23
			//SO in
	DDRB &= ~(1 << PB6);
     898:	be 98       	cbi	0x17, 6	; 23
	
	//								 frequency / 16
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     89a:	81 e5       	ldi	r24, 0x51	; 81
     89c:	8d b9       	out	0x0d, r24	; 13
     89e:	08 95       	ret

000008a0 <spi_write>:

//both read and write
int spi_write(char data){
	//SPDR = data;
	//while(!(SPSR & (1<<SPIF)));
	SPDR = data;
     8a0:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     8a2:	77 9b       	sbis	0x0e, 7	; 14
     8a4:	fe cf       	rjmp	.-4      	; 0x8a2 <spi_write+0x2>
	return SPDR;
     8a6:	8f b1       	in	r24, 0x0f	; 15
}
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	08 95       	ret

000008ac <uart_Transmit>:
}

void uart_Transmit( unsigned char data ){
	
	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     8ac:	5d 9b       	sbis	0x0b, 5	; 11
     8ae:	fe cf       	rjmp	.-4      	; 0x8ac <uart_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;
     8b0:	8c b9       	out	0x0c, r24	; 12
     8b2:	08 95       	ret

000008b4 <uart_Receive>:

unsigned char uart_Receive(void){
	
	//Wait for data to be received
	
	while( !(UCSR0A & (1<<RXC0)) );
     8b4:	5f 9b       	sbis	0x0b, 7	; 11
     8b6:	fe cf       	rjmp	.-4      	; 0x8b4 <uart_Receive>
	
	//Get and return received data from buffer
	
	return UDR0;
     8b8:	8c b1       	in	r24, 0x0c	; 12
}
     8ba:	08 95       	ret

000008bc <uart_Init>:
#include "uart.h"

void uart_Init(unsigned int ubrr){
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     8bc:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     8be:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN1)|(1<<TXEN1);
     8c0:	88 e1       	ldi	r24, 0x18	; 24
     8c2:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8data, 1stop bit
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
     8c4:	86 e8       	ldi	r24, 0x86	; 134
     8c6:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uart_Transmit, uart_Receive);
     8c8:	6a e5       	ldi	r22, 0x5A	; 90
     8ca:	74 e0       	ldi	r23, 0x04	; 4
     8cc:	86 e5       	ldi	r24, 0x56	; 86
     8ce:	94 e0       	ldi	r25, 0x04	; 4
     8d0:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <fdevopen>
     8d4:	08 95       	ret

000008d6 <gui_print_menu>:

}


//Prints the menu you're in and it's submenues
void gui_print_menu(Menuitem* menu){
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
	
	Menuitem* parent = menu_parent(menu);
     8e2:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <menu_parent>
     8e6:	7c 01       	movw	r14, r24
	
	
	oled_clear_screen();
     8e8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <oled_clear_screen>
	oled_store_string(menu_name(parent), 0, 0);
     8ec:	c7 01       	movw	r24, r14
     8ee:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <menu_name>
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	0e 94 cc 05 	call	0xb98	; 0xb98 <oled_store_string>
	
	
	for(int n = 0; n < parent->num_submenus; n++){
     8fe:	d7 01       	movw	r26, r14
     900:	8c 91       	ld	r24, X
     902:	88 23       	and	r24, r24
     904:	e9 f0       	breq	.+58     	; 0x940 <gui_print_menu+0x6a>
     906:	00 e0       	ldi	r16, 0x00	; 0
     908:	10 e0       	ldi	r17, 0x00	; 0
     90a:	c0 e0       	ldi	r28, 0x00	; 0
     90c:	d0 e0       	ldi	r29, 0x00	; 0
		oled_store_string(menu_name(parent->submenus[n] ), 8, n+1);
     90e:	21 96       	adiw	r28, 0x01	; 1
     910:	d7 01       	movw	r26, r14
     912:	11 96       	adiw	r26, 0x01	; 1
     914:	ed 91       	ld	r30, X+
     916:	fc 91       	ld	r31, X
     918:	12 97       	sbiw	r26, 0x02	; 2
     91a:	e0 0f       	add	r30, r16
     91c:	f1 1f       	adc	r31, r17
     91e:	80 81       	ld	r24, Z
     920:	91 81       	ldd	r25, Z+1	; 0x01
     922:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <menu_name>
     926:	ae 01       	movw	r20, r28
     928:	68 e0       	ldi	r22, 0x08	; 8
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	0e 94 cc 05 	call	0xb98	; 0xb98 <oled_store_string>
     930:	0e 5f       	subi	r16, 0xFE	; 254
     932:	1f 4f       	sbci	r17, 0xFF	; 255
	
	oled_clear_screen();
	oled_store_string(menu_name(parent), 0, 0);
	
	
	for(int n = 0; n < parent->num_submenus; n++){
     934:	f7 01       	movw	r30, r14
     936:	80 81       	ld	r24, Z
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	c8 17       	cp	r28, r24
     93c:	d9 07       	cpc	r29, r25
     93e:	3c f3       	brlt	.-50     	; 0x90e <gui_print_menu+0x38>
		oled_store_string(menu_name(parent->submenus[n] ), 8, n+1);
		//oled_store((char[sizeof(menu_name(parent->submenus[n])) + 1]){menu_name(parent->submenus[n])}, (int[2]){0,0});
		
	}
}
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	08 95       	ret

0000094e <gui_navigate>:


//uses global variable menu_selector and changes 
//what submenu it points to according to joystick movement.
//Must be run in a while loop
void gui_navigate(){
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
	
	
	//If we're pointing at Main menu, point to first submenu instead
	if(strcmp(menu_selector->name, "Main") == 0){
     952:	c0 91 5d 03 	lds	r28, 0x035D
     956:	d0 91 5e 03 	lds	r29, 0x035E
     95a:	69 ee       	ldi	r22, 0xE9	; 233
     95c:	71 e0       	ldi	r23, 0x01	; 1
     95e:	8d 81       	ldd	r24, Y+5	; 0x05
     960:	9e 81       	ldd	r25, Y+6	; 0x06
     962:	0e 94 52 12 	call	0x24a4	; 0x24a4 <strcmp>
     966:	89 2b       	or	r24, r25
     968:	39 f4       	brne	.+14     	; 0x978 <gui_navigate+0x2a>
		menu_selector = menu_submenu(menu_selector);
     96a:	ce 01       	movw	r24, r28
     96c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <menu_submenu>
     970:	90 93 5e 03 	sts	0x035E, r25
     974:	80 93 5d 03 	sts	0x035D, r24
	}

	int threshold = 70;
	
	
	if(joystick_x_value() > threshold){
     978:	0e 94 bd 09 	call	0x137a	; 0x137a <joystick_x_value>
     97c:	87 34       	cpi	r24, 0x47	; 71
     97e:	91 05       	cpc	r25, r1
     980:	a4 f0       	brlt	.+40     	; 0x9aa <gui_navigate+0x5c>
		menu_selector = menu_submenu(menu_selector);
     982:	80 91 5d 03 	lds	r24, 0x035D
     986:	90 91 5e 03 	lds	r25, 0x035E
     98a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <menu_submenu>
     98e:	90 93 5e 03 	sts	0x035E, r25
     992:	80 93 5d 03 	sts	0x035D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     996:	2f ef       	ldi	r18, 0xFF	; 255
     998:	8f ef       	ldi	r24, 0xFF	; 255
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	21 50       	subi	r18, 0x01	; 1
     99e:	80 40       	sbci	r24, 0x00	; 0
     9a0:	90 40       	sbci	r25, 0x00	; 0
     9a2:	e1 f7       	brne	.-8      	; 0x99c <gui_navigate+0x4e>
     9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <gui_navigate+0x58>
     9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <gui_navigate+0x5a>
     9a8:	6a c0       	rjmp	.+212    	; 0xa7e <gui_navigate+0x130>
		_delay_ms(200);
	}
	else if(joystick_x_value() < -threshold){
     9aa:	0e 94 bd 09 	call	0x137a	; 0x137a <joystick_x_value>
     9ae:	8a 3b       	cpi	r24, 0xBA	; 186
     9b0:	9f 4f       	sbci	r25, 0xFF	; 255
     9b2:	a4 f4       	brge	.+40     	; 0x9dc <gui_navigate+0x8e>
		menu_selector = menu_parent(menu_selector);
     9b4:	80 91 5d 03 	lds	r24, 0x035D
     9b8:	90 91 5e 03 	lds	r25, 0x035E
     9bc:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <menu_parent>
     9c0:	90 93 5e 03 	sts	0x035E, r25
     9c4:	80 93 5d 03 	sts	0x035D, r24
     9c8:	8f ef       	ldi	r24, 0xFF	; 255
     9ca:	9f ef       	ldi	r25, 0xFF	; 255
     9cc:	22 e0       	ldi	r18, 0x02	; 2
     9ce:	81 50       	subi	r24, 0x01	; 1
     9d0:	90 40       	sbci	r25, 0x00	; 0
     9d2:	20 40       	sbci	r18, 0x00	; 0
     9d4:	e1 f7       	brne	.-8      	; 0x9ce <gui_navigate+0x80>
     9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <gui_navigate+0x8a>
     9d8:	00 c0       	rjmp	.+0      	; 0x9da <gui_navigate+0x8c>
     9da:	51 c0       	rjmp	.+162    	; 0xa7e <gui_navigate+0x130>
		_delay_ms(200);
		
	}
	else if(joystick_y_value() > threshold){
     9dc:	0e 94 c2 09 	call	0x1384	; 0x1384 <joystick_y_value>
     9e0:	87 34       	cpi	r24, 0x47	; 71
     9e2:	91 05       	cpc	r25, r1
     9e4:	a4 f0       	brlt	.+40     	; 0xa0e <gui_navigate+0xc0>
		menu_selector = menu_prev(menu_selector);
     9e6:	80 91 5d 03 	lds	r24, 0x035D
     9ea:	90 91 5e 03 	lds	r25, 0x035E
     9ee:	0e 94 9f 0b 	call	0x173e	; 0x173e <menu_prev>
     9f2:	90 93 5e 03 	sts	0x035E, r25
     9f6:	80 93 5d 03 	sts	0x035D, r24
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	9f ef       	ldi	r25, 0xFF	; 255
     9fe:	22 e0       	ldi	r18, 0x02	; 2
     a00:	81 50       	subi	r24, 0x01	; 1
     a02:	90 40       	sbci	r25, 0x00	; 0
     a04:	20 40       	sbci	r18, 0x00	; 0
     a06:	e1 f7       	brne	.-8      	; 0xa00 <gui_navigate+0xb2>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <gui_navigate+0xbc>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <gui_navigate+0xbe>
     a0c:	38 c0       	rjmp	.+112    	; 0xa7e <gui_navigate+0x130>
		_delay_ms(200);

		
	}
	else if(joystick_y_value() < -threshold){
     a0e:	0e 94 c2 09 	call	0x1384	; 0x1384 <joystick_y_value>
     a12:	8a 3b       	cpi	r24, 0xBA	; 186
     a14:	9f 4f       	sbci	r25, 0xFF	; 255
     a16:	e4 f4       	brge	.+56     	; 0xa50 <gui_navigate+0x102>
		//if there is a next item:
		if(menu_next(menu_selector) != NULL){
     a18:	80 91 5d 03 	lds	r24, 0x035D
     a1c:	90 91 5e 03 	lds	r25, 0x035E
     a20:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <menu_next>
     a24:	89 2b       	or	r24, r25
     a26:	59 f1       	breq	.+86     	; 0xa7e <gui_navigate+0x130>
			menu_selector = menu_next(menu_selector);
     a28:	80 91 5d 03 	lds	r24, 0x035D
     a2c:	90 91 5e 03 	lds	r25, 0x035E
     a30:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <menu_next>
     a34:	90 93 5e 03 	sts	0x035E, r25
     a38:	80 93 5d 03 	sts	0x035D, r24
     a3c:	8f ef       	ldi	r24, 0xFF	; 255
     a3e:	9f ef       	ldi	r25, 0xFF	; 255
     a40:	22 e0       	ldi	r18, 0x02	; 2
     a42:	81 50       	subi	r24, 0x01	; 1
     a44:	90 40       	sbci	r25, 0x00	; 0
     a46:	20 40       	sbci	r18, 0x00	; 0
     a48:	e1 f7       	brne	.-8      	; 0xa42 <gui_navigate+0xf4>
     a4a:	00 c0       	rjmp	.+0      	; 0xa4c <gui_navigate+0xfe>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <gui_navigate+0x100>
     a4e:	17 c0       	rjmp	.+46     	; 0xa7e <gui_navigate+0x130>
			_delay_ms(200);
		}
	}
	else if(button_right_read()){
     a50:	0e 94 ef 09 	call	0x13de	; 0x13de <button_right_read>
     a54:	88 23       	and	r24, r24
     a56:	99 f0       	breq	.+38     	; 0xa7e <gui_navigate+0x130>
		if(menu_selector->fn != NULL ){	//if the function pointer points to a function, call it
     a58:	e0 91 5d 03 	lds	r30, 0x035D
     a5c:	f0 91 5e 03 	lds	r31, 0x035E
     a60:	07 80       	ldd	r0, Z+7	; 0x07
     a62:	f0 85       	ldd	r31, Z+8	; 0x08
     a64:	e0 2d       	mov	r30, r0
     a66:	30 97       	sbiw	r30, 0x00	; 0
     a68:	51 f0       	breq	.+20     	; 0xa7e <gui_navigate+0x130>
			menu_selector->fn();
     a6a:	09 95       	icall
     a6c:	8f ef       	ldi	r24, 0xFF	; 255
     a6e:	9f ef       	ldi	r25, 0xFF	; 255
     a70:	22 e0       	ldi	r18, 0x02	; 2
     a72:	81 50       	subi	r24, 0x01	; 1
     a74:	90 40       	sbci	r25, 0x00	; 0
     a76:	20 40       	sbci	r18, 0x00	; 0
     a78:	e1 f7       	brne	.-8      	; 0xa72 <gui_navigate+0x124>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <gui_navigate+0x12e>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <gui_navigate+0x130>
		}
		else{}
	}
	
	
}
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <gui_run>:
#include "gui.h"


void gui_run()
{
	gui_print_menu(menu_selector);
     a84:	80 91 5d 03 	lds	r24, 0x035D
     a88:	90 91 5e 03 	lds	r25, 0x035E
     a8c:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <gui_print_menu>
	
	gui_navigate();
     a90:	0e 94 a7 04 	call	0x94e	; 0x94e <gui_navigate>
	
	oled_invert_line(menu_submenu_number(menu_selector));
     a94:	80 91 5d 03 	lds	r24, 0x035D
     a98:	90 91 5e 03 	lds	r25, 0x035E
     a9c:	0e 94 ce 0b 	call	0x179c	; 0x179c <menu_submenu_number>
     aa0:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <oled_invert_line>
     aa4:	08 95       	ret

00000aa6 <oled_init>:




static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
     aa6:	e0 e0       	ldi	r30, 0x00	; 0
     aa8:	f0 e1       	ldi	r31, 0x10	; 16
     aaa:	8e ea       	ldi	r24, 0xAE	; 174
     aac:	80 83       	st	Z, r24
     aae:	81 ea       	ldi	r24, 0xA1	; 161
     ab0:	80 83       	st	Z, r24
     ab2:	8a ed       	ldi	r24, 0xDA	; 218
     ab4:	80 83       	st	Z, r24
     ab6:	82 e1       	ldi	r24, 0x12	; 18
     ab8:	80 83       	st	Z, r24
     aba:	88 ec       	ldi	r24, 0xC8	; 200
     abc:	80 83       	st	Z, r24
     abe:	88 ea       	ldi	r24, 0xA8	; 168
     ac0:	80 83       	st	Z, r24
     ac2:	8f e3       	ldi	r24, 0x3F	; 63
     ac4:	80 83       	st	Z, r24
     ac6:	85 ed       	ldi	r24, 0xD5	; 213
     ac8:	80 83       	st	Z, r24
     aca:	80 e8       	ldi	r24, 0x80	; 128
     acc:	80 83       	st	Z, r24
     ace:	81 e8       	ldi	r24, 0x81	; 129
     ad0:	80 83       	st	Z, r24
     ad2:	80 e5       	ldi	r24, 0x50	; 80
     ad4:	80 83       	st	Z, r24
     ad6:	89 ed       	ldi	r24, 0xD9	; 217
     ad8:	80 83       	st	Z, r24
     ada:	81 e2       	ldi	r24, 0x21	; 33
     adc:	80 83       	st	Z, r24
     ade:	90 e2       	ldi	r25, 0x20	; 32
     ae0:	90 83       	st	Z, r25
     ae2:	10 82       	st	Z, r1
     ae4:	9b ed       	ldi	r25, 0xDB	; 219
     ae6:	90 83       	st	Z, r25
     ae8:	90 e3       	ldi	r25, 0x30	; 48
     aea:	90 83       	st	Z, r25
     aec:	9d ea       	ldi	r25, 0xAD	; 173
     aee:	90 83       	st	Z, r25
     af0:	10 82       	st	Z, r1
     af2:	94 ea       	ldi	r25, 0xA4	; 164
     af4:	90 83       	st	Z, r25
     af6:	96 ea       	ldi	r25, 0xA6	; 166
     af8:	90 83       	st	Z, r25
     afa:	9f ea       	ldi	r25, 0xAF	; 175
     afc:	90 83       	st	Z, r25
     afe:	80 83       	st	Z, r24
     b00:	10 82       	st	Z, r1
     b02:	8f e7       	ldi	r24, 0x7F	; 127
     b04:	80 83       	st	Z, r24
     b06:	92 e2       	ldi	r25, 0x22	; 34
     b08:	90 83       	st	Z, r25
     b0a:	10 82       	st	Z, r1
     b0c:	80 83       	st	Z, r24
     b0e:	08 95       	ret

00000b10 <oled_store>:
	
	//to allow 60Hz refresh rate	
	
}

void oled_store(char* string, int* position){
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
	//calculate position offset
	int start_position = position[0]*128 + position[1];
     b18:	fb 01       	movw	r30, r22
     b1a:	40 81       	ld	r20, Z
     b1c:	51 81       	ldd	r21, Z+1	; 0x01
     b1e:	56 95       	lsr	r21
     b20:	54 2f       	mov	r21, r20
     b22:	44 27       	eor	r20, r20
     b24:	57 95       	ror	r21
     b26:	47 95       	ror	r20
     b28:	22 81       	ldd	r18, Z+2	; 0x02
     b2a:	33 81       	ldd	r19, Z+3	; 0x03
     b2c:	42 0f       	add	r20, r18
     b2e:	53 1f       	adc	r21, r19
	for(int i = 0; string[i] != '\0'; ++i){
     b30:	fc 01       	movw	r30, r24
     b32:	20 81       	ld	r18, Z
     b34:	22 23       	and	r18, r18
     b36:	59 f1       	breq	.+86     	; 0xb8e <oled_store+0x7e>
     b38:	bc 01       	movw	r22, r24
     b3a:	6f 5f       	subi	r22, 0xFF	; 255
     b3c:	7f 4f       	sbci	r23, 0xFF	; 255
     b3e:	ec 01       	movw	r28, r24
	
	//to allow 60Hz refresh rate	
	
}

void oled_store(char* string, int* position){
     b40:	00 e0       	ldi	r16, 0x00	; 0
     b42:	10 e0       	ldi	r17, 0x00	; 0
     b44:	1f c0       	rjmp	.+62     	; 0xb84 <oled_store+0x74>
     b46:	dc 01       	movw	r26, r24
     b48:	a2 0f       	add	r26, r18
     b4a:	b3 1f       	adc	r27, r19
	int start_position = position[0]*128 + position[1];
	for(int i = 0; string[i] != '\0'; ++i){
		//j goes through each col	n of the char in font
		for(int j = 0; j < FONT_SIZE; ++j){
			//font[char index in font][column of char]
			*(SRAM_ADRESS + start_position + i * FONT_SIZE + j) = pgm_read_byte(&font[(int)string[i] - 32][j]);
     b4c:	e8 81       	ld	r30, Y
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	b0 97       	sbiw	r30, 0x20	; 32
     b52:	ee 0f       	add	r30, r30
     b54:	ff 1f       	adc	r31, r31
     b56:	ee 0f       	add	r30, r30
     b58:	ff 1f       	adc	r31, r31
     b5a:	ee 0f       	add	r30, r30
     b5c:	ff 1f       	adc	r31, r31
     b5e:	e2 0f       	add	r30, r18
     b60:	f3 1f       	adc	r31, r19
     b62:	e0 59       	subi	r30, 0x90	; 144
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	e4 91       	lpm	r30, Z
     b68:	ec 93       	st	X, r30
void oled_store(char* string, int* position){
	//calculate position offset
	int start_position = position[0]*128 + position[1];
	for(int i = 0; string[i] != '\0'; ++i){
		//j goes through each col	n of the char in font
		for(int j = 0; j < FONT_SIZE; ++j){
     b6a:	2f 5f       	subi	r18, 0xFF	; 255
     b6c:	3f 4f       	sbci	r19, 0xFF	; 255
     b6e:	28 30       	cpi	r18, 0x08	; 8
     b70:	31 05       	cpc	r19, r1
     b72:	49 f7       	brne	.-46     	; 0xb46 <oled_store+0x36>
}

void oled_store(char* string, int* position){
	//calculate position offset
	int start_position = position[0]*128 + position[1];
	for(int i = 0; string[i] != '\0'; ++i){
     b74:	eb 01       	movw	r28, r22
     b76:	6f 5f       	subi	r22, 0xFF	; 255
     b78:	7f 4f       	sbci	r23, 0xFF	; 255
     b7a:	48 5f       	subi	r20, 0xF8	; 248
     b7c:	5f 4f       	sbci	r21, 0xFF	; 255
     b7e:	88 81       	ld	r24, Y
     b80:	88 23       	and	r24, r24
     b82:	29 f0       	breq	.+10     	; 0xb8e <oled_store+0x7e>
	
	//to allow 60Hz refresh rate	
	
}

void oled_store(char* string, int* position){
     b84:	20 2f       	mov	r18, r16
     b86:	31 2f       	mov	r19, r17
     b88:	ca 01       	movw	r24, r20
     b8a:	98 5e       	subi	r25, 0xE8	; 232
     b8c:	dc cf       	rjmp	.-72     	; 0xb46 <oled_store+0x36>
		for(int j = 0; j < FONT_SIZE; ++j){
			//font[char index in font][column of char]
			*(SRAM_ADRESS + start_position + i * FONT_SIZE + j) = pgm_read_byte(&font[(int)string[i] - 32][j]);
		}
	}
}
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	08 95       	ret

00000b98 <oled_store_string>:


//might be unreliable, due to uncertain string length
void oled_store_string(char* string, int col, int line){
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <oled_store_string+0x6>
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <oled_store_string+0x8>
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
	
	oled_store(string, (int[2]){line, col});
     ba4:	5a 83       	std	Y+2, r21	; 0x02
     ba6:	49 83       	std	Y+1, r20	; 0x01
     ba8:	7c 83       	std	Y+4, r23	; 0x04
     baa:	6b 83       	std	Y+3, r22	; 0x03
     bac:	be 01       	movw	r22, r28
     bae:	6f 5f       	subi	r22, 0xFF	; 255
     bb0:	7f 4f       	sbci	r23, 0xFF	; 255
     bb2:	0e 94 88 05 	call	0xb10	; 0xb10 <oled_store>
	
}
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	08 95       	ret

00000bc4 <oled_write_screen>:





void oled_write_screen(){
     bc4:	e0 e0       	ldi	r30, 0x00	; 0
     bc6:	f8 e1       	ldi	r31, 0x18	; 24
	for(int i = 0; i < 1024; ++i){
		*OLED_DATA_ADRESS = *(SRAM_ADRESS + i);
     bc8:	a0 e0       	ldi	r26, 0x00	; 0
     bca:	b2 e1       	ldi	r27, 0x12	; 18
     bcc:	81 91       	ld	r24, Z+
     bce:	8c 93       	st	X, r24




void oled_write_screen(){
	for(int i = 0; i < 1024; ++i){
     bd0:	e1 15       	cp	r30, r1
     bd2:	8c e1       	ldi	r24, 0x1C	; 28
     bd4:	f8 07       	cpc	r31, r24
     bd6:	d1 f7       	brne	.-12     	; 0xbcc <oled_write_screen+0x8>
		*OLED_DATA_ADRESS = *(SRAM_ADRESS + i);
	}
}
     bd8:	08 95       	ret

00000bda <oled_refresh_60Hz>:
//Seems work at 60Hz
void oled_refresh_60Hz(){
	
	//F_CPU = 4.9152MHz, prescaler = 1024
	//F_CPU / prescaler = 4800Hz = 60Hz * 80
	if(timer_read(TIMER_1) > 80){
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <timer_read>
     be0:	81 35       	cpi	r24, 0x51	; 81
     be2:	91 05       	cpc	r25, r1
     be4:	28 f0       	brcs	.+10     	; 0xbf0 <oled_refresh_60Hz+0x16>
		oled_write_screen();
     be6:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <oled_write_screen>
		timer_reset(TIMER_1);
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <timer_reset>
     bf0:	08 95       	ret

00000bf2 <oled_invert_line>:
}


void oled_invert_line(uint8_t line){
	
	uint16_t start_position = line * 128;
     bf2:	20 e8       	ldi	r18, 0x80	; 128
     bf4:	82 9f       	mul	r24, r18
     bf6:	c0 01       	movw	r24, r0
     bf8:	11 24       	eor	r1, r1
     bfa:	fc 01       	movw	r30, r24
     bfc:	f8 5e       	subi	r31, 0xE8	; 232
     bfe:	80 58       	subi	r24, 0x80	; 128
     c00:	97 4e       	sbci	r25, 0xE7	; 231
	uint8_t col_byte;
	
	for(int col = 0; col < 128; ++col){
		col_byte = ~*(SRAM_ADRESS + start_position + col);
     c02:	20 81       	ld	r18, Z
     c04:	20 95       	com	r18
		*(SRAM_ADRESS + start_position + col) = col_byte;
     c06:	21 93       	st	Z+, r18
void oled_invert_line(uint8_t line){
	
	uint16_t start_position = line * 128;
	uint8_t col_byte;
	
	for(int col = 0; col < 128; ++col){
     c08:	e8 17       	cp	r30, r24
     c0a:	f9 07       	cpc	r31, r25
     c0c:	d1 f7       	brne	.-12     	; 0xc02 <oled_invert_line+0x10>
		col_byte = ~*(SRAM_ADRESS + start_position + col);
		*(SRAM_ADRESS + start_position + col) = col_byte;
	}

}
     c0e:	08 95       	ret

00000c10 <oled_clear_line>:

void oled_clear_line(int line){
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	00 d0       	rcall	.+0      	; 0xc22 <oled_clear_line+0x12>
     c22:	00 d0       	rcall	.+0      	; 0xc24 <oled_clear_line+0x14>
     c24:	00 d0       	rcall	.+0      	; 0xc26 <oled_clear_line+0x16>
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	6c 01       	movw	r12, r24
	
	for(int col = 0; col < NR_COL; col += 8){
     c2c:	00 e0       	ldi	r16, 0x00	; 0
     c2e:	10 e0       	ldi	r17, 0x00	; 0
		oled_store((char[2]){" "}, (int[2]){line, col});
     c30:	68 94       	set
     c32:	ee 24       	eor	r14, r14
     c34:	e5 f8       	bld	r14, 5
     c36:	f1 2c       	mov	r15, r1
     c38:	dc 82       	std	Y+4, r13	; 0x04
     c3a:	cb 82       	std	Y+3, r12	; 0x03
     c3c:	1e 83       	std	Y+6, r17	; 0x06
     c3e:	0d 83       	std	Y+5, r16	; 0x05
     c40:	fa 82       	std	Y+2, r15	; 0x02
     c42:	e9 82       	std	Y+1, r14	; 0x01
     c44:	be 01       	movw	r22, r28
     c46:	6d 5f       	subi	r22, 0xFD	; 253
     c48:	7f 4f       	sbci	r23, 0xFF	; 255
     c4a:	ce 01       	movw	r24, r28
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	0e 94 88 05 	call	0xb10	; 0xb10 <oled_store>

}

void oled_clear_line(int line){
	
	for(int col = 0; col < NR_COL; col += 8){
     c52:	08 5f       	subi	r16, 0xF8	; 248
     c54:	1f 4f       	sbci	r17, 0xFF	; 255
     c56:	00 38       	cpi	r16, 0x80	; 128
     c58:	11 05       	cpc	r17, r1
     c5a:	71 f7       	brne	.-36     	; 0xc38 <oled_clear_line+0x28>
		oled_store((char[2]){" "}, (int[2]){line, col});
	}
	
}
     c5c:	26 96       	adiw	r28, 0x06	; 6
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	08 95       	ret

00000c7a <oled_clear_screen>:
	
}



void oled_clear_screen(){
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
	for(int line = 0; line < NR_LINES; ++line){
     c7e:	c0 e0       	ldi	r28, 0x00	; 0
     c80:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(line);
     c82:	ce 01       	movw	r24, r28
     c84:	0e 94 08 06 	call	0xc10	; 0xc10 <oled_clear_line>
}



void oled_clear_screen(){
	for(int line = 0; line < NR_LINES; ++line){
     c88:	21 96       	adiw	r28, 0x01	; 1
     c8a:	c8 30       	cpi	r28, 0x08	; 8
     c8c:	d1 05       	cpc	r29, r1
     c8e:	c9 f7       	brne	.-14     	; 0xc82 <oled_clear_screen+0x8>
		oled_clear_line(line);
	}
}
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	08 95       	ret

00000c96 <oled_toggle_negative>:


uint8_t screen_negative = 0;

void oled_toggle_negative(){
	if(screen_negative){
     c96:	80 91 48 03 	lds	r24, 0x0348
     c9a:	88 23       	and	r24, r24
     c9c:	31 f0       	breq	.+12     	; 0xcaa <oled_toggle_negative+0x14>




static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
     c9e:	86 ea       	ldi	r24, 0xA6	; 166
     ca0:	80 93 00 10 	sts	0x1000, r24
uint8_t screen_negative = 0;

void oled_toggle_negative(){
	if(screen_negative){
		oled_mode_normal();
		screen_negative = 0;
     ca4:	10 92 48 03 	sts	0x0348, r1
     ca8:	08 95       	ret




static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
     caa:	87 ea       	ldi	r24, 0xA7	; 167
     cac:	80 93 00 10 	sts	0x1000, r24
		oled_mode_normal();
		screen_negative = 0;
	}
	else{
		oled_mode_negative();
		screen_negative = 1;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	80 93 48 03 	sts	0x0348, r24
     cb6:	08 95       	ret

00000cb8 <oled_change_contrast>:
	}
}


void oled_change_contrast(){
     cb8:	7f 92       	push	r7
     cba:	8f 92       	push	r8
     cbc:	9f 92       	push	r9
     cbe:	af 92       	push	r10
     cc0:	bf 92       	push	r11
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	a8 97       	sbiw	r28, 0x28	; 40
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61
	
	while(1){
		
		oled_clear_screen();
		
		oled_store((char[9]){"Contrast"}, (int[2]){0, 0});
     ce2:	0f 2e       	mov	r0, r31
     ce4:	f9 e0       	ldi	r31, 0x09	; 9
     ce6:	7f 2e       	mov	r7, r31
     ce8:	f0 2d       	mov	r31, r0
		oled_store((char[12]){"left slider"}, (int[2]){4, 3*8});
     cea:	68 94       	set
     cec:	aa 24       	eor	r10, r10
     cee:	a2 f8       	bld	r10, 2
     cf0:	b1 2c       	mov	r11, r1
     cf2:	0f 2e       	mov	r0, r31
     cf4:	f8 e1       	ldi	r31, 0x18	; 24
     cf6:	cf 2e       	mov	r12, r31
     cf8:	d1 2c       	mov	r13, r1
     cfa:	f0 2d       	mov	r31, r0
     cfc:	0f 2e       	mov	r0, r31
     cfe:	fc e0       	ldi	r31, 0x0C	; 12
     d00:	8f 2e       	mov	r8, r31
     d02:	f0 2d       	mov	r31, r0
		oled_store((char[7]){"Return"}, (int[2]){7, 0});
     d04:	0f 2e       	mov	r0, r31
     d06:	f7 e0       	ldi	r31, 0x07	; 7
     d08:	ef 2e       	mov	r14, r31
     d0a:	f1 2c       	mov	r15, r1
     d0c:	f0 2d       	mov	r31, r0
     d0e:	0f 2e       	mov	r0, r31
     d10:	f7 e0       	ldi	r31, 0x07	; 7
     d12:	9f 2e       	mov	r9, r31
     d14:	f0 2d       	mov	r31, r0




static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
     d16:	00 e0       	ldi	r16, 0x00	; 0
     d18:	10 e1       	ldi	r17, 0x10	; 16
	
	uint8_t contrast;
	
	while(1){
		
		oled_clear_screen();
     d1a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <oled_clear_screen>
		
		oled_store((char[9]){"Contrast"}, (int[2]){0, 0});
     d1e:	1e a2       	std	Y+38, r1	; 0x26
     d20:	1d a2       	std	Y+37, r1	; 0x25
     d22:	18 a6       	std	Y+40, r1	; 0x28
     d24:	1f a2       	std	Y+39, r1	; 0x27
     d26:	e1 ef       	ldi	r30, 0xF1	; 241
     d28:	f1 e0       	ldi	r31, 0x01	; 1
     d2a:	de 01       	movw	r26, r28
     d2c:	5c 96       	adiw	r26, 0x1c	; 28
     d2e:	87 2d       	mov	r24, r7
     d30:	01 90       	ld	r0, Z+
     d32:	0d 92       	st	X+, r0
     d34:	8a 95       	dec	r24
     d36:	e1 f7       	brne	.-8      	; 0xd30 <oled_change_contrast+0x78>
     d38:	be 01       	movw	r22, r28
     d3a:	6b 5d       	subi	r22, 0xDB	; 219
     d3c:	7f 4f       	sbci	r23, 0xFF	; 255
     d3e:	ce 01       	movw	r24, r28
     d40:	4c 96       	adiw	r24, 0x1c	; 28
     d42:	0e 94 88 05 	call	0xb10	; 0xb10 <oled_store>
		oled_store((char[12]){"left slider"}, (int[2]){4, 3*8});
     d46:	b9 8e       	std	Y+25, r11	; 0x19
     d48:	a8 8e       	std	Y+24, r10	; 0x18
     d4a:	db 8e       	std	Y+27, r13	; 0x1b
     d4c:	ca 8e       	std	Y+26, r12	; 0x1a
     d4e:	ea ef       	ldi	r30, 0xFA	; 250
     d50:	f1 e0       	ldi	r31, 0x01	; 1
     d52:	de 01       	movw	r26, r28
     d54:	1c 96       	adiw	r26, 0x0c	; 12
     d56:	88 2d       	mov	r24, r8
     d58:	01 90       	ld	r0, Z+
     d5a:	0d 92       	st	X+, r0
     d5c:	8a 95       	dec	r24
     d5e:	e1 f7       	brne	.-8      	; 0xd58 <oled_change_contrast+0xa0>
     d60:	be 01       	movw	r22, r28
     d62:	68 5e       	subi	r22, 0xE8	; 232
     d64:	7f 4f       	sbci	r23, 0xFF	; 255
     d66:	ce 01       	movw	r24, r28
     d68:	0c 96       	adiw	r24, 0x0c	; 12
     d6a:	0e 94 88 05 	call	0xb10	; 0xb10 <oled_store>
		oled_store((char[7]){"Return"}, (int[2]){7, 0});
     d6e:	f9 86       	std	Y+9, r15	; 0x09
     d70:	e8 86       	std	Y+8, r14	; 0x08
     d72:	1b 86       	std	Y+11, r1	; 0x0b
     d74:	1a 86       	std	Y+10, r1	; 0x0a
     d76:	e6 e0       	ldi	r30, 0x06	; 6
     d78:	f2 e0       	ldi	r31, 0x02	; 2
     d7a:	de 01       	movw	r26, r28
     d7c:	11 96       	adiw	r26, 0x01	; 1
     d7e:	89 2d       	mov	r24, r9
     d80:	01 90       	ld	r0, Z+
     d82:	0d 92       	st	X+, r0
     d84:	8a 95       	dec	r24
     d86:	e1 f7       	brne	.-8      	; 0xd80 <oled_change_contrast+0xc8>
     d88:	be 01       	movw	r22, r28
     d8a:	68 5f       	subi	r22, 0xF8	; 248
     d8c:	7f 4f       	sbci	r23, 0xFF	; 255
     d8e:	ce 01       	movw	r24, r28
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	0e 94 88 05 	call	0xb10	; 0xb10 <oled_store>

			
			
		
		oled_write_screen();
     d96:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <oled_write_screen>
		
		contrast = slider_left_read();
     d9a:	0e 94 c7 09 	call	0x138e	; 0x138e <slider_left_read>




static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
     d9e:	91 e8       	ldi	r25, 0x81	; 129
     da0:	f8 01       	movw	r30, r16
     da2:	90 83       	st	Z, r25
     da4:	80 83       	st	Z, r24
		contrast = slider_left_read();
		oled_command_write(0x81);    //contrast control
		oled_command_write(contrast);  
		
		
		if(button_left_read()){
     da6:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <button_left_read>
     daa:	88 23       	and	r24, r24
     dac:	09 f4       	brne	.+2      	; 0xdb0 <oled_change_contrast+0xf8>
     dae:	b5 cf       	rjmp	.-150    	; 0xd1a <oled_change_contrast+0x62>
			return;
		}
	}	

}
     db0:	a8 96       	adiw	r28, 0x28	; 40
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	df 90       	pop	r13
     dca:	cf 90       	pop	r12
     dcc:	bf 90       	pop	r11
     dce:	af 90       	pop	r10
     dd0:	9f 90       	pop	r9
     dd2:	8f 90       	pop	r8
     dd4:	7f 90       	pop	r7
     dd6:	08 95       	ret

00000dd8 <oled_epleptic_seizure>:


void oled_epleptic_seizure(){
	while(1){
		oled_toggle_negative();
     dd8:	0e 94 4b 06 	call	0xc96	; 0xc96 <oled_toggle_negative>
     ddc:	2c ec       	ldi	r18, 0xCC	; 204
     dde:	8c e0       	ldi	r24, 0x0C	; 12
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	21 50       	subi	r18, 0x01	; 1
     de4:	80 40       	sbci	r24, 0x00	; 0
     de6:	90 40       	sbci	r25, 0x00	; 0
     de8:	e1 f7       	brne	.-8      	; 0xde2 <oled_epleptic_seizure+0xa>
     dea:	00 c0       	rjmp	.+0      	; 0xdec <oled_epleptic_seizure+0x14>
		_delay_ms(70);
		
		if(button_left_read()){
     dec:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <button_left_read>
     df0:	88 23       	and	r24, r24
     df2:	91 f3       	breq	.-28     	; 0xdd8 <oled_epleptic_seizure>
			return;
		}
	}
}
     df4:	08 95       	ret

00000df6 <oled_put_string>:


//Last minute function to allow printing numbers
void oled_put_string(uint8_t col,uint8_t page, char * string, ...){
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	61 97       	sbiw	r28, 0x11	; 17
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
	char buffer[17];
	va_list v;
	va_start(v,string);
	vsprintf(buffer, string, v);
     e0a:	ae 01       	movw	r20, r28
     e0c:	46 5e       	subi	r20, 0xE6	; 230
     e0e:	5f 4f       	sbci	r21, 0xFF	; 255
     e10:	68 8d       	ldd	r22, Y+24	; 0x18
     e12:	79 8d       	ldd	r23, Y+25	; 0x19
     e14:	ce 01       	movw	r24, r28
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vsprintf>
	va_end(v);
	
	
	uint16_t start_position = page * 128 + col;
     e1c:	4e 89       	ldd	r20, Y+22	; 0x16
     e1e:	50 e0       	ldi	r21, 0x00	; 0
     e20:	8f 89       	ldd	r24, Y+23	; 0x17
     e22:	90 e8       	ldi	r25, 0x80	; 128
     e24:	89 9f       	mul	r24, r25
     e26:	40 0d       	add	r20, r0
     e28:	51 1d       	adc	r21, r1
     e2a:	11 24       	eor	r1, r1
	for(uint8_t i = 0; buffer[i] != '\0'; ++i){
     e2c:	e9 81       	ldd	r30, Y+1	; 0x01
     e2e:	ee 23       	and	r30, r30
     e30:	89 f1       	breq	.+98     	; 0xe94 <oled_put_string+0x9e>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	60 e0       	ldi	r22, 0x00	; 0
		//j goes through each col n of the char in font
		for(uint8_t j = 0; j < FONT_SIZE; ++j){
			//font[char index in font][column of char]
			*(SRAM_ADRESS + start_position + i * FONT_SIZE + j) = pgm_read_byte(&font[(int)buffer[i] - 32][j]);
     e38:	78 e0       	ldi	r23, 0x08	; 8
     e3a:	13 c0       	rjmp	.+38     	; 0xe62 <oled_put_string+0x6c>
     e3c:	fc 01       	movw	r30, r24
     e3e:	ea 0f       	add	r30, r26
     e40:	fb 1f       	adc	r31, r27
     e42:	e4 91       	lpm	r30, Z
     e44:	ed 93       	st	X+, r30
     e46:	21 50       	subi	r18, 0x01	; 1
	
	
	uint16_t start_position = page * 128 + col;
	for(uint8_t i = 0; buffer[i] != '\0'; ++i){
		//j goes through each col n of the char in font
		for(uint8_t j = 0; j < FONT_SIZE; ++j){
     e48:	c9 f7       	brne	.-14     	; 0xe3c <oled_put_string+0x46>
	vsprintf(buffer, string, v);
	va_end(v);
	
	
	uint16_t start_position = page * 128 + col;
	for(uint8_t i = 0; buffer[i] != '\0'; ++i){
     e4a:	6f 5f       	subi	r22, 0xFF	; 255
     e4c:	86 2f       	mov	r24, r22
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	e1 e0       	ldi	r30, 0x01	; 1
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	ec 0f       	add	r30, r28
     e56:	fd 1f       	adc	r31, r29
     e58:	e8 0f       	add	r30, r24
     e5a:	f9 1f       	adc	r31, r25
     e5c:	e0 81       	ld	r30, Z
     e5e:	ee 23       	and	r30, r30
     e60:	c9 f0       	breq	.+50     	; 0xe94 <oled_put_string+0x9e>
		//j goes through each col n of the char in font
		for(uint8_t j = 0; j < FONT_SIZE; ++j){
			//font[char index in font][column of char]
			*(SRAM_ADRESS + start_position + i * FONT_SIZE + j) = pgm_read_byte(&font[(int)buffer[i] - 32][j]);
     e62:	9c 01       	movw	r18, r24
     e64:	22 0f       	add	r18, r18
     e66:	33 1f       	adc	r19, r19
     e68:	22 0f       	add	r18, r18
     e6a:	33 1f       	adc	r19, r19
     e6c:	22 0f       	add	r18, r18
     e6e:	33 1f       	adc	r19, r19
     e70:	24 0f       	add	r18, r20
     e72:	35 1f       	adc	r19, r21
     e74:	d9 01       	movw	r26, r18
     e76:	b8 5e       	subi	r27, 0xE8	; 232
     e78:	8e 2f       	mov	r24, r30
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	82 1b       	sub	r24, r18
     e8a:	93 0b       	sbc	r25, r19
     e8c:	27 2f       	mov	r18, r23
     e8e:	80 59       	subi	r24, 0x90	; 144
     e90:	98 41       	sbci	r25, 0x18	; 24
     e92:	d4 cf       	rjmp	.-88     	; 0xe3c <oled_put_string+0x46>
		}
	}

}
     e94:	61 96       	adiw	r28, 0x11	; 17
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	08 95       	ret

00000ea6 <EEPROM_write>:
#include <avr/io.h>

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     ea6:	e1 99       	sbic	0x1c, 1	; 28
     ea8:	fe cf       	rjmp	.-4      	; 0xea6 <EEPROM_write>
	/* Set up address and data registers */
	EEAR = uiAddress;
     eaa:	9f bb       	out	0x1f, r25	; 31
     eac:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     eae:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     eb0:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
     eb2:	e1 9a       	sbi	0x1c, 1	; 28
     eb4:	08 95       	ret

00000eb6 <EEPROM_read>:



unsigned char EEPROM_read(unsigned int uiAddress){
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     eb6:	e1 99       	sbic	0x1c, 1	; 28
     eb8:	fe cf       	rjmp	.-4      	; 0xeb6 <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
     eba:	9f bb       	out	0x1f, r25	; 31
     ebc:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     ebe:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     ec0:	8d b3       	in	r24, 0x1d	; 29
     ec2:	08 95       	ret

00000ec4 <game_save_highscore>:
	/*oled_put_string(0,0,"Player1: %i", EEPROM_read(0));*/
	
}


void game_save_highscore(){
     ec4:	2f 92       	push	r2
     ec6:	3f 92       	push	r3
     ec8:	4f 92       	push	r4
     eca:	6f 92       	push	r6
     ecc:	7f 92       	push	r7
     ece:	8f 92       	push	r8
     ed0:	9f 92       	push	r9
     ed2:	af 92       	push	r10
     ed4:	bf 92       	push	r11
     ed6:	cf 92       	push	r12
     ed8:	df 92       	push	r13
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	2f ef       	ldi	r18, 0xFF	; 255
     ee6:	8f e7       	ldi	r24, 0x7F	; 127
     ee8:	94 e0       	ldi	r25, 0x04	; 4
     eea:	21 50       	subi	r18, 0x01	; 1
     eec:	80 40       	sbci	r24, 0x00	; 0
     eee:	90 40       	sbci	r25, 0x00	; 0
     ef0:	e1 f7       	brne	.-8      	; 0xeea <game_save_highscore+0x26>
     ef2:	00 c0       	rjmp	.+0      	; 0xef4 <game_save_highscore+0x30>
     ef4:	00 00       	nop
	char* name4 = "P4";
	uint8_t adr4 = 0;
	

	
	oled_write_screen();
     ef6:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <oled_write_screen>

void game_save_highscore(){
	
	_delay_ms(300);
	
	uint8_t line_nr = 2;
     efa:	c2 e0       	ldi	r28, 0x02	; 2
	
	while(1){
		if(timer_read(TIMER_3) > 80){
			oled_clear_screen();
			
			oled_put_string(0, 0, "Score: %i", global_score);
     efc:	0f 2e       	mov	r0, r31
     efe:	fd e0       	ldi	r31, 0x0D	; 13
     f00:	af 2e       	mov	r10, r31
     f02:	f2 e0       	ldi	r31, 0x02	; 2
     f04:	bf 2e       	mov	r11, r31
     f06:	f0 2d       	mov	r31, r0
			oled_put_string(0, 2, "%s: %i", name1, EEPROM_read(adr1));
     f08:	0f 2e       	mov	r0, r31
     f0a:	f7 e1       	ldi	r31, 0x17	; 23
     f0c:	cf 2e       	mov	r12, r31
     f0e:	f2 e0       	ldi	r31, 0x02	; 2
     f10:	df 2e       	mov	r13, r31
     f12:	f0 2d       	mov	r31, r0
     f14:	0e e1       	ldi	r16, 0x1E	; 30
     f16:	12 e0       	ldi	r17, 0x02	; 2
			oled_put_string(0, 3, "%s: %i", name2, EEPROM_read(adr2));
     f18:	0f 2e       	mov	r0, r31
     f1a:	f5 e2       	ldi	r31, 0x25	; 37
     f1c:	ef 2e       	mov	r14, r31
     f1e:	f2 e0       	ldi	r31, 0x02	; 2
     f20:	ff 2e       	mov	r15, r31
     f22:	f0 2d       	mov	r31, r0
     f24:	0f 2e       	mov	r0, r31
     f26:	f3 e0       	ldi	r31, 0x03	; 3
     f28:	2f 2e       	mov	r2, r31
     f2a:	f0 2d       	mov	r31, r0
			oled_put_string(0, 4, "%s: %u", name3, EEPROM_read(adr3));
     f2c:	0f 2e       	mov	r0, r31
     f2e:	fc e2       	ldi	r31, 0x2C	; 44
     f30:	8f 2e       	mov	r8, r31
     f32:	f2 e0       	ldi	r31, 0x02	; 2
     f34:	9f 2e       	mov	r9, r31
     f36:	f0 2d       	mov	r31, r0
     f38:	68 94       	set
     f3a:	33 24       	eor	r3, r3
     f3c:	32 f8       	bld	r3, 2
			oled_put_string(0, 5, "%s: %u", name4, EEPROM_read(adr4));
     f3e:	0f 2e       	mov	r0, r31
     f40:	f6 e3       	ldi	r31, 0x36	; 54
     f42:	6f 2e       	mov	r6, r31
     f44:	f2 e0       	ldi	r31, 0x02	; 2
     f46:	7f 2e       	mov	r7, r31
     f48:	f0 2d       	mov	r31, r0
     f4a:	0f 2e       	mov	r0, r31
     f4c:	f5 e0       	ldi	r31, 0x05	; 5
     f4e:	4f 2e       	mov	r4, r31
     f50:	f0 2d       	mov	r31, r0

	
	oled_write_screen();
	
	while(1){
		if(timer_read(TIMER_3) > 80){
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <timer_read>
     f58:	81 35       	cpi	r24, 0x51	; 81
     f5a:	91 05       	cpc	r25, r1
     f5c:	08 f4       	brcc	.+2      	; 0xf60 <game_save_highscore+0x9c>
     f5e:	56 c0       	rjmp	.+172    	; 0x100c <game_save_highscore+0x148>
			oled_clear_screen();
     f60:	0e 94 3d 06 	call	0xc7a	; 0xc7a <oled_clear_screen>
			
			oled_put_string(0, 0, "Score: %i", global_score);
     f64:	80 91 49 03 	lds	r24, 0x0349
     f68:	1f 92       	push	r1
     f6a:	8f 93       	push	r24
     f6c:	bf 92       	push	r11
     f6e:	af 92       	push	r10
     f70:	1f 92       	push	r1
     f72:	1f 92       	push	r1
     f74:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_put_string>
			oled_put_string(0, 2, "%s: %i", name1, EEPROM_read(adr1));
     f78:	88 e1       	ldi	r24, 0x18	; 24
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <EEPROM_read>
     f80:	1f 92       	push	r1
     f82:	8f 93       	push	r24
     f84:	df 92       	push	r13
     f86:	cf 92       	push	r12
     f88:	1f 93       	push	r17
     f8a:	0f 93       	push	r16
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	8f 93       	push	r24
     f90:	1f 92       	push	r1
     f92:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_put_string>
			oled_put_string(0, 3, "%s: %i", name2, EEPROM_read(adr2));
     f96:	80 e1       	ldi	r24, 0x10	; 16
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <EEPROM_read>
     f9e:	1f 92       	push	r1
     fa0:	8f 93       	push	r24
     fa2:	ff 92       	push	r15
     fa4:	ef 92       	push	r14
     fa6:	1f 93       	push	r17
     fa8:	0f 93       	push	r16
     faa:	2f 92       	push	r2
     fac:	1f 92       	push	r1
     fae:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_put_string>
			oled_put_string(0, 4, "%s: %u", name3, EEPROM_read(adr3));
     fb2:	88 e0       	ldi	r24, 0x08	; 8
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <EEPROM_read>
     fba:	1f 92       	push	r1
     fbc:	8f 93       	push	r24
     fbe:	9f 92       	push	r9
     fc0:	8f 92       	push	r8
     fc2:	af e2       	ldi	r26, 0x2F	; 47
     fc4:	b2 e0       	ldi	r27, 0x02	; 2
     fc6:	bf 93       	push	r27
     fc8:	af 93       	push	r26
     fca:	3f 92       	push	r3
     fcc:	1f 92       	push	r1
     fce:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_put_string>
			oled_put_string(0, 5, "%s: %u", name4, EEPROM_read(adr4));
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <EEPROM_read>
     fda:	1f 92       	push	r1
     fdc:	8f 93       	push	r24
     fde:	7f 92       	push	r7
     fe0:	6f 92       	push	r6
     fe2:	af e2       	ldi	r26, 0x2F	; 47
     fe4:	b2 e0       	ldi	r27, 0x02	; 2
     fe6:	bf 93       	push	r27
     fe8:	af 93       	push	r26
     fea:	4f 92       	push	r4
     fec:	1f 92       	push	r1
     fee:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_put_string>
			oled_invert_line(line_nr);
     ff2:	8d b7       	in	r24, 0x3d	; 61
     ff4:	9e b7       	in	r25, 0x3e	; 62
     ff6:	86 96       	adiw	r24, 0x26	; 38
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	9e bf       	out	0x3e, r25	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	8d bf       	out	0x3d, r24	; 61
    1002:	8c 2f       	mov	r24, r28
    1004:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <oled_invert_line>
			
			oled_write_screen();
    1008:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <oled_write_screen>
			
			
		}
		
		
		if(joystick_y_value() > 70){
    100c:	0e 94 c2 09 	call	0x1384	; 0x1384 <joystick_y_value>
    1010:	87 34       	cpi	r24, 0x47	; 71
    1012:	91 05       	cpc	r25, r1
    1014:	5c f0       	brlt	.+22     	; 0x102c <game_save_highscore+0x168>
			line_nr--;
    1016:	c1 50       	subi	r28, 0x01	; 1
    1018:	9f ef       	ldi	r25, 0xFF	; 255
    101a:	af ef       	ldi	r26, 0xFF	; 255
    101c:	b2 e0       	ldi	r27, 0x02	; 2
    101e:	91 50       	subi	r25, 0x01	; 1
    1020:	a0 40       	sbci	r26, 0x00	; 0
    1022:	b0 40       	sbci	r27, 0x00	; 0
    1024:	e1 f7       	brne	.-8      	; 0x101e <game_save_highscore+0x15a>
    1026:	00 c0       	rjmp	.+0      	; 0x1028 <game_save_highscore+0x164>
    1028:	00 c0       	rjmp	.+0      	; 0x102a <game_save_highscore+0x166>
    102a:	0f c0       	rjmp	.+30     	; 0x104a <game_save_highscore+0x186>
			_delay_ms(200);
		}
		else if(joystick_y_value() < -70){
    102c:	0e 94 c2 09 	call	0x1384	; 0x1384 <joystick_y_value>
    1030:	8a 3b       	cpi	r24, 0xBA	; 186
    1032:	9f 4f       	sbci	r25, 0xFF	; 255
    1034:	54 f4       	brge	.+20     	; 0x104a <game_save_highscore+0x186>
			line_nr++;
    1036:	cf 5f       	subi	r28, 0xFF	; 255
    1038:	8f ef       	ldi	r24, 0xFF	; 255
    103a:	9f ef       	ldi	r25, 0xFF	; 255
    103c:	a2 e0       	ldi	r26, 0x02	; 2
    103e:	81 50       	subi	r24, 0x01	; 1
    1040:	90 40       	sbci	r25, 0x00	; 0
    1042:	a0 40       	sbci	r26, 0x00	; 0
    1044:	e1 f7       	brne	.-8      	; 0x103e <game_save_highscore+0x17a>
    1046:	00 c0       	rjmp	.+0      	; 0x1048 <game_save_highscore+0x184>
    1048:	00 c0       	rjmp	.+0      	; 0x104a <game_save_highscore+0x186>
		}
		else{
			
		}
		
		if(button_right_read()){
    104a:	0e 94 ef 09 	call	0x13de	; 0x13de <button_right_read>
    104e:	88 23       	and	r24, r24
    1050:	21 f1       	breq	.+72     	; 0x109a <game_save_highscore+0x1d6>
			
			if(line_nr == 2){
    1052:	c2 30       	cpi	r28, 0x02	; 2
    1054:	39 f4       	brne	.+14     	; 0x1064 <game_save_highscore+0x1a0>
				EEPROM_write(adr1, global_score);
    1056:	60 91 49 03 	lds	r22, 0x0349
    105a:	88 e1       	ldi	r24, 0x18	; 24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 53 07 	call	0xea6	; 0xea6 <EEPROM_write>
    1062:	1d c0       	rjmp	.+58     	; 0x109e <game_save_highscore+0x1da>
			}
			else if(line_nr == 3){
    1064:	c3 30       	cpi	r28, 0x03	; 3
    1066:	39 f4       	brne	.+14     	; 0x1076 <game_save_highscore+0x1b2>
				EEPROM_write(adr2, global_score);				
    1068:	60 91 49 03 	lds	r22, 0x0349
    106c:	80 e1       	ldi	r24, 0x10	; 16
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 53 07 	call	0xea6	; 0xea6 <EEPROM_write>
    1074:	14 c0       	rjmp	.+40     	; 0x109e <game_save_highscore+0x1da>
			}
			else if(line_nr == 4){
    1076:	c4 30       	cpi	r28, 0x04	; 4
    1078:	39 f4       	brne	.+14     	; 0x1088 <game_save_highscore+0x1c4>
				EEPROM_write(adr3, global_score);
    107a:	60 91 49 03 	lds	r22, 0x0349
    107e:	88 e0       	ldi	r24, 0x08	; 8
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 53 07 	call	0xea6	; 0xea6 <EEPROM_write>
    1086:	0b c0       	rjmp	.+22     	; 0x109e <game_save_highscore+0x1da>
			}
			else if(line_nr == 5){
    1088:	c5 30       	cpi	r28, 0x05	; 5
    108a:	39 f4       	brne	.+14     	; 0x109a <game_save_highscore+0x1d6>
				EEPROM_write(adr4, global_score);
    108c:	60 91 49 03 	lds	r22, 0x0349
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 53 07 	call	0xea6	; 0xea6 <EEPROM_write>
    1098:	02 c0       	rjmp	.+4      	; 0x109e <game_save_highscore+0x1da>
			}
			
		}
		
		
		if(line_nr < 2){
    109a:	c2 30       	cpi	r28, 0x02	; 2
    109c:	20 f0       	brcs	.+8      	; 0x10a6 <game_save_highscore+0x1e2>
    109e:	c6 30       	cpi	r28, 0x06	; 6
    10a0:	18 f0       	brcs	.+6      	; 0x10a8 <game_save_highscore+0x1e4>
    10a2:	c4 2d       	mov	r28, r4
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <game_save_highscore+0x1e4>
			line_nr = 2;
    10a6:	c2 e0       	ldi	r28, 0x02	; 2
		}
		else if(line_nr > 5){
			line_nr = 5;
		}
		
		if(button_left_read()){
    10a8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <button_left_read>
    10ac:	88 23       	and	r24, r24
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <game_save_highscore+0x1ee>
    10b0:	50 cf       	rjmp	.-352    	; 0xf52 <game_save_highscore+0x8e>
			global_score = 0;
    10b2:	10 92 49 03 	sts	0x0349, r1
			return;
		}
		
	}
	
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	df 90       	pop	r13
    10c2:	cf 90       	pop	r12
    10c4:	bf 90       	pop	r11
    10c6:	af 90       	pop	r10
    10c8:	9f 90       	pop	r9
    10ca:	8f 90       	pop	r8
    10cc:	7f 90       	pop	r7
    10ce:	6f 90       	pop	r6
    10d0:	4f 90       	pop	r4
    10d2:	3f 90       	pop	r3
    10d4:	2f 90       	pop	r2
    10d6:	08 95       	ret

000010d8 <game_over>:
	}
	
}


void game_over(){
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	61 97       	sbiw	r28, 0x11	; 17
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
	oled_clear_screen();
    10ec:	0e 94 3d 06 	call	0xc7a	; 0xc7a <oled_clear_screen>
	oled_store_string((char[10]){"GAME OVER"}, 3*8, 3);
    10f0:	8a e0       	ldi	r24, 0x0A	; 10
    10f2:	e9 e3       	ldi	r30, 0x39	; 57
    10f4:	f2 e0       	ldi	r31, 0x02	; 2
    10f6:	de 01       	movw	r26, r28
    10f8:	18 96       	adiw	r26, 0x08	; 8
    10fa:	01 90       	ld	r0, Z+
    10fc:	0d 92       	st	X+, r0
    10fe:	8a 95       	dec	r24
    1100:	e1 f7       	brne	.-8      	; 0x10fa <game_over+0x22>
    1102:	43 e0       	ldi	r20, 0x03	; 3
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	68 e1       	ldi	r22, 0x18	; 24
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	ce 01       	movw	r24, r28
    110c:	08 96       	adiw	r24, 0x08	; 8
    110e:	0e 94 cc 05 	call	0xb98	; 0xb98 <oled_store_string>
	oled_store_string((char[7]){"Return"}, 0, 7);
    1112:	87 e0       	ldi	r24, 0x07	; 7
    1114:	e6 e0       	ldi	r30, 0x06	; 6
    1116:	f2 e0       	ldi	r31, 0x02	; 2
    1118:	de 01       	movw	r26, r28
    111a:	11 96       	adiw	r26, 0x01	; 1
    111c:	01 90       	ld	r0, Z+
    111e:	0d 92       	st	X+, r0
    1120:	8a 95       	dec	r24
    1122:	e1 f7       	brne	.-8      	; 0x111c <game_over+0x44>
    1124:	47 e0       	ldi	r20, 0x07	; 7
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	ce 01       	movw	r24, r28
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	0e 94 cc 05 	call	0xb98	; 0xb98 <oled_store_string>
	oled_put_string(3*8, 5, "Score: %i", global_score);
    1134:	80 91 49 03 	lds	r24, 0x0349
    1138:	1f 92       	push	r1
    113a:	8f 93       	push	r24
    113c:	8d e0       	ldi	r24, 0x0D	; 13
    113e:	92 e0       	ldi	r25, 0x02	; 2
    1140:	9f 93       	push	r25
    1142:	8f 93       	push	r24
    1144:	85 e0       	ldi	r24, 0x05	; 5
    1146:	8f 93       	push	r24
    1148:	88 e1       	ldi	r24, 0x18	; 24
    114a:	8f 93       	push	r24
    114c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_put_string>

	oled_write_screen();
    1150:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <oled_write_screen>


	oled_write_screen();
    1154:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <oled_write_screen>
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
	
	while(1){
		if(button_left_read()){
    1164:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <button_left_read>
    1168:	81 11       	cpse	r24, r1
    116a:	10 c0       	rjmp	.+32     	; 0x118c <game_over+0xb4>
			return;
		}
		
		if(timer_read(TIMER_3) > 80){
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <timer_read>
    1172:	81 35       	cpi	r24, 0x51	; 81
    1174:	91 05       	cpc	r25, r1
    1176:	18 f0       	brcs	.+6      	; 0x117e <game_over+0xa6>
			
			timer_reset(TIMER_3);
    1178:	82 e0       	ldi	r24, 0x02	; 2
    117a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <timer_reset>
		}
		
		if(button_right_read()){
    117e:	0e 94 ef 09 	call	0x13de	; 0x13de <button_right_read>
    1182:	88 23       	and	r24, r24
    1184:	79 f3       	breq	.-34     	; 0x1164 <game_over+0x8c>
			game_save_highscore();
    1186:	0e 94 62 07 	call	0xec4	; 0xec4 <game_save_highscore>
    118a:	ec cf       	rjmp	.-40     	; 0x1164 <game_over+0x8c>
	}
	
	
	
	
}
    118c:	61 96       	adiw	r28, 0x11	; 17
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <game_play>:
//Allows you to leave game by button pressing

uint8_t global_score = 0;
#define THRESHOLD 70

void game_play(){
    119e:	8f 92       	push	r8
    11a0:	9f 92       	push	r9
    11a2:	af 92       	push	r10
    11a4:	bf 92       	push	r11
    11a6:	cf 92       	push	r12
    11a8:	df 92       	push	r13
    11aa:	ef 92       	push	r14
    11ac:	ff 92       	push	r15
    11ae:	0f 93       	push	r16
    11b0:	1f 93       	push	r17
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	e1 97       	sbiw	r28, 0x31	; 49
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
		//fiks this
	can_init(MODE_NORMAL);
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
	can_message game_status = canjoy_recieve(&game_status);
    11ce:	be 01       	movw	r22, r28
    11d0:	64 5e       	subi	r22, 0xE4	; 228
    11d2:	7f 4f       	sbci	r23, 0xFF	; 255
    11d4:	cb 01       	movw	r24, r22
    11d6:	0e 94 8b 03 	call	0x716	; 0x716 <canjoy_recieve>
	

	oled_clear_screen();
    11da:	0e 94 3d 06 	call	0xc7a	; 0xc7a <oled_clear_screen>
	oled_store_string((char[7]){"Return"}, 0, 7);
    11de:	87 e0       	ldi	r24, 0x07	; 7
    11e0:	e6 e0       	ldi	r30, 0x06	; 6
    11e2:	f2 e0       	ldi	r31, 0x02	; 2
    11e4:	de 01       	movw	r26, r28
    11e6:	55 96       	adiw	r26, 0x15	; 21
    11e8:	01 90       	ld	r0, Z+
    11ea:	0d 92       	st	X+, r0
    11ec:	8a 95       	dec	r24
    11ee:	e1 f7       	brne	.-8      	; 0x11e8 <game_play+0x4a>
    11f0:	47 e0       	ldi	r20, 0x07	; 7
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	ce 01       	movw	r24, r28
    11fa:	45 96       	adiw	r24, 0x15	; 21
    11fc:	0e 94 cc 05 	call	0xb98	; 0xb98 <oled_store_string>
	oled_store_string((char[13]){"Playing game"}, 2*8, 3);
    1200:	8d e0       	ldi	r24, 0x0D	; 13
    1202:	e3 e4       	ldi	r30, 0x43	; 67
    1204:	f2 e0       	ldi	r31, 0x02	; 2
    1206:	de 01       	movw	r26, r28
    1208:	18 96       	adiw	r26, 0x08	; 8
    120a:	01 90       	ld	r0, Z+
    120c:	0d 92       	st	X+, r0
    120e:	8a 95       	dec	r24
    1210:	e1 f7       	brne	.-8      	; 0x120a <game_play+0x6c>
    1212:	43 e0       	ldi	r20, 0x03	; 3
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	60 e1       	ldi	r22, 0x10	; 16
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	ce 01       	movw	r24, r28
    121c:	08 96       	adiw	r24, 0x08	; 8
    121e:	0e 94 cc 05 	call	0xb98	; 0xb98 <oled_store_string>
			oled_clear_screen();
			

			global_score++;
			
			oled_store_string((char[7]){"Return"}, 0, 7);;
    1222:	0f 2e       	mov	r0, r31
    1224:	f7 e0       	ldi	r31, 0x07	; 7
    1226:	df 2e       	mov	r13, r31
    1228:	f0 2d       	mov	r31, r0
			oled_put_string(0, 7, "Return");
			oled_put_string(2*8, 3, "Playing game");
    122a:	0f 2e       	mov	r0, r31
    122c:	f3 e4       	ldi	r31, 0x43	; 67
    122e:	ef 2e       	mov	r14, r31
    1230:	f2 e0       	ldi	r31, 0x02	; 2
    1232:	ff 2e       	mov	r15, r31
    1234:	f0 2d       	mov	r31, r0
    1236:	0f 2e       	mov	r0, r31
    1238:	f3 e0       	ldi	r31, 0x03	; 3
    123a:	8f 2e       	mov	r8, r31
    123c:	f0 2d       	mov	r31, r0
    123e:	68 94       	set
    1240:	99 24       	eor	r9, r9
    1242:	94 f8       	bld	r9, 4
			
			
			oled_put_string(3*8, 5, "Score: %i", global_score);
    1244:	0d e0       	ldi	r16, 0x0D	; 13
    1246:	12 e0       	ldi	r17, 0x02	; 2
    1248:	0f 2e       	mov	r0, r31
    124a:	f5 e0       	ldi	r31, 0x05	; 5
    124c:	af 2e       	mov	r10, r31
    124e:	f0 2d       	mov	r31, r0
    1250:	0f 2e       	mov	r0, r31
    1252:	f8 e1       	ldi	r31, 0x18	; 24
    1254:	bf 2e       	mov	r11, r31
    1256:	f0 2d       	mov	r31, r0


			oled_write_screen();
			canjoy_transmit();
			_delay_ms(5);
			game_status = canjoy_recieve(&game_status);
    1258:	0f 2e       	mov	r0, r31
    125a:	fb e0       	ldi	r31, 0x0B	; 11
    125c:	cf 2e       	mov	r12, r31
    125e:	f0 2d       	mov	r31, r0
	while(1){
		
		
		
		//leave game
		if(button_left_read()){
    1260:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <button_left_read>
    1264:	81 11       	cpse	r24, r1
    1266:	60 c0       	rjmp	.+192    	; 0x1328 <game_play+0x18a>
		
		
		//*******************************************		
		//60 oled writing and canjoy transmition
		//*******************************************
		if(timer_read(TIMER_3) > 80){
    1268:	82 e0       	ldi	r24, 0x02	; 2
    126a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <timer_read>
    126e:	81 35       	cpi	r24, 0x51	; 81
    1270:	91 05       	cpc	r25, r1
    1272:	b0 f3       	brcs	.-20     	; 0x1260 <game_play+0xc2>
			oled_clear_screen();
    1274:	0e 94 3d 06 	call	0xc7a	; 0xc7a <oled_clear_screen>
			

			global_score++;
    1278:	80 91 49 03 	lds	r24, 0x0349
    127c:	8f 5f       	subi	r24, 0xFF	; 255
    127e:	80 93 49 03 	sts	0x0349, r24
			
			oled_store_string((char[7]){"Return"}, 0, 7);;
    1282:	e6 e0       	ldi	r30, 0x06	; 6
    1284:	f2 e0       	ldi	r31, 0x02	; 2
    1286:	de 01       	movw	r26, r28
    1288:	11 96       	adiw	r26, 0x01	; 1
    128a:	8d 2d       	mov	r24, r13
    128c:	01 90       	ld	r0, Z+
    128e:	0d 92       	st	X+, r0
    1290:	8a 95       	dec	r24
    1292:	e1 f7       	brne	.-8      	; 0x128c <game_play+0xee>
    1294:	47 e0       	ldi	r20, 0x07	; 7
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	ce 01       	movw	r24, r28
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	0e 94 cc 05 	call	0xb98	; 0xb98 <oled_store_string>
			oled_put_string(0, 7, "Return");
    12a4:	86 e0       	ldi	r24, 0x06	; 6
    12a6:	92 e0       	ldi	r25, 0x02	; 2
    12a8:	9f 93       	push	r25
    12aa:	8f 93       	push	r24
    12ac:	df 92       	push	r13
    12ae:	1f 92       	push	r1
    12b0:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_put_string>
			oled_put_string(2*8, 3, "Playing game");
    12b4:	ff 92       	push	r15
    12b6:	ef 92       	push	r14
    12b8:	8f 92       	push	r8
    12ba:	9f 92       	push	r9
    12bc:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_put_string>
			
			
			oled_put_string(3*8, 5, "Score: %i", global_score);
    12c0:	80 91 49 03 	lds	r24, 0x0349
    12c4:	1f 92       	push	r1
    12c6:	8f 93       	push	r24
    12c8:	1f 93       	push	r17
    12ca:	0f 93       	push	r16
    12cc:	af 92       	push	r10
    12ce:	bf 92       	push	r11
    12d0:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_put_string>


			oled_write_screen();
    12d4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <oled_write_screen>
			canjoy_transmit();
    12d8:	0e 94 58 03 	call	0x6b0	; 0x6b0 <canjoy_transmit>
    12dc:	8f ef       	ldi	r24, 0xFF	; 255
    12de:	97 e1       	ldi	r25, 0x17	; 23
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	f1 f7       	brne	.-4      	; 0x12e0 <game_play+0x142>
    12e4:	00 c0       	rjmp	.+0      	; 0x12e6 <game_play+0x148>
    12e6:	00 00       	nop
			_delay_ms(5);
			game_status = canjoy_recieve(&game_status);
    12e8:	be 01       	movw	r22, r28
    12ea:	64 5e       	subi	r22, 0xE4	; 228
    12ec:	7f 4f       	sbci	r23, 0xFF	; 255
    12ee:	ce 01       	movw	r24, r28
    12f0:	87 96       	adiw	r24, 0x27	; 39
    12f2:	0e 94 8b 03 	call	0x716	; 0x716 <canjoy_recieve>
    12f6:	fe 01       	movw	r30, r28
    12f8:	b7 96       	adiw	r30, 0x27	; 39
    12fa:	de 01       	movw	r26, r28
    12fc:	5c 96       	adiw	r26, 0x1c	; 28
    12fe:	8c 2d       	mov	r24, r12
    1300:	01 90       	ld	r0, Z+
    1302:	0d 92       	st	X+, r0
    1304:	8a 95       	dec	r24
    1306:	e1 f7       	brne	.-8      	; 0x1300 <game_play+0x162>
			
			//printf("buffer: %s\n", buffer);
			
			if(game_status.id == CAN_GAME_STATE_OVER){
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1314:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1316:	80 39       	cpi	r24, 0x90	; 144
    1318:	91 40       	sbci	r25, 0x01	; 1
    131a:	11 f4       	brne	.+4      	; 0x1320 <game_play+0x182>
				

				game_over();
    131c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <game_over>
			}
			
			timer_reset(TIMER_3);
    1320:	82 e0       	ldi	r24, 0x02	; 2
    1322:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <timer_reset>
    1326:	9c cf       	rjmp	.-200    	; 0x1260 <game_play+0xc2>
		
		
		
	}
	
}
    1328:	e1 96       	adiw	r28, 0x31	; 49
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	0f 91       	pop	r16
    133c:	ff 90       	pop	r15
    133e:	ef 90       	pop	r14
    1340:	df 90       	pop	r13
    1342:	cf 90       	pop	r12
    1344:	bf 90       	pop	r11
    1346:	af 90       	pop	r10
    1348:	9f 90       	pop	r9
    134a:	8f 90       	pop	r8
    134c:	08 95       	ret

0000134e <joystick_read_x>:


uint16_t joystick_read_x(){
	
	volatile char *ext_joy = (char *) 0x1400;
	ext_joy[0] = 0x04;
    134e:	84 e0       	ldi	r24, 0x04	; 4
    1350:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1354:	81 e4       	ldi	r24, 0x41	; 65
    1356:	8a 95       	dec	r24
    1358:	f1 f7       	brne	.-4      	; 0x1356 <joystick_read_x+0x8>
    135a:	00 c0       	rjmp	.+0      	; 0x135c <joystick_read_x+0xe>
	_delay_us(40);
	return (uint8_t)ext_joy[0];
    135c:	80 91 00 14 	lds	r24, 0x1400
	
}
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	08 95       	ret

00001364 <joystick_read_y>:


uint16_t joystick_read_y(){
	
	volatile char *ext_joy = (char *) 0x1400;
	ext_joy[0] = 0x05;
    1364:	85 e0       	ldi	r24, 0x05	; 5
    1366:	80 93 00 14 	sts	0x1400, r24
    136a:	81 e4       	ldi	r24, 0x41	; 65
    136c:	8a 95       	dec	r24
    136e:	f1 f7       	brne	.-4      	; 0x136c <joystick_read_y+0x8>
    1370:	00 c0       	rjmp	.+0      	; 0x1372 <joystick_read_y+0xe>
	_delay_us(40);
	return (uint8_t)ext_joy[0];
    1372:	80 91 00 14 	lds	r24, 0x1400
	
}
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	08 95       	ret

0000137a <joystick_x_value>:

int16_t joystick_x_value(){
	return (joystick_read_x() - 127);
    137a:	0e 94 a7 09 	call	0x134e	; 0x134e <joystick_read_x>
}
    137e:	8f 57       	subi	r24, 0x7F	; 127
    1380:	91 09       	sbc	r25, r1
    1382:	08 95       	ret

00001384 <joystick_y_value>:

int16_t joystick_y_value(){
	return (joystick_read_y() - 127);
    1384:	0e 94 b2 09 	call	0x1364	; 0x1364 <joystick_read_y>
}
    1388:	8f 57       	subi	r24, 0x7F	; 127
    138a:	91 09       	sbc	r25, r1
    138c:	08 95       	ret

0000138e <slider_left_read>:



uint8_t slider_left_read(){
	volatile char *ext_slide = (char *) 0x1400;
	ext_slide[0] = 0x06;
    138e:	86 e0       	ldi	r24, 0x06	; 6
    1390:	80 93 00 14 	sts	0x1400, r24
    1394:	81 e4       	ldi	r24, 0x41	; 65
    1396:	8a 95       	dec	r24
    1398:	f1 f7       	brne	.-4      	; 0x1396 <slider_left_read+0x8>
    139a:	00 c0       	rjmp	.+0      	; 0x139c <slider_left_read+0xe>
	_delay_us(40);
	return (uint8_t)ext_slide[0];
    139c:	80 91 00 14 	lds	r24, 0x1400
}
    13a0:	08 95       	ret

000013a2 <slider_right_read>:

uint8_t slider_right_read(){
	volatile char *ext_slide = (char *) 0x1400;
	ext_slide[0] = 0x07;
    13a2:	87 e0       	ldi	r24, 0x07	; 7
    13a4:	80 93 00 14 	sts	0x1400, r24
    13a8:	81 e4       	ldi	r24, 0x41	; 65
    13aa:	8a 95       	dec	r24
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <slider_right_read+0x8>
    13ae:	00 c0       	rjmp	.+0      	; 0x13b0 <slider_right_read+0xe>
	_delay_us(40);
	return (uint8_t)ext_slide[0];
    13b0:	80 91 00 14 	lds	r24, 0x1400
}
    13b4:	08 95       	ret

000013b6 <buttons_init>:
int8_t slider_right_value(){
	return (slider_right_read() - 127);	
}

void buttons_init(){
	DDRB &= ~(1 << DDB1);	// ????
    13b6:	b9 98       	cbi	0x17, 1	; 23
	
	//left & right
	DDRB &= (1<< PINB0); //right
    13b8:	87 b3       	in	r24, 0x17	; 23
    13ba:	81 70       	andi	r24, 0x01	; 1
    13bc:	87 bb       	out	0x17, r24	; 23
	DDRB &= (1<< PINB1); //left
    13be:	87 b3       	in	r24, 0x17	; 23
    13c0:	82 70       	andi	r24, 0x02	; 2
    13c2:	87 bb       	out	0x17, r24	; 23

	//joystick button activate
	DDRB &= (1 << PINB2);
    13c4:	87 b3       	in	r24, 0x17	; 23
    13c6:	84 70       	andi	r24, 0x04	; 4
    13c8:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << PINB2);
    13ca:	c2 9a       	sbi	0x18, 2	; 24
    13cc:	08 95       	ret

000013ce <joystick_button_read>:
}

uint8_t joystick_button_read(){
	int button = (PINB & (1 << PINB3));
	if (button > 0){
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	b3 99       	sbic	0x16, 3	; 22
    13d2:	80 e0       	ldi	r24, 0x00	; 0
	else{
		return 1;
	}
	
	
}
    13d4:	08 95       	ret

000013d6 <button_left_read>:

uint8_t button_left_read(){
	int button = (PINB & (1 << PINB1));
	if (button > 0){
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	b1 9b       	sbis	0x16, 1	; 22
    13da:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
}
    13dc:	08 95       	ret

000013de <button_right_read>:

uint8_t button_right_read(){
	int button = (PINB & (1 << PINB0));
	if (button > 0){
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	b0 9b       	sbis	0x16, 0	; 22
    13e2:	80 e0       	ldi	r24, 0x00	; 0
	}
	else{
		return 0;
	}
	
}
    13e4:	08 95       	ret

000013e6 <main>:
*/



int main(void){
	fdevopen(uart_Transmit, uart_Receive);
    13e6:	6a e5       	ldi	r22, 0x5A	; 90
    13e8:	74 e0       	ldi	r23, 0x04	; 4
    13ea:	86 e5       	ldi	r24, 0x56	; 86
    13ec:	94 e0       	ldi	r25, 0x04	; 4
    13ee:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <fdevopen>
	
	MCUCR |= (1 << SRE);
    13f2:	85 b7       	in	r24, 0x35	; 53
    13f4:	80 68       	ori	r24, 0x80	; 128
    13f6:	85 bf       	out	0x35, r24	; 53
	
	uart_Init(MYUBRR);
    13f8:	8f e1       	ldi	r24, 0x1F	; 31
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 5e 04 	call	0x8bc	; 0x8bc <uart_Init>
	
	
	buttons_init(); 
    1400:	0e 94 db 09 	call	0x13b6	; 0x13b6 <buttons_init>

	
	Menuitem* menu = create_menu();
    1404:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <create_menu>
	menu_selector = menu;
    1408:	90 93 5e 03 	sts	0x035E, r25
    140c:	80 93 5d 03 	sts	0x035D, r24

	

	
	timer_init();	
    1410:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <timer_init>
	oled_init();
    1414:	0e 94 53 05 	call	0xaa6	; 0xaa6 <oled_init>

	
	while(1){


		gui_run();
    1418:	0e 94 42 05 	call	0xa84	; 0xa84 <gui_run>

		oled_refresh_60Hz();
    141c:	0e 94 ed 05 	call	0xbda	; 0xbda <oled_refresh_60Hz>
    1420:	fb cf       	rjmp	.-10     	; 0x1418 <main+0x32>

00001422 <new_Menuitem>:

Menuitem* new_Menuitem(
char* name,				
void (*fn)(void),		//pointer to function
uint8_t num_submenus	
){
    1422:	df 92       	push	r13
    1424:	ef 92       	push	r14
    1426:	ff 92       	push	r15
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	7c 01       	movw	r14, r24
    1432:	8b 01       	movw	r16, r22
    1434:	d4 2e       	mov	r13, r20
	Menuitem* this = malloc(sizeof(Menuitem));
    1436:	89 e0       	ldi	r24, 0x09	; 9
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 cd 10 	call	0x219a	; 0x219a <malloc>
    143e:	ec 01       	movw	r28, r24
	this->name = name;
    1440:	fe 82       	std	Y+6, r15	; 0x06
    1442:	ed 82       	std	Y+5, r14	; 0x05
	this->fn = fn;
    1444:	18 87       	std	Y+8, r17	; 0x08
    1446:	0f 83       	std	Y+7, r16	; 0x07
	
	this->num_submenus = num_submenus;
    1448:	d8 82       	st	Y, r13
	this->submenus = malloc(sizeof(Menuitem) * num_submenus);
    144a:	4d 2d       	mov	r20, r13
    144c:	50 e0       	ldi	r21, 0x00	; 0
    144e:	ca 01       	movw	r24, r20
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	84 0f       	add	r24, r20
    145e:	95 1f       	adc	r25, r21
    1460:	0e 94 cd 10 	call	0x219a	; 0x219a <malloc>
    1464:	9a 83       	std	Y+2, r25	; 0x02
    1466:	89 83       	std	Y+1, r24	; 0x01
	
	return this;
}
    1468:	ce 01       	movw	r24, r28
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	ff 90       	pop	r15
    1474:	ef 90       	pop	r14
    1476:	df 90       	pop	r13
    1478:	08 95       	ret

0000147a <assign_parents>:


void assign_parents(Menuitem* menu){
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	ec 01       	movw	r28, r24
	for(uint8_t n = 0; n < menu->num_submenus; n++){
    1482:	88 81       	ld	r24, Y
    1484:	88 23       	and	r24, r24
    1486:	01 f1       	breq	.+64     	; 0x14c8 <assign_parents+0x4e>
    1488:	10 e0       	ldi	r17, 0x00	; 0
		menu->submenus[n]->parent = menu;
    148a:	81 2f       	mov	r24, r17
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	e9 81       	ldd	r30, Y+1	; 0x01
    1494:	fa 81       	ldd	r31, Y+2	; 0x02
    1496:	e8 0f       	add	r30, r24
    1498:	f9 1f       	adc	r31, r25
    149a:	01 90       	ld	r0, Z+
    149c:	f0 81       	ld	r31, Z
    149e:	e0 2d       	mov	r30, r0
    14a0:	d4 83       	std	Z+4, r29	; 0x04
    14a2:	c3 83       	std	Z+3, r28	; 0x03
		if(menu->submenus[n]->num_submenus > 0){
    14a4:	29 81       	ldd	r18, Y+1	; 0x01
    14a6:	3a 81       	ldd	r19, Y+2	; 0x02
    14a8:	f9 01       	movw	r30, r18
    14aa:	e8 0f       	add	r30, r24
    14ac:	f9 1f       	adc	r31, r25
    14ae:	01 90       	ld	r0, Z+
    14b0:	f0 81       	ld	r31, Z
    14b2:	e0 2d       	mov	r30, r0
    14b4:	80 81       	ld	r24, Z
    14b6:	88 23       	and	r24, r24
    14b8:	19 f0       	breq	.+6      	; 0x14c0 <assign_parents+0x46>
			assign_parents(menu->submenus[n]);
    14ba:	cf 01       	movw	r24, r30
    14bc:	0e 94 3d 0a 	call	0x147a	; 0x147a <assign_parents>
	return this;
}


void assign_parents(Menuitem* menu){
	for(uint8_t n = 0; n < menu->num_submenus; n++){
    14c0:	1f 5f       	subi	r17, 0xFF	; 255
    14c2:	88 81       	ld	r24, Y
    14c4:	18 17       	cp	r17, r24
    14c6:	08 f3       	brcs	.-62     	; 0x148a <assign_parents+0x10>
		menu->submenus[n]->parent = menu;
		if(menu->submenus[n]->num_submenus > 0){
			assign_parents(menu->submenus[n]);
		}
	}
}
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	08 95       	ret

000014d0 <create_menu>:


Menuitem* create_menu(){
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
	

	Menuitem* base = new_Menuitem("Main", NULL, 3);
    14d8:	43 e0       	ldi	r20, 0x03	; 3
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	89 ee       	ldi	r24, 0xE9	; 233
    14e0:	91 e0       	ldi	r25, 0x01	; 1
    14e2:	0e 94 11 0a 	call	0x1422	; 0x1422 <new_Menuitem>
    14e6:	ec 01       	movw	r28, r24
	
	base->submenus[0] = new_Menuitem("Games", NULL, 2);
    14e8:	09 81       	ldd	r16, Y+1	; 0x01
    14ea:	1a 81       	ldd	r17, Y+2	; 0x02
    14ec:	42 e0       	ldi	r20, 0x02	; 2
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	80 e5       	ldi	r24, 0x50	; 80
    14f4:	92 e0       	ldi	r25, 0x02	; 2
    14f6:	0e 94 11 0a 	call	0x1422	; 0x1422 <new_Menuitem>
    14fa:	f8 01       	movw	r30, r16
    14fc:	91 83       	std	Z+1, r25	; 0x01
    14fe:	80 83       	st	Z, r24
		base->submenus[0]->submenus[0] = new_Menuitem("Game", game_play, 0);
    1500:	e9 81       	ldd	r30, Y+1	; 0x01
    1502:	fa 81       	ldd	r31, Y+2	; 0x02
    1504:	01 90       	ld	r0, Z+
    1506:	f0 81       	ld	r31, Z
    1508:	e0 2d       	mov	r30, r0
    150a:	01 81       	ldd	r16, Z+1	; 0x01
    150c:	12 81       	ldd	r17, Z+2	; 0x02
    150e:	40 e0       	ldi	r20, 0x00	; 0
    1510:	6f ec       	ldi	r22, 0xCF	; 207
    1512:	78 e0       	ldi	r23, 0x08	; 8
    1514:	86 e5       	ldi	r24, 0x56	; 86
    1516:	92 e0       	ldi	r25, 0x02	; 2
    1518:	0e 94 11 0a 	call	0x1422	; 0x1422 <new_Menuitem>
    151c:	f8 01       	movw	r30, r16
    151e:	91 83       	std	Z+1, r25	; 0x01
    1520:	80 83       	st	Z, r24
		base->submenus[0]->submenus[1] = new_Menuitem("Snake", NULL, 2);
    1522:	e9 81       	ldd	r30, Y+1	; 0x01
    1524:	fa 81       	ldd	r31, Y+2	; 0x02
    1526:	01 90       	ld	r0, Z+
    1528:	f0 81       	ld	r31, Z
    152a:	e0 2d       	mov	r30, r0
    152c:	01 81       	ldd	r16, Z+1	; 0x01
    152e:	12 81       	ldd	r17, Z+2	; 0x02
    1530:	42 e0       	ldi	r20, 0x02	; 2
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	8b e5       	ldi	r24, 0x5B	; 91
    1538:	92 e0       	ldi	r25, 0x02	; 2
    153a:	0e 94 11 0a 	call	0x1422	; 0x1422 <new_Menuitem>
    153e:	f8 01       	movw	r30, r16
    1540:	93 83       	std	Z+3, r25	; 0x03
    1542:	82 83       	std	Z+2, r24	; 0x02
			base->submenus[0]->submenus[1]->submenus[0] = new_Menuitem("Play", snake_run, 0);
    1544:	e9 81       	ldd	r30, Y+1	; 0x01
    1546:	fa 81       	ldd	r31, Y+2	; 0x02
    1548:	01 90       	ld	r0, Z+
    154a:	f0 81       	ld	r31, Z
    154c:	e0 2d       	mov	r30, r0
    154e:	01 80       	ldd	r0, Z+1	; 0x01
    1550:	f2 81       	ldd	r31, Z+2	; 0x02
    1552:	e0 2d       	mov	r30, r0
    1554:	02 80       	ldd	r0, Z+2	; 0x02
    1556:	f3 81       	ldd	r31, Z+3	; 0x03
    1558:	e0 2d       	mov	r30, r0
    155a:	01 81       	ldd	r16, Z+1	; 0x01
    155c:	12 81       	ldd	r17, Z+2	; 0x02
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	6c ef       	ldi	r22, 0xFC	; 252
    1562:	7d e0       	ldi	r23, 0x0D	; 13
    1564:	81 e6       	ldi	r24, 0x61	; 97
    1566:	92 e0       	ldi	r25, 0x02	; 2
    1568:	0e 94 11 0a 	call	0x1422	; 0x1422 <new_Menuitem>
    156c:	f8 01       	movw	r30, r16
    156e:	91 83       	std	Z+1, r25	; 0x01
    1570:	80 83       	st	Z, r24
			base->submenus[0]->submenus[1]->submenus[1] = new_Menuitem("Difficulty", snake_settings, 0);
    1572:	e9 81       	ldd	r30, Y+1	; 0x01
    1574:	fa 81       	ldd	r31, Y+2	; 0x02
    1576:	01 90       	ld	r0, Z+
    1578:	f0 81       	ld	r31, Z
    157a:	e0 2d       	mov	r30, r0
    157c:	01 80       	ldd	r0, Z+1	; 0x01
    157e:	f2 81       	ldd	r31, Z+2	; 0x02
    1580:	e0 2d       	mov	r30, r0
    1582:	02 80       	ldd	r0, Z+2	; 0x02
    1584:	f3 81       	ldd	r31, Z+3	; 0x03
    1586:	e0 2d       	mov	r30, r0
    1588:	01 81       	ldd	r16, Z+1	; 0x01
    158a:	12 81       	ldd	r17, Z+2	; 0x02
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	6e e0       	ldi	r22, 0x0E	; 14
    1590:	7c e0       	ldi	r23, 0x0C	; 12
    1592:	86 e6       	ldi	r24, 0x66	; 102
    1594:	92 e0       	ldi	r25, 0x02	; 2
    1596:	0e 94 11 0a 	call	0x1422	; 0x1422 <new_Menuitem>
    159a:	f8 01       	movw	r30, r16
    159c:	93 83       	std	Z+3, r25	; 0x03
    159e:	82 83       	std	Z+2, r24	; 0x02
			

	base->submenus[1] = new_Menuitem("Settings", NULL, 3);
    15a0:	09 81       	ldd	r16, Y+1	; 0x01
    15a2:	1a 81       	ldd	r17, Y+2	; 0x02
    15a4:	43 e0       	ldi	r20, 0x03	; 3
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	81 e7       	ldi	r24, 0x71	; 113
    15ac:	92 e0       	ldi	r25, 0x02	; 2
    15ae:	0e 94 11 0a 	call	0x1422	; 0x1422 <new_Menuitem>
    15b2:	f8 01       	movw	r30, r16
    15b4:	93 83       	std	Z+3, r25	; 0x03
    15b6:	82 83       	std	Z+2, r24	; 0x02
		base->submenus[1]->submenus[0] = new_Menuitem("Contrast", oled_change_contrast, 0);
    15b8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ba:	fa 81       	ldd	r31, Y+2	; 0x02
    15bc:	02 80       	ldd	r0, Z+2	; 0x02
    15be:	f3 81       	ldd	r31, Z+3	; 0x03
    15c0:	e0 2d       	mov	r30, r0
    15c2:	01 81       	ldd	r16, Z+1	; 0x01
    15c4:	12 81       	ldd	r17, Z+2	; 0x02
    15c6:	40 e0       	ldi	r20, 0x00	; 0
    15c8:	6c e5       	ldi	r22, 0x5C	; 92
    15ca:	76 e0       	ldi	r23, 0x06	; 6
    15cc:	81 ef       	ldi	r24, 0xF1	; 241
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	0e 94 11 0a 	call	0x1422	; 0x1422 <new_Menuitem>
    15d4:	f8 01       	movw	r30, r16
    15d6:	91 83       	std	Z+1, r25	; 0x01
    15d8:	80 83       	st	Z, r24
		base->submenus[1]->submenus[1] = new_Menuitem("Toggle negative", oled_toggle_negative, 0);
    15da:	e9 81       	ldd	r30, Y+1	; 0x01
    15dc:	fa 81       	ldd	r31, Y+2	; 0x02
    15de:	02 80       	ldd	r0, Z+2	; 0x02
    15e0:	f3 81       	ldd	r31, Z+3	; 0x03
    15e2:	e0 2d       	mov	r30, r0
    15e4:	01 81       	ldd	r16, Z+1	; 0x01
    15e6:	12 81       	ldd	r17, Z+2	; 0x02
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	6b e4       	ldi	r22, 0x4B	; 75
    15ec:	76 e0       	ldi	r23, 0x06	; 6
    15ee:	8a e7       	ldi	r24, 0x7A	; 122
    15f0:	92 e0       	ldi	r25, 0x02	; 2
    15f2:	0e 94 11 0a 	call	0x1422	; 0x1422 <new_Menuitem>
    15f6:	f8 01       	movw	r30, r16
    15f8:	93 83       	std	Z+3, r25	; 0x03
    15fa:	82 83       	std	Z+2, r24	; 0x02
		base->submenus[1]->submenus[2] = new_Menuitem("Seizure", oled_epleptic_seizure, 0);
    15fc:	e9 81       	ldd	r30, Y+1	; 0x01
    15fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1600:	02 80       	ldd	r0, Z+2	; 0x02
    1602:	f3 81       	ldd	r31, Z+3	; 0x03
    1604:	e0 2d       	mov	r30, r0
    1606:	01 81       	ldd	r16, Z+1	; 0x01
    1608:	12 81       	ldd	r17, Z+2	; 0x02
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	6c ee       	ldi	r22, 0xEC	; 236
    160e:	76 e0       	ldi	r23, 0x06	; 6
    1610:	8a e8       	ldi	r24, 0x8A	; 138
    1612:	92 e0       	ldi	r25, 0x02	; 2
    1614:	0e 94 11 0a 	call	0x1422	; 0x1422 <new_Menuitem>
    1618:	f8 01       	movw	r30, r16
    161a:	95 83       	std	Z+5, r25	; 0x05
    161c:	84 83       	std	Z+4, r24	; 0x04
		
		
	base->submenus[2] = new_Menuitem("Tests", NULL, 2);
    161e:	09 81       	ldd	r16, Y+1	; 0x01
    1620:	1a 81       	ldd	r17, Y+2	; 0x02
    1622:	42 e0       	ldi	r20, 0x02	; 2
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	82 e9       	ldi	r24, 0x92	; 146
    162a:	92 e0       	ldi	r25, 0x02	; 2
    162c:	0e 94 11 0a 	call	0x1422	; 0x1422 <new_Menuitem>
    1630:	f8 01       	movw	r30, r16
    1632:	95 83       	std	Z+5, r25	; 0x05
    1634:	84 83       	std	Z+4, r24	; 0x04
		base->submenus[2]->submenus[0] = new_Menuitem("Can", NULL, 1);
    1636:	e9 81       	ldd	r30, Y+1	; 0x01
    1638:	fa 81       	ldd	r31, Y+2	; 0x02
    163a:	04 80       	ldd	r0, Z+4	; 0x04
    163c:	f5 81       	ldd	r31, Z+5	; 0x05
    163e:	e0 2d       	mov	r30, r0
    1640:	01 81       	ldd	r16, Z+1	; 0x01
    1642:	12 81       	ldd	r17, Z+2	; 0x02
    1644:	41 e0       	ldi	r20, 0x01	; 1
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	70 e0       	ldi	r23, 0x00	; 0
    164a:	88 e9       	ldi	r24, 0x98	; 152
    164c:	92 e0       	ldi	r25, 0x02	; 2
    164e:	0e 94 11 0a 	call	0x1422	; 0x1422 <new_Menuitem>
    1652:	f8 01       	movw	r30, r16
    1654:	91 83       	std	Z+1, r25	; 0x01
    1656:	80 83       	st	Z, r24
			base->submenus[2]->submenus[0]->submenus[0] = new_Menuitem("Loopback", can_test_loopback, 0);
    1658:	e9 81       	ldd	r30, Y+1	; 0x01
    165a:	fa 81       	ldd	r31, Y+2	; 0x02
    165c:	04 80       	ldd	r0, Z+4	; 0x04
    165e:	f5 81       	ldd	r31, Z+5	; 0x05
    1660:	e0 2d       	mov	r30, r0
    1662:	01 80       	ldd	r0, Z+1	; 0x01
    1664:	f2 81       	ldd	r31, Z+2	; 0x02
    1666:	e0 2d       	mov	r30, r0
    1668:	01 90       	ld	r0, Z+
    166a:	f0 81       	ld	r31, Z
    166c:	e0 2d       	mov	r30, r0
    166e:	01 81       	ldd	r16, Z+1	; 0x01
    1670:	12 81       	ldd	r17, Z+2	; 0x02
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	67 e1       	ldi	r22, 0x17	; 23
    1676:	73 e0       	ldi	r23, 0x03	; 3
    1678:	8c e9       	ldi	r24, 0x9C	; 156
    167a:	92 e0       	ldi	r25, 0x02	; 2
    167c:	0e 94 11 0a 	call	0x1422	; 0x1422 <new_Menuitem>
    1680:	f8 01       	movw	r30, r16
    1682:	91 83       	std	Z+1, r25	; 0x01
    1684:	80 83       	st	Z, r24
			//base->submenus[2]->submenus[0]->submenus[1] = new_Menuitem("Node1 to Node2", can_test_transmit, 0);
			//base->submenus[2]->submenus[0]->submenus[2] = new_Menuitem("Node2 to Node1", can_test_recieve, 0);
			
		base->submenus[2]->submenus[1] = new_Menuitem("SRAM", SRAM_test, 0);
    1686:	e9 81       	ldd	r30, Y+1	; 0x01
    1688:	fa 81       	ldd	r31, Y+2	; 0x02
    168a:	04 80       	ldd	r0, Z+4	; 0x04
    168c:	f5 81       	ldd	r31, Z+5	; 0x05
    168e:	e0 2d       	mov	r30, r0
    1690:	01 81       	ldd	r16, Z+1	; 0x01
    1692:	12 81       	ldd	r17, Z+2	; 0x02
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	66 ee       	ldi	r22, 0xE6	; 230
    1698:	7e e0       	ldi	r23, 0x0E	; 14
    169a:	85 ea       	ldi	r24, 0xA5	; 165
    169c:	92 e0       	ldi	r25, 0x02	; 2
    169e:	0e 94 11 0a 	call	0x1422	; 0x1422 <new_Menuitem>
    16a2:	f8 01       	movw	r30, r16
    16a4:	93 83       	std	Z+3, r25	; 0x03
    16a6:	82 83       	std	Z+2, r24	; 0x02
		
		
		
	assign_parents(base);
    16a8:	ce 01       	movw	r24, r28
    16aa:	0e 94 3d 0a 	call	0x147a	; 0x147a <assign_parents>
	
	return base;
}
    16ae:	ce 01       	movw	r24, r28
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	1f 91       	pop	r17
    16b6:	0f 91       	pop	r16
    16b8:	08 95       	ret

000016ba <menu_submenu>:



//works
Menuitem* menu_submenu(Menuitem* m){
    16ba:	fc 01       	movw	r30, r24
	if (m->num_submenus != 0){
    16bc:	80 81       	ld	r24, Z
    16be:	88 23       	and	r24, r24
    16c0:	31 f0       	breq	.+12     	; 0x16ce <menu_submenu+0x14>
		return m->submenus[0];
    16c2:	01 80       	ldd	r0, Z+1	; 0x01
    16c4:	f2 81       	ldd	r31, Z+2	; 0x02
    16c6:	e0 2d       	mov	r30, r0
    16c8:	80 81       	ld	r24, Z
    16ca:	91 81       	ldd	r25, Z+1	; 0x01
    16cc:	08 95       	ret
	}
	else{
		return m;
    16ce:	8e 2f       	mov	r24, r30
    16d0:	9f 2f       	mov	r25, r31
	}
}
    16d2:	08 95       	ret

000016d4 <menu_parent>:

//works
Menuitem* menu_parent(Menuitem* m){
    16d4:	fc 01       	movw	r30, r24
	if (m->parent != NULL){
    16d6:	83 81       	ldd	r24, Z+3	; 0x03
    16d8:	94 81       	ldd	r25, Z+4	; 0x04
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <menu_parent+0xc>
		return m->parent;
	}
	else{
		return m;
    16de:	cf 01       	movw	r24, r30
	}
}
    16e0:	08 95       	ret

000016e2 <menu_next>:

//works
Menuitem* menu_next(Menuitem* m){
    16e2:	cf 93       	push	r28
    16e4:	dc 01       	movw	r26, r24
	}
}

//works
Menuitem* menu_parent(Menuitem* m){
	if (m->parent != NULL){
    16e6:	13 96       	adiw	r26, 0x03	; 3
    16e8:	ed 91       	ld	r30, X+
    16ea:	fc 91       	ld	r31, X
    16ec:	14 97       	sbiw	r26, 0x04	; 4
    16ee:	30 97       	sbiw	r30, 0x00	; 0
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <menu_next+0x12>
		return m->parent;
	}
	else{
		return m;
    16f2:	fc 01       	movw	r30, r24
}

//works
Menuitem* menu_next(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	for(uint8_t n = 0; n < parent->num_submenus; n++){
    16f4:	c0 81       	ld	r28, Z
    16f6:	cc 23       	and	r28, r28
    16f8:	d9 f0       	breq	.+54     	; 0x1730 <menu_next+0x4e>
		if(parent->submenus[n] == m  &&  n < parent->num_submenus){
    16fa:	61 81       	ldd	r22, Z+1	; 0x01
    16fc:	72 81       	ldd	r23, Z+2	; 0x02
    16fe:	fb 01       	movw	r30, r22
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	c9 01       	movw	r24, r18
    1706:	41 91       	ld	r20, Z+
    1708:	51 91       	ld	r21, Z+
    170a:	4a 17       	cp	r20, r26
    170c:	5b 07       	cpc	r21, r27
    170e:	59 f4       	brne	.+22     	; 0x1726 <menu_next+0x44>
    1710:	2c 17       	cp	r18, r28
    1712:	48 f4       	brcc	.+18     	; 0x1726 <menu_next+0x44>
			return parent->submenus[n+1];
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	fc 01       	movw	r30, r24
    1718:	ee 0f       	add	r30, r30
    171a:	ff 1f       	adc	r31, r31
    171c:	e6 0f       	add	r30, r22
    171e:	f7 1f       	adc	r31, r23
    1720:	80 81       	ld	r24, Z
    1722:	91 81       	ldd	r25, Z+1	; 0x01
    1724:	0a c0       	rjmp	.+20     	; 0x173a <menu_next+0x58>
    1726:	2f 5f       	subi	r18, 0xFF	; 255
    1728:	3f 4f       	sbci	r19, 0xFF	; 255
}

//works
Menuitem* menu_next(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	for(uint8_t n = 0; n < parent->num_submenus; n++){
    172a:	2c 17       	cp	r18, r28
    172c:	58 f3       	brcs	.-42     	; 0x1704 <menu_next+0x22>
    172e:	03 c0       	rjmp	.+6      	; 0x1736 <menu_next+0x54>
		if(parent->submenus[n] == m  &&  n < parent->num_submenus){
			return parent->submenus[n+1];
		}
	}
	return m;
    1730:	8a 2f       	mov	r24, r26
    1732:	9b 2f       	mov	r25, r27
    1734:	02 c0       	rjmp	.+4      	; 0x173a <menu_next+0x58>
    1736:	8a 2f       	mov	r24, r26
    1738:	9b 2f       	mov	r25, r27
}
    173a:	cf 91       	pop	r28
    173c:	08 95       	ret

0000173e <menu_prev>:

//works
Menuitem* menu_prev(Menuitem* m){
    173e:	cf 93       	push	r28
    1740:	dc 01       	movw	r26, r24
	}
}

//works
Menuitem* menu_parent(Menuitem* m){
	if (m->parent != NULL){
    1742:	13 96       	adiw	r26, 0x03	; 3
    1744:	ed 91       	ld	r30, X+
    1746:	fc 91       	ld	r31, X
    1748:	14 97       	sbiw	r26, 0x04	; 4
    174a:	30 97       	sbiw	r30, 0x00	; 0
    174c:	09 f4       	brne	.+2      	; 0x1750 <menu_prev+0x12>
		return m->parent;
	}
	else{
		return m;
    174e:	fc 01       	movw	r30, r24

//works
Menuitem* menu_prev(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	
	for(uint8_t n = 0; n < parent->num_submenus; n++){
    1750:	c0 81       	ld	r28, Z
    1752:	cc 23       	and	r28, r28
    1754:	e1 f0       	breq	.+56     	; 0x178e <menu_prev+0x50>
		if(parent->submenus[n] == m  &&  n > 0){
    1756:	61 81       	ldd	r22, Z+1	; 0x01
    1758:	72 81       	ldd	r23, Z+2	; 0x02
    175a:	fb 01       	movw	r30, r22
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	c9 01       	movw	r24, r18
    1762:	41 91       	ld	r20, Z+
    1764:	51 91       	ld	r21, Z+
    1766:	4a 17       	cp	r20, r26
    1768:	5b 07       	cpc	r21, r27
    176a:	61 f4       	brne	.+24     	; 0x1784 <menu_prev+0x46>
    176c:	22 23       	and	r18, r18
    176e:	51 f0       	breq	.+20     	; 0x1784 <menu_prev+0x46>
			return parent->submenus[n-1];
    1770:	81 50       	subi	r24, 0x01	; 1
    1772:	90 48       	sbci	r25, 0x80	; 128
    1774:	fc 01       	movw	r30, r24
    1776:	ee 0f       	add	r30, r30
    1778:	ff 1f       	adc	r31, r31
    177a:	e6 0f       	add	r30, r22
    177c:	f7 1f       	adc	r31, r23
    177e:	80 81       	ld	r24, Z
    1780:	91 81       	ldd	r25, Z+1	; 0x01
    1782:	0a c0       	rjmp	.+20     	; 0x1798 <menu_prev+0x5a>
    1784:	2f 5f       	subi	r18, 0xFF	; 255
    1786:	3f 4f       	sbci	r19, 0xFF	; 255

//works
Menuitem* menu_prev(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	
	for(uint8_t n = 0; n < parent->num_submenus; n++){
    1788:	2c 17       	cp	r18, r28
    178a:	50 f3       	brcs	.-44     	; 0x1760 <menu_prev+0x22>
    178c:	03 c0       	rjmp	.+6      	; 0x1794 <menu_prev+0x56>
		if(parent->submenus[n] == m  &&  n > 0){
			return parent->submenus[n-1];
		}
	}
	return m;
    178e:	8a 2f       	mov	r24, r26
    1790:	9b 2f       	mov	r25, r27
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <menu_prev+0x5a>
    1794:	8a 2f       	mov	r24, r26
    1796:	9b 2f       	mov	r25, r27
}
    1798:	cf 91       	pop	r28
    179a:	08 95       	ret

0000179c <menu_submenu_number>:
	}
}

//works
Menuitem* menu_parent(Menuitem* m){
	if (m->parent != NULL){
    179c:	dc 01       	movw	r26, r24
    179e:	13 96       	adiw	r26, 0x03	; 3
    17a0:	ed 91       	ld	r30, X+
    17a2:	fc 91       	ld	r31, X
    17a4:	14 97       	sbiw	r26, 0x04	; 4
    17a6:	30 97       	sbiw	r30, 0x00	; 0
    17a8:	09 f4       	brne	.+2      	; 0x17ac <menu_submenu_number+0x10>
		return m->parent;
	}
	else{
		return m;
    17aa:	fc 01       	movw	r30, r24

//works
int menu_submenu_number(Menuitem* m){
	//oled_goto_pos(0,5); removed in conjunction with oled/gui
	Menuitem* parent = menu_parent(m);
	for(int i = 0; i < parent->num_submenus; i++){
    17ac:	60 81       	ld	r22, Z
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	16 16       	cp	r1, r22
    17b2:	17 06       	cpc	r1, r23
    17b4:	fc f4       	brge	.+62     	; 0x17f4 <menu_submenu_number+0x58>
		if(parent->submenus[i] == m)
    17b6:	01 80       	ldd	r0, Z+1	; 0x01
    17b8:	f2 81       	ldd	r31, Z+2	; 0x02
    17ba:	e0 2d       	mov	r30, r0
    17bc:	20 81       	ld	r18, Z
    17be:	31 81       	ldd	r19, Z+1	; 0x01
    17c0:	28 17       	cp	r18, r24
    17c2:	39 07       	cpc	r19, r25
    17c4:	61 f4       	brne	.+24     	; 0x17de <menu_submenu_number+0x42>
    17c6:	06 c0       	rjmp	.+12     	; 0x17d4 <menu_submenu_number+0x38>
    17c8:	41 91       	ld	r20, Z+
    17ca:	51 91       	ld	r21, Z+
    17cc:	48 17       	cp	r20, r24
    17ce:	59 07       	cpc	r21, r25
    17d0:	49 f4       	brne	.+18     	; 0x17e4 <menu_submenu_number+0x48>
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <menu_submenu_number+0x3c>

//works
int menu_submenu_number(Menuitem* m){
	//oled_goto_pos(0,5); removed in conjunction with oled/gui
	Menuitem* parent = menu_parent(m);
	for(int i = 0; i < parent->num_submenus; i++){
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
		if(parent->submenus[i] == m)

			return i + 1;
    17d8:	c9 01       	movw	r24, r18
    17da:	01 96       	adiw	r24, 0x01	; 1
    17dc:	08 95       	ret
    17de:	32 96       	adiw	r30, 0x02	; 2

//works
int menu_submenu_number(Menuitem* m){
	//oled_goto_pos(0,5); removed in conjunction with oled/gui
	Menuitem* parent = menu_parent(m);
	for(int i = 0; i < parent->num_submenus; i++){
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	2f 5f       	subi	r18, 0xFF	; 255
    17e6:	3f 4f       	sbci	r19, 0xFF	; 255
    17e8:	26 17       	cp	r18, r22
    17ea:	37 07       	cpc	r19, r23
    17ec:	6c f3       	brlt	.-38     	; 0x17c8 <menu_submenu_number+0x2c>
		if(parent->submenus[i] == m)

			return i + 1;
	}
	return 0; 		//make safeguarding from this?
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	08 95       	ret
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	90 e0       	ldi	r25, 0x00	; 0
}
    17f8:	08 95       	ret

000017fa <menu_name>:
	//return this->name;
//}

char* menu_name(Menuitem* m){
	return m->name;
}
    17fa:	fc 01       	movw	r30, r24
    17fc:	85 81       	ldd	r24, Z+5	; 0x05
    17fe:	96 81       	ldd	r25, Z+6	; 0x06
    1800:	08 95       	ret

00001802 <snake_init>:

void snake_tests(){

}

void snake_init(int8_t snake[][3]){
    1802:	fc 01       	movw	r30, r24
	
	slength = 3;
    1804:	83 e0       	ldi	r24, 0x03	; 3
    1806:	80 93 8f 03 	sts	0x038F, r24
	
	snake[0][pos_x] = 0;
    180a:	10 82       	st	Z, r1
	snake[0][pos_y] = 0;
    180c:	11 82       	std	Z+1, r1	; 0x01
	
	snake[1][pos_x] = 0;
    180e:	13 82       	std	Z+3, r1	; 0x03
	snake[1][pos_y] = 1;
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	84 83       	std	Z+4, r24	; 0x04
	
	snake[2][pos_x] = 0;
    1814:	16 82       	std	Z+6, r1	; 0x06
	snake[2][pos_y] = 2;
    1816:	82 e0       	ldi	r24, 0x02	; 2
    1818:	87 83       	std	Z+7, r24	; 0x07
    181a:	08 95       	ret

0000181c <snake_settings>:
	}
	

}

void snake_settings(){
    181c:	6f 92       	push	r6
    181e:	7f 92       	push	r7
    1820:	8f 92       	push	r8
    1822:	9f 92       	push	r9
    1824:	af 92       	push	r10
    1826:	bf 92       	push	r11
    1828:	cf 92       	push	r12
    182a:	df 92       	push	r13
    182c:	ef 92       	push	r14
    182e:	ff 92       	push	r15
    1830:	0f 93       	push	r16
    1832:	1f 93       	push	r17
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
		difficulty = slider_right_read();
		
		if(timer_read(TIMER_3) > 1000){
			
			oled_clear_screen();
			oled_put_string(0*8, 0, "Set difficulty");
    1838:	0f 2e       	mov	r0, r31
    183a:	fa ea       	ldi	r31, 0xAA	; 170
    183c:	ef 2e       	mov	r14, r31
    183e:	f2 e0       	ldi	r31, 0x02	; 2
    1840:	ff 2e       	mov	r15, r31
    1842:	f0 2d       	mov	r31, r0
			oled_put_string(0, 1, "Difficulty:%u", difficulty);
    1844:	09 eb       	ldi	r16, 0xB9	; 185
    1846:	12 e0       	ldi	r17, 0x02	; 2
    1848:	77 24       	eor	r7, r7
    184a:	73 94       	inc	r7
			oled_put_string(0, 3, "Walls");
    184c:	c7 ec       	ldi	r28, 0xC7	; 199
    184e:	d2 e0       	ldi	r29, 0x02	; 2
    1850:	0f 2e       	mov	r0, r31
    1852:	f3 e0       	ldi	r31, 0x03	; 3
    1854:	8f 2e       	mov	r8, r31
    1856:	f0 2d       	mov	r31, r0
			if(no_walls){
				oled_put_string(7*8,3,"OFF");
			}
			else{
				oled_put_string(7*8,3,"ON");
    1858:	0f 2e       	mov	r0, r31
    185a:	f1 ed       	ldi	r31, 0xD1	; 209
    185c:	af 2e       	mov	r10, r31
    185e:	f2 e0       	ldi	r31, 0x02	; 2
    1860:	bf 2e       	mov	r11, r31
    1862:	f0 2d       	mov	r31, r0
    1864:	0f 2e       	mov	r0, r31
    1866:	f8 e3       	ldi	r31, 0x38	; 56
    1868:	6f 2e       	mov	r6, r31
    186a:	f0 2d       	mov	r31, r0
			oled_clear_screen();
			oled_put_string(0*8, 0, "Set difficulty");
			oled_put_string(0, 1, "Difficulty:%u", difficulty);
			oled_put_string(0, 3, "Walls");
			if(no_walls){
				oled_put_string(7*8,3,"OFF");
    186c:	0f 2e       	mov	r0, r31
    186e:	fd ec       	ldi	r31, 0xCD	; 205
    1870:	cf 2e       	mov	r12, r31
    1872:	f2 e0       	ldi	r31, 0x02	; 2
    1874:	df 2e       	mov	r13, r31
    1876:	f0 2d       	mov	r31, r0
	

	while(1){
		
		
		difficulty = slider_right_read();
    1878:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <slider_right_read>
    187c:	98 2e       	mov	r9, r24
		
		if(timer_read(TIMER_3) > 1000){
    187e:	82 e0       	ldi	r24, 0x02	; 2
    1880:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <timer_read>
    1884:	89 3e       	cpi	r24, 0xE9	; 233
    1886:	93 40       	sbci	r25, 0x03	; 3
    1888:	08 f4       	brcc	.+2      	; 0x188c <snake_settings+0x70>
    188a:	49 c0       	rjmp	.+146    	; 0x191e <snake_settings+0x102>
			
			oled_clear_screen();
    188c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <oled_clear_screen>
			oled_put_string(0*8, 0, "Set difficulty");
    1890:	ff 92       	push	r15
    1892:	ef 92       	push	r14
    1894:	1f 92       	push	r1
    1896:	1f 92       	push	r1
    1898:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_put_string>
			oled_put_string(0, 1, "Difficulty:%u", difficulty);
    189c:	1f 92       	push	r1
    189e:	9f 92       	push	r9
    18a0:	1f 93       	push	r17
    18a2:	0f 93       	push	r16
    18a4:	7f 92       	push	r7
    18a6:	1f 92       	push	r1
    18a8:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_put_string>
			oled_put_string(0, 3, "Walls");
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	8f 92       	push	r8
    18b2:	1f 92       	push	r1
    18b4:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_put_string>
			if(no_walls){
    18b8:	8d b7       	in	r24, 0x3d	; 61
    18ba:	9e b7       	in	r25, 0x3e	; 62
    18bc:	0e 96       	adiw	r24, 0x0e	; 14
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	f8 94       	cli
    18c2:	9e bf       	out	0x3e, r25	; 62
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	8d bf       	out	0x3d, r24	; 61
    18c8:	80 91 0a 01 	lds	r24, 0x010A
    18cc:	88 23       	and	r24, r24
    18ce:	59 f0       	breq	.+22     	; 0x18e6 <snake_settings+0xca>
				oled_put_string(7*8,3,"OFF");
    18d0:	df 92       	push	r13
    18d2:	cf 92       	push	r12
    18d4:	8f 92       	push	r8
    18d6:	6f 92       	push	r6
    18d8:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_put_string>
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0a c0       	rjmp	.+20     	; 0x18fa <snake_settings+0xde>
			}
			else{
				oled_put_string(7*8,3,"ON");
    18e6:	bf 92       	push	r11
    18e8:	af 92       	push	r10
    18ea:	8f 92       	push	r8
    18ec:	6f 92       	push	r6
    18ee:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_put_string>
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
			}
			
			oled_write_screen();
    18fa:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <oled_write_screen>
			if(button_right_read()){
    18fe:	0e 94 ef 09 	call	0x13de	; 0x13de <button_right_read>
    1902:	88 23       	and	r24, r24
    1904:	49 f0       	breq	.+18     	; 0x1918 <snake_settings+0xfc>
				if(no_walls){
    1906:	80 91 0a 01 	lds	r24, 0x010A
    190a:	88 23       	and	r24, r24
    190c:	19 f0       	breq	.+6      	; 0x1914 <snake_settings+0xf8>
					no_walls = 0;
    190e:	10 92 0a 01 	sts	0x010A, r1
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <snake_settings+0xfc>
				}
				else{
					no_walls = 1;
    1914:	70 92 0a 01 	sts	0x010A, r7
				}
			}
			
			timer_reset(TIMER_3);
    1918:	82 e0       	ldi	r24, 0x02	; 2
    191a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <timer_reset>
		}
		
		if(button_left_read()){
    191e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <button_left_read>
    1922:	88 23       	and	r24, r24
    1924:	09 f4       	brne	.+2      	; 0x1928 <snake_settings+0x10c>
    1926:	a8 cf       	rjmp	.-176    	; 0x1878 <snake_settings+0x5c>
			if(difficulty < 1){
				s_difficulty = 1;
			}
			s_difficulty = difficulty / 4;
    1928:	96 94       	lsr	r9
    192a:	96 94       	lsr	r9
    192c:	90 92 0c 01 	sts	0x010C, r9
			return;
		}
	}
}
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	ff 90       	pop	r15
    193a:	ef 90       	pop	r14
    193c:	df 90       	pop	r13
    193e:	cf 90       	pop	r12
    1940:	bf 90       	pop	r11
    1942:	af 90       	pop	r10
    1944:	9f 90       	pop	r9
    1946:	8f 90       	pop	r8
    1948:	7f 90       	pop	r7
    194a:	6f 90       	pop	r6
    194c:	08 95       	ret

0000194e <snake_game_over>:

void snake_game_over(){
	
	oled_clear_screen();
    194e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <oled_clear_screen>
	oled_put_string(3*8, 0, "GAME OVER");
    1952:	89 e3       	ldi	r24, 0x39	; 57
    1954:	92 e0       	ldi	r25, 0x02	; 2
    1956:	9f 93       	push	r25
    1958:	8f 93       	push	r24
    195a:	1f 92       	push	r1
    195c:	88 e1       	ldi	r24, 0x18	; 24
    195e:	8f 93       	push	r24
    1960:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_put_string>
	/*oled_put_string(0*8, 5, "Score:");*/
	
	oled_write_screen();
    1964:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <oled_write_screen>
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
	while(1){
		
		if(button_left_read()){
    1970:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <button_left_read>
    1974:	88 23       	and	r24, r24
    1976:	e1 f3       	breq	.-8      	; 0x1970 <snake_game_over+0x22>
			return;
		}
	
	}
	
}
    1978:	08 95       	ret

0000197a <snake_print>:


void snake_print(int8_t snake[MAX_LENGTH][3]){
    197a:	ff 92       	push	r15
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	8c 01       	movw	r16, r24

	oled_clear_screen();
    1986:	0e 94 3d 06 	call	0xc7a	; 0xc7a <oled_clear_screen>

	for (uint8_t i = 0; i < slength; i++){
    198a:	80 91 8f 03 	lds	r24, 0x038F
    198e:	88 23       	and	r24, r24
    1990:	59 f1       	breq	.+86     	; 0x19e8 <snake_print+0x6e>
    1992:	f1 2c       	mov	r15, r1
		oled_put_string(snake[i][pos_x]*8, abs(snake[i][pos_y] - 7), "O");
    1994:	c4 ed       	ldi	r28, 0xD4	; 212
    1996:	d2 e0       	ldi	r29, 0x02	; 2
    1998:	2f 2d       	mov	r18, r15
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	f9 01       	movw	r30, r18
    199e:	ee 0f       	add	r30, r30
    19a0:	ff 1f       	adc	r31, r31
    19a2:	e2 0f       	add	r30, r18
    19a4:	f3 1f       	adc	r31, r19
    19a6:	e0 0f       	add	r30, r16
    19a8:	f1 1f       	adc	r31, r17
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	81 81       	ldd	r24, Z+1	; 0x01
    19b0:	99 27       	eor	r25, r25
    19b2:	87 fd       	sbrc	r24, 7
    19b4:	90 95       	com	r25
    19b6:	07 97       	sbiw	r24, 0x07	; 7
    19b8:	9c 01       	movw	r18, r24
    19ba:	99 23       	and	r25, r25
    19bc:	24 f4       	brge	.+8      	; 0x19c6 <snake_print+0x4c>
    19be:	22 27       	eor	r18, r18
    19c0:	33 27       	eor	r19, r19
    19c2:	28 1b       	sub	r18, r24
    19c4:	39 0b       	sbc	r19, r25
    19c6:	2f 93       	push	r18
    19c8:	80 81       	ld	r24, Z
    19ca:	88 0f       	add	r24, r24
    19cc:	88 0f       	add	r24, r24
    19ce:	88 0f       	add	r24, r24
    19d0:	8f 93       	push	r24
    19d2:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_put_string>

void snake_print(int8_t snake[MAX_LENGTH][3]){

	oled_clear_screen();

	for (uint8_t i = 0; i < slength; i++){
    19d6:	f3 94       	inc	r15
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	80 91 8f 03 	lds	r24, 0x038F
    19e4:	f8 16       	cp	r15, r24
    19e6:	c0 f2       	brcs	.-80     	; 0x1998 <snake_print+0x1e>
		oled_put_string(snake[i][pos_x]*8, abs(snake[i][pos_y] - 7), "O");
	}
	if(apple[2]){
    19e8:	80 91 92 03 	lds	r24, 0x0392
    19ec:	88 23       	and	r24, r24
    19ee:	e9 f0       	breq	.+58     	; 0x1a2a <snake_print+0xb0>
		oled_put_string(apple[0] * 8, abs(apple[1] - 7), "Q");
    19f0:	86 ed       	ldi	r24, 0xD6	; 214
    19f2:	92 e0       	ldi	r25, 0x02	; 2
    19f4:	9f 93       	push	r25
    19f6:	8f 93       	push	r24
    19f8:	20 91 91 03 	lds	r18, 0x0391
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	27 50       	subi	r18, 0x07	; 7
    1a00:	31 09       	sbc	r19, r1
    1a02:	c9 01       	movw	r24, r18
    1a04:	99 23       	and	r25, r25
    1a06:	24 f4       	brge	.+8      	; 0x1a10 <snake_print+0x96>
    1a08:	88 27       	eor	r24, r24
    1a0a:	99 27       	eor	r25, r25
    1a0c:	82 1b       	sub	r24, r18
    1a0e:	93 0b       	sbc	r25, r19
    1a10:	8f 93       	push	r24
    1a12:	80 91 90 03 	lds	r24, 0x0390
    1a16:	88 0f       	add	r24, r24
    1a18:	88 0f       	add	r24, r24
    1a1a:	88 0f       	add	r24, r24
    1a1c:	8f 93       	push	r24
    1a1e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <oled_put_string>
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
	}
	
	oled_write_screen();
    1a2a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <oled_write_screen>

}
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	1f 91       	pop	r17
    1a34:	0f 91       	pop	r16
    1a36:	ff 90       	pop	r15
    1a38:	08 95       	ret

00001a3a <snake_self_collide>:

int8_t snake_self_collide(int8_t snake[MAX_LENGTH][3]){
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	ec 01       	movw	r28, r24

	for (uint8_t i = 1; i < slength; i++){
    1a40:	40 91 8f 03 	lds	r20, 0x038F
    1a44:	42 30       	cpi	r20, 0x02	; 2
    1a46:	c8 f0       	brcs	.+50     	; 0x1a7a <snake_self_collide+0x40>
		if((snake[i][pos_x] == snake[0][pos_x]) && (snake[i][pos_y] == snake[0][pos_y]) && (snake[i][pos_bool]))
    1a48:	58 81       	ld	r21, Y
    1a4a:	9c 01       	movw	r18, r24
    1a4c:	2b 5f       	subi	r18, 0xFB	; 251
    1a4e:	3f 4f       	sbci	r19, 0xFF	; 255

}

int8_t snake_self_collide(int8_t snake[MAX_LENGTH][3]){

	for (uint8_t i = 1; i < slength; i++){
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	d9 01       	movw	r26, r18
    1a54:	f9 01       	movw	r30, r18
    1a56:	32 97       	sbiw	r30, 0x02	; 2
		if((snake[i][pos_x] == snake[0][pos_x]) && (snake[i][pos_y] == snake[0][pos_y]) && (snake[i][pos_bool]))
    1a58:	90 81       	ld	r25, Z
    1a5a:	95 13       	cpse	r25, r21
    1a5c:	08 c0       	rjmp	.+16     	; 0x1a6e <snake_self_collide+0x34>
    1a5e:	31 96       	adiw	r30, 0x01	; 1
    1a60:	60 81       	ld	r22, Z
    1a62:	99 81       	ldd	r25, Y+1	; 0x01
    1a64:	69 13       	cpse	r22, r25
    1a66:	03 c0       	rjmp	.+6      	; 0x1a6e <snake_self_collide+0x34>
    1a68:	9c 91       	ld	r25, X
    1a6a:	91 11       	cpse	r25, r1
    1a6c:	08 c0       	rjmp	.+16     	; 0x1a7e <snake_self_collide+0x44>

}

int8_t snake_self_collide(int8_t snake[MAX_LENGTH][3]){

	for (uint8_t i = 1; i < slength; i++){
    1a6e:	8f 5f       	subi	r24, 0xFF	; 255
    1a70:	2d 5f       	subi	r18, 0xFD	; 253
    1a72:	3f 4f       	sbci	r19, 0xFF	; 255
    1a74:	84 13       	cpse	r24, r20
    1a76:	ed cf       	rjmp	.-38     	; 0x1a52 <snake_self_collide+0x18>
    1a78:	04 c0       	rjmp	.+8      	; 0x1a82 <snake_self_collide+0x48>
		if((snake[i][pos_x] == snake[0][pos_x]) && (snake[i][pos_y] == snake[0][pos_y]) && (snake[i][pos_bool]))
			return 1;
	}
	return 0;
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	03 c0       	rjmp	.+6      	; 0x1a84 <snake_self_collide+0x4a>

int8_t snake_self_collide(int8_t snake[MAX_LENGTH][3]){

	for (uint8_t i = 1; i < slength; i++){
		if((snake[i][pos_x] == snake[0][pos_x]) && (snake[i][pos_y] == snake[0][pos_y]) && (snake[i][pos_bool]))
			return 1;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	01 c0       	rjmp	.+2      	; 0x1a84 <snake_self_collide+0x4a>
	}
	return 0;
    1a82:	80 e0       	ldi	r24, 0x00	; 0
}
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	08 95       	ret

00001a8a <snake_make_apple>:

void snake_make_apple(){
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
	
	srand(timer_read(TIMER_1));
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <timer_read>
    1a94:	0e 94 47 12 	call	0x248e	; 0x248e <srand>
	uint8_t x = rand() % 15;
    1a98:	0e 94 42 12 	call	0x2484	; 0x2484 <rand>
    1a9c:	ec 01       	movw	r28, r24
	uint8_t y = rand() % 7;
    1a9e:	0e 94 42 12 	call	0x2484	; 0x2484 <rand>
    1aa2:	9c 01       	movw	r18, r24
}

void snake_make_apple(){
	
	srand(timer_read(TIMER_1));
	uint8_t x = rand() % 15;
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	6f e0       	ldi	r22, 0x0F	; 15
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	0e 94 a5 10 	call	0x214a	; 0x214a <__divmodhi4>
    1aae:	80 93 90 03 	sts	0x0390, r24
	uint8_t y = rand() % 7;
    1ab2:	c9 01       	movw	r24, r18
    1ab4:	67 e0       	ldi	r22, 0x07	; 7
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	0e 94 a5 10 	call	0x214a	; 0x214a <__divmodhi4>
    1abc:	80 93 91 03 	sts	0x0391, r24
	
	apple[0] = x;
	apple[1] = y;
 	apple[2] = 1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	80 93 92 03 	sts	0x0392, r24
	
}
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	08 95       	ret

00001acc <snake_move>:




void snake_move(dir direction, int8_t snake[MAX_LENGTH][3]){
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
    1ad0:	eb 01       	movw	r28, r22

	int8_t x = x_no_dir;
    1ad2:	40 91 4b 03 	lds	r20, 0x034B
	int8_t y = y_no_dir;
    1ad6:	30 91 4a 03 	lds	r19, 0x034A

	
	if(direction == up){
    1ada:	82 30       	cpi	r24, 0x02	; 2
    1adc:	19 f4       	brne	.+6      	; 0x1ae4 <snake_move+0x18>
		y = y_up;
    1ade:	30 91 0d 01 	lds	r19, 0x010D
    1ae2:	0e c0       	rjmp	.+28     	; 0x1b00 <snake_move+0x34>
	}
	else if(direction == down){
    1ae4:	8e 3f       	cpi	r24, 0xFE	; 254
    1ae6:	19 f4       	brne	.+6      	; 0x1aee <snake_move+0x22>
		y = y_down;
    1ae8:	30 91 0e 01 	lds	r19, 0x010E
    1aec:	09 c0       	rjmp	.+18     	; 0x1b00 <snake_move+0x34>
	}
	else if(direction == left){
    1aee:	8f 3f       	cpi	r24, 0xFF	; 255
    1af0:	19 f4       	brne	.+6      	; 0x1af8 <snake_move+0x2c>
		x = x_left;
    1af2:	40 91 10 01 	lds	r20, 0x0110
    1af6:	04 c0       	rjmp	.+8      	; 0x1b00 <snake_move+0x34>
	}
	else if(direction == right){
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	11 f4       	brne	.+4      	; 0x1b00 <snake_move+0x34>
		x = x_right;
    1afc:	40 91 0f 01 	lds	r20, 0x010F
	}


	for (int8_t point8_t = slength -1; point8_t > 0; point8_t--){
    1b00:	20 91 8f 03 	lds	r18, 0x038F
    1b04:	21 50       	subi	r18, 0x01	; 1
    1b06:	12 16       	cp	r1, r18
    1b08:	b4 f4       	brge	.+44     	; 0x1b36 <snake_move+0x6a>
		snake[point8_t][pos_x] = snake[point8_t - 1][pos_x];
    1b0a:	82 2f       	mov	r24, r18
    1b0c:	99 27       	eor	r25, r25
    1b0e:	87 fd       	sbrc	r24, 7
    1b10:	90 95       	com	r25
    1b12:	dc 01       	movw	r26, r24
    1b14:	aa 0f       	add	r26, r26
    1b16:	bb 1f       	adc	r27, r27
    1b18:	a8 0f       	add	r26, r24
    1b1a:	b9 1f       	adc	r27, r25
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	ea 0f       	add	r30, r26
    1b20:	fb 1f       	adc	r31, r27
    1b22:	13 97       	sbiw	r26, 0x03	; 3
    1b24:	ac 0f       	add	r26, r28
    1b26:	bd 1f       	adc	r27, r29
    1b28:	8c 91       	ld	r24, X
    1b2a:	80 83       	st	Z, r24
		snake[point8_t][pos_y] = snake[point8_t - 1][pos_y];
    1b2c:	11 96       	adiw	r26, 0x01	; 1
    1b2e:	8c 91       	ld	r24, X
    1b30:	81 83       	std	Z+1, r24	; 0x01
	else if(direction == right){
		x = x_right;
	}


	for (int8_t point8_t = slength -1; point8_t > 0; point8_t--){
    1b32:	21 50       	subi	r18, 0x01	; 1
    1b34:	51 f7       	brne	.-44     	; 0x1b0a <snake_move+0x3e>
		snake[point8_t][pos_x] = snake[point8_t - 1][pos_x];
		snake[point8_t][pos_y] = snake[point8_t - 1][pos_y];
	}
	
	snake[0][pos_x] = snake[0][pos_x] + x;
    1b36:	98 81       	ld	r25, Y
    1b38:	94 0f       	add	r25, r20
    1b3a:	98 83       	st	Y, r25
	snake[0][pos_y] = snake[0][pos_y] + y;
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	83 0f       	add	r24, r19
    1b40:	89 83       	std	Y+1, r24	; 0x01
	
	if(no_walls){
    1b42:	20 91 0a 01 	lds	r18, 0x010A
    1b46:	22 23       	and	r18, r18
    1b48:	81 f0       	breq	.+32     	; 0x1b6a <snake_move+0x9e>
		if(snake[0][pos_x] > 15){
    1b4a:	90 31       	cpi	r25, 0x10	; 16
    1b4c:	14 f0       	brlt	.+4      	; 0x1b52 <snake_move+0x86>
			snake[0][pos_x] = 0;
    1b4e:	18 82       	st	Y, r1
    1b50:	04 c0       	rjmp	.+8      	; 0x1b5a <snake_move+0x8e>
		}
		else if(snake[0][pos_x] < 0){
    1b52:	99 23       	and	r25, r25
    1b54:	14 f4       	brge	.+4      	; 0x1b5a <snake_move+0x8e>
			snake[0][pos_x] = 15;
    1b56:	9f e0       	ldi	r25, 0x0F	; 15
    1b58:	98 83       	st	Y, r25

		}
		if(snake[0][pos_y] > 7){
    1b5a:	88 30       	cpi	r24, 0x08	; 8
    1b5c:	14 f0       	brlt	.+4      	; 0x1b62 <snake_move+0x96>
			snake[0][pos_y] = 0;
    1b5e:	19 82       	std	Y+1, r1	; 0x01
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <snake_move+0x9e>
		}
		else if(snake[0][pos_y] < 0){
    1b62:	88 23       	and	r24, r24
    1b64:	14 f4       	brge	.+4      	; 0x1b6a <snake_move+0x9e>
			snake[0][pos_y] = 7;
    1b66:	87 e0       	ldi	r24, 0x07	; 7
    1b68:	89 83       	std	Y+1, r24	; 0x01

		}
			
		
	}
}
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	08 95       	ret

00001b70 <snake_add_size>:
	//increases slength, sets correct initial position and bool = 1

	int8_t x;
	int8_t y;

	if (snake[slength - 1][pos_x] < snake[slength - 2][pos_x])		//tail moving right
    1b70:	20 91 8f 03 	lds	r18, 0x038F
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	a9 01       	movw	r20, r18
    1b78:	44 0f       	add	r20, r20
    1b7a:	55 1f       	adc	r21, r21
    1b7c:	24 0f       	add	r18, r20
    1b7e:	35 1f       	adc	r19, r21
    1b80:	d9 01       	movw	r26, r18
    1b82:	13 97       	sbiw	r26, 0x03	; 3
    1b84:	a8 0f       	add	r26, r24
    1b86:	b9 1f       	adc	r27, r25
    1b88:	4c 91       	ld	r20, X
    1b8a:	f9 01       	movw	r30, r18
    1b8c:	36 97       	sbiw	r30, 0x06	; 6
    1b8e:	e8 0f       	add	r30, r24
    1b90:	f9 1f       	adc	r31, r25
    1b92:	50 81       	ld	r21, Z
    1b94:	45 17       	cp	r20, r21
    1b96:	1c f4       	brge	.+6      	; 0x1b9e <snake_add_size+0x2e>
		x = x_left;
    1b98:	60 91 10 01 	lds	r22, 0x0110
    1b9c:	07 c0       	rjmp	.+14     	; 0x1bac <snake_add_size+0x3c>
	else if (snake[slength - 1][pos_x] > snake[slength - 2][pos_x])	//tail movingleft
    1b9e:	54 17       	cp	r21, r20
    1ba0:	1c f4       	brge	.+6      	; 0x1ba8 <snake_add_size+0x38>
		x = x_right;
    1ba2:	60 91 0f 01 	lds	r22, 0x010F
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <snake_add_size+0x3c>
	else													//not moving in x-direction
		x = x_no_dir;
    1ba8:	60 91 4b 03 	lds	r22, 0x034B


	if (snake[slength - 1][pos_y] < snake[slength - 2][pos_y])		//tail moving up
		y = y_down;
	if (snake[slength - 1][pos_y] > snake[slength - 2][pos_y])		//tail moving down
    1bac:	11 96       	adiw	r26, 0x01	; 1
    1bae:	7c 91       	ld	r23, X
    1bb0:	51 81       	ldd	r21, Z+1	; 0x01
    1bb2:	57 17       	cp	r21, r23
    1bb4:	1c f4       	brge	.+6      	; 0x1bbc <snake_add_size+0x4c>
		y = y_up;
    1bb6:	50 91 0d 01 	lds	r21, 0x010D
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <snake_add_size+0x50>
	else													//not moving in y-direction													
		y = y_no_dir;
    1bbc:	50 91 4a 03 	lds	r21, 0x034A

	snake[slength][pos_x] = snake[slength - 1][pos_x] + x;
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	e2 0f       	add	r30, r18
    1bc4:	f3 1f       	adc	r31, r19
    1bc6:	46 0f       	add	r20, r22
    1bc8:	40 83       	st	Z, r20
	snake[slength][pos_y] = snake[slength - 1][pos_y] + y;
    1bca:	40 91 8f 03 	lds	r20, 0x038F
    1bce:	24 2f       	mov	r18, r20
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	f9 01       	movw	r30, r18
    1bd4:	ee 0f       	add	r30, r30
    1bd6:	ff 1f       	adc	r31, r31
    1bd8:	e2 0f       	add	r30, r18
    1bda:	f3 1f       	adc	r31, r19
    1bdc:	e8 0f       	add	r30, r24
    1bde:	f9 1f       	adc	r31, r25
    1be0:	df 01       	movw	r26, r30
    1be2:	13 97       	sbiw	r26, 0x03	; 3
    1be4:	11 96       	adiw	r26, 0x01	; 1
    1be6:	8c 91       	ld	r24, X
    1be8:	85 0f       	add	r24, r21
    1bea:	81 83       	std	Z+1, r24	; 0x01
	snake[slength][pos_bool] = 1;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	82 83       	std	Z+2, r24	; 0x02


	slength++;
    1bf0:	4f 5f       	subi	r20, 0xFF	; 255
    1bf2:	40 93 8f 03 	sts	0x038F, r20
    1bf6:	08 95       	ret

00001bf8 <snake_run>:
	snake[2][pos_y] = 2;


}

void snake_run(){
    1bf8:	7f 92       	push	r7
    1bfa:	8f 92       	push	r8
    1bfc:	9f 92       	push	r9
    1bfe:	af 92       	push	r10
    1c00:	bf 92       	push	r11
    1c02:	cf 92       	push	r12
    1c04:	df 92       	push	r13
    1c06:	ef 92       	push	r14
    1c08:	ff 92       	push	r15
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c12:	2f ef       	ldi	r18, 0xFF	; 255
    1c14:	8f ef       	ldi	r24, 0xFF	; 255
    1c16:	92 e0       	ldi	r25, 0x02	; 2
    1c18:	21 50       	subi	r18, 0x01	; 1
    1c1a:	80 40       	sbci	r24, 0x00	; 0
    1c1c:	90 40       	sbci	r25, 0x00	; 0
    1c1e:	e1 f7       	brne	.-8      	; 0x1c18 <snake_run+0x20>
    1c20:	00 c0       	rjmp	.+0      	; 0x1c22 <snake_run+0x2a>
    1c22:	00 c0       	rjmp	.+0      	; 0x1c24 <snake_run+0x2c>
	_delay_ms(200);

	snake_init(snake);
    1c24:	8f e5       	ldi	r24, 0x5F	; 95
    1c26:	93 e0       	ldi	r25, 0x03	; 3
    1c28:	0e 94 01 0c 	call	0x1802	; 0x1802 <snake_init>
	snake_print(snake);
    1c2c:	8f e5       	ldi	r24, 0x5F	; 95
    1c2e:	93 e0       	ldi	r25, 0x03	; 3
    1c30:	0e 94 bd 0c 	call	0x197a	; 0x197a <snake_print>

	uint16_t delay = 15000 / (s_difficulty * 1.0);
    1c34:	60 91 0c 01 	lds	r22, 0x010C
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	0e 94 19 10 	call	0x2032	; 0x2032 <__floatsisf>
    1c42:	9b 01       	movw	r18, r22
    1c44:	ac 01       	movw	r20, r24
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	70 e6       	ldi	r23, 0x60	; 96
    1c4a:	8a e6       	ldi	r24, 0x6A	; 106
    1c4c:	96 e4       	ldi	r25, 0x46	; 70
    1c4e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__divsf3>
    1c52:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
    1c56:	eb 01       	movw	r28, r22
			
			//if we hit border
			if((snake[0][pos_x] > 15) || (snake[0][pos_x] < 0)){
				snake_game_over();
			}
			if((snake[0][pos_y] > 7) || (snake[0][pos_y] < 0)){
    1c58:	00 e6       	ldi	r16, 0x60	; 96
    1c5a:	13 e0       	ldi	r17, 0x03	; 3
				snake_game_over();
			}
			
			//if snake head position == apple position
			if((snake[0][pos_x] == apple[0]) && (snake[0][pos_y] == apple[1]) && (apple[2])){
    1c5c:	0f 2e       	mov	r0, r31
    1c5e:	f0 e9       	ldi	r31, 0x90	; 144
    1c60:	cf 2e       	mov	r12, r31
    1c62:	f3 e0       	ldi	r31, 0x03	; 3
    1c64:	df 2e       	mov	r13, r31
    1c66:	f0 2d       	mov	r31, r0
				//apple bool value = 0, add snake size
				apple[2] = 0;
				snake_points++;
				snake_add_size(snake);
			}
			if(!(apple[2])){
    1c68:	0f 2e       	mov	r0, r31
    1c6a:	f2 e9       	ldi	r31, 0x92	; 146
    1c6c:	ef 2e       	mov	r14, r31
    1c6e:	f3 e0       	ldi	r31, 0x03	; 3
    1c70:	ff 2e       	mov	r15, r31
    1c72:	f0 2d       	mov	r31, r0
			if((snake[0][pos_y] > 7) || (snake[0][pos_y] < 0)){
				snake_game_over();
			}
			
			//if snake head position == apple position
			if((snake[0][pos_x] == apple[0]) && (snake[0][pos_y] == apple[1]) && (apple[2])){
    1c74:	0f 2e       	mov	r0, r31
    1c76:	f1 e9       	ldi	r31, 0x91	; 145
    1c78:	af 2e       	mov	r10, r31
    1c7a:	f3 e0       	ldi	r31, 0x03	; 3
    1c7c:	bf 2e       	mov	r11, r31
    1c7e:	f0 2d       	mov	r31, r0
			}
			else if(joystick_y_value() > THRESHOLD && (direction != down)){
				direction = up;
			}
			else if(joystick_y_value() < -THRESHOLD && (direction != up)){
				direction = down;
    1c80:	0f 2e       	mov	r0, r31
    1c82:	fe ef       	ldi	r31, 0xFE	; 254
    1c84:	7f 2e       	mov	r7, r31
    1c86:	f0 2d       	mov	r31, r0
			
			if(joystick_x_value() > THRESHOLD && (direction != left)){
				direction = right;
			}
			else if(joystick_x_value() < -THRESHOLD && (direction != right)){
				direction = left;
    1c88:	88 24       	eor	r8, r8
    1c8a:	8a 94       	dec	r8
			
		if(timer_read(TIMER_3) > delay){
			timer_reset(TIMER_3);
			
			if(joystick_x_value() > THRESHOLD && (direction != left)){
				direction = right;
    1c8c:	99 24       	eor	r9, r9
    1c8e:	93 94       	inc	r9
	
	while (1){
		
			
			
		if(timer_read(TIMER_3) > delay){
    1c90:	82 e0       	ldi	r24, 0x02	; 2
    1c92:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <timer_read>
    1c96:	c8 17       	cp	r28, r24
    1c98:	d9 07       	cpc	r29, r25
    1c9a:	08 f0       	brcs	.+2      	; 0x1c9e <snake_run+0xa6>
    1c9c:	84 c0       	rjmp	.+264    	; 0x1da6 <snake_run+0x1ae>
			timer_reset(TIMER_3);
    1c9e:	82 e0       	ldi	r24, 0x02	; 2
    1ca0:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <timer_reset>
			
			if(joystick_x_value() > THRESHOLD && (direction != left)){
    1ca4:	0e 94 bd 09 	call	0x137a	; 0x137a <joystick_x_value>
    1ca8:	87 34       	cpi	r24, 0x47	; 71
    1caa:	91 05       	cpc	r25, r1
    1cac:	3c f0       	brlt	.+14     	; 0x1cbc <snake_run+0xc4>
    1cae:	80 91 0b 01 	lds	r24, 0x010B
    1cb2:	8f 3f       	cpi	r24, 0xFF	; 255
    1cb4:	19 f0       	breq	.+6      	; 0x1cbc <snake_run+0xc4>
				direction = right;
    1cb6:	90 92 0b 01 	sts	0x010B, r9
    1cba:	24 c0       	rjmp	.+72     	; 0x1d04 <snake_run+0x10c>
			}
			else if(joystick_x_value() < -THRESHOLD && (direction != right)){
    1cbc:	0e 94 bd 09 	call	0x137a	; 0x137a <joystick_x_value>
    1cc0:	8a 3b       	cpi	r24, 0xBA	; 186
    1cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc4:	3c f4       	brge	.+14     	; 0x1cd4 <snake_run+0xdc>
    1cc6:	80 91 0b 01 	lds	r24, 0x010B
    1cca:	81 30       	cpi	r24, 0x01	; 1
    1ccc:	19 f0       	breq	.+6      	; 0x1cd4 <snake_run+0xdc>
				direction = left;
    1cce:	80 92 0b 01 	sts	0x010B, r8
    1cd2:	18 c0       	rjmp	.+48     	; 0x1d04 <snake_run+0x10c>
			}
			else if(joystick_y_value() > THRESHOLD && (direction != down)){
    1cd4:	0e 94 c2 09 	call	0x1384	; 0x1384 <joystick_y_value>
    1cd8:	87 34       	cpi	r24, 0x47	; 71
    1cda:	91 05       	cpc	r25, r1
    1cdc:	44 f0       	brlt	.+16     	; 0x1cee <snake_run+0xf6>
    1cde:	80 91 0b 01 	lds	r24, 0x010B
    1ce2:	8e 3f       	cpi	r24, 0xFE	; 254
    1ce4:	21 f0       	breq	.+8      	; 0x1cee <snake_run+0xf6>
				direction = up;
    1ce6:	82 e0       	ldi	r24, 0x02	; 2
    1ce8:	80 93 0b 01 	sts	0x010B, r24
    1cec:	0b c0       	rjmp	.+22     	; 0x1d04 <snake_run+0x10c>
			}
			else if(joystick_y_value() < -THRESHOLD && (direction != up)){
    1cee:	0e 94 c2 09 	call	0x1384	; 0x1384 <joystick_y_value>
    1cf2:	8a 3b       	cpi	r24, 0xBA	; 186
    1cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf6:	34 f4       	brge	.+12     	; 0x1d04 <snake_run+0x10c>
    1cf8:	80 91 0b 01 	lds	r24, 0x010B
    1cfc:	82 30       	cpi	r24, 0x02	; 2
    1cfe:	11 f0       	breq	.+4      	; 0x1d04 <snake_run+0x10c>
				direction = down;
    1d00:	70 92 0b 01 	sts	0x010B, r7
			}
			
			if(button_right_read()){
    1d04:	0e 94 ef 09 	call	0x13de	; 0x13de <button_right_read>
    1d08:	88 23       	and	r24, r24
    1d0a:	21 f0       	breq	.+8      	; 0x1d14 <snake_run+0x11c>
				snake_add_size(snake);
    1d0c:	8f e5       	ldi	r24, 0x5F	; 95
    1d0e:	93 e0       	ldi	r25, 0x03	; 3
    1d10:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <snake_add_size>
				
			}
			
			
			
			snake_move(direction, snake);
    1d14:	6f e5       	ldi	r22, 0x5F	; 95
    1d16:	73 e0       	ldi	r23, 0x03	; 3
    1d18:	80 91 0b 01 	lds	r24, 0x010B
    1d1c:	0e 94 66 0d 	call	0x1acc	; 0x1acc <snake_move>
			
			
			//if we hit border
			if((snake[0][pos_x] > 15) || (snake[0][pos_x] < 0)){
    1d20:	80 91 5f 03 	lds	r24, 0x035F
    1d24:	80 31       	cpi	r24, 0x10	; 16
    1d26:	10 f0       	brcs	.+4      	; 0x1d2c <snake_run+0x134>
				snake_game_over();
    1d28:	0e 94 a7 0c 	call	0x194e	; 0x194e <snake_game_over>
			}
			if((snake[0][pos_y] > 7) || (snake[0][pos_y] < 0)){
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	80 81       	ld	r24, Z
    1d30:	88 30       	cpi	r24, 0x08	; 8
    1d32:	10 f0       	brcs	.+4      	; 0x1d38 <snake_run+0x140>
				snake_game_over();
    1d34:	0e 94 a7 0c 	call	0x194e	; 0x194e <snake_game_over>
			}
			
			//if snake head position == apple position
			if((snake[0][pos_x] == apple[0]) && (snake[0][pos_y] == apple[1]) && (apple[2])){
    1d38:	20 91 5f 03 	lds	r18, 0x035F
    1d3c:	33 27       	eor	r19, r19
    1d3e:	27 fd       	sbrc	r18, 7
    1d40:	30 95       	com	r19
    1d42:	f6 01       	movw	r30, r12
    1d44:	80 81       	ld	r24, Z
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	28 17       	cp	r18, r24
    1d4a:	39 07       	cpc	r19, r25
    1d4c:	c9 f4       	brne	.+50     	; 0x1d80 <snake_run+0x188>
    1d4e:	f8 01       	movw	r30, r16
    1d50:	20 81       	ld	r18, Z
    1d52:	33 27       	eor	r19, r19
    1d54:	27 fd       	sbrc	r18, 7
    1d56:	30 95       	com	r19
    1d58:	f5 01       	movw	r30, r10
    1d5a:	80 81       	ld	r24, Z
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	28 17       	cp	r18, r24
    1d60:	39 07       	cpc	r19, r25
    1d62:	71 f4       	brne	.+28     	; 0x1d80 <snake_run+0x188>
    1d64:	f7 01       	movw	r30, r14
    1d66:	80 81       	ld	r24, Z
    1d68:	88 23       	and	r24, r24
    1d6a:	71 f0       	breq	.+28     	; 0x1d88 <snake_run+0x190>
				//apple bool value = 0, add snake size
				apple[2] = 0;
    1d6c:	10 82       	st	Z, r1
				snake_points++;
    1d6e:	80 91 93 03 	lds	r24, 0x0393
    1d72:	8f 5f       	subi	r24, 0xFF	; 255
    1d74:	80 93 93 03 	sts	0x0393, r24
				snake_add_size(snake);
    1d78:	8f e5       	ldi	r24, 0x5F	; 95
    1d7a:	93 e0       	ldi	r25, 0x03	; 3
    1d7c:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <snake_add_size>
			}
			if(!(apple[2])){
    1d80:	f7 01       	movw	r30, r14
    1d82:	80 81       	ld	r24, Z
    1d84:	81 11       	cpse	r24, r1
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <snake_run+0x194>
				snake_make_apple();
    1d88:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <snake_make_apple>
			}
			
			if(snake_self_collide(snake)){
    1d8c:	8f e5       	ldi	r24, 0x5F	; 95
    1d8e:	93 e0       	ldi	r25, 0x03	; 3
    1d90:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <snake_self_collide>
    1d94:	81 11       	cpse	r24, r1
				snake_game_over();
    1d96:	0e 94 a7 0c 	call	0x194e	; 0x194e <snake_game_over>
			}
			
			snake_print(snake);
    1d9a:	8f e5       	ldi	r24, 0x5F	; 95
    1d9c:	93 e0       	ldi	r25, 0x03	; 3
    1d9e:	0e 94 bd 0c 	call	0x197a	; 0x197a <snake_print>

		
			oled_write_screen();
    1da2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <oled_write_screen>
		
		
		}
		
		//leave game
		if(button_left_read()){
    1da6:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <button_left_read>
    1daa:	88 23       	and	r24, r24
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <snake_run+0x1b8>
    1dae:	70 cf       	rjmp	.-288    	; 0x1c90 <snake_run+0x98>
			return;
		}
	}
	

}
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	1f 91       	pop	r17
    1db6:	0f 91       	pop	r16
    1db8:	ff 90       	pop	r15
    1dba:	ef 90       	pop	r14
    1dbc:	df 90       	pop	r13
    1dbe:	cf 90       	pop	r12
    1dc0:	bf 90       	pop	r11
    1dc2:	af 90       	pop	r10
    1dc4:	9f 90       	pop	r9
    1dc6:	8f 90       	pop	r8
    1dc8:	7f 90       	pop	r7
    1dca:	08 95       	ret

00001dcc <SRAM_test>:
#include <avr/io.h>

void SRAM_test(void)
{
    1dcc:	ef 92       	push	r14
    1dce:	ff 92       	push	r15
    1dd0:	0f 93       	push	r16
    1dd2:	1f 93       	push	r17
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;

	printf("Starting SRAM test...\n");
    1dd8:	88 ed       	ldi	r24, 0xD8	; 216
    1dda:	92 e0       	ldi	r25, 0x02	; 2
    1ddc:	0e 94 ba 12 	call	0x2574	; 0x2574 <puts>

	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
    1de0:	0e 94 42 12 	call	0x2484	; 0x2484 <rand>
    1de4:	7c 01       	movw	r14, r24

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
    1de6:	0e 94 47 12 	call	0x248e	; 0x248e <srand>
    1dea:	c0 e0       	ldi	r28, 0x00	; 0
    1dec:	d8 e1       	ldi	r29, 0x18	; 24

void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
    1dee:	00 e0       	ldi	r16, 0x00	; 0
    1df0:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
    1df2:	0e 94 42 12 	call	0x2484	; 0x2484 <rand>
		ext_ram[i] = some_value;
    1df6:	88 83       	st	Y, r24
		uint8_t retreived_value = ext_ram[i];
    1df8:	98 81       	ld	r25, Y
		if (retreived_value != some_value) {
    1dfa:	98 17       	cp	r25, r24
    1dfc:	11 f0       	breq	.+4      	; 0x1e02 <SRAM_test+0x36>
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
    1dfe:	0f 5f       	subi	r16, 0xFF	; 255
    1e00:	1f 4f       	sbci	r17, 0xFF	; 255
    1e02:	21 96       	adiw	r28, 0x01	; 1
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
    1e04:	c1 15       	cp	r28, r1
    1e06:	80 e2       	ldi	r24, 0x20	; 32
    1e08:	d8 07       	cpc	r29, r24
    1e0a:	99 f7       	brne	.-26     	; 0x1df2 <SRAM_test+0x26>
			write_errors++;
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
    1e0c:	c7 01       	movw	r24, r14
    1e0e:	0e 94 47 12 	call	0x248e	; 0x248e <srand>
    1e12:	c0 e0       	ldi	r28, 0x00	; 0
    1e14:	d8 e1       	ldi	r29, 0x18	; 24
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;
    1e16:	e1 2c       	mov	r14, r1
    1e18:	f1 2c       	mov	r15, r1
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
    1e1a:	0e 94 42 12 	call	0x2484	; 0x2484 <rand>
		uint8_t retreived_value = ext_ram[i];
    1e1e:	98 81       	ld	r25, Y
		if (retreived_value != some_value) {
    1e20:	98 17       	cp	r25, r24
    1e22:	19 f0       	breq	.+6      	; 0x1e2a <SRAM_test+0x5e>
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
    1e24:	8f ef       	ldi	r24, 0xFF	; 255
    1e26:	e8 1a       	sub	r14, r24
    1e28:	f8 0a       	sbc	r15, r24
    1e2a:	21 96       	adiw	r28, 0x01	; 1
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
    1e2c:	c1 15       	cp	r28, r1
    1e2e:	80 e2       	ldi	r24, 0x20	; 32
    1e30:	d8 07       	cpc	r29, r24
    1e32:	99 f7       	brne	.-26     	; 0x1e1a <SRAM_test+0x4e>
		if (retreived_value != some_value) {
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
    1e34:	ff 92       	push	r15
    1e36:	ef 92       	push	r14
    1e38:	1f 93       	push	r17
    1e3a:	0f 93       	push	r16
    1e3c:	8e ee       	ldi	r24, 0xEE	; 238
    1e3e:	92 e0       	ldi	r25, 0x02	; 2
    1e40:	9f 93       	push	r25
    1e42:	8f 93       	push	r24
    1e44:	0e 94 a6 12 	call	0x254c	; 0x254c <printf>
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
}
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	1f 91       	pop	r17
    1e5a:	0f 91       	pop	r16
    1e5c:	ff 90       	pop	r15
    1e5e:	ef 90       	pop	r14
    1e60:	08 95       	ret

00001e62 <timer_init>:
//timer 1 and 3 are 16 bit timers

void timer_init(){
	//timer1 to be used for Oled_refresh at 60 Hz
	
	TCCR1A = 0;
    1e62:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
    1e64:	1e bc       	out	0x2e, r1	; 46
	
	//prescaler = 1024. Clock now counts at F_CPU / 1024 Hz = 4800 Hz
	TCCR1B |= (1<<CS12) | (1<<CS10);
    1e66:	8e b5       	in	r24, 0x2e	; 46
    1e68:	85 60       	ori	r24, 0x05	; 5
    1e6a:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<CS11);
    1e6c:	8e b5       	in	r24, 0x2e	; 46
    1e6e:	8d 7f       	andi	r24, 0xFD	; 253
    1e70:	8e bd       	out	0x2e, r24	; 46
	//or simpler, but makes it impossible for other modules
	//to use timer1, just reset and refresh oled after
	//80 clock ticks
	
	//Mode 0, clock max = 0xFFFF
	TCCR1A &= ~(1<<WGM10);
    1e72:	8f b5       	in	r24, 0x2f	; 47
    1e74:	8e 7f       	andi	r24, 0xFE	; 254
    1e76:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1<<WGM11);
    1e78:	8f b5       	in	r24, 0x2f	; 47
    1e7a:	8d 7f       	andi	r24, 0xFD	; 253
    1e7c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B &= ~(1<<WGM12);
    1e7e:	8e b5       	in	r24, 0x2e	; 46
    1e80:	87 7f       	andi	r24, 0xF7	; 247
    1e82:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<WGM13);
    1e84:	8e b5       	in	r24, 0x2e	; 46
    1e86:	8f 7e       	andi	r24, 0xEF	; 239
    1e88:	8e bd       	out	0x2e, r24	; 46
	
	
	//timer 3 to avoid can message spam
	//same mode and prescalre as timer 1
	TCCR3A = 0;
    1e8a:	ab e8       	ldi	r26, 0x8B	; 139
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	1c 92       	st	X, r1
	TCCR3B = 0;
    1e90:	ea e8       	ldi	r30, 0x8A	; 138
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	10 82       	st	Z, r1
	
	TCCR3B |= (1<<CS32) | (1<<CS30);
    1e96:	80 81       	ld	r24, Z
    1e98:	85 60       	ori	r24, 0x05	; 5
    1e9a:	80 83       	st	Z, r24
	TCCR3B &= ~(1<<CS31);
    1e9c:	80 81       	ld	r24, Z
    1e9e:	8d 7f       	andi	r24, 0xFD	; 253
    1ea0:	80 83       	st	Z, r24
	
	TCCR3A &= ~(1<<WGM10);
    1ea2:	8c 91       	ld	r24, X
    1ea4:	8e 7f       	andi	r24, 0xFE	; 254
    1ea6:	8c 93       	st	X, r24
	TCCR3A &= ~(1<<WGM11);
    1ea8:	8c 91       	ld	r24, X
    1eaa:	8d 7f       	andi	r24, 0xFD	; 253
    1eac:	8c 93       	st	X, r24
	TCCR3B &= ~(1<<WGM12);
    1eae:	80 81       	ld	r24, Z
    1eb0:	87 7f       	andi	r24, 0xF7	; 247
    1eb2:	80 83       	st	Z, r24
	TCCR3B &= ~(1<<WGM13);
    1eb4:	80 81       	ld	r24, Z
    1eb6:	8f 7e       	andi	r24, 0xEF	; 239
    1eb8:	80 83       	st	Z, r24
    1eba:	08 95       	ret

00001ebc <timer_read>:
}

uint16_t timer_read(timer nr){
	if(nr == TIMER_1)
    1ebc:	81 11       	cpse	r24, r1
    1ebe:	03 c0       	rjmp	.+6      	; 0x1ec6 <timer_read+0xa>
		return TCNT1;
    1ec0:	2c b5       	in	r18, 0x2c	; 44
    1ec2:	3d b5       	in	r19, 0x2d	; 45
    1ec4:	0d c0       	rjmp	.+26     	; 0x1ee0 <timer_read+0x24>
	else if(nr == TIMER_2)
    1ec6:	81 30       	cpi	r24, 0x01	; 1
    1ec8:	19 f4       	brne	.+6      	; 0x1ed0 <timer_read+0x14>
		return TCNT2;
    1eca:	23 b5       	in	r18, 0x23	; 35
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	08 c0       	rjmp	.+16     	; 0x1ee0 <timer_read+0x24>
	else if(nr == TIMER_3)
    1ed0:	82 30       	cpi	r24, 0x02	; 2
    1ed2:	29 f4       	brne	.+10     	; 0x1ede <timer_read+0x22>
		return TCNT3;
    1ed4:	20 91 88 00 	lds	r18, 0x0088
    1ed8:	30 91 89 00 	lds	r19, 0x0089
    1edc:	01 c0       	rjmp	.+2      	; 0x1ee0 <timer_read+0x24>
    1ede:	08 95       	ret
    1ee0:	82 2f       	mov	r24, r18
    1ee2:	93 2f       	mov	r25, r19
}
    1ee4:	08 95       	ret

00001ee6 <timer_reset>:

void timer_reset(timer nr){
	if(nr == TIMER_1)
    1ee6:	81 11       	cpse	r24, r1
    1ee8:	03 c0       	rjmp	.+6      	; 0x1ef0 <timer_reset+0xa>
		TCNT1 = 0;
    1eea:	1d bc       	out	0x2d, r1	; 45
    1eec:	1c bc       	out	0x2c, r1	; 44
    1eee:	08 95       	ret
	else if(nr == TIMER_2)
    1ef0:	81 30       	cpi	r24, 0x01	; 1
    1ef2:	11 f4       	brne	.+4      	; 0x1ef8 <timer_reset+0x12>
		TCNT2 = 0;
    1ef4:	13 bc       	out	0x23, r1	; 35
    1ef6:	08 95       	ret
	else if(nr == TIMER_3)
    1ef8:	82 30       	cpi	r24, 0x02	; 2
    1efa:	21 f4       	brne	.+8      	; 0x1f04 <timer_reset+0x1e>
		TCNT3 = 0;
    1efc:	10 92 89 00 	sts	0x0089, r1
    1f00:	10 92 88 00 	sts	0x0088, r1
    1f04:	08 95       	ret

00001f06 <__divsf3>:
    1f06:	0c d0       	rcall	.+24     	; 0x1f20 <__divsf3x>
    1f08:	e6 c0       	rjmp	.+460    	; 0x20d6 <__fp_round>
    1f0a:	de d0       	rcall	.+444    	; 0x20c8 <__fp_pscB>
    1f0c:	40 f0       	brcs	.+16     	; 0x1f1e <__divsf3+0x18>
    1f0e:	d5 d0       	rcall	.+426    	; 0x20ba <__fp_pscA>
    1f10:	30 f0       	brcs	.+12     	; 0x1f1e <__divsf3+0x18>
    1f12:	21 f4       	brne	.+8      	; 0x1f1c <__divsf3+0x16>
    1f14:	5f 3f       	cpi	r21, 0xFF	; 255
    1f16:	19 f0       	breq	.+6      	; 0x1f1e <__divsf3+0x18>
    1f18:	c7 c0       	rjmp	.+398    	; 0x20a8 <__fp_inf>
    1f1a:	51 11       	cpse	r21, r1
    1f1c:	10 c1       	rjmp	.+544    	; 0x213e <__fp_szero>
    1f1e:	ca c0       	rjmp	.+404    	; 0x20b4 <__fp_nan>

00001f20 <__divsf3x>:
    1f20:	eb d0       	rcall	.+470    	; 0x20f8 <__fp_split3>
    1f22:	98 f3       	brcs	.-26     	; 0x1f0a <__divsf3+0x4>

00001f24 <__divsf3_pse>:
    1f24:	99 23       	and	r25, r25
    1f26:	c9 f3       	breq	.-14     	; 0x1f1a <__divsf3+0x14>
    1f28:	55 23       	and	r21, r21
    1f2a:	b1 f3       	breq	.-20     	; 0x1f18 <__divsf3+0x12>
    1f2c:	95 1b       	sub	r25, r21
    1f2e:	55 0b       	sbc	r21, r21
    1f30:	bb 27       	eor	r27, r27
    1f32:	aa 27       	eor	r26, r26
    1f34:	62 17       	cp	r22, r18
    1f36:	73 07       	cpc	r23, r19
    1f38:	84 07       	cpc	r24, r20
    1f3a:	38 f0       	brcs	.+14     	; 0x1f4a <__divsf3_pse+0x26>
    1f3c:	9f 5f       	subi	r25, 0xFF	; 255
    1f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f40:	22 0f       	add	r18, r18
    1f42:	33 1f       	adc	r19, r19
    1f44:	44 1f       	adc	r20, r20
    1f46:	aa 1f       	adc	r26, r26
    1f48:	a9 f3       	breq	.-22     	; 0x1f34 <__divsf3_pse+0x10>
    1f4a:	33 d0       	rcall	.+102    	; 0x1fb2 <__divsf3_pse+0x8e>
    1f4c:	0e 2e       	mov	r0, r30
    1f4e:	3a f0       	brmi	.+14     	; 0x1f5e <__divsf3_pse+0x3a>
    1f50:	e0 e8       	ldi	r30, 0x80	; 128
    1f52:	30 d0       	rcall	.+96     	; 0x1fb4 <__divsf3_pse+0x90>
    1f54:	91 50       	subi	r25, 0x01	; 1
    1f56:	50 40       	sbci	r21, 0x00	; 0
    1f58:	e6 95       	lsr	r30
    1f5a:	00 1c       	adc	r0, r0
    1f5c:	ca f7       	brpl	.-14     	; 0x1f50 <__divsf3_pse+0x2c>
    1f5e:	29 d0       	rcall	.+82     	; 0x1fb2 <__divsf3_pse+0x8e>
    1f60:	fe 2f       	mov	r31, r30
    1f62:	27 d0       	rcall	.+78     	; 0x1fb2 <__divsf3_pse+0x8e>
    1f64:	66 0f       	add	r22, r22
    1f66:	77 1f       	adc	r23, r23
    1f68:	88 1f       	adc	r24, r24
    1f6a:	bb 1f       	adc	r27, r27
    1f6c:	26 17       	cp	r18, r22
    1f6e:	37 07       	cpc	r19, r23
    1f70:	48 07       	cpc	r20, r24
    1f72:	ab 07       	cpc	r26, r27
    1f74:	b0 e8       	ldi	r27, 0x80	; 128
    1f76:	09 f0       	breq	.+2      	; 0x1f7a <__divsf3_pse+0x56>
    1f78:	bb 0b       	sbc	r27, r27
    1f7a:	80 2d       	mov	r24, r0
    1f7c:	bf 01       	movw	r22, r30
    1f7e:	ff 27       	eor	r31, r31
    1f80:	93 58       	subi	r25, 0x83	; 131
    1f82:	5f 4f       	sbci	r21, 0xFF	; 255
    1f84:	2a f0       	brmi	.+10     	; 0x1f90 <__divsf3_pse+0x6c>
    1f86:	9e 3f       	cpi	r25, 0xFE	; 254
    1f88:	51 05       	cpc	r21, r1
    1f8a:	68 f0       	brcs	.+26     	; 0x1fa6 <__divsf3_pse+0x82>
    1f8c:	8d c0       	rjmp	.+282    	; 0x20a8 <__fp_inf>
    1f8e:	d7 c0       	rjmp	.+430    	; 0x213e <__fp_szero>
    1f90:	5f 3f       	cpi	r21, 0xFF	; 255
    1f92:	ec f3       	brlt	.-6      	; 0x1f8e <__divsf3_pse+0x6a>
    1f94:	98 3e       	cpi	r25, 0xE8	; 232
    1f96:	dc f3       	brlt	.-10     	; 0x1f8e <__divsf3_pse+0x6a>
    1f98:	86 95       	lsr	r24
    1f9a:	77 95       	ror	r23
    1f9c:	67 95       	ror	r22
    1f9e:	b7 95       	ror	r27
    1fa0:	f7 95       	ror	r31
    1fa2:	9f 5f       	subi	r25, 0xFF	; 255
    1fa4:	c9 f7       	brne	.-14     	; 0x1f98 <__divsf3_pse+0x74>
    1fa6:	88 0f       	add	r24, r24
    1fa8:	91 1d       	adc	r25, r1
    1faa:	96 95       	lsr	r25
    1fac:	87 95       	ror	r24
    1fae:	97 f9       	bld	r25, 7
    1fb0:	08 95       	ret
    1fb2:	e1 e0       	ldi	r30, 0x01	; 1
    1fb4:	66 0f       	add	r22, r22
    1fb6:	77 1f       	adc	r23, r23
    1fb8:	88 1f       	adc	r24, r24
    1fba:	bb 1f       	adc	r27, r27
    1fbc:	62 17       	cp	r22, r18
    1fbe:	73 07       	cpc	r23, r19
    1fc0:	84 07       	cpc	r24, r20
    1fc2:	ba 07       	cpc	r27, r26
    1fc4:	20 f0       	brcs	.+8      	; 0x1fce <__divsf3_pse+0xaa>
    1fc6:	62 1b       	sub	r22, r18
    1fc8:	73 0b       	sbc	r23, r19
    1fca:	84 0b       	sbc	r24, r20
    1fcc:	ba 0b       	sbc	r27, r26
    1fce:	ee 1f       	adc	r30, r30
    1fd0:	88 f7       	brcc	.-30     	; 0x1fb4 <__divsf3_pse+0x90>
    1fd2:	e0 95       	com	r30
    1fd4:	08 95       	ret

00001fd6 <__fixunssfsi>:
    1fd6:	98 d0       	rcall	.+304    	; 0x2108 <__fp_splitA>
    1fd8:	88 f0       	brcs	.+34     	; 0x1ffc <__fixunssfsi+0x26>
    1fda:	9f 57       	subi	r25, 0x7F	; 127
    1fdc:	90 f0       	brcs	.+36     	; 0x2002 <__fixunssfsi+0x2c>
    1fde:	b9 2f       	mov	r27, r25
    1fe0:	99 27       	eor	r25, r25
    1fe2:	b7 51       	subi	r27, 0x17	; 23
    1fe4:	a0 f0       	brcs	.+40     	; 0x200e <__fixunssfsi+0x38>
    1fe6:	d1 f0       	breq	.+52     	; 0x201c <__fixunssfsi+0x46>
    1fe8:	66 0f       	add	r22, r22
    1fea:	77 1f       	adc	r23, r23
    1fec:	88 1f       	adc	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	1a f0       	brmi	.+6      	; 0x1ff8 <__fixunssfsi+0x22>
    1ff2:	ba 95       	dec	r27
    1ff4:	c9 f7       	brne	.-14     	; 0x1fe8 <__fixunssfsi+0x12>
    1ff6:	12 c0       	rjmp	.+36     	; 0x201c <__fixunssfsi+0x46>
    1ff8:	b1 30       	cpi	r27, 0x01	; 1
    1ffa:	81 f0       	breq	.+32     	; 0x201c <__fixunssfsi+0x46>
    1ffc:	9f d0       	rcall	.+318    	; 0x213c <__fp_zero>
    1ffe:	b1 e0       	ldi	r27, 0x01	; 1
    2000:	08 95       	ret
    2002:	9c c0       	rjmp	.+312    	; 0x213c <__fp_zero>
    2004:	67 2f       	mov	r22, r23
    2006:	78 2f       	mov	r23, r24
    2008:	88 27       	eor	r24, r24
    200a:	b8 5f       	subi	r27, 0xF8	; 248
    200c:	39 f0       	breq	.+14     	; 0x201c <__fixunssfsi+0x46>
    200e:	b9 3f       	cpi	r27, 0xF9	; 249
    2010:	cc f3       	brlt	.-14     	; 0x2004 <__fixunssfsi+0x2e>
    2012:	86 95       	lsr	r24
    2014:	77 95       	ror	r23
    2016:	67 95       	ror	r22
    2018:	b3 95       	inc	r27
    201a:	d9 f7       	brne	.-10     	; 0x2012 <__fixunssfsi+0x3c>
    201c:	3e f4       	brtc	.+14     	; 0x202c <__fixunssfsi+0x56>
    201e:	90 95       	com	r25
    2020:	80 95       	com	r24
    2022:	70 95       	com	r23
    2024:	61 95       	neg	r22
    2026:	7f 4f       	sbci	r23, 0xFF	; 255
    2028:	8f 4f       	sbci	r24, 0xFF	; 255
    202a:	9f 4f       	sbci	r25, 0xFF	; 255
    202c:	08 95       	ret

0000202e <__floatunsisf>:
    202e:	e8 94       	clt
    2030:	09 c0       	rjmp	.+18     	; 0x2044 <__floatsisf+0x12>

00002032 <__floatsisf>:
    2032:	97 fb       	bst	r25, 7
    2034:	3e f4       	brtc	.+14     	; 0x2044 <__floatsisf+0x12>
    2036:	90 95       	com	r25
    2038:	80 95       	com	r24
    203a:	70 95       	com	r23
    203c:	61 95       	neg	r22
    203e:	7f 4f       	sbci	r23, 0xFF	; 255
    2040:	8f 4f       	sbci	r24, 0xFF	; 255
    2042:	9f 4f       	sbci	r25, 0xFF	; 255
    2044:	99 23       	and	r25, r25
    2046:	a9 f0       	breq	.+42     	; 0x2072 <__floatsisf+0x40>
    2048:	f9 2f       	mov	r31, r25
    204a:	96 e9       	ldi	r25, 0x96	; 150
    204c:	bb 27       	eor	r27, r27
    204e:	93 95       	inc	r25
    2050:	f6 95       	lsr	r31
    2052:	87 95       	ror	r24
    2054:	77 95       	ror	r23
    2056:	67 95       	ror	r22
    2058:	b7 95       	ror	r27
    205a:	f1 11       	cpse	r31, r1
    205c:	f8 cf       	rjmp	.-16     	; 0x204e <__floatsisf+0x1c>
    205e:	fa f4       	brpl	.+62     	; 0x209e <__floatsisf+0x6c>
    2060:	bb 0f       	add	r27, r27
    2062:	11 f4       	brne	.+4      	; 0x2068 <__floatsisf+0x36>
    2064:	60 ff       	sbrs	r22, 0
    2066:	1b c0       	rjmp	.+54     	; 0x209e <__floatsisf+0x6c>
    2068:	6f 5f       	subi	r22, 0xFF	; 255
    206a:	7f 4f       	sbci	r23, 0xFF	; 255
    206c:	8f 4f       	sbci	r24, 0xFF	; 255
    206e:	9f 4f       	sbci	r25, 0xFF	; 255
    2070:	16 c0       	rjmp	.+44     	; 0x209e <__floatsisf+0x6c>
    2072:	88 23       	and	r24, r24
    2074:	11 f0       	breq	.+4      	; 0x207a <__floatsisf+0x48>
    2076:	96 e9       	ldi	r25, 0x96	; 150
    2078:	11 c0       	rjmp	.+34     	; 0x209c <__floatsisf+0x6a>
    207a:	77 23       	and	r23, r23
    207c:	21 f0       	breq	.+8      	; 0x2086 <__floatsisf+0x54>
    207e:	9e e8       	ldi	r25, 0x8E	; 142
    2080:	87 2f       	mov	r24, r23
    2082:	76 2f       	mov	r23, r22
    2084:	05 c0       	rjmp	.+10     	; 0x2090 <__floatsisf+0x5e>
    2086:	66 23       	and	r22, r22
    2088:	71 f0       	breq	.+28     	; 0x20a6 <__floatsisf+0x74>
    208a:	96 e8       	ldi	r25, 0x86	; 134
    208c:	86 2f       	mov	r24, r22
    208e:	70 e0       	ldi	r23, 0x00	; 0
    2090:	60 e0       	ldi	r22, 0x00	; 0
    2092:	2a f0       	brmi	.+10     	; 0x209e <__floatsisf+0x6c>
    2094:	9a 95       	dec	r25
    2096:	66 0f       	add	r22, r22
    2098:	77 1f       	adc	r23, r23
    209a:	88 1f       	adc	r24, r24
    209c:	da f7       	brpl	.-10     	; 0x2094 <__floatsisf+0x62>
    209e:	88 0f       	add	r24, r24
    20a0:	96 95       	lsr	r25
    20a2:	87 95       	ror	r24
    20a4:	97 f9       	bld	r25, 7
    20a6:	08 95       	ret

000020a8 <__fp_inf>:
    20a8:	97 f9       	bld	r25, 7
    20aa:	9f 67       	ori	r25, 0x7F	; 127
    20ac:	80 e8       	ldi	r24, 0x80	; 128
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	60 e0       	ldi	r22, 0x00	; 0
    20b2:	08 95       	ret

000020b4 <__fp_nan>:
    20b4:	9f ef       	ldi	r25, 0xFF	; 255
    20b6:	80 ec       	ldi	r24, 0xC0	; 192
    20b8:	08 95       	ret

000020ba <__fp_pscA>:
    20ba:	00 24       	eor	r0, r0
    20bc:	0a 94       	dec	r0
    20be:	16 16       	cp	r1, r22
    20c0:	17 06       	cpc	r1, r23
    20c2:	18 06       	cpc	r1, r24
    20c4:	09 06       	cpc	r0, r25
    20c6:	08 95       	ret

000020c8 <__fp_pscB>:
    20c8:	00 24       	eor	r0, r0
    20ca:	0a 94       	dec	r0
    20cc:	12 16       	cp	r1, r18
    20ce:	13 06       	cpc	r1, r19
    20d0:	14 06       	cpc	r1, r20
    20d2:	05 06       	cpc	r0, r21
    20d4:	08 95       	ret

000020d6 <__fp_round>:
    20d6:	09 2e       	mov	r0, r25
    20d8:	03 94       	inc	r0
    20da:	00 0c       	add	r0, r0
    20dc:	11 f4       	brne	.+4      	; 0x20e2 <__fp_round+0xc>
    20de:	88 23       	and	r24, r24
    20e0:	52 f0       	brmi	.+20     	; 0x20f6 <__fp_round+0x20>
    20e2:	bb 0f       	add	r27, r27
    20e4:	40 f4       	brcc	.+16     	; 0x20f6 <__fp_round+0x20>
    20e6:	bf 2b       	or	r27, r31
    20e8:	11 f4       	brne	.+4      	; 0x20ee <__fp_round+0x18>
    20ea:	60 ff       	sbrs	r22, 0
    20ec:	04 c0       	rjmp	.+8      	; 0x20f6 <__fp_round+0x20>
    20ee:	6f 5f       	subi	r22, 0xFF	; 255
    20f0:	7f 4f       	sbci	r23, 0xFF	; 255
    20f2:	8f 4f       	sbci	r24, 0xFF	; 255
    20f4:	9f 4f       	sbci	r25, 0xFF	; 255
    20f6:	08 95       	ret

000020f8 <__fp_split3>:
    20f8:	57 fd       	sbrc	r21, 7
    20fa:	90 58       	subi	r25, 0x80	; 128
    20fc:	44 0f       	add	r20, r20
    20fe:	55 1f       	adc	r21, r21
    2100:	59 f0       	breq	.+22     	; 0x2118 <__fp_splitA+0x10>
    2102:	5f 3f       	cpi	r21, 0xFF	; 255
    2104:	71 f0       	breq	.+28     	; 0x2122 <__fp_splitA+0x1a>
    2106:	47 95       	ror	r20

00002108 <__fp_splitA>:
    2108:	88 0f       	add	r24, r24
    210a:	97 fb       	bst	r25, 7
    210c:	99 1f       	adc	r25, r25
    210e:	61 f0       	breq	.+24     	; 0x2128 <__fp_splitA+0x20>
    2110:	9f 3f       	cpi	r25, 0xFF	; 255
    2112:	79 f0       	breq	.+30     	; 0x2132 <__fp_splitA+0x2a>
    2114:	87 95       	ror	r24
    2116:	08 95       	ret
    2118:	12 16       	cp	r1, r18
    211a:	13 06       	cpc	r1, r19
    211c:	14 06       	cpc	r1, r20
    211e:	55 1f       	adc	r21, r21
    2120:	f2 cf       	rjmp	.-28     	; 0x2106 <__fp_split3+0xe>
    2122:	46 95       	lsr	r20
    2124:	f1 df       	rcall	.-30     	; 0x2108 <__fp_splitA>
    2126:	08 c0       	rjmp	.+16     	; 0x2138 <__fp_splitA+0x30>
    2128:	16 16       	cp	r1, r22
    212a:	17 06       	cpc	r1, r23
    212c:	18 06       	cpc	r1, r24
    212e:	99 1f       	adc	r25, r25
    2130:	f1 cf       	rjmp	.-30     	; 0x2114 <__fp_splitA+0xc>
    2132:	86 95       	lsr	r24
    2134:	71 05       	cpc	r23, r1
    2136:	61 05       	cpc	r22, r1
    2138:	08 94       	sec
    213a:	08 95       	ret

0000213c <__fp_zero>:
    213c:	e8 94       	clt

0000213e <__fp_szero>:
    213e:	bb 27       	eor	r27, r27
    2140:	66 27       	eor	r22, r22
    2142:	77 27       	eor	r23, r23
    2144:	cb 01       	movw	r24, r22
    2146:	97 f9       	bld	r25, 7
    2148:	08 95       	ret

0000214a <__divmodhi4>:
    214a:	97 fb       	bst	r25, 7
    214c:	07 2e       	mov	r0, r23
    214e:	16 f4       	brtc	.+4      	; 0x2154 <__divmodhi4+0xa>
    2150:	00 94       	com	r0
    2152:	07 d0       	rcall	.+14     	; 0x2162 <__divmodhi4_neg1>
    2154:	77 fd       	sbrc	r23, 7
    2156:	09 d0       	rcall	.+18     	; 0x216a <__divmodhi4_neg2>
    2158:	0e 94 b9 10 	call	0x2172	; 0x2172 <__udivmodhi4>
    215c:	07 fc       	sbrc	r0, 7
    215e:	05 d0       	rcall	.+10     	; 0x216a <__divmodhi4_neg2>
    2160:	3e f4       	brtc	.+14     	; 0x2170 <__divmodhi4_exit>

00002162 <__divmodhi4_neg1>:
    2162:	90 95       	com	r25
    2164:	81 95       	neg	r24
    2166:	9f 4f       	sbci	r25, 0xFF	; 255
    2168:	08 95       	ret

0000216a <__divmodhi4_neg2>:
    216a:	70 95       	com	r23
    216c:	61 95       	neg	r22
    216e:	7f 4f       	sbci	r23, 0xFF	; 255

00002170 <__divmodhi4_exit>:
    2170:	08 95       	ret

00002172 <__udivmodhi4>:
    2172:	aa 1b       	sub	r26, r26
    2174:	bb 1b       	sub	r27, r27
    2176:	51 e1       	ldi	r21, 0x11	; 17
    2178:	07 c0       	rjmp	.+14     	; 0x2188 <__udivmodhi4_ep>

0000217a <__udivmodhi4_loop>:
    217a:	aa 1f       	adc	r26, r26
    217c:	bb 1f       	adc	r27, r27
    217e:	a6 17       	cp	r26, r22
    2180:	b7 07       	cpc	r27, r23
    2182:	10 f0       	brcs	.+4      	; 0x2188 <__udivmodhi4_ep>
    2184:	a6 1b       	sub	r26, r22
    2186:	b7 0b       	sbc	r27, r23

00002188 <__udivmodhi4_ep>:
    2188:	88 1f       	adc	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	5a 95       	dec	r21
    218e:	a9 f7       	brne	.-22     	; 0x217a <__udivmodhi4_loop>
    2190:	80 95       	com	r24
    2192:	90 95       	com	r25
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	08 95       	ret

0000219a <malloc>:
    219a:	cf 93       	push	r28
    219c:	df 93       	push	r29
    219e:	82 30       	cpi	r24, 0x02	; 2
    21a0:	91 05       	cpc	r25, r1
    21a2:	10 f4       	brcc	.+4      	; 0x21a8 <malloc+0xe>
    21a4:	82 e0       	ldi	r24, 0x02	; 2
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	e0 91 96 03 	lds	r30, 0x0396
    21ac:	f0 91 97 03 	lds	r31, 0x0397
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	a0 e0       	ldi	r26, 0x00	; 0
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	30 97       	sbiw	r30, 0x00	; 0
    21ba:	39 f1       	breq	.+78     	; 0x220a <malloc+0x70>
    21bc:	40 81       	ld	r20, Z
    21be:	51 81       	ldd	r21, Z+1	; 0x01
    21c0:	48 17       	cp	r20, r24
    21c2:	59 07       	cpc	r21, r25
    21c4:	b8 f0       	brcs	.+46     	; 0x21f4 <malloc+0x5a>
    21c6:	48 17       	cp	r20, r24
    21c8:	59 07       	cpc	r21, r25
    21ca:	71 f4       	brne	.+28     	; 0x21e8 <malloc+0x4e>
    21cc:	82 81       	ldd	r24, Z+2	; 0x02
    21ce:	93 81       	ldd	r25, Z+3	; 0x03
    21d0:	10 97       	sbiw	r26, 0x00	; 0
    21d2:	29 f0       	breq	.+10     	; 0x21de <malloc+0x44>
    21d4:	13 96       	adiw	r26, 0x03	; 3
    21d6:	9c 93       	st	X, r25
    21d8:	8e 93       	st	-X, r24
    21da:	12 97       	sbiw	r26, 0x02	; 2
    21dc:	2c c0       	rjmp	.+88     	; 0x2236 <malloc+0x9c>
    21de:	90 93 97 03 	sts	0x0397, r25
    21e2:	80 93 96 03 	sts	0x0396, r24
    21e6:	27 c0       	rjmp	.+78     	; 0x2236 <malloc+0x9c>
    21e8:	21 15       	cp	r18, r1
    21ea:	31 05       	cpc	r19, r1
    21ec:	31 f0       	breq	.+12     	; 0x21fa <malloc+0x60>
    21ee:	42 17       	cp	r20, r18
    21f0:	53 07       	cpc	r21, r19
    21f2:	18 f0       	brcs	.+6      	; 0x21fa <malloc+0x60>
    21f4:	a9 01       	movw	r20, r18
    21f6:	db 01       	movw	r26, r22
    21f8:	01 c0       	rjmp	.+2      	; 0x21fc <malloc+0x62>
    21fa:	ef 01       	movw	r28, r30
    21fc:	9a 01       	movw	r18, r20
    21fe:	bd 01       	movw	r22, r26
    2200:	df 01       	movw	r26, r30
    2202:	02 80       	ldd	r0, Z+2	; 0x02
    2204:	f3 81       	ldd	r31, Z+3	; 0x03
    2206:	e0 2d       	mov	r30, r0
    2208:	d7 cf       	rjmp	.-82     	; 0x21b8 <malloc+0x1e>
    220a:	21 15       	cp	r18, r1
    220c:	31 05       	cpc	r19, r1
    220e:	f9 f0       	breq	.+62     	; 0x224e <malloc+0xb4>
    2210:	28 1b       	sub	r18, r24
    2212:	39 0b       	sbc	r19, r25
    2214:	24 30       	cpi	r18, 0x04	; 4
    2216:	31 05       	cpc	r19, r1
    2218:	80 f4       	brcc	.+32     	; 0x223a <malloc+0xa0>
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	9b 81       	ldd	r25, Y+3	; 0x03
    221e:	61 15       	cp	r22, r1
    2220:	71 05       	cpc	r23, r1
    2222:	21 f0       	breq	.+8      	; 0x222c <malloc+0x92>
    2224:	fb 01       	movw	r30, r22
    2226:	93 83       	std	Z+3, r25	; 0x03
    2228:	82 83       	std	Z+2, r24	; 0x02
    222a:	04 c0       	rjmp	.+8      	; 0x2234 <malloc+0x9a>
    222c:	90 93 97 03 	sts	0x0397, r25
    2230:	80 93 96 03 	sts	0x0396, r24
    2234:	fe 01       	movw	r30, r28
    2236:	32 96       	adiw	r30, 0x02	; 2
    2238:	44 c0       	rjmp	.+136    	; 0x22c2 <malloc+0x128>
    223a:	fe 01       	movw	r30, r28
    223c:	e2 0f       	add	r30, r18
    223e:	f3 1f       	adc	r31, r19
    2240:	81 93       	st	Z+, r24
    2242:	91 93       	st	Z+, r25
    2244:	22 50       	subi	r18, 0x02	; 2
    2246:	31 09       	sbc	r19, r1
    2248:	39 83       	std	Y+1, r19	; 0x01
    224a:	28 83       	st	Y, r18
    224c:	3a c0       	rjmp	.+116    	; 0x22c2 <malloc+0x128>
    224e:	20 91 94 03 	lds	r18, 0x0394
    2252:	30 91 95 03 	lds	r19, 0x0395
    2256:	23 2b       	or	r18, r19
    2258:	41 f4       	brne	.+16     	; 0x226a <malloc+0xd0>
    225a:	20 91 02 01 	lds	r18, 0x0102
    225e:	30 91 03 01 	lds	r19, 0x0103
    2262:	30 93 95 03 	sts	0x0395, r19
    2266:	20 93 94 03 	sts	0x0394, r18
    226a:	20 91 00 01 	lds	r18, 0x0100
    226e:	30 91 01 01 	lds	r19, 0x0101
    2272:	21 15       	cp	r18, r1
    2274:	31 05       	cpc	r19, r1
    2276:	41 f4       	brne	.+16     	; 0x2288 <malloc+0xee>
    2278:	2d b7       	in	r18, 0x3d	; 61
    227a:	3e b7       	in	r19, 0x3e	; 62
    227c:	40 91 04 01 	lds	r20, 0x0104
    2280:	50 91 05 01 	lds	r21, 0x0105
    2284:	24 1b       	sub	r18, r20
    2286:	35 0b       	sbc	r19, r21
    2288:	e0 91 94 03 	lds	r30, 0x0394
    228c:	f0 91 95 03 	lds	r31, 0x0395
    2290:	e2 17       	cp	r30, r18
    2292:	f3 07       	cpc	r31, r19
    2294:	a0 f4       	brcc	.+40     	; 0x22be <malloc+0x124>
    2296:	2e 1b       	sub	r18, r30
    2298:	3f 0b       	sbc	r19, r31
    229a:	28 17       	cp	r18, r24
    229c:	39 07       	cpc	r19, r25
    229e:	78 f0       	brcs	.+30     	; 0x22be <malloc+0x124>
    22a0:	ac 01       	movw	r20, r24
    22a2:	4e 5f       	subi	r20, 0xFE	; 254
    22a4:	5f 4f       	sbci	r21, 0xFF	; 255
    22a6:	24 17       	cp	r18, r20
    22a8:	35 07       	cpc	r19, r21
    22aa:	48 f0       	brcs	.+18     	; 0x22be <malloc+0x124>
    22ac:	4e 0f       	add	r20, r30
    22ae:	5f 1f       	adc	r21, r31
    22b0:	50 93 95 03 	sts	0x0395, r21
    22b4:	40 93 94 03 	sts	0x0394, r20
    22b8:	81 93       	st	Z+, r24
    22ba:	91 93       	st	Z+, r25
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <malloc+0x128>
    22be:	e0 e0       	ldi	r30, 0x00	; 0
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	cf 01       	movw	r24, r30
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	08 95       	ret

000022ca <free>:
    22ca:	cf 93       	push	r28
    22cc:	df 93       	push	r29
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <free+0xa>
    22d2:	87 c0       	rjmp	.+270    	; 0x23e2 <free+0x118>
    22d4:	fc 01       	movw	r30, r24
    22d6:	32 97       	sbiw	r30, 0x02	; 2
    22d8:	13 82       	std	Z+3, r1	; 0x03
    22da:	12 82       	std	Z+2, r1	; 0x02
    22dc:	c0 91 96 03 	lds	r28, 0x0396
    22e0:	d0 91 97 03 	lds	r29, 0x0397
    22e4:	20 97       	sbiw	r28, 0x00	; 0
    22e6:	81 f4       	brne	.+32     	; 0x2308 <free+0x3e>
    22e8:	20 81       	ld	r18, Z
    22ea:	31 81       	ldd	r19, Z+1	; 0x01
    22ec:	28 0f       	add	r18, r24
    22ee:	39 1f       	adc	r19, r25
    22f0:	80 91 94 03 	lds	r24, 0x0394
    22f4:	90 91 95 03 	lds	r25, 0x0395
    22f8:	82 17       	cp	r24, r18
    22fa:	93 07       	cpc	r25, r19
    22fc:	79 f5       	brne	.+94     	; 0x235c <free+0x92>
    22fe:	f0 93 95 03 	sts	0x0395, r31
    2302:	e0 93 94 03 	sts	0x0394, r30
    2306:	6d c0       	rjmp	.+218    	; 0x23e2 <free+0x118>
    2308:	de 01       	movw	r26, r28
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	ae 17       	cp	r26, r30
    2310:	bf 07       	cpc	r27, r31
    2312:	50 f4       	brcc	.+20     	; 0x2328 <free+0x5e>
    2314:	12 96       	adiw	r26, 0x02	; 2
    2316:	4d 91       	ld	r20, X+
    2318:	5c 91       	ld	r21, X
    231a:	13 97       	sbiw	r26, 0x03	; 3
    231c:	9d 01       	movw	r18, r26
    231e:	41 15       	cp	r20, r1
    2320:	51 05       	cpc	r21, r1
    2322:	09 f1       	breq	.+66     	; 0x2366 <free+0x9c>
    2324:	da 01       	movw	r26, r20
    2326:	f3 cf       	rjmp	.-26     	; 0x230e <free+0x44>
    2328:	b3 83       	std	Z+3, r27	; 0x03
    232a:	a2 83       	std	Z+2, r26	; 0x02
    232c:	40 81       	ld	r20, Z
    232e:	51 81       	ldd	r21, Z+1	; 0x01
    2330:	84 0f       	add	r24, r20
    2332:	95 1f       	adc	r25, r21
    2334:	8a 17       	cp	r24, r26
    2336:	9b 07       	cpc	r25, r27
    2338:	71 f4       	brne	.+28     	; 0x2356 <free+0x8c>
    233a:	8d 91       	ld	r24, X+
    233c:	9c 91       	ld	r25, X
    233e:	11 97       	sbiw	r26, 0x01	; 1
    2340:	84 0f       	add	r24, r20
    2342:	95 1f       	adc	r25, r21
    2344:	02 96       	adiw	r24, 0x02	; 2
    2346:	91 83       	std	Z+1, r25	; 0x01
    2348:	80 83       	st	Z, r24
    234a:	12 96       	adiw	r26, 0x02	; 2
    234c:	8d 91       	ld	r24, X+
    234e:	9c 91       	ld	r25, X
    2350:	13 97       	sbiw	r26, 0x03	; 3
    2352:	93 83       	std	Z+3, r25	; 0x03
    2354:	82 83       	std	Z+2, r24	; 0x02
    2356:	21 15       	cp	r18, r1
    2358:	31 05       	cpc	r19, r1
    235a:	29 f4       	brne	.+10     	; 0x2366 <free+0x9c>
    235c:	f0 93 97 03 	sts	0x0397, r31
    2360:	e0 93 96 03 	sts	0x0396, r30
    2364:	3e c0       	rjmp	.+124    	; 0x23e2 <free+0x118>
    2366:	d9 01       	movw	r26, r18
    2368:	13 96       	adiw	r26, 0x03	; 3
    236a:	fc 93       	st	X, r31
    236c:	ee 93       	st	-X, r30
    236e:	12 97       	sbiw	r26, 0x02	; 2
    2370:	4d 91       	ld	r20, X+
    2372:	5d 91       	ld	r21, X+
    2374:	a4 0f       	add	r26, r20
    2376:	b5 1f       	adc	r27, r21
    2378:	ea 17       	cp	r30, r26
    237a:	fb 07       	cpc	r31, r27
    237c:	79 f4       	brne	.+30     	; 0x239c <free+0xd2>
    237e:	80 81       	ld	r24, Z
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	84 0f       	add	r24, r20
    2384:	95 1f       	adc	r25, r21
    2386:	02 96       	adiw	r24, 0x02	; 2
    2388:	d9 01       	movw	r26, r18
    238a:	11 96       	adiw	r26, 0x01	; 1
    238c:	9c 93       	st	X, r25
    238e:	8e 93       	st	-X, r24
    2390:	82 81       	ldd	r24, Z+2	; 0x02
    2392:	93 81       	ldd	r25, Z+3	; 0x03
    2394:	13 96       	adiw	r26, 0x03	; 3
    2396:	9c 93       	st	X, r25
    2398:	8e 93       	st	-X, r24
    239a:	12 97       	sbiw	r26, 0x02	; 2
    239c:	e0 e0       	ldi	r30, 0x00	; 0
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	9b 81       	ldd	r25, Y+3	; 0x03
    23a4:	00 97       	sbiw	r24, 0x00	; 0
    23a6:	19 f0       	breq	.+6      	; 0x23ae <free+0xe4>
    23a8:	fe 01       	movw	r30, r28
    23aa:	ec 01       	movw	r28, r24
    23ac:	f9 cf       	rjmp	.-14     	; 0x23a0 <free+0xd6>
    23ae:	ce 01       	movw	r24, r28
    23b0:	02 96       	adiw	r24, 0x02	; 2
    23b2:	28 81       	ld	r18, Y
    23b4:	39 81       	ldd	r19, Y+1	; 0x01
    23b6:	82 0f       	add	r24, r18
    23b8:	93 1f       	adc	r25, r19
    23ba:	20 91 94 03 	lds	r18, 0x0394
    23be:	30 91 95 03 	lds	r19, 0x0395
    23c2:	28 17       	cp	r18, r24
    23c4:	39 07       	cpc	r19, r25
    23c6:	69 f4       	brne	.+26     	; 0x23e2 <free+0x118>
    23c8:	30 97       	sbiw	r30, 0x00	; 0
    23ca:	29 f4       	brne	.+10     	; 0x23d6 <free+0x10c>
    23cc:	10 92 97 03 	sts	0x0397, r1
    23d0:	10 92 96 03 	sts	0x0396, r1
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <free+0x110>
    23d6:	13 82       	std	Z+3, r1	; 0x03
    23d8:	12 82       	std	Z+2, r1	; 0x02
    23da:	d0 93 95 03 	sts	0x0395, r29
    23de:	c0 93 94 03 	sts	0x0394, r28
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	08 95       	ret

000023e8 <do_rand>:
    23e8:	8f 92       	push	r8
    23ea:	9f 92       	push	r9
    23ec:	af 92       	push	r10
    23ee:	bf 92       	push	r11
    23f0:	cf 92       	push	r12
    23f2:	df 92       	push	r13
    23f4:	ef 92       	push	r14
    23f6:	ff 92       	push	r15
    23f8:	cf 93       	push	r28
    23fa:	df 93       	push	r29
    23fc:	ec 01       	movw	r28, r24
    23fe:	68 81       	ld	r22, Y
    2400:	79 81       	ldd	r23, Y+1	; 0x01
    2402:	8a 81       	ldd	r24, Y+2	; 0x02
    2404:	9b 81       	ldd	r25, Y+3	; 0x03
    2406:	61 15       	cp	r22, r1
    2408:	71 05       	cpc	r23, r1
    240a:	81 05       	cpc	r24, r1
    240c:	91 05       	cpc	r25, r1
    240e:	21 f4       	brne	.+8      	; 0x2418 <do_rand+0x30>
    2410:	64 e2       	ldi	r22, 0x24	; 36
    2412:	79 ed       	ldi	r23, 0xD9	; 217
    2414:	8b e5       	ldi	r24, 0x5B	; 91
    2416:	97 e0       	ldi	r25, 0x07	; 7
    2418:	2d e1       	ldi	r18, 0x1D	; 29
    241a:	33 ef       	ldi	r19, 0xF3	; 243
    241c:	41 e0       	ldi	r20, 0x01	; 1
    241e:	50 e0       	ldi	r21, 0x00	; 0
    2420:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__divmodsi4>
    2424:	49 01       	movw	r8, r18
    2426:	5a 01       	movw	r10, r20
    2428:	9b 01       	movw	r18, r22
    242a:	ac 01       	movw	r20, r24
    242c:	a7 ea       	ldi	r26, 0xA7	; 167
    242e:	b1 e4       	ldi	r27, 0x41	; 65
    2430:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <__muluhisi3>
    2434:	6b 01       	movw	r12, r22
    2436:	7c 01       	movw	r14, r24
    2438:	ac ee       	ldi	r26, 0xEC	; 236
    243a:	b4 ef       	ldi	r27, 0xF4	; 244
    243c:	a5 01       	movw	r20, r10
    243e:	94 01       	movw	r18, r8
    2440:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <__mulohisi3>
    2444:	c6 0e       	add	r12, r22
    2446:	d7 1e       	adc	r13, r23
    2448:	e8 1e       	adc	r14, r24
    244a:	f9 1e       	adc	r15, r25
    244c:	f7 fe       	sbrs	r15, 7
    244e:	06 c0       	rjmp	.+12     	; 0x245c <do_rand+0x74>
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	c8 1a       	sub	r12, r24
    2454:	d1 08       	sbc	r13, r1
    2456:	e1 08       	sbc	r14, r1
    2458:	80 e8       	ldi	r24, 0x80	; 128
    245a:	f8 0a       	sbc	r15, r24
    245c:	c8 82       	st	Y, r12
    245e:	d9 82       	std	Y+1, r13	; 0x01
    2460:	ea 82       	std	Y+2, r14	; 0x02
    2462:	fb 82       	std	Y+3, r15	; 0x03
    2464:	c6 01       	movw	r24, r12
    2466:	9f 77       	andi	r25, 0x7F	; 127
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	ff 90       	pop	r15
    246e:	ef 90       	pop	r14
    2470:	df 90       	pop	r13
    2472:	cf 90       	pop	r12
    2474:	bf 90       	pop	r11
    2476:	af 90       	pop	r10
    2478:	9f 90       	pop	r9
    247a:	8f 90       	pop	r8
    247c:	08 95       	ret

0000247e <rand_r>:
    247e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <do_rand>
    2482:	08 95       	ret

00002484 <rand>:
    2484:	86 e0       	ldi	r24, 0x06	; 6
    2486:	91 e0       	ldi	r25, 0x01	; 1
    2488:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <do_rand>
    248c:	08 95       	ret

0000248e <srand>:
    248e:	a0 e0       	ldi	r26, 0x00	; 0
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	80 93 06 01 	sts	0x0106, r24
    2496:	90 93 07 01 	sts	0x0107, r25
    249a:	a0 93 08 01 	sts	0x0108, r26
    249e:	b0 93 09 01 	sts	0x0109, r27
    24a2:	08 95       	ret

000024a4 <strcmp>:
    24a4:	fb 01       	movw	r30, r22
    24a6:	dc 01       	movw	r26, r24
    24a8:	8d 91       	ld	r24, X+
    24aa:	01 90       	ld	r0, Z+
    24ac:	80 19       	sub	r24, r0
    24ae:	01 10       	cpse	r0, r1
    24b0:	d9 f3       	breq	.-10     	; 0x24a8 <strcmp+0x4>
    24b2:	99 0b       	sbc	r25, r25
    24b4:	08 95       	ret

000024b6 <fdevopen>:
    24b6:	0f 93       	push	r16
    24b8:	1f 93       	push	r17
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	ec 01       	movw	r28, r24
    24c0:	8b 01       	movw	r16, r22
    24c2:	00 97       	sbiw	r24, 0x00	; 0
    24c4:	31 f4       	brne	.+12     	; 0x24d2 <fdevopen+0x1c>
    24c6:	61 15       	cp	r22, r1
    24c8:	71 05       	cpc	r23, r1
    24ca:	19 f4       	brne	.+6      	; 0x24d2 <fdevopen+0x1c>
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	38 c0       	rjmp	.+112    	; 0x2542 <fdevopen+0x8c>
    24d2:	6e e0       	ldi	r22, 0x0E	; 14
    24d4:	70 e0       	ldi	r23, 0x00	; 0
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	0e 94 d5 14 	call	0x29aa	; 0x29aa <calloc>
    24de:	fc 01       	movw	r30, r24
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	a1 f3       	breq	.-24     	; 0x24cc <fdevopen+0x16>
    24e4:	80 e8       	ldi	r24, 0x80	; 128
    24e6:	83 83       	std	Z+3, r24	; 0x03
    24e8:	01 15       	cp	r16, r1
    24ea:	11 05       	cpc	r17, r1
    24ec:	71 f0       	breq	.+28     	; 0x250a <fdevopen+0x54>
    24ee:	13 87       	std	Z+11, r17	; 0x0b
    24f0:	02 87       	std	Z+10, r16	; 0x0a
    24f2:	81 e8       	ldi	r24, 0x81	; 129
    24f4:	83 83       	std	Z+3, r24	; 0x03
    24f6:	80 91 98 03 	lds	r24, 0x0398
    24fa:	90 91 99 03 	lds	r25, 0x0399
    24fe:	89 2b       	or	r24, r25
    2500:	21 f4       	brne	.+8      	; 0x250a <fdevopen+0x54>
    2502:	f0 93 99 03 	sts	0x0399, r31
    2506:	e0 93 98 03 	sts	0x0398, r30
    250a:	20 97       	sbiw	r28, 0x00	; 0
    250c:	c9 f0       	breq	.+50     	; 0x2540 <fdevopen+0x8a>
    250e:	d1 87       	std	Z+9, r29	; 0x09
    2510:	c0 87       	std	Z+8, r28	; 0x08
    2512:	83 81       	ldd	r24, Z+3	; 0x03
    2514:	82 60       	ori	r24, 0x02	; 2
    2516:	83 83       	std	Z+3, r24	; 0x03
    2518:	80 91 9a 03 	lds	r24, 0x039A
    251c:	90 91 9b 03 	lds	r25, 0x039B
    2520:	89 2b       	or	r24, r25
    2522:	71 f4       	brne	.+28     	; 0x2540 <fdevopen+0x8a>
    2524:	f0 93 9b 03 	sts	0x039B, r31
    2528:	e0 93 9a 03 	sts	0x039A, r30
    252c:	80 91 9c 03 	lds	r24, 0x039C
    2530:	90 91 9d 03 	lds	r25, 0x039D
    2534:	89 2b       	or	r24, r25
    2536:	21 f4       	brne	.+8      	; 0x2540 <fdevopen+0x8a>
    2538:	f0 93 9d 03 	sts	0x039D, r31
    253c:	e0 93 9c 03 	sts	0x039C, r30
    2540:	cf 01       	movw	r24, r30
    2542:	df 91       	pop	r29
    2544:	cf 91       	pop	r28
    2546:	1f 91       	pop	r17
    2548:	0f 91       	pop	r16
    254a:	08 95       	ret

0000254c <printf>:
    254c:	a0 e0       	ldi	r26, 0x00	; 0
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	ec ea       	ldi	r30, 0xAC	; 172
    2552:	f2 e1       	ldi	r31, 0x12	; 18
    2554:	0c 94 e0 15 	jmp	0x2bc0	; 0x2bc0 <__prologue_saves__+0x20>
    2558:	fe 01       	movw	r30, r28
    255a:	35 96       	adiw	r30, 0x05	; 5
    255c:	61 91       	ld	r22, Z+
    255e:	71 91       	ld	r23, Z+
    2560:	af 01       	movw	r20, r30
    2562:	80 91 9a 03 	lds	r24, 0x039A
    2566:	90 91 9b 03 	lds	r25, 0x039B
    256a:	0e 94 03 13 	call	0x2606	; 0x2606 <vfprintf>
    256e:	e2 e0       	ldi	r30, 0x02	; 2
    2570:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <__epilogue_restores__+0x20>

00002574 <puts>:
    2574:	0f 93       	push	r16
    2576:	1f 93       	push	r17
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
    257c:	e0 91 9a 03 	lds	r30, 0x039A
    2580:	f0 91 9b 03 	lds	r31, 0x039B
    2584:	23 81       	ldd	r18, Z+3	; 0x03
    2586:	21 ff       	sbrs	r18, 1
    2588:	1b c0       	rjmp	.+54     	; 0x25c0 <puts+0x4c>
    258a:	ec 01       	movw	r28, r24
    258c:	00 e0       	ldi	r16, 0x00	; 0
    258e:	10 e0       	ldi	r17, 0x00	; 0
    2590:	89 91       	ld	r24, Y+
    2592:	60 91 9a 03 	lds	r22, 0x039A
    2596:	70 91 9b 03 	lds	r23, 0x039B
    259a:	db 01       	movw	r26, r22
    259c:	18 96       	adiw	r26, 0x08	; 8
    259e:	ed 91       	ld	r30, X+
    25a0:	fc 91       	ld	r31, X
    25a2:	19 97       	sbiw	r26, 0x09	; 9
    25a4:	88 23       	and	r24, r24
    25a6:	31 f0       	breq	.+12     	; 0x25b4 <puts+0x40>
    25a8:	09 95       	icall
    25aa:	89 2b       	or	r24, r25
    25ac:	89 f3       	breq	.-30     	; 0x2590 <puts+0x1c>
    25ae:	0f ef       	ldi	r16, 0xFF	; 255
    25b0:	1f ef       	ldi	r17, 0xFF	; 255
    25b2:	ee cf       	rjmp	.-36     	; 0x2590 <puts+0x1c>
    25b4:	8a e0       	ldi	r24, 0x0A	; 10
    25b6:	09 95       	icall
    25b8:	89 2b       	or	r24, r25
    25ba:	11 f4       	brne	.+4      	; 0x25c0 <puts+0x4c>
    25bc:	c8 01       	movw	r24, r16
    25be:	02 c0       	rjmp	.+4      	; 0x25c4 <puts+0x50>
    25c0:	8f ef       	ldi	r24, 0xFF	; 255
    25c2:	9f ef       	ldi	r25, 0xFF	; 255
    25c4:	df 91       	pop	r29
    25c6:	cf 91       	pop	r28
    25c8:	1f 91       	pop	r17
    25ca:	0f 91       	pop	r16
    25cc:	08 95       	ret

000025ce <vsprintf>:
    25ce:	ae e0       	ldi	r26, 0x0E	; 14
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	ed ee       	ldi	r30, 0xED	; 237
    25d4:	f2 e1       	ldi	r31, 0x12	; 18
    25d6:	0c 94 de 15 	jmp	0x2bbc	; 0x2bbc <__prologue_saves__+0x1c>
    25da:	8c 01       	movw	r16, r24
    25dc:	86 e0       	ldi	r24, 0x06	; 6
    25de:	8c 83       	std	Y+4, r24	; 0x04
    25e0:	1a 83       	std	Y+2, r17	; 0x02
    25e2:	09 83       	std	Y+1, r16	; 0x01
    25e4:	8f ef       	ldi	r24, 0xFF	; 255
    25e6:	9f e7       	ldi	r25, 0x7F	; 127
    25e8:	9e 83       	std	Y+6, r25	; 0x06
    25ea:	8d 83       	std	Y+5, r24	; 0x05
    25ec:	ce 01       	movw	r24, r28
    25ee:	01 96       	adiw	r24, 0x01	; 1
    25f0:	0e 94 03 13 	call	0x2606	; 0x2606 <vfprintf>
    25f4:	ef 81       	ldd	r30, Y+7	; 0x07
    25f6:	f8 85       	ldd	r31, Y+8	; 0x08
    25f8:	e0 0f       	add	r30, r16
    25fa:	f1 1f       	adc	r31, r17
    25fc:	10 82       	st	Z, r1
    25fe:	2e 96       	adiw	r28, 0x0e	; 14
    2600:	e4 e0       	ldi	r30, 0x04	; 4
    2602:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__epilogue_restores__+0x1c>

00002606 <vfprintf>:
    2606:	ac e0       	ldi	r26, 0x0C	; 12
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e9 e0       	ldi	r30, 0x09	; 9
    260c:	f3 e1       	ldi	r31, 0x13	; 19
    260e:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__prologue_saves__>
    2612:	7c 01       	movw	r14, r24
    2614:	6b 01       	movw	r12, r22
    2616:	8a 01       	movw	r16, r20
    2618:	fc 01       	movw	r30, r24
    261a:	17 82       	std	Z+7, r1	; 0x07
    261c:	16 82       	std	Z+6, r1	; 0x06
    261e:	83 81       	ldd	r24, Z+3	; 0x03
    2620:	81 ff       	sbrs	r24, 1
    2622:	bd c1       	rjmp	.+890    	; 0x299e <vfprintf+0x398>
    2624:	ce 01       	movw	r24, r28
    2626:	01 96       	adiw	r24, 0x01	; 1
    2628:	4c 01       	movw	r8, r24
    262a:	f7 01       	movw	r30, r14
    262c:	93 81       	ldd	r25, Z+3	; 0x03
    262e:	f6 01       	movw	r30, r12
    2630:	93 fd       	sbrc	r25, 3
    2632:	85 91       	lpm	r24, Z+
    2634:	93 ff       	sbrs	r25, 3
    2636:	81 91       	ld	r24, Z+
    2638:	6f 01       	movw	r12, r30
    263a:	88 23       	and	r24, r24
    263c:	09 f4       	brne	.+2      	; 0x2640 <vfprintf+0x3a>
    263e:	ab c1       	rjmp	.+854    	; 0x2996 <vfprintf+0x390>
    2640:	85 32       	cpi	r24, 0x25	; 37
    2642:	39 f4       	brne	.+14     	; 0x2652 <vfprintf+0x4c>
    2644:	93 fd       	sbrc	r25, 3
    2646:	85 91       	lpm	r24, Z+
    2648:	93 ff       	sbrs	r25, 3
    264a:	81 91       	ld	r24, Z+
    264c:	6f 01       	movw	r12, r30
    264e:	85 32       	cpi	r24, 0x25	; 37
    2650:	29 f4       	brne	.+10     	; 0x265c <vfprintf+0x56>
    2652:	b7 01       	movw	r22, r14
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <fputc>
    265a:	e7 cf       	rjmp	.-50     	; 0x262a <vfprintf+0x24>
    265c:	51 2c       	mov	r5, r1
    265e:	31 2c       	mov	r3, r1
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	20 32       	cpi	r18, 0x20	; 32
    2664:	a0 f4       	brcc	.+40     	; 0x268e <vfprintf+0x88>
    2666:	8b 32       	cpi	r24, 0x2B	; 43
    2668:	69 f0       	breq	.+26     	; 0x2684 <vfprintf+0x7e>
    266a:	30 f4       	brcc	.+12     	; 0x2678 <vfprintf+0x72>
    266c:	80 32       	cpi	r24, 0x20	; 32
    266e:	59 f0       	breq	.+22     	; 0x2686 <vfprintf+0x80>
    2670:	83 32       	cpi	r24, 0x23	; 35
    2672:	69 f4       	brne	.+26     	; 0x268e <vfprintf+0x88>
    2674:	20 61       	ori	r18, 0x10	; 16
    2676:	2c c0       	rjmp	.+88     	; 0x26d0 <vfprintf+0xca>
    2678:	8d 32       	cpi	r24, 0x2D	; 45
    267a:	39 f0       	breq	.+14     	; 0x268a <vfprintf+0x84>
    267c:	80 33       	cpi	r24, 0x30	; 48
    267e:	39 f4       	brne	.+14     	; 0x268e <vfprintf+0x88>
    2680:	21 60       	ori	r18, 0x01	; 1
    2682:	26 c0       	rjmp	.+76     	; 0x26d0 <vfprintf+0xca>
    2684:	22 60       	ori	r18, 0x02	; 2
    2686:	24 60       	ori	r18, 0x04	; 4
    2688:	23 c0       	rjmp	.+70     	; 0x26d0 <vfprintf+0xca>
    268a:	28 60       	ori	r18, 0x08	; 8
    268c:	21 c0       	rjmp	.+66     	; 0x26d0 <vfprintf+0xca>
    268e:	27 fd       	sbrc	r18, 7
    2690:	27 c0       	rjmp	.+78     	; 0x26e0 <vfprintf+0xda>
    2692:	30 ed       	ldi	r19, 0xD0	; 208
    2694:	38 0f       	add	r19, r24
    2696:	3a 30       	cpi	r19, 0x0A	; 10
    2698:	78 f4       	brcc	.+30     	; 0x26b8 <vfprintf+0xb2>
    269a:	26 ff       	sbrs	r18, 6
    269c:	06 c0       	rjmp	.+12     	; 0x26aa <vfprintf+0xa4>
    269e:	fa e0       	ldi	r31, 0x0A	; 10
    26a0:	5f 9e       	mul	r5, r31
    26a2:	30 0d       	add	r19, r0
    26a4:	11 24       	eor	r1, r1
    26a6:	53 2e       	mov	r5, r19
    26a8:	13 c0       	rjmp	.+38     	; 0x26d0 <vfprintf+0xca>
    26aa:	8a e0       	ldi	r24, 0x0A	; 10
    26ac:	38 9e       	mul	r3, r24
    26ae:	30 0d       	add	r19, r0
    26b0:	11 24       	eor	r1, r1
    26b2:	33 2e       	mov	r3, r19
    26b4:	20 62       	ori	r18, 0x20	; 32
    26b6:	0c c0       	rjmp	.+24     	; 0x26d0 <vfprintf+0xca>
    26b8:	8e 32       	cpi	r24, 0x2E	; 46
    26ba:	21 f4       	brne	.+8      	; 0x26c4 <vfprintf+0xbe>
    26bc:	26 fd       	sbrc	r18, 6
    26be:	6b c1       	rjmp	.+726    	; 0x2996 <vfprintf+0x390>
    26c0:	20 64       	ori	r18, 0x40	; 64
    26c2:	06 c0       	rjmp	.+12     	; 0x26d0 <vfprintf+0xca>
    26c4:	8c 36       	cpi	r24, 0x6C	; 108
    26c6:	11 f4       	brne	.+4      	; 0x26cc <vfprintf+0xc6>
    26c8:	20 68       	ori	r18, 0x80	; 128
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <vfprintf+0xca>
    26cc:	88 36       	cpi	r24, 0x68	; 104
    26ce:	41 f4       	brne	.+16     	; 0x26e0 <vfprintf+0xda>
    26d0:	f6 01       	movw	r30, r12
    26d2:	93 fd       	sbrc	r25, 3
    26d4:	85 91       	lpm	r24, Z+
    26d6:	93 ff       	sbrs	r25, 3
    26d8:	81 91       	ld	r24, Z+
    26da:	6f 01       	movw	r12, r30
    26dc:	81 11       	cpse	r24, r1
    26de:	c1 cf       	rjmp	.-126    	; 0x2662 <vfprintf+0x5c>
    26e0:	98 2f       	mov	r25, r24
    26e2:	9f 7d       	andi	r25, 0xDF	; 223
    26e4:	95 54       	subi	r25, 0x45	; 69
    26e6:	93 30       	cpi	r25, 0x03	; 3
    26e8:	28 f4       	brcc	.+10     	; 0x26f4 <vfprintf+0xee>
    26ea:	0c 5f       	subi	r16, 0xFC	; 252
    26ec:	1f 4f       	sbci	r17, 0xFF	; 255
    26ee:	ff e3       	ldi	r31, 0x3F	; 63
    26f0:	f9 83       	std	Y+1, r31	; 0x01
    26f2:	0d c0       	rjmp	.+26     	; 0x270e <vfprintf+0x108>
    26f4:	83 36       	cpi	r24, 0x63	; 99
    26f6:	31 f0       	breq	.+12     	; 0x2704 <vfprintf+0xfe>
    26f8:	83 37       	cpi	r24, 0x73	; 115
    26fa:	71 f0       	breq	.+28     	; 0x2718 <vfprintf+0x112>
    26fc:	83 35       	cpi	r24, 0x53	; 83
    26fe:	09 f0       	breq	.+2      	; 0x2702 <vfprintf+0xfc>
    2700:	5b c0       	rjmp	.+182    	; 0x27b8 <vfprintf+0x1b2>
    2702:	22 c0       	rjmp	.+68     	; 0x2748 <vfprintf+0x142>
    2704:	f8 01       	movw	r30, r16
    2706:	80 81       	ld	r24, Z
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	0e 5f       	subi	r16, 0xFE	; 254
    270c:	1f 4f       	sbci	r17, 0xFF	; 255
    270e:	44 24       	eor	r4, r4
    2710:	43 94       	inc	r4
    2712:	51 2c       	mov	r5, r1
    2714:	54 01       	movw	r10, r8
    2716:	15 c0       	rjmp	.+42     	; 0x2742 <vfprintf+0x13c>
    2718:	38 01       	movw	r6, r16
    271a:	f2 e0       	ldi	r31, 0x02	; 2
    271c:	6f 0e       	add	r6, r31
    271e:	71 1c       	adc	r7, r1
    2720:	f8 01       	movw	r30, r16
    2722:	a0 80       	ld	r10, Z
    2724:	b1 80       	ldd	r11, Z+1	; 0x01
    2726:	26 ff       	sbrs	r18, 6
    2728:	03 c0       	rjmp	.+6      	; 0x2730 <vfprintf+0x12a>
    272a:	65 2d       	mov	r22, r5
    272c:	70 e0       	ldi	r23, 0x00	; 0
    272e:	02 c0       	rjmp	.+4      	; 0x2734 <vfprintf+0x12e>
    2730:	6f ef       	ldi	r22, 0xFF	; 255
    2732:	7f ef       	ldi	r23, 0xFF	; 255
    2734:	c5 01       	movw	r24, r10
    2736:	2c 87       	std	Y+12, r18	; 0x0c
    2738:	0e 94 03 15 	call	0x2a06	; 0x2a06 <strnlen>
    273c:	2c 01       	movw	r4, r24
    273e:	83 01       	movw	r16, r6
    2740:	2c 85       	ldd	r18, Y+12	; 0x0c
    2742:	2f 77       	andi	r18, 0x7F	; 127
    2744:	22 2e       	mov	r2, r18
    2746:	17 c0       	rjmp	.+46     	; 0x2776 <vfprintf+0x170>
    2748:	38 01       	movw	r6, r16
    274a:	f2 e0       	ldi	r31, 0x02	; 2
    274c:	6f 0e       	add	r6, r31
    274e:	71 1c       	adc	r7, r1
    2750:	f8 01       	movw	r30, r16
    2752:	a0 80       	ld	r10, Z
    2754:	b1 80       	ldd	r11, Z+1	; 0x01
    2756:	26 ff       	sbrs	r18, 6
    2758:	03 c0       	rjmp	.+6      	; 0x2760 <vfprintf+0x15a>
    275a:	65 2d       	mov	r22, r5
    275c:	70 e0       	ldi	r23, 0x00	; 0
    275e:	02 c0       	rjmp	.+4      	; 0x2764 <vfprintf+0x15e>
    2760:	6f ef       	ldi	r22, 0xFF	; 255
    2762:	7f ef       	ldi	r23, 0xFF	; 255
    2764:	c5 01       	movw	r24, r10
    2766:	2c 87       	std	Y+12, r18	; 0x0c
    2768:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <strnlen_P>
    276c:	2c 01       	movw	r4, r24
    276e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2770:	20 68       	ori	r18, 0x80	; 128
    2772:	22 2e       	mov	r2, r18
    2774:	83 01       	movw	r16, r6
    2776:	23 fc       	sbrc	r2, 3
    2778:	1b c0       	rjmp	.+54     	; 0x27b0 <vfprintf+0x1aa>
    277a:	83 2d       	mov	r24, r3
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	48 16       	cp	r4, r24
    2780:	59 06       	cpc	r5, r25
    2782:	b0 f4       	brcc	.+44     	; 0x27b0 <vfprintf+0x1aa>
    2784:	b7 01       	movw	r22, r14
    2786:	80 e2       	ldi	r24, 0x20	; 32
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <fputc>
    278e:	3a 94       	dec	r3
    2790:	f4 cf       	rjmp	.-24     	; 0x277a <vfprintf+0x174>
    2792:	f5 01       	movw	r30, r10
    2794:	27 fc       	sbrc	r2, 7
    2796:	85 91       	lpm	r24, Z+
    2798:	27 fe       	sbrs	r2, 7
    279a:	81 91       	ld	r24, Z+
    279c:	5f 01       	movw	r10, r30
    279e:	b7 01       	movw	r22, r14
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <fputc>
    27a6:	31 10       	cpse	r3, r1
    27a8:	3a 94       	dec	r3
    27aa:	f1 e0       	ldi	r31, 0x01	; 1
    27ac:	4f 1a       	sub	r4, r31
    27ae:	51 08       	sbc	r5, r1
    27b0:	41 14       	cp	r4, r1
    27b2:	51 04       	cpc	r5, r1
    27b4:	71 f7       	brne	.-36     	; 0x2792 <vfprintf+0x18c>
    27b6:	e5 c0       	rjmp	.+458    	; 0x2982 <vfprintf+0x37c>
    27b8:	84 36       	cpi	r24, 0x64	; 100
    27ba:	11 f0       	breq	.+4      	; 0x27c0 <vfprintf+0x1ba>
    27bc:	89 36       	cpi	r24, 0x69	; 105
    27be:	39 f5       	brne	.+78     	; 0x280e <vfprintf+0x208>
    27c0:	f8 01       	movw	r30, r16
    27c2:	27 ff       	sbrs	r18, 7
    27c4:	07 c0       	rjmp	.+14     	; 0x27d4 <vfprintf+0x1ce>
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	82 81       	ldd	r24, Z+2	; 0x02
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	0c 5f       	subi	r16, 0xFC	; 252
    27d0:	1f 4f       	sbci	r17, 0xFF	; 255
    27d2:	08 c0       	rjmp	.+16     	; 0x27e4 <vfprintf+0x1de>
    27d4:	60 81       	ld	r22, Z
    27d6:	71 81       	ldd	r23, Z+1	; 0x01
    27d8:	88 27       	eor	r24, r24
    27da:	77 fd       	sbrc	r23, 7
    27dc:	80 95       	com	r24
    27de:	98 2f       	mov	r25, r24
    27e0:	0e 5f       	subi	r16, 0xFE	; 254
    27e2:	1f 4f       	sbci	r17, 0xFF	; 255
    27e4:	2f 76       	andi	r18, 0x6F	; 111
    27e6:	b2 2e       	mov	r11, r18
    27e8:	97 ff       	sbrs	r25, 7
    27ea:	09 c0       	rjmp	.+18     	; 0x27fe <vfprintf+0x1f8>
    27ec:	90 95       	com	r25
    27ee:	80 95       	com	r24
    27f0:	70 95       	com	r23
    27f2:	61 95       	neg	r22
    27f4:	7f 4f       	sbci	r23, 0xFF	; 255
    27f6:	8f 4f       	sbci	r24, 0xFF	; 255
    27f8:	9f 4f       	sbci	r25, 0xFF	; 255
    27fa:	20 68       	ori	r18, 0x80	; 128
    27fc:	b2 2e       	mov	r11, r18
    27fe:	2a e0       	ldi	r18, 0x0A	; 10
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	a4 01       	movw	r20, r8
    2804:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__ultoa_invert>
    2808:	a8 2e       	mov	r10, r24
    280a:	a8 18       	sub	r10, r8
    280c:	44 c0       	rjmp	.+136    	; 0x2896 <vfprintf+0x290>
    280e:	85 37       	cpi	r24, 0x75	; 117
    2810:	29 f4       	brne	.+10     	; 0x281c <vfprintf+0x216>
    2812:	2f 7e       	andi	r18, 0xEF	; 239
    2814:	b2 2e       	mov	r11, r18
    2816:	2a e0       	ldi	r18, 0x0A	; 10
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	25 c0       	rjmp	.+74     	; 0x2866 <vfprintf+0x260>
    281c:	f2 2f       	mov	r31, r18
    281e:	f9 7f       	andi	r31, 0xF9	; 249
    2820:	bf 2e       	mov	r11, r31
    2822:	8f 36       	cpi	r24, 0x6F	; 111
    2824:	c1 f0       	breq	.+48     	; 0x2856 <vfprintf+0x250>
    2826:	18 f4       	brcc	.+6      	; 0x282e <vfprintf+0x228>
    2828:	88 35       	cpi	r24, 0x58	; 88
    282a:	79 f0       	breq	.+30     	; 0x284a <vfprintf+0x244>
    282c:	b4 c0       	rjmp	.+360    	; 0x2996 <vfprintf+0x390>
    282e:	80 37       	cpi	r24, 0x70	; 112
    2830:	19 f0       	breq	.+6      	; 0x2838 <vfprintf+0x232>
    2832:	88 37       	cpi	r24, 0x78	; 120
    2834:	21 f0       	breq	.+8      	; 0x283e <vfprintf+0x238>
    2836:	af c0       	rjmp	.+350    	; 0x2996 <vfprintf+0x390>
    2838:	2f 2f       	mov	r18, r31
    283a:	20 61       	ori	r18, 0x10	; 16
    283c:	b2 2e       	mov	r11, r18
    283e:	b4 fe       	sbrs	r11, 4
    2840:	0d c0       	rjmp	.+26     	; 0x285c <vfprintf+0x256>
    2842:	8b 2d       	mov	r24, r11
    2844:	84 60       	ori	r24, 0x04	; 4
    2846:	b8 2e       	mov	r11, r24
    2848:	09 c0       	rjmp	.+18     	; 0x285c <vfprintf+0x256>
    284a:	24 ff       	sbrs	r18, 4
    284c:	0a c0       	rjmp	.+20     	; 0x2862 <vfprintf+0x25c>
    284e:	9f 2f       	mov	r25, r31
    2850:	96 60       	ori	r25, 0x06	; 6
    2852:	b9 2e       	mov	r11, r25
    2854:	06 c0       	rjmp	.+12     	; 0x2862 <vfprintf+0x25c>
    2856:	28 e0       	ldi	r18, 0x08	; 8
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	05 c0       	rjmp	.+10     	; 0x2866 <vfprintf+0x260>
    285c:	20 e1       	ldi	r18, 0x10	; 16
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <vfprintf+0x260>
    2862:	20 e1       	ldi	r18, 0x10	; 16
    2864:	32 e0       	ldi	r19, 0x02	; 2
    2866:	f8 01       	movw	r30, r16
    2868:	b7 fe       	sbrs	r11, 7
    286a:	07 c0       	rjmp	.+14     	; 0x287a <vfprintf+0x274>
    286c:	60 81       	ld	r22, Z
    286e:	71 81       	ldd	r23, Z+1	; 0x01
    2870:	82 81       	ldd	r24, Z+2	; 0x02
    2872:	93 81       	ldd	r25, Z+3	; 0x03
    2874:	0c 5f       	subi	r16, 0xFC	; 252
    2876:	1f 4f       	sbci	r17, 0xFF	; 255
    2878:	06 c0       	rjmp	.+12     	; 0x2886 <vfprintf+0x280>
    287a:	60 81       	ld	r22, Z
    287c:	71 81       	ldd	r23, Z+1	; 0x01
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	0e 5f       	subi	r16, 0xFE	; 254
    2884:	1f 4f       	sbci	r17, 0xFF	; 255
    2886:	a4 01       	movw	r20, r8
    2888:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__ultoa_invert>
    288c:	a8 2e       	mov	r10, r24
    288e:	a8 18       	sub	r10, r8
    2890:	fb 2d       	mov	r31, r11
    2892:	ff 77       	andi	r31, 0x7F	; 127
    2894:	bf 2e       	mov	r11, r31
    2896:	b6 fe       	sbrs	r11, 6
    2898:	0b c0       	rjmp	.+22     	; 0x28b0 <vfprintf+0x2aa>
    289a:	2b 2d       	mov	r18, r11
    289c:	2e 7f       	andi	r18, 0xFE	; 254
    289e:	a5 14       	cp	r10, r5
    28a0:	50 f4       	brcc	.+20     	; 0x28b6 <vfprintf+0x2b0>
    28a2:	b4 fe       	sbrs	r11, 4
    28a4:	0a c0       	rjmp	.+20     	; 0x28ba <vfprintf+0x2b4>
    28a6:	b2 fc       	sbrc	r11, 2
    28a8:	08 c0       	rjmp	.+16     	; 0x28ba <vfprintf+0x2b4>
    28aa:	2b 2d       	mov	r18, r11
    28ac:	2e 7e       	andi	r18, 0xEE	; 238
    28ae:	05 c0       	rjmp	.+10     	; 0x28ba <vfprintf+0x2b4>
    28b0:	7a 2c       	mov	r7, r10
    28b2:	2b 2d       	mov	r18, r11
    28b4:	03 c0       	rjmp	.+6      	; 0x28bc <vfprintf+0x2b6>
    28b6:	7a 2c       	mov	r7, r10
    28b8:	01 c0       	rjmp	.+2      	; 0x28bc <vfprintf+0x2b6>
    28ba:	75 2c       	mov	r7, r5
    28bc:	24 ff       	sbrs	r18, 4
    28be:	0d c0       	rjmp	.+26     	; 0x28da <vfprintf+0x2d4>
    28c0:	fe 01       	movw	r30, r28
    28c2:	ea 0d       	add	r30, r10
    28c4:	f1 1d       	adc	r31, r1
    28c6:	80 81       	ld	r24, Z
    28c8:	80 33       	cpi	r24, 0x30	; 48
    28ca:	11 f4       	brne	.+4      	; 0x28d0 <vfprintf+0x2ca>
    28cc:	29 7e       	andi	r18, 0xE9	; 233
    28ce:	09 c0       	rjmp	.+18     	; 0x28e2 <vfprintf+0x2dc>
    28d0:	22 ff       	sbrs	r18, 2
    28d2:	06 c0       	rjmp	.+12     	; 0x28e0 <vfprintf+0x2da>
    28d4:	73 94       	inc	r7
    28d6:	73 94       	inc	r7
    28d8:	04 c0       	rjmp	.+8      	; 0x28e2 <vfprintf+0x2dc>
    28da:	82 2f       	mov	r24, r18
    28dc:	86 78       	andi	r24, 0x86	; 134
    28de:	09 f0       	breq	.+2      	; 0x28e2 <vfprintf+0x2dc>
    28e0:	73 94       	inc	r7
    28e2:	23 fd       	sbrc	r18, 3
    28e4:	13 c0       	rjmp	.+38     	; 0x290c <vfprintf+0x306>
    28e6:	20 ff       	sbrs	r18, 0
    28e8:	06 c0       	rjmp	.+12     	; 0x28f6 <vfprintf+0x2f0>
    28ea:	5a 2c       	mov	r5, r10
    28ec:	73 14       	cp	r7, r3
    28ee:	18 f4       	brcc	.+6      	; 0x28f6 <vfprintf+0x2f0>
    28f0:	53 0c       	add	r5, r3
    28f2:	57 18       	sub	r5, r7
    28f4:	73 2c       	mov	r7, r3
    28f6:	73 14       	cp	r7, r3
    28f8:	68 f4       	brcc	.+26     	; 0x2914 <vfprintf+0x30e>
    28fa:	b7 01       	movw	r22, r14
    28fc:	80 e2       	ldi	r24, 0x20	; 32
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	2c 87       	std	Y+12, r18	; 0x0c
    2902:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <fputc>
    2906:	73 94       	inc	r7
    2908:	2c 85       	ldd	r18, Y+12	; 0x0c
    290a:	f5 cf       	rjmp	.-22     	; 0x28f6 <vfprintf+0x2f0>
    290c:	73 14       	cp	r7, r3
    290e:	10 f4       	brcc	.+4      	; 0x2914 <vfprintf+0x30e>
    2910:	37 18       	sub	r3, r7
    2912:	01 c0       	rjmp	.+2      	; 0x2916 <vfprintf+0x310>
    2914:	31 2c       	mov	r3, r1
    2916:	24 ff       	sbrs	r18, 4
    2918:	12 c0       	rjmp	.+36     	; 0x293e <vfprintf+0x338>
    291a:	b7 01       	movw	r22, r14
    291c:	80 e3       	ldi	r24, 0x30	; 48
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	2c 87       	std	Y+12, r18	; 0x0c
    2922:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <fputc>
    2926:	2c 85       	ldd	r18, Y+12	; 0x0c
    2928:	22 ff       	sbrs	r18, 2
    292a:	17 c0       	rjmp	.+46     	; 0x295a <vfprintf+0x354>
    292c:	21 ff       	sbrs	r18, 1
    292e:	03 c0       	rjmp	.+6      	; 0x2936 <vfprintf+0x330>
    2930:	88 e5       	ldi	r24, 0x58	; 88
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	02 c0       	rjmp	.+4      	; 0x293a <vfprintf+0x334>
    2936:	88 e7       	ldi	r24, 0x78	; 120
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	b7 01       	movw	r22, r14
    293c:	0c c0       	rjmp	.+24     	; 0x2956 <vfprintf+0x350>
    293e:	82 2f       	mov	r24, r18
    2940:	86 78       	andi	r24, 0x86	; 134
    2942:	59 f0       	breq	.+22     	; 0x295a <vfprintf+0x354>
    2944:	21 fd       	sbrc	r18, 1
    2946:	02 c0       	rjmp	.+4      	; 0x294c <vfprintf+0x346>
    2948:	80 e2       	ldi	r24, 0x20	; 32
    294a:	01 c0       	rjmp	.+2      	; 0x294e <vfprintf+0x348>
    294c:	8b e2       	ldi	r24, 0x2B	; 43
    294e:	27 fd       	sbrc	r18, 7
    2950:	8d e2       	ldi	r24, 0x2D	; 45
    2952:	b7 01       	movw	r22, r14
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <fputc>
    295a:	a5 14       	cp	r10, r5
    295c:	38 f4       	brcc	.+14     	; 0x296c <vfprintf+0x366>
    295e:	b7 01       	movw	r22, r14
    2960:	80 e3       	ldi	r24, 0x30	; 48
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <fputc>
    2968:	5a 94       	dec	r5
    296a:	f7 cf       	rjmp	.-18     	; 0x295a <vfprintf+0x354>
    296c:	aa 94       	dec	r10
    296e:	f4 01       	movw	r30, r8
    2970:	ea 0d       	add	r30, r10
    2972:	f1 1d       	adc	r31, r1
    2974:	80 81       	ld	r24, Z
    2976:	b7 01       	movw	r22, r14
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <fputc>
    297e:	a1 10       	cpse	r10, r1
    2980:	f5 cf       	rjmp	.-22     	; 0x296c <vfprintf+0x366>
    2982:	33 20       	and	r3, r3
    2984:	09 f4       	brne	.+2      	; 0x2988 <vfprintf+0x382>
    2986:	51 ce       	rjmp	.-862    	; 0x262a <vfprintf+0x24>
    2988:	b7 01       	movw	r22, r14
    298a:	80 e2       	ldi	r24, 0x20	; 32
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <fputc>
    2992:	3a 94       	dec	r3
    2994:	f6 cf       	rjmp	.-20     	; 0x2982 <vfprintf+0x37c>
    2996:	f7 01       	movw	r30, r14
    2998:	86 81       	ldd	r24, Z+6	; 0x06
    299a:	97 81       	ldd	r25, Z+7	; 0x07
    299c:	02 c0       	rjmp	.+4      	; 0x29a2 <vfprintf+0x39c>
    299e:	8f ef       	ldi	r24, 0xFF	; 255
    29a0:	9f ef       	ldi	r25, 0xFF	; 255
    29a2:	2c 96       	adiw	r28, 0x0c	; 12
    29a4:	e2 e1       	ldi	r30, 0x12	; 18
    29a6:	0c 94 ec 15 	jmp	0x2bd8	; 0x2bd8 <__epilogue_restores__>

000029aa <calloc>:
    29aa:	0f 93       	push	r16
    29ac:	1f 93       	push	r17
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
    29b2:	86 9f       	mul	r24, r22
    29b4:	80 01       	movw	r16, r0
    29b6:	87 9f       	mul	r24, r23
    29b8:	10 0d       	add	r17, r0
    29ba:	96 9f       	mul	r25, r22
    29bc:	10 0d       	add	r17, r0
    29be:	11 24       	eor	r1, r1
    29c0:	c8 01       	movw	r24, r16
    29c2:	0e 94 cd 10 	call	0x219a	; 0x219a <malloc>
    29c6:	ec 01       	movw	r28, r24
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	29 f0       	breq	.+10     	; 0x29d6 <calloc+0x2c>
    29cc:	a8 01       	movw	r20, r16
    29ce:	60 e0       	ldi	r22, 0x00	; 0
    29d0:	70 e0       	ldi	r23, 0x00	; 0
    29d2:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <memset>
    29d6:	ce 01       	movw	r24, r28
    29d8:	df 91       	pop	r29
    29da:	cf 91       	pop	r28
    29dc:	1f 91       	pop	r17
    29de:	0f 91       	pop	r16
    29e0:	08 95       	ret

000029e2 <strnlen_P>:
    29e2:	fc 01       	movw	r30, r24
    29e4:	05 90       	lpm	r0, Z+
    29e6:	61 50       	subi	r22, 0x01	; 1
    29e8:	70 40       	sbci	r23, 0x00	; 0
    29ea:	01 10       	cpse	r0, r1
    29ec:	d8 f7       	brcc	.-10     	; 0x29e4 <strnlen_P+0x2>
    29ee:	80 95       	com	r24
    29f0:	90 95       	com	r25
    29f2:	8e 0f       	add	r24, r30
    29f4:	9f 1f       	adc	r25, r31
    29f6:	08 95       	ret

000029f8 <memset>:
    29f8:	dc 01       	movw	r26, r24
    29fa:	01 c0       	rjmp	.+2      	; 0x29fe <memset+0x6>
    29fc:	6d 93       	st	X+, r22
    29fe:	41 50       	subi	r20, 0x01	; 1
    2a00:	50 40       	sbci	r21, 0x00	; 0
    2a02:	e0 f7       	brcc	.-8      	; 0x29fc <memset+0x4>
    2a04:	08 95       	ret

00002a06 <strnlen>:
    2a06:	fc 01       	movw	r30, r24
    2a08:	61 50       	subi	r22, 0x01	; 1
    2a0a:	70 40       	sbci	r23, 0x00	; 0
    2a0c:	01 90       	ld	r0, Z+
    2a0e:	01 10       	cpse	r0, r1
    2a10:	d8 f7       	brcc	.-10     	; 0x2a08 <strnlen+0x2>
    2a12:	80 95       	com	r24
    2a14:	90 95       	com	r25
    2a16:	8e 0f       	add	r24, r30
    2a18:	9f 1f       	adc	r25, r31
    2a1a:	08 95       	ret

00002a1c <fputc>:
    2a1c:	0f 93       	push	r16
    2a1e:	1f 93       	push	r17
    2a20:	cf 93       	push	r28
    2a22:	df 93       	push	r29
    2a24:	18 2f       	mov	r17, r24
    2a26:	09 2f       	mov	r16, r25
    2a28:	eb 01       	movw	r28, r22
    2a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2c:	81 fd       	sbrc	r24, 1
    2a2e:	03 c0       	rjmp	.+6      	; 0x2a36 <fputc+0x1a>
    2a30:	8f ef       	ldi	r24, 0xFF	; 255
    2a32:	9f ef       	ldi	r25, 0xFF	; 255
    2a34:	20 c0       	rjmp	.+64     	; 0x2a76 <fputc+0x5a>
    2a36:	82 ff       	sbrs	r24, 2
    2a38:	10 c0       	rjmp	.+32     	; 0x2a5a <fputc+0x3e>
    2a3a:	4e 81       	ldd	r20, Y+6	; 0x06
    2a3c:	5f 81       	ldd	r21, Y+7	; 0x07
    2a3e:	2c 81       	ldd	r18, Y+4	; 0x04
    2a40:	3d 81       	ldd	r19, Y+5	; 0x05
    2a42:	42 17       	cp	r20, r18
    2a44:	53 07       	cpc	r21, r19
    2a46:	7c f4       	brge	.+30     	; 0x2a66 <fputc+0x4a>
    2a48:	e8 81       	ld	r30, Y
    2a4a:	f9 81       	ldd	r31, Y+1	; 0x01
    2a4c:	9f 01       	movw	r18, r30
    2a4e:	2f 5f       	subi	r18, 0xFF	; 255
    2a50:	3f 4f       	sbci	r19, 0xFF	; 255
    2a52:	39 83       	std	Y+1, r19	; 0x01
    2a54:	28 83       	st	Y, r18
    2a56:	10 83       	st	Z, r17
    2a58:	06 c0       	rjmp	.+12     	; 0x2a66 <fputc+0x4a>
    2a5a:	e8 85       	ldd	r30, Y+8	; 0x08
    2a5c:	f9 85       	ldd	r31, Y+9	; 0x09
    2a5e:	81 2f       	mov	r24, r17
    2a60:	09 95       	icall
    2a62:	89 2b       	or	r24, r25
    2a64:	29 f7       	brne	.-54     	; 0x2a30 <fputc+0x14>
    2a66:	2e 81       	ldd	r18, Y+6	; 0x06
    2a68:	3f 81       	ldd	r19, Y+7	; 0x07
    2a6a:	2f 5f       	subi	r18, 0xFF	; 255
    2a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6e:	3f 83       	std	Y+7, r19	; 0x07
    2a70:	2e 83       	std	Y+6, r18	; 0x06
    2a72:	81 2f       	mov	r24, r17
    2a74:	90 2f       	mov	r25, r16
    2a76:	df 91       	pop	r29
    2a78:	cf 91       	pop	r28
    2a7a:	1f 91       	pop	r17
    2a7c:	0f 91       	pop	r16
    2a7e:	08 95       	ret

00002a80 <__ultoa_invert>:
    2a80:	fa 01       	movw	r30, r20
    2a82:	aa 27       	eor	r26, r26
    2a84:	28 30       	cpi	r18, 0x08	; 8
    2a86:	51 f1       	breq	.+84     	; 0x2adc <__ultoa_invert+0x5c>
    2a88:	20 31       	cpi	r18, 0x10	; 16
    2a8a:	81 f1       	breq	.+96     	; 0x2aec <__ultoa_invert+0x6c>
    2a8c:	e8 94       	clt
    2a8e:	6f 93       	push	r22
    2a90:	6e 7f       	andi	r22, 0xFE	; 254
    2a92:	6e 5f       	subi	r22, 0xFE	; 254
    2a94:	7f 4f       	sbci	r23, 0xFF	; 255
    2a96:	8f 4f       	sbci	r24, 0xFF	; 255
    2a98:	9f 4f       	sbci	r25, 0xFF	; 255
    2a9a:	af 4f       	sbci	r26, 0xFF	; 255
    2a9c:	b1 e0       	ldi	r27, 0x01	; 1
    2a9e:	3e d0       	rcall	.+124    	; 0x2b1c <__ultoa_invert+0x9c>
    2aa0:	b4 e0       	ldi	r27, 0x04	; 4
    2aa2:	3c d0       	rcall	.+120    	; 0x2b1c <__ultoa_invert+0x9c>
    2aa4:	67 0f       	add	r22, r23
    2aa6:	78 1f       	adc	r23, r24
    2aa8:	89 1f       	adc	r24, r25
    2aaa:	9a 1f       	adc	r25, r26
    2aac:	a1 1d       	adc	r26, r1
    2aae:	68 0f       	add	r22, r24
    2ab0:	79 1f       	adc	r23, r25
    2ab2:	8a 1f       	adc	r24, r26
    2ab4:	91 1d       	adc	r25, r1
    2ab6:	a1 1d       	adc	r26, r1
    2ab8:	6a 0f       	add	r22, r26
    2aba:	71 1d       	adc	r23, r1
    2abc:	81 1d       	adc	r24, r1
    2abe:	91 1d       	adc	r25, r1
    2ac0:	a1 1d       	adc	r26, r1
    2ac2:	20 d0       	rcall	.+64     	; 0x2b04 <__ultoa_invert+0x84>
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <__ultoa_invert+0x48>
    2ac6:	68 94       	set
    2ac8:	3f 91       	pop	r19
    2aca:	2a e0       	ldi	r18, 0x0A	; 10
    2acc:	26 9f       	mul	r18, r22
    2ace:	11 24       	eor	r1, r1
    2ad0:	30 19       	sub	r19, r0
    2ad2:	30 5d       	subi	r19, 0xD0	; 208
    2ad4:	31 93       	st	Z+, r19
    2ad6:	de f6       	brtc	.-74     	; 0x2a8e <__ultoa_invert+0xe>
    2ad8:	cf 01       	movw	r24, r30
    2ada:	08 95       	ret
    2adc:	46 2f       	mov	r20, r22
    2ade:	47 70       	andi	r20, 0x07	; 7
    2ae0:	40 5d       	subi	r20, 0xD0	; 208
    2ae2:	41 93       	st	Z+, r20
    2ae4:	b3 e0       	ldi	r27, 0x03	; 3
    2ae6:	0f d0       	rcall	.+30     	; 0x2b06 <__ultoa_invert+0x86>
    2ae8:	c9 f7       	brne	.-14     	; 0x2adc <__ultoa_invert+0x5c>
    2aea:	f6 cf       	rjmp	.-20     	; 0x2ad8 <__ultoa_invert+0x58>
    2aec:	46 2f       	mov	r20, r22
    2aee:	4f 70       	andi	r20, 0x0F	; 15
    2af0:	40 5d       	subi	r20, 0xD0	; 208
    2af2:	4a 33       	cpi	r20, 0x3A	; 58
    2af4:	18 f0       	brcs	.+6      	; 0x2afc <__ultoa_invert+0x7c>
    2af6:	49 5d       	subi	r20, 0xD9	; 217
    2af8:	31 fd       	sbrc	r19, 1
    2afa:	40 52       	subi	r20, 0x20	; 32
    2afc:	41 93       	st	Z+, r20
    2afe:	02 d0       	rcall	.+4      	; 0x2b04 <__ultoa_invert+0x84>
    2b00:	a9 f7       	brne	.-22     	; 0x2aec <__ultoa_invert+0x6c>
    2b02:	ea cf       	rjmp	.-44     	; 0x2ad8 <__ultoa_invert+0x58>
    2b04:	b4 e0       	ldi	r27, 0x04	; 4
    2b06:	a6 95       	lsr	r26
    2b08:	97 95       	ror	r25
    2b0a:	87 95       	ror	r24
    2b0c:	77 95       	ror	r23
    2b0e:	67 95       	ror	r22
    2b10:	ba 95       	dec	r27
    2b12:	c9 f7       	brne	.-14     	; 0x2b06 <__ultoa_invert+0x86>
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	61 05       	cpc	r22, r1
    2b18:	71 05       	cpc	r23, r1
    2b1a:	08 95       	ret
    2b1c:	9b 01       	movw	r18, r22
    2b1e:	ac 01       	movw	r20, r24
    2b20:	0a 2e       	mov	r0, r26
    2b22:	06 94       	lsr	r0
    2b24:	57 95       	ror	r21
    2b26:	47 95       	ror	r20
    2b28:	37 95       	ror	r19
    2b2a:	27 95       	ror	r18
    2b2c:	ba 95       	dec	r27
    2b2e:	c9 f7       	brne	.-14     	; 0x2b22 <__ultoa_invert+0xa2>
    2b30:	62 0f       	add	r22, r18
    2b32:	73 1f       	adc	r23, r19
    2b34:	84 1f       	adc	r24, r20
    2b36:	95 1f       	adc	r25, r21
    2b38:	a0 1d       	adc	r26, r0
    2b3a:	08 95       	ret

00002b3c <__divmodsi4>:
    2b3c:	05 2e       	mov	r0, r21
    2b3e:	97 fb       	bst	r25, 7
    2b40:	1e f4       	brtc	.+6      	; 0x2b48 <__divmodsi4+0xc>
    2b42:	00 94       	com	r0
    2b44:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <__negsi2>
    2b48:	57 fd       	sbrc	r21, 7
    2b4a:	07 d0       	rcall	.+14     	; 0x2b5a <__divmodsi4_neg2>
    2b4c:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__udivmodsi4>
    2b50:	07 fc       	sbrc	r0, 7
    2b52:	03 d0       	rcall	.+6      	; 0x2b5a <__divmodsi4_neg2>
    2b54:	4e f4       	brtc	.+18     	; 0x2b68 <__divmodsi4_exit>
    2b56:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__negsi2>

00002b5a <__divmodsi4_neg2>:
    2b5a:	50 95       	com	r21
    2b5c:	40 95       	com	r20
    2b5e:	30 95       	com	r19
    2b60:	21 95       	neg	r18
    2b62:	3f 4f       	sbci	r19, 0xFF	; 255
    2b64:	4f 4f       	sbci	r20, 0xFF	; 255
    2b66:	5f 4f       	sbci	r21, 0xFF	; 255

00002b68 <__divmodsi4_exit>:
    2b68:	08 95       	ret

00002b6a <__negsi2>:
    2b6a:	90 95       	com	r25
    2b6c:	80 95       	com	r24
    2b6e:	70 95       	com	r23
    2b70:	61 95       	neg	r22
    2b72:	7f 4f       	sbci	r23, 0xFF	; 255
    2b74:	8f 4f       	sbci	r24, 0xFF	; 255
    2b76:	9f 4f       	sbci	r25, 0xFF	; 255
    2b78:	08 95       	ret

00002b7a <__muluhisi3>:
    2b7a:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__umulhisi3>
    2b7e:	a5 9f       	mul	r26, r21
    2b80:	90 0d       	add	r25, r0
    2b82:	b4 9f       	mul	r27, r20
    2b84:	90 0d       	add	r25, r0
    2b86:	a4 9f       	mul	r26, r20
    2b88:	80 0d       	add	r24, r0
    2b8a:	91 1d       	adc	r25, r1
    2b8c:	11 24       	eor	r1, r1
    2b8e:	08 95       	ret

00002b90 <__mulshisi3>:
    2b90:	b7 ff       	sbrs	r27, 7
    2b92:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__muluhisi3>

00002b96 <__mulohisi3>:
    2b96:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <__muluhisi3>
    2b9a:	82 1b       	sub	r24, r18
    2b9c:	93 0b       	sbc	r25, r19
    2b9e:	08 95       	ret

00002ba0 <__prologue_saves__>:
    2ba0:	2f 92       	push	r2
    2ba2:	3f 92       	push	r3
    2ba4:	4f 92       	push	r4
    2ba6:	5f 92       	push	r5
    2ba8:	6f 92       	push	r6
    2baa:	7f 92       	push	r7
    2bac:	8f 92       	push	r8
    2bae:	9f 92       	push	r9
    2bb0:	af 92       	push	r10
    2bb2:	bf 92       	push	r11
    2bb4:	cf 92       	push	r12
    2bb6:	df 92       	push	r13
    2bb8:	ef 92       	push	r14
    2bba:	ff 92       	push	r15
    2bbc:	0f 93       	push	r16
    2bbe:	1f 93       	push	r17
    2bc0:	cf 93       	push	r28
    2bc2:	df 93       	push	r29
    2bc4:	cd b7       	in	r28, 0x3d	; 61
    2bc6:	de b7       	in	r29, 0x3e	; 62
    2bc8:	ca 1b       	sub	r28, r26
    2bca:	db 0b       	sbc	r29, r27
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	de bf       	out	0x3e, r29	; 62
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	cd bf       	out	0x3d, r28	; 61
    2bd6:	09 94       	ijmp

00002bd8 <__epilogue_restores__>:
    2bd8:	2a 88       	ldd	r2, Y+18	; 0x12
    2bda:	39 88       	ldd	r3, Y+17	; 0x11
    2bdc:	48 88       	ldd	r4, Y+16	; 0x10
    2bde:	5f 84       	ldd	r5, Y+15	; 0x0f
    2be0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2be2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2be4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2be6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2be8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bea:	b9 84       	ldd	r11, Y+9	; 0x09
    2bec:	c8 84       	ldd	r12, Y+8	; 0x08
    2bee:	df 80       	ldd	r13, Y+7	; 0x07
    2bf0:	ee 80       	ldd	r14, Y+6	; 0x06
    2bf2:	fd 80       	ldd	r15, Y+5	; 0x05
    2bf4:	0c 81       	ldd	r16, Y+4	; 0x04
    2bf6:	1b 81       	ldd	r17, Y+3	; 0x03
    2bf8:	aa 81       	ldd	r26, Y+2	; 0x02
    2bfa:	b9 81       	ldd	r27, Y+1	; 0x01
    2bfc:	ce 0f       	add	r28, r30
    2bfe:	d1 1d       	adc	r29, r1
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
    2c0a:	ed 01       	movw	r28, r26
    2c0c:	08 95       	ret

00002c0e <__udivmodsi4>:
    2c0e:	a1 e2       	ldi	r26, 0x21	; 33
    2c10:	1a 2e       	mov	r1, r26
    2c12:	aa 1b       	sub	r26, r26
    2c14:	bb 1b       	sub	r27, r27
    2c16:	fd 01       	movw	r30, r26
    2c18:	0d c0       	rjmp	.+26     	; 0x2c34 <__udivmodsi4_ep>

00002c1a <__udivmodsi4_loop>:
    2c1a:	aa 1f       	adc	r26, r26
    2c1c:	bb 1f       	adc	r27, r27
    2c1e:	ee 1f       	adc	r30, r30
    2c20:	ff 1f       	adc	r31, r31
    2c22:	a2 17       	cp	r26, r18
    2c24:	b3 07       	cpc	r27, r19
    2c26:	e4 07       	cpc	r30, r20
    2c28:	f5 07       	cpc	r31, r21
    2c2a:	20 f0       	brcs	.+8      	; 0x2c34 <__udivmodsi4_ep>
    2c2c:	a2 1b       	sub	r26, r18
    2c2e:	b3 0b       	sbc	r27, r19
    2c30:	e4 0b       	sbc	r30, r20
    2c32:	f5 0b       	sbc	r31, r21

00002c34 <__udivmodsi4_ep>:
    2c34:	66 1f       	adc	r22, r22
    2c36:	77 1f       	adc	r23, r23
    2c38:	88 1f       	adc	r24, r24
    2c3a:	99 1f       	adc	r25, r25
    2c3c:	1a 94       	dec	r1
    2c3e:	69 f7       	brne	.-38     	; 0x2c1a <__udivmodsi4_loop>
    2c40:	60 95       	com	r22
    2c42:	70 95       	com	r23
    2c44:	80 95       	com	r24
    2c46:	90 95       	com	r25
    2c48:	9b 01       	movw	r18, r22
    2c4a:	ac 01       	movw	r20, r24
    2c4c:	bd 01       	movw	r22, r26
    2c4e:	cf 01       	movw	r24, r30
    2c50:	08 95       	ret

00002c52 <__umulhisi3>:
    2c52:	a2 9f       	mul	r26, r18
    2c54:	b0 01       	movw	r22, r0
    2c56:	b3 9f       	mul	r27, r19
    2c58:	c0 01       	movw	r24, r0
    2c5a:	a3 9f       	mul	r26, r19
    2c5c:	70 0d       	add	r23, r0
    2c5e:	81 1d       	adc	r24, r1
    2c60:	11 24       	eor	r1, r1
    2c62:	91 1d       	adc	r25, r1
    2c64:	b2 9f       	mul	r27, r18
    2c66:	70 0d       	add	r23, r0
    2c68:	81 1d       	adc	r24, r1
    2c6a:	11 24       	eor	r1, r1
    2c6c:	91 1d       	adc	r25, r1
    2c6e:	08 95       	ret

00002c70 <_exit>:
    2c70:	f8 94       	cli

00002c72 <__stop_program>:
    2c72:	ff cf       	rjmp	.-2      	; 0x2c72 <__stop_program>
