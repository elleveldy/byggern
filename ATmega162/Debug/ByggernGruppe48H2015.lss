
ByggernGruppe48H2015.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800100  00001560  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001560  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  008001e4  008001e4  000016d8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000378  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000034e1  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011cb  00000000  00000000  00004f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000118e  00000000  00000000  00006158  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000988  00000000  00000000  000072e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000903  00000000  00000000  00007c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f24  00000000  00000000  00008573  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002f0  00000000  00000000  0000a497  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

}

//uses menu_selector and changes it according to joystick movement

void gui_navigate(){
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
	
	//
	if(strcmp(menu_selector->name, "Main") == 0){
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
		menu_selector = menu_submenu(menu_selector);
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
	}

	int threshold = 70;
	
	if(joystick_x_value() > threshold){
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
		oled_printf("x");
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
		menu_selector = menu_submenu(menu_selector);
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
		_delay_ms(200);
	}
	else if(joystick_x_value() < - threshold){
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
		oled_printf("-x");
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
		menu_selector = menu_parent(menu_selector);
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
		_delay_ms(200);
		
		
	}
	else if(joystick_y_value() > threshold){
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
		oled_printf("y");
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
		menu_selector = menu_prev(menu_selector);
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
		_delay_ms(200);

		
	}
	else if(joystick_y_value() < - threshold){
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
		oled_printf("-y");
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
		//if there is a next item:
		if(menu_next(menu_selector) != NULL){
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
			menu_selector = menu_next(menu_selector);
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
			_delay_ms(200);
		}
	}
	else if(joystick_button_read()){
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
		oled_printf("button");
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
		if(menu_selector->fn != NULL ){	//if the function pointer points to a function, call it
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
			menu_selector->fn();
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
			
		}
	}
	
	
}
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <oled_mode_normal+0xa>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e0 e6       	ldi	r30, 0x60	; 96
     37c:	f5 e1       	ldi	r31, 0x15	; 21
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a4 3e       	cpi	r26, 0xE4	; 228
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a4 ee       	ldi	r26, 0xE4	; 228
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a7 30       	cpi	r26, 0x07	; 7
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 45 03 	call	0x68a	; 0x68a <main>
     39e:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_init>:
#include <avr/io.h>
#include <stdlib.h>
#include <string.h>


void can_init(int mode){
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	ec 01       	movw	r28, r24

	mcp2515_init();
     3ac:	0e 94 b8 03 	call	0x770	; 0x770 <mcp2515_init>
	mcp2515_bit_modify(MCP_RXB0CTRL, MCP_MASK_FILTER, 0xff);
     3b0:	4f ef       	ldi	r20, 0xFF	; 255
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	60 e6       	ldi	r22, 0x60	; 96
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	80 e6       	ldi	r24, 0x60	; 96
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 9a 03 	call	0x734	; 0x734 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXB1CTRL, MCP_MASK_FILTER, 0xff);
     3c0:	4f ef       	ldi	r20, 0xFF	; 255
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	60 e6       	ldi	r22, 0x60	; 96
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 e7       	ldi	r24, 0x70	; 112
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 9a 03 	call	0x734	; 0x734 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, mode);
     3d0:	ae 01       	movw	r20, r28
     3d2:	60 ee       	ldi	r22, 0xE0	; 224
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	8f e0       	ldi	r24, 0x0F	; 15
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 9a 03 	call	0x734	; 0x734 <mcp2515_bit_modify>
	DDRE &= ~(1 << PE0);
     3de:	30 98       	cbi	0x06, 0	; 6
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <can_transmit>:

void can_transmit(can_message* msg, int buffer_select){
     3e6:	2f 92       	push	r2
     3e8:	3f 92       	push	r3
     3ea:	4f 92       	push	r4
     3ec:	5f 92       	push	r5
     3ee:	6f 92       	push	r6
     3f0:	7f 92       	push	r7
     3f2:	8f 92       	push	r8
     3f4:	9f 92       	push	r9
     3f6:	af 92       	push	r10
     3f8:	bf 92       	push	r11
     3fa:	cf 92       	push	r12
     3fc:	df 92       	push	r13
     3fe:	ef 92       	push	r14
     400:	ff 92       	push	r15
     402:	0f 93       	push	r16
     404:	1f 93       	push	r17
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	00 d0       	rcall	.+0      	; 0x40c <can_transmit+0x26>
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
     410:	5c 01       	movw	r10, r24
     412:	7b 01       	movw	r14, r22
	
	mcp2515_bit_modify(buffer_select, 0x08, 0xff);
     414:	4f ef       	ldi	r20, 0xFF	; 255
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	68 e0       	ldi	r22, 0x08	; 8
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	c7 01       	movw	r24, r14
     41e:	0e 94 9a 03 	call	0x734	; 0x734 <mcp2515_bit_modify>
	
	while(mcp2515_read(buffer_select) & (1 << MCP_TXREQ));
     422:	c7 01       	movw	r24, r14
     424:	0e 94 74 03 	call	0x6e8	; 0x6e8 <mcp2515_read>
     428:	83 fd       	sbrc	r24, 3
     42a:	fb cf       	rjmp	.-10     	; 0x422 <can_transmit+0x3c>
	
	volatile uint8_t idl = MCP2515_MASK_IDL & (msg->id << 5);
     42c:	f5 01       	movw	r30, r10
     42e:	80 81       	ld	r24, Z
     430:	91 81       	ldd	r25, Z+1	; 0x01
     432:	28 2f       	mov	r18, r24
     434:	22 95       	swap	r18
     436:	22 0f       	add	r18, r18
     438:	20 7e       	andi	r18, 0xE0	; 224
     43a:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t idh = MCP2515_MASK_IDH & (msg->id >> 3);
     43c:	96 95       	lsr	r25
     43e:	87 95       	ror	r24
     440:	96 95       	lsr	r25
     442:	87 95       	ror	r24
     444:	96 95       	lsr	r25
     446:	87 95       	ror	r24
     448:	8a 83       	std	Y+2, r24	; 0x02
	
	mcp2515_write(buffer_select + MCP2515_IDL_OFFSET, idl); //3 LSB
     44a:	69 81       	ldd	r22, Y+1	; 0x01
     44c:	17 01       	movw	r2, r14
     44e:	f2 e0       	ldi	r31, 0x02	; 2
     450:	2f 0e       	add	r2, r31
     452:	31 1c       	adc	r3, r1
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	c1 01       	movw	r24, r2
     458:	0e 94 83 03 	call	0x706	; 0x706 <mcp2515_write>
	mcp2515_write(buffer_select + MCP2515_IDH_OFFSET, idh); //8 MSB
     45c:	6a 81       	ldd	r22, Y+2	; 0x02
     45e:	27 01       	movw	r4, r14
     460:	8f ef       	ldi	r24, 0xFF	; 255
     462:	48 1a       	sub	r4, r24
     464:	58 0a       	sbc	r5, r24
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	c2 01       	movw	r24, r4
     46a:	0e 94 83 03 	call	0x706	; 0x706 <mcp2515_write>
	
	mcp2515_write(buffer_select + MCP2515_DLC_OFFSET, MCP2515_MASK_DLC & (msg->length));
     46e:	37 01       	movw	r6, r14
     470:	95 e0       	ldi	r25, 0x05	; 5
     472:	69 0e       	add	r6, r25
     474:	71 1c       	adc	r7, r1
     476:	f5 01       	movw	r30, r10
     478:	62 81       	ldd	r22, Z+2	; 0x02
     47a:	6f 70       	andi	r22, 0x0F	; 15
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	c3 01       	movw	r24, r6
     480:	0e 94 83 03 	call	0x706	; 0x706 <mcp2515_write>
	
	
	for(int i = 0; i < msg->length; i++){
     484:	f5 01       	movw	r30, r10
     486:	82 81       	ldd	r24, Z+2	; 0x02
     488:	88 23       	and	r24, r24
     48a:	d9 f0       	breq	.+54     	; 0x4c2 <can_transmit+0xdc>
     48c:	65 01       	movw	r12, r10
     48e:	f3 e0       	ldi	r31, 0x03	; 3
     490:	cf 0e       	add	r12, r31
     492:	d1 1c       	adc	r13, r1
     494:	00 e0       	ldi	r16, 0x00	; 0
     496:	10 e0       	ldi	r17, 0x00	; 0
     498:	47 01       	movw	r8, r14
     49a:	86 e0       	ldi	r24, 0x06	; 6
     49c:	88 0e       	add	r8, r24
     49e:	91 1c       	adc	r9, r1
		mcp2515_write(buffer_select + MCP2515_TXB_OFFSET + i, msg->data[i]);
     4a0:	f6 01       	movw	r30, r12
     4a2:	61 91       	ld	r22, Z+
     4a4:	6f 01       	movw	r12, r30
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	c4 01       	movw	r24, r8
     4aa:	80 0f       	add	r24, r16
     4ac:	91 1f       	adc	r25, r17
     4ae:	0e 94 83 03 	call	0x706	; 0x706 <mcp2515_write>
	mcp2515_write(buffer_select + MCP2515_IDH_OFFSET, idh); //8 MSB
	
	mcp2515_write(buffer_select + MCP2515_DLC_OFFSET, MCP2515_MASK_DLC & (msg->length));
	
	
	for(int i = 0; i < msg->length; i++){
     4b2:	0f 5f       	subi	r16, 0xFF	; 255
     4b4:	1f 4f       	sbci	r17, 0xFF	; 255
     4b6:	f5 01       	movw	r30, r10
     4b8:	82 81       	ldd	r24, Z+2	; 0x02
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	08 17       	cp	r16, r24
     4be:	19 07       	cpc	r17, r25
     4c0:	7c f3       	brlt	.-34     	; 0x4a0 <can_transmit+0xba>
		
	}
	
	int buffer_control;
	
	if (buffer_select == MCP_TXB0CTRL){
     4c2:	f0 e3       	ldi	r31, 0x30	; 48
     4c4:	ef 16       	cp	r14, r31
     4c6:	f1 04       	cpc	r15, r1
     4c8:	59 f0       	breq	.+22     	; 0x4e0 <can_transmit+0xfa>
		buffer_control = MCP_RTS_TX0;
	}
	else if (buffer_select == MCP_TXB1CTRL){
     4ca:	80 e4       	ldi	r24, 0x40	; 64
     4cc:	e8 16       	cp	r14, r24
     4ce:	f1 04       	cpc	r15, r1
     4d0:	51 f0       	breq	.+20     	; 0x4e6 <can_transmit+0x100>
		buffer_control = MCP_RTS_TX1;
	}
	else if (buffer_select == MCP_TXB2CTRL){
     4d2:	90 e5       	ldi	r25, 0x50	; 80
     4d4:	e9 16       	cp	r14, r25
     4d6:	f1 04       	cpc	r15, r1
     4d8:	d1 f5       	brne	.+116    	; 0x54e <__stack+0x4f>
		buffer_control=MCP_RTS_TX2;
     4da:	04 e8       	ldi	r16, 0x84	; 132
     4dc:	10 e0       	ldi	r17, 0x00	; 0
     4de:	05 c0       	rjmp	.+10     	; 0x4ea <can_transmit+0x104>
	}
	
	int buffer_control;
	
	if (buffer_select == MCP_TXB0CTRL){
		buffer_control = MCP_RTS_TX0;
     4e0:	01 e8       	ldi	r16, 0x81	; 129
     4e2:	10 e0       	ldi	r17, 0x00	; 0
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <can_transmit+0x104>
	}
	else if (buffer_select == MCP_TXB1CTRL){
		buffer_control = MCP_RTS_TX1;
     4e6:	02 e8       	ldi	r16, 0x82	; 130
     4e8:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		return; 
	}
	
	printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
     4ea:	c7 01       	movw	r24, r14
     4ec:	06 96       	adiw	r24, 0x06	; 6
     4ee:	0e 94 74 03 	call	0x6e8	; 0x6e8 <mcp2515_read>
     4f2:	b8 2e       	mov	r11, r24
     4f4:	a9 2e       	mov	r10, r25
     4f6:	c3 01       	movw	r24, r6
     4f8:	0e 94 74 03 	call	0x6e8	; 0x6e8 <mcp2515_read>
     4fc:	d8 2e       	mov	r13, r24
     4fe:	c9 2e       	mov	r12, r25
     500:	c2 01       	movw	r24, r4
     502:	0e 94 74 03 	call	0x6e8	; 0x6e8 <mcp2515_read>
     506:	7c 01       	movw	r14, r24
     508:	c1 01       	movw	r24, r2
     50a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <mcp2515_read>
     50e:	af 92       	push	r10
     510:	bf 92       	push	r11
     512:	cf 92       	push	r12
     514:	df 92       	push	r13
     516:	95 95       	asr	r25
     518:	87 95       	ror	r24
     51a:	95 95       	asr	r25
     51c:	87 95       	ror	r24
     51e:	95 95       	asr	r25
     520:	87 95       	ror	r24
     522:	95 95       	asr	r25
     524:	87 95       	ror	r24
     526:	95 95       	asr	r25
     528:	87 95       	ror	r24
     52a:	8e 29       	or	r24, r14
     52c:	9f 29       	or	r25, r15
     52e:	9f 93       	push	r25
     530:	8f 93       	push	r24
     532:	88 e1       	ldi	r24, 0x18	; 24
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	9f 93       	push	r25
     538:	8f 93       	push	r24
     53a:	0e 94 9b 07 	call	0xf36	; 0xf36 <printf>
	
	mcp2515_request_to_send(buffer_control);
     53e:	c8 01       	movw	r24, r16
     540:	0e 94 95 03 	call	0x72a	; 0x72a <mcp2515_request_to_send>
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	de bf       	out	0x3e, r29	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	cd bf       	out	0x3d, r28	; 61
}
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	bf 90       	pop	r11
     564:	af 90       	pop	r10
     566:	9f 90       	pop	r9
     568:	8f 90       	pop	r8
     56a:	7f 90       	pop	r7
     56c:	6f 90       	pop	r6
     56e:	5f 90       	pop	r5
     570:	4f 90       	pop	r4
     572:	3f 90       	pop	r3
     574:	2f 90       	pop	r2
     576:	08 95       	ret

00000578 <canjoy_transmit>:
#include "joystick.h"
#include "canjoy.h"
#include "mcp2515_define.h"

void canjoy_transmit()
{
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	2b 97       	sbiw	r28, 0x0b	; 11
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	de bf       	out	0x3e, r29	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	cd bf       	out	0x3d, r28	; 61
	can_message joy;
	joy.id = CANJOY_ID;
     58c:	80 91 f5 01 	lds	r24, 0x01F5
     590:	90 91 f6 01 	lds	r25, 0x01F6
     594:	9a 83       	std	Y+2, r25	; 0x02
     596:	89 83       	std	Y+1, r24	; 0x01
	joy.length = 7;
     598:	87 e0       	ldi	r24, 0x07	; 7
     59a:	8b 83       	std	Y+3, r24	; 0x03
	printf("ID set to 7");
     59c:	84 e4       	ldi	r24, 0x44	; 68
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	9f 93       	push	r25
     5a2:	8f 93       	push	r24
     5a4:	0e 94 9b 07 	call	0xf36	; 0xf36 <printf>
	
	joy.data[0] = joystick_read_x();
     5a8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <joystick_read_x>
     5ac:	8c 83       	std	Y+4, r24	; 0x04
	joy.data[1] = joystick_read_y();
     5ae:	0e 94 05 03 	call	0x60a	; 0x60a <joystick_read_y>
     5b2:	8d 83       	std	Y+5, r24	; 0x05
	joy.data[2] = joystick_button_read();
     5b4:	0e 94 30 03 	call	0x660	; 0x660 <joystick_button_read>
     5b8:	8e 83       	std	Y+6, r24	; 0x06
	joy.data[3] = slider_left_read();
     5ba:	0e 94 10 03 	call	0x620	; 0x620 <slider_left_read>
     5be:	8f 83       	std	Y+7, r24	; 0x07
	joy.data[4] = slider_right_read();
     5c0:	0e 94 1a 03 	call	0x634	; 0x634 <slider_right_read>
     5c4:	88 87       	std	Y+8, r24	; 0x08
	joy.data[5] = button_left_read();
     5c6:	0e 94 37 03 	call	0x66e	; 0x66e <button_left_read>
     5ca:	89 87       	std	Y+9, r24	; 0x09
	joy.data[6] = button_right_read();
     5cc:	0e 94 3e 03 	call	0x67c	; 0x67c <button_right_read>
     5d0:	8a 87       	std	Y+10, r24	; 0x0a
	
	can_transmit(&joy, MCP_TXB0CTRL);
     5d2:	60 e3       	ldi	r22, 0x30	; 48
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	ce 01       	movw	r24, r28
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <can_transmit>
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
	
}
     5e2:	2b 96       	adiw	r28, 0x0b	; 11
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	de bf       	out	0x3e, r29	; 62
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	cd bf       	out	0x3d, r28	; 61
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <joystick_read_x>:
//}

unsigned int joystick_read_x(){
	
	volatile char *ext_joy = (char *) 0x1400;
	ext_joy[0] = 0x04;
     5f4:	84 e0       	ldi	r24, 0x04	; 4
     5f6:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5fa:	81 e4       	ldi	r24, 0x41	; 65
     5fc:	8a 95       	dec	r24
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <joystick_read_x+0x8>
     600:	00 c0       	rjmp	.+0      	; 0x602 <joystick_read_x+0xe>
	_delay_us(40);
	return (uint8_t)ext_joy[0];
     602:	80 91 00 14 	lds	r24, 0x1400
	
}
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	08 95       	ret

0000060a <joystick_read_y>:


unsigned int joystick_read_y(){
	
	volatile char *ext_joy = (char *) 0x1400;
	ext_joy[0] = 0x05;
     60a:	85 e0       	ldi	r24, 0x05	; 5
     60c:	80 93 00 14 	sts	0x1400, r24
     610:	81 e4       	ldi	r24, 0x41	; 65
     612:	8a 95       	dec	r24
     614:	f1 f7       	brne	.-4      	; 0x612 <joystick_read_y+0x8>
     616:	00 c0       	rjmp	.+0      	; 0x618 <joystick_read_y+0xe>
	_delay_us(40);
	return (uint8_t)ext_joy[0];
     618:	80 91 00 14 	lds	r24, 0x1400
	
}
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	08 95       	ret

00000620 <slider_left_read>:



uint8_t slider_left_read(){
	volatile char *ext_slide = (char *) 0x1400;
	ext_slide[0] = 0x06;
     620:	86 e0       	ldi	r24, 0x06	; 6
     622:	80 93 00 14 	sts	0x1400, r24
     626:	81 e4       	ldi	r24, 0x41	; 65
     628:	8a 95       	dec	r24
     62a:	f1 f7       	brne	.-4      	; 0x628 <slider_left_read+0x8>
     62c:	00 c0       	rjmp	.+0      	; 0x62e <slider_left_read+0xe>
	_delay_us(40);
	return (uint8_t)ext_slide[0];
     62e:	80 91 00 14 	lds	r24, 0x1400
}
     632:	08 95       	ret

00000634 <slider_right_read>:

uint8_t slider_right_read(){
	volatile char *ext_slide = (char *) 0x1400;
	ext_slide[0] = 0x07;
     634:	87 e0       	ldi	r24, 0x07	; 7
     636:	80 93 00 14 	sts	0x1400, r24
     63a:	81 e4       	ldi	r24, 0x41	; 65
     63c:	8a 95       	dec	r24
     63e:	f1 f7       	brne	.-4      	; 0x63c <slider_right_read+0x8>
     640:	00 c0       	rjmp	.+0      	; 0x642 <slider_right_read+0xe>
	_delay_us(40);
	return (uint8_t)ext_slide[0];
     642:	80 91 00 14 	lds	r24, 0x1400
}
     646:	08 95       	ret

00000648 <buttons_init>:
signed int slider_right_value(){
	return (slider_right_read() - 127);	
}

void buttons_init(){
	DDRB &= ~(1 << DDB1);	// ????
     648:	b9 98       	cbi	0x17, 1	; 23
	
	//left & right
	DDRB &= (1<< PINB0); //right
     64a:	87 b3       	in	r24, 0x17	; 23
     64c:	81 70       	andi	r24, 0x01	; 1
     64e:	87 bb       	out	0x17, r24	; 23
	DDRB &= (1<< PINB1); //left
     650:	87 b3       	in	r24, 0x17	; 23
     652:	82 70       	andi	r24, 0x02	; 2
     654:	87 bb       	out	0x17, r24	; 23

	//joystick button activate
	DDRB &= (1 << PINB2);
     656:	87 b3       	in	r24, 0x17	; 23
     658:	84 70       	andi	r24, 0x04	; 4
     65a:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << PINB2);
     65c:	c2 9a       	sbi	0x18, 2	; 24
     65e:	08 95       	ret

00000660 <joystick_button_read>:
}

int joystick_button_read(){
	int button = (PINB & (1 << PINB3));
	if (button > 0){
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	b3 9b       	sbis	0x16, 3	; 22
     666:	02 c0       	rjmp	.+4      	; 0x66c <joystick_button_read+0xc>
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
	else{
		return 1;
	}
	
	
}
     66c:	08 95       	ret

0000066e <button_left_read>:

int button_left_read(){
	int button = (PINB & (1 << PINB1));
	if (button > 0){
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	b1 99       	sbic	0x16, 1	; 22
     674:	02 c0       	rjmp	.+4      	; 0x67a <button_left_read+0xc>
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
}
     67a:	08 95       	ret

0000067c <button_right_read>:

int button_right_read(){
	int button = (PINB & (1 << PINB0));
	if (button > 0){
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	b0 99       	sbic	0x16, 0	; 22
     682:	02 c0       	rjmp	.+4      	; 0x688 <button_right_read+0xc>
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
	}
	else{
		return 0;
	}
	
}
     688:	08 95       	ret

0000068a <main>:
void SRAM_test(void);



int main(void){
	fdevopen(uart_Transmit, uart_Receive);
     68a:	68 e1       	ldi	r22, 0x18	; 24
     68c:	76 e0       	ldi	r23, 0x06	; 6
     68e:	84 e1       	ldi	r24, 0x14	; 20
     690:	96 e0       	ldi	r25, 0x06	; 6
     692:	0e 94 50 07 	call	0xea0	; 0xea0 <fdevopen>
	
	MCUCR |= (1 << SRE);
     696:	85 b7       	in	r24, 0x35	; 53
     698:	80 68       	ori	r24, 0x80	; 128
     69a:	85 bf       	out	0x35, r24	; 53
	
	uart_Init(MYUBRR);
     69c:	8f e1       	ldi	r24, 0x1F	; 31
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_Init>
	
	
	buttons_init(); // useless thus far
     6a4:	0e 94 24 03 	call	0x648	; 0x648 <buttons_init>
	oled_init();	
     6a8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <oled_init>
	oled_clear_screen();	
     6ac:	0e 94 77 05 	call	0xaee	; 0xaee <oled_clear_screen>
	oled_home();
     6b0:	0e 94 dd 04 	call	0x9ba	; 0x9ba <oled_home>
	
	
	Menuitem* menu = create_menu();
     6b4:	0e 94 3c 04 	call	0x878	; 0x878 <create_menu>
	menu_selector = menu;
     6b8:	90 93 fa 01 	sts	0x01FA, r25
     6bc:	80 93 f9 01 	sts	0x01F9, r24
	menu_line_nr = 0; 
     6c0:	10 92 f8 01 	sts	0x01F8, r1
     6c4:	10 92 f7 01 	sts	0x01F7, r1
	
	can_init(MODE_NORMAL);
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d0:	2f ef       	ldi	r18, 0xFF	; 255
     6d2:	8f e7       	ldi	r24, 0x7F	; 127
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	21 50       	subi	r18, 0x01	; 1
     6d8:	80 40       	sbci	r24, 0x00	; 0
     6da:	90 40       	sbci	r25, 0x00	; 0
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <main+0x4c>
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <main+0x56>
     6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <main+0x58>
		/*joy.data[0] = joystick_read_x();
		joy.data[1] = joystick_read_y();
		
		can_transmit(&joy, MCP_TXB0CTRL);*/
		_delay_ms(100);
		canjoy_transmit();
     6e2:	0e 94 bc 02 	call	0x578	; 0x578 <canjoy_transmit>
     6e6:	f4 cf       	rjmp	.-24     	; 0x6d0 <main+0x46>

000006e8 <mcp2515_read>:
	}
	return 0;
}


int mcp2515_read(int address){
     6e8:	cf 93       	push	r28
     6ea:	c8 2f       	mov	r28, r24
	
	int result;
	
	PORTB &= ~(1 << MCP2515_CS);
     6ec:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_READ);
     6ee:	83 e0       	ldi	r24, 0x03	; 3
     6f0:	0e 94 0e 06 	call	0xc1c	; 0xc1c <spi_write>
	spi_write(address);
     6f4:	8c 2f       	mov	r24, r28
     6f6:	0e 94 0e 06 	call	0xc1c	; 0xc1c <spi_write>
	
	result = spi_write(0x00);
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	0e 94 0e 06 	call	0xc1c	; 0xc1c <spi_write>
	
	PORTB |= (1 << MCP2515_CS);
     700:	c4 9a       	sbi	0x18, 4	; 24
	return result;
}
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <mcp2515_write>:

void mcp2515_write(int address, int data){
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	d8 2f       	mov	r29, r24
     70c:	c6 2f       	mov	r28, r22
	
	PORTB &= ~(1 << MCP2515_CS);
     70e:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_WRITE);
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	0e 94 0e 06 	call	0xc1c	; 0xc1c <spi_write>
	spi_write(address);
     716:	8d 2f       	mov	r24, r29
     718:	0e 94 0e 06 	call	0xc1c	; 0xc1c <spi_write>
	spi_write(data);
     71c:	8c 2f       	mov	r24, r28
     71e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <spi_write>
	
	PORTB |= (1 << MCP2515_CS);	
     722:	c4 9a       	sbi	0x18, 4	; 24
}
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <mcp2515_request_to_send>:

void mcp2515_request_to_send(int buffer_select){
	PORTB &= ~(1 << MCP2515_CS);
     72a:	c4 98       	cbi	0x18, 4	; 24
	spi_write(buffer_select);
     72c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <spi_write>
	PORTB |= (1 << MCP2515_CS);
     730:	c4 9a       	sbi	0x18, 4	; 24
     732:	08 95       	ret

00000734 <mcp2515_bit_modify>:
}

void mcp2515_bit_modify(int address, int mask, int data){
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	18 2f       	mov	r17, r24
     73c:	d6 2f       	mov	r29, r22
     73e:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS);
     740:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_BITMOD);
     742:	85 e0       	ldi	r24, 0x05	; 5
     744:	0e 94 0e 06 	call	0xc1c	; 0xc1c <spi_write>
	spi_write(address);
     748:	81 2f       	mov	r24, r17
     74a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <spi_write>
	spi_write(mask);
     74e:	8d 2f       	mov	r24, r29
     750:	0e 94 0e 06 	call	0xc1c	; 0xc1c <spi_write>
	spi_write(data);
     754:	8c 2f       	mov	r24, r28
     756:	0e 94 0e 06 	call	0xc1c	; 0xc1c <spi_write>

	PORTB |= (1 << MCP2515_CS);
     75a:	c4 9a       	sbi	0x18, 4	; 24
	
}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	08 95       	ret

00000764 <mcp2515_reset>:

void mcp2515_reset(){
	PORTB &= ~(1 << MCP2515_CS);
     764:	c4 98       	cbi	0x18, 4	; 24
	spi_write(MCP_RESET);
     766:	80 ec       	ldi	r24, 0xC0	; 192
     768:	0e 94 0e 06 	call	0xc1c	; 0xc1c <spi_write>
	PORTB |= (1 << MCP2515_CS);
     76c:	c4 9a       	sbi	0x18, 4	; 24
     76e:	08 95       	ret

00000770 <mcp2515_init>:
#include "SPI.h"
#include "mcp2515_define.h"


int mcp2515_init(){
	spi_init();
     770:	0e 94 07 06 	call	0xc0e	; 0xc0e <spi_init>
	mcp2515_reset();
     774:	0e 94 b2 03 	call	0x764	; 0x764 <mcp2515_reset>
	
	//self test
	uint8_t value = mcp2515_read(MCP_CANSTAT);
     778:	8e e0       	ldi	r24, 0x0E	; 14
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <mcp2515_read>
	if((value & MODE_MASK) != MODE_CONFIG){
     780:	80 7e       	andi	r24, 0xE0	; 224
     782:	99 27       	eor	r25, r25
     784:	80 38       	cpi	r24, 0x80	; 128
     786:	91 05       	cpc	r25, r1
     788:	39 f0       	breq	.+14     	; 0x798 <mcp2515_init+0x28>
		printf("ERROR: MCP2515 is NOT in config mode after reset!\n");
     78a:	8b e5       	ldi	r24, 0x5B	; 91
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	0e 94 af 07 	call	0xf5e	; 0xf5e <puts>
		return 1;
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	08 95       	ret
	}
	return 0;
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
}
     79c:	08 95       	ret

0000079e <menu_toggle_negative>:
}

volatile char *oled_data = (char *) 0x1200; //dirty fix


void menu_toggle_negative(){
     79e:	08 95       	ret

000007a0 <menu_snake_fn>:
char* menu_name(Menuitem* m){
	return m->name;
}


void menu_snake_fn(){
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
	oled_clear_screen();
     7a4:	0e 94 77 05 	call	0xaee	; 0xaee <oled_clear_screen>
	while(1){
		oled_home();
		oled_printf("snake funk");
     7a8:	cd e8       	ldi	r28, 0x8D	; 141
     7aa:	d1 e0       	ldi	r29, 0x01	; 1


void menu_snake_fn(){
	oled_clear_screen();
	while(1){
		oled_home();
     7ac:	0e 94 dd 04 	call	0x9ba	; 0x9ba <oled_home>
		oled_printf("snake funk");
     7b0:	df 93       	push	r29
     7b2:	cf 93       	push	r28
     7b4:	0e 94 85 05 	call	0xb0a	; 0xb0a <oled_printf>
		if(button_left_read()){
     7b8:	0e 94 37 03 	call	0x66e	; 0x66e <button_left_read>
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	89 2b       	or	r24, r25
     7c2:	a1 f3       	breq	.-24     	; 0x7ac <menu_snake_fn+0xc>
			return;
		}
	}
	
}
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	08 95       	ret

000007ca <new_Menuitem>:

Menuitem* new_Menuitem(
char* name,
void (*fn)(void),
uint8_t num_submenus
){
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	7c 01       	movw	r14, r24
     7da:	8b 01       	movw	r16, r22
     7dc:	d4 2e       	mov	r13, r20
	Menuitem* this = malloc(sizeof(Menuitem));
     7de:	89 e0       	ldi	r24, 0x09	; 9
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 29 06 	call	0xc52	; 0xc52 <malloc>
     7e6:	ec 01       	movw	r28, r24
	this->name = name;
     7e8:	fe 82       	std	Y+6, r15	; 0x06
     7ea:	ed 82       	std	Y+5, r14	; 0x05
	this->fn = fn;
     7ec:	18 87       	std	Y+8, r17	; 0x08
     7ee:	0f 83       	std	Y+7, r16	; 0x07
	
	this->num_submenus = num_submenus;
     7f0:	d8 82       	st	Y, r13
	this->submenus = malloc(sizeof(Menuitem) * num_submenus);
     7f2:	4d 2d       	mov	r20, r13
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	ca 01       	movw	r24, r20
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	88 0f       	add	r24, r24
     7fe:	99 1f       	adc	r25, r25
     800:	88 0f       	add	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	84 0f       	add	r24, r20
     806:	95 1f       	adc	r25, r21
     808:	0e 94 29 06 	call	0xc52	; 0xc52 <malloc>
     80c:	9a 83       	std	Y+2, r25	; 0x02
     80e:	89 83       	std	Y+1, r24	; 0x01
	
	return this;
}
     810:	ce 01       	movw	r24, r28
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	ff 90       	pop	r15
     81c:	ef 90       	pop	r14
     81e:	df 90       	pop	r13
     820:	08 95       	ret

00000822 <assign_parents>:


void assign_parents(Menuitem* menu){
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	ec 01       	movw	r28, r24
	for(uint8_t n = 0; n < menu->num_submenus; n++){
     82a:	88 81       	ld	r24, Y
     82c:	88 23       	and	r24, r24
     82e:	01 f1       	breq	.+64     	; 0x870 <assign_parents+0x4e>
     830:	10 e0       	ldi	r17, 0x00	; 0
		menu->submenus[n]->parent = menu;
     832:	81 2f       	mov	r24, r17
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
     83a:	e9 81       	ldd	r30, Y+1	; 0x01
     83c:	fa 81       	ldd	r31, Y+2	; 0x02
     83e:	e8 0f       	add	r30, r24
     840:	f9 1f       	adc	r31, r25
     842:	01 90       	ld	r0, Z+
     844:	f0 81       	ld	r31, Z
     846:	e0 2d       	mov	r30, r0
     848:	d4 83       	std	Z+4, r29	; 0x04
     84a:	c3 83       	std	Z+3, r28	; 0x03
		if(menu->submenus[n]->num_submenus > 0){
     84c:	29 81       	ldd	r18, Y+1	; 0x01
     84e:	3a 81       	ldd	r19, Y+2	; 0x02
     850:	f9 01       	movw	r30, r18
     852:	e8 0f       	add	r30, r24
     854:	f9 1f       	adc	r31, r25
     856:	01 90       	ld	r0, Z+
     858:	f0 81       	ld	r31, Z
     85a:	e0 2d       	mov	r30, r0
     85c:	80 81       	ld	r24, Z
     85e:	88 23       	and	r24, r24
     860:	19 f0       	breq	.+6      	; 0x868 <assign_parents+0x46>
			assign_parents(menu->submenus[n]);
     862:	cf 01       	movw	r24, r30
     864:	0e 94 11 04 	call	0x822	; 0x822 <assign_parents>
	return this;
}


void assign_parents(Menuitem* menu){
	for(uint8_t n = 0; n < menu->num_submenus; n++){
     868:	1f 5f       	subi	r17, 0xFF	; 255
     86a:	88 81       	ld	r24, Y
     86c:	18 17       	cp	r17, r24
     86e:	08 f3       	brcs	.-62     	; 0x832 <assign_parents+0x10>
		menu->submenus[n]->parent = menu;
		if(menu->submenus[n]->num_submenus > 0){
			assign_parents(menu->submenus[n]);
		}
	}
}
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	08 95       	ret

00000878 <create_menu>:


Menuitem* create_menu(){
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
	
	//Store these strings in progmem
	
	Menuitem* base = new_Menuitem("Main", NULL, 3);
     880:	43 e0       	ldi	r20, 0x03	; 3
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	88 e9       	ldi	r24, 0x98	; 152
     888:	91 e0       	ldi	r25, 0x01	; 1
     88a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <new_Menuitem>
     88e:	ec 01       	movw	r28, r24
	base->submenus[0] = new_Menuitem("Snake", menu_snake_fn, 0);
     890:	09 81       	ldd	r16, Y+1	; 0x01
     892:	1a 81       	ldd	r17, Y+2	; 0x02
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	60 ed       	ldi	r22, 0xD0	; 208
     898:	73 e0       	ldi	r23, 0x03	; 3
     89a:	8d e9       	ldi	r24, 0x9D	; 157
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <new_Menuitem>
     8a2:	f8 01       	movw	r30, r16
     8a4:	91 83       	std	Z+1, r25	; 0x01
     8a6:	80 83       	st	Z, r24
	base->submenus[1] = new_Menuitem("Settings", NULL, 2);
     8a8:	09 81       	ldd	r16, Y+1	; 0x01
     8aa:	1a 81       	ldd	r17, Y+2	; 0x02
     8ac:	42 e0       	ldi	r20, 0x02	; 2
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	83 ea       	ldi	r24, 0xA3	; 163
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <new_Menuitem>
     8ba:	f8 01       	movw	r30, r16
     8bc:	93 83       	std	Z+3, r25	; 0x03
     8be:	82 83       	std	Z+2, r24	; 0x02
	base->submenus[1]->submenus[0] = new_Menuitem("Contrast", oled_change_contrast, 0);
     8c0:	e9 81       	ldd	r30, Y+1	; 0x01
     8c2:	fa 81       	ldd	r31, Y+2	; 0x02
     8c4:	02 80       	ldd	r0, Z+2	; 0x02
     8c6:	f3 81       	ldd	r31, Z+3	; 0x03
     8c8:	e0 2d       	mov	r30, r0
     8ca:	01 81       	ldd	r16, Z+1	; 0x01
     8cc:	12 81       	ldd	r17, Z+2	; 0x02
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	69 eb       	ldi	r22, 0xB9	; 185
     8d2:	75 e0       	ldi	r23, 0x05	; 5
     8d4:	8c ea       	ldi	r24, 0xAC	; 172
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <new_Menuitem>
     8dc:	f8 01       	movw	r30, r16
     8de:	91 83       	std	Z+1, r25	; 0x01
     8e0:	80 83       	st	Z, r24
	base->submenus[1]->submenus[1] = new_Menuitem("Toggle negative", oled_toggle_negative, 0);
     8e2:	e9 81       	ldd	r30, Y+1	; 0x01
     8e4:	fa 81       	ldd	r31, Y+2	; 0x02
     8e6:	02 80       	ldd	r0, Z+2	; 0x02
     8e8:	f3 81       	ldd	r31, Z+3	; 0x03
     8ea:	e0 2d       	mov	r30, r0
     8ec:	01 81       	ldd	r16, Z+1	; 0x01
     8ee:	12 81       	ldd	r17, Z+2	; 0x02
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	63 ea       	ldi	r22, 0xA3	; 163
     8f4:	75 e0       	ldi	r23, 0x05	; 5
     8f6:	85 eb       	ldi	r24, 0xB5	; 181
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	0e 94 e5 03 	call	0x7ca	; 0x7ca <new_Menuitem>
     8fe:	f8 01       	movw	r30, r16
     900:	93 83       	std	Z+3, r25	; 0x03
     902:	82 83       	std	Z+2, r24	; 0x02
	//base->submenus[1]->submenus[1]->submenus[0] = new_Menuitem("Negative", oled_mode_negative, 0);
	//base->submenus[1]->submenus[1]->submenus[1] = new_Menuitem("Normal", oled_mode_normal, 0);
	base->submenus[2] = new_Menuitem("Ping Pong", menu_toggle_negative, 0);
     904:	09 81       	ldd	r16, Y+1	; 0x01
     906:	1a 81       	ldd	r17, Y+2	; 0x02
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	6f ec       	ldi	r22, 0xCF	; 207
     90c:	73 e0       	ldi	r23, 0x03	; 3
     90e:	85 ec       	ldi	r24, 0xC5	; 197
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	0e 94 e5 03 	call	0x7ca	; 0x7ca <new_Menuitem>
     916:	f8 01       	movw	r30, r16
     918:	95 83       	std	Z+5, r25	; 0x05
     91a:	84 83       	std	Z+4, r24	; 0x04
	
	assign_parents(base);
     91c:	ce 01       	movw	r24, r28
     91e:	0e 94 11 04 	call	0x822	; 0x822 <assign_parents>
	
	return base;
}
     922:	ce 01       	movw	r24, r28
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	08 95       	ret

0000092e <oled_print_char>:
		oled_clear_page(page);
	}
}


void oled_print_char(char character){
     92e:	28 e0       	ldi	r18, 0x08	; 8
     930:	82 9f       	mul	r24, r18
     932:	c0 01       	movw	r24, r0
     934:	11 24       	eor	r1, r1
     936:	fc 01       	movw	r30, r24
     938:	e0 59       	subi	r30, 0x90	; 144
     93a:	f0 40       	sbci	r31, 0x00	; 0
	for(int col = 0; col < font_width; col++){
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
		oled_data_write(pgm_read_byte(&font[character - FONT_OFFSET][col]));
     940:	84 91       	lpm	r24, Z
	*oled_command_adr = command;	
}


static inline void oled_data_write(char data){
	*oled_data_adr = data;
     942:	a0 91 08 01 	lds	r26, 0x0108
     946:	b0 91 09 01 	lds	r27, 0x0109
     94a:	8c 93       	st	X, r24
	}
}


void oled_print_char(char character){
	for(int col = 0; col < font_width; col++){
     94c:	2f 5f       	subi	r18, 0xFF	; 255
     94e:	3f 4f       	sbci	r19, 0xFF	; 255
     950:	31 96       	adiw	r30, 0x01	; 1
     952:	28 30       	cpi	r18, 0x08	; 8
     954:	31 05       	cpc	r19, r1
     956:	a1 f7       	brne	.-24     	; 0x940 <oled_print_char+0x12>
		oled_data_write(pgm_read_byte(&font[character - FONT_OFFSET][col]));
	}
}
     958:	08 95       	ret

0000095a <oled_goto_col>:
	//oled_command_write(0x0f + col);
	//
//}

void oled_goto_col(int column){
	oled_command_write(column & 0x0f);
     95a:	28 2f       	mov	r18, r24
     95c:	2f 70       	andi	r18, 0x0F	; 15
volatile char *oled_command_adr = (char *) 0x1000;



static inline void oled_command_write(char command){
	*oled_command_adr = command; 
     95e:	e0 91 06 01 	lds	r30, 0x0106
     962:	f0 91 07 01 	lds	r31, 0x0107
     966:	20 83       	st	Z, r18
	//
//}

void oled_goto_col(int column){
	oled_command_write(column & 0x0f);
	oled_command_write(((column & 0xf0) >> 4) | (0x10));
     968:	80 7f       	andi	r24, 0xF0	; 240
     96a:	99 27       	eor	r25, r25
     96c:	95 95       	asr	r25
     96e:	87 95       	ror	r24
     970:	95 95       	asr	r25
     972:	87 95       	ror	r24
     974:	95 95       	asr	r25
     976:	87 95       	ror	r24
     978:	95 95       	asr	r25
     97a:	87 95       	ror	r24
     97c:	80 61       	ori	r24, 0x10	; 16
volatile char *oled_command_adr = (char *) 0x1000;



static inline void oled_command_write(char command){
	*oled_command_adr = command; 
     97e:	e0 91 06 01 	lds	r30, 0x0106
     982:	f0 91 07 01 	lds	r31, 0x0107
     986:	80 83       	st	Z, r24
     988:	08 95       	ret

0000098a <oled_goto_page>:
	oled_command_write(column & 0x0f);
	oled_command_write(((column & 0xf0) >> 4) | (0x10));
}

void oled_goto_page(int page){
	oled_command_write(0xB0 + page);
     98a:	80 55       	subi	r24, 0x50	; 80
volatile char *oled_command_adr = (char *) 0x1000;



static inline void oled_command_write(char command){
	*oled_command_adr = command; 
     98c:	e0 91 06 01 	lds	r30, 0x0106
     990:	f0 91 07 01 	lds	r31, 0x0107
     994:	80 83       	st	Z, r24
     996:	e0 91 06 01 	lds	r30, 0x0106
     99a:	f0 91 07 01 	lds	r31, 0x0107
     99e:	10 82       	st	Z, r1
     9a0:	08 95       	ret

000009a2 <oled_goto_pos>:
void oled_goto_page(int page){
	oled_command_write(0xB0 + page);
	oled_command_write(0x00);
}

void oled_goto_pos(int col, int page){
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	ec 01       	movw	r28, r24
     9a8:	cb 01       	movw	r24, r22
	oled_goto_page(page);
     9aa:	0e 94 c5 04 	call	0x98a	; 0x98a <oled_goto_page>
	oled_goto_col(col);
     9ae:	ce 01       	movw	r24, r28
     9b0:	0e 94 ad 04 	call	0x95a	; 0x95a <oled_goto_col>
}
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	08 95       	ret

000009ba <oled_home>:

void oled_home(){
	oled_goto_pos(0,0);
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <oled_goto_pos>
     9c6:	08 95       	ret

000009c8 <oled_init>:
volatile char *oled_command_adr = (char *) 0x1000;



static inline void oled_command_write(char command){
	*oled_command_adr = command; 
     9c8:	e0 91 06 01 	lds	r30, 0x0106
     9cc:	f0 91 07 01 	lds	r31, 0x0107
     9d0:	8e ea       	ldi	r24, 0xAE	; 174
     9d2:	80 83       	st	Z, r24
     9d4:	e0 91 06 01 	lds	r30, 0x0106
     9d8:	f0 91 07 01 	lds	r31, 0x0107
     9dc:	81 ea       	ldi	r24, 0xA1	; 161
     9de:	80 83       	st	Z, r24
     9e0:	e0 91 06 01 	lds	r30, 0x0106
     9e4:	f0 91 07 01 	lds	r31, 0x0107
     9e8:	8a ed       	ldi	r24, 0xDA	; 218
     9ea:	80 83       	st	Z, r24
     9ec:	e0 91 06 01 	lds	r30, 0x0106
     9f0:	f0 91 07 01 	lds	r31, 0x0107
     9f4:	82 e1       	ldi	r24, 0x12	; 18
     9f6:	80 83       	st	Z, r24
     9f8:	e0 91 06 01 	lds	r30, 0x0106
     9fc:	f0 91 07 01 	lds	r31, 0x0107
     a00:	88 ec       	ldi	r24, 0xC8	; 200
     a02:	80 83       	st	Z, r24
     a04:	e0 91 06 01 	lds	r30, 0x0106
     a08:	f0 91 07 01 	lds	r31, 0x0107
     a0c:	88 ea       	ldi	r24, 0xA8	; 168
     a0e:	80 83       	st	Z, r24
     a10:	e0 91 06 01 	lds	r30, 0x0106
     a14:	f0 91 07 01 	lds	r31, 0x0107
     a18:	8f e3       	ldi	r24, 0x3F	; 63
     a1a:	80 83       	st	Z, r24
     a1c:	e0 91 06 01 	lds	r30, 0x0106
     a20:	f0 91 07 01 	lds	r31, 0x0107
     a24:	85 ed       	ldi	r24, 0xD5	; 213
     a26:	80 83       	st	Z, r24
     a28:	e0 91 06 01 	lds	r30, 0x0106
     a2c:	f0 91 07 01 	lds	r31, 0x0107
     a30:	80 e8       	ldi	r24, 0x80	; 128
     a32:	80 83       	st	Z, r24
     a34:	e0 91 06 01 	lds	r30, 0x0106
     a38:	f0 91 07 01 	lds	r31, 0x0107
     a3c:	81 e8       	ldi	r24, 0x81	; 129
     a3e:	80 83       	st	Z, r24
     a40:	e0 91 06 01 	lds	r30, 0x0106
     a44:	f0 91 07 01 	lds	r31, 0x0107
     a48:	80 e5       	ldi	r24, 0x50	; 80
     a4a:	80 83       	st	Z, r24
     a4c:	e0 91 06 01 	lds	r30, 0x0106
     a50:	f0 91 07 01 	lds	r31, 0x0107
     a54:	89 ed       	ldi	r24, 0xD9	; 217
     a56:	80 83       	st	Z, r24
     a58:	e0 91 06 01 	lds	r30, 0x0106
     a5c:	f0 91 07 01 	lds	r31, 0x0107
     a60:	81 e2       	ldi	r24, 0x21	; 33
     a62:	80 83       	st	Z, r24
     a64:	e0 91 06 01 	lds	r30, 0x0106
     a68:	f0 91 07 01 	lds	r31, 0x0107
     a6c:	80 e2       	ldi	r24, 0x20	; 32
     a6e:	80 83       	st	Z, r24
     a70:	e0 91 06 01 	lds	r30, 0x0106
     a74:	f0 91 07 01 	lds	r31, 0x0107
     a78:	82 e0       	ldi	r24, 0x02	; 2
     a7a:	80 83       	st	Z, r24
     a7c:	e0 91 06 01 	lds	r30, 0x0106
     a80:	f0 91 07 01 	lds	r31, 0x0107
     a84:	8b ed       	ldi	r24, 0xDB	; 219
     a86:	80 83       	st	Z, r24
     a88:	e0 91 06 01 	lds	r30, 0x0106
     a8c:	f0 91 07 01 	lds	r31, 0x0107
     a90:	80 e3       	ldi	r24, 0x30	; 48
     a92:	80 83       	st	Z, r24
     a94:	e0 91 06 01 	lds	r30, 0x0106
     a98:	f0 91 07 01 	lds	r31, 0x0107
     a9c:	8d ea       	ldi	r24, 0xAD	; 173
     a9e:	80 83       	st	Z, r24
     aa0:	e0 91 06 01 	lds	r30, 0x0106
     aa4:	f0 91 07 01 	lds	r31, 0x0107
     aa8:	10 82       	st	Z, r1
     aaa:	e0 91 06 01 	lds	r30, 0x0106
     aae:	f0 91 07 01 	lds	r31, 0x0107
     ab2:	84 ea       	ldi	r24, 0xA4	; 164
     ab4:	80 83       	st	Z, r24
     ab6:	e0 91 06 01 	lds	r30, 0x0106
     aba:	f0 91 07 01 	lds	r31, 0x0107
     abe:	86 ea       	ldi	r24, 0xA6	; 166
     ac0:	80 83       	st	Z, r24
     ac2:	e0 91 06 01 	lds	r30, 0x0106
     ac6:	f0 91 07 01 	lds	r31, 0x0107
     aca:	8f ea       	ldi	r24, 0xAF	; 175
     acc:	80 83       	st	Z, r24
	oled_command_write(0xa6);    //set normal display
	oled_command_write(0xaf);    // display on
	//oled_command_write(0xa4);    //Entire display on
	
	//oled_clear_screen();
	oled_home();
     ace:	0e 94 dd 04 	call	0x9ba	; 0x9ba <oled_home>
     ad2:	08 95       	ret

00000ad4 <oled_clear_page>:
	oled_goto_pos(0,0);
}


void oled_clear_page(int page){
	oled_goto_page(page);
     ad4:	0e 94 c5 04 	call	0x98a	; 0x98a <oled_goto_page>
     ad8:	80 e8       	ldi	r24, 0x80	; 128
     ada:	90 e0       	ldi	r25, 0x00	; 0
	*oled_command_adr = command;	
}


static inline void oled_data_write(char data){
	*oled_data_adr = data;
     adc:	e0 91 08 01 	lds	r30, 0x0108
     ae0:	f0 91 09 01 	lds	r31, 0x0109
     ae4:	10 82       	st	Z, r1
     ae6:	01 97       	sbiw	r24, 0x01	; 1
}


void oled_clear_page(int page){
	oled_goto_page(page);
	for(int col = 0; col < 128; col++){
     ae8:	00 97       	sbiw	r24, 0x00	; 0
     aea:	c1 f7       	brne	.-16     	; 0xadc <oled_clear_page+0x8>
		oled_data_write(0x00);
	}
}
     aec:	08 95       	ret

00000aee <oled_clear_screen>:
		oled_goto_pos(col_nr, page);
		oled_print_char(' ');
	}
}

void oled_clear_screen(){
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
	for(int page = 0;page < 8; page++){
     af2:	c0 e0       	ldi	r28, 0x00	; 0
     af4:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_page(page);
     af6:	ce 01       	movw	r24, r28
     af8:	0e 94 6a 05 	call	0xad4	; 0xad4 <oled_clear_page>
		oled_print_char(' ');
	}
}

void oled_clear_screen(){
	for(int page = 0;page < 8; page++){
     afc:	21 96       	adiw	r28, 0x01	; 1
     afe:	c8 30       	cpi	r28, 0x08	; 8
     b00:	d1 05       	cpc	r29, r1
     b02:	c9 f7       	brne	.-14     	; 0xaf6 <oled_clear_screen+0x8>
		oled_clear_page(page);
	}
}
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <oled_printf>:
		oled_data_write(pgm_read_byte(&font[character - FONT_OFFSET][col]));
	}
}


void oled_printf(char* fmt, ...){
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	fe 01       	movw	r30, r28
     b14:	35 96       	adiw	r30, 0x05	; 5
     b16:	61 91       	ld	r22, Z+
     b18:	71 91       	ld	r23, Z+
	va_list v;
	va_start(v, fmt);
	vfprintf(&oled_stdout, fmt, v);
     b1a:	af 01       	movw	r20, r30
     b1c:	8a e0       	ldi	r24, 0x0A	; 10
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <vfprintf>
	va_end(v);
}
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	08 95       	ret

00000b2a <oled_mode_negative>:
volatile char *oled_command_adr = (char *) 0x1000;



static inline void oled_command_write(char command){
	*oled_command_adr = command; 
     b2a:	e0 91 06 01 	lds	r30, 0x0106
     b2e:	f0 91 07 01 	lds	r31, 0x0107
     b32:	87 ea       	ldi	r24, 0xA7	; 167
     b34:	80 83       	st	Z, r24
     b36:	08 95       	ret

00000b38 <oled_mode_normal>:
     b38:	e0 91 06 01 	lds	r30, 0x0106
     b3c:	f0 91 07 01 	lds	r31, 0x0107
     b40:	86 ea       	ldi	r24, 0xA6	; 166
     b42:	80 83       	st	Z, r24
     b44:	08 95       	ret

00000b46 <oled_toggle_negative>:
}

int screen_negative = 0;

void oled_toggle_negative(){
	if(screen_negative){
     b46:	80 91 e4 01 	lds	r24, 0x01E4
     b4a:	90 91 e5 01 	lds	r25, 0x01E5
     b4e:	89 2b       	or	r24, r25
     b50:	39 f0       	breq	.+14     	; 0xb60 <oled_toggle_negative+0x1a>
		oled_mode_normal();
     b52:	0e 94 9c 05 	call	0xb38	; 0xb38 <oled_mode_normal>
		screen_negative = 0;
     b56:	10 92 e5 01 	sts	0x01E5, r1
     b5a:	10 92 e4 01 	sts	0x01E4, r1
     b5e:	08 95       	ret
	}
	else{
		oled_mode_negative();
     b60:	0e 94 95 05 	call	0xb2a	; 0xb2a <oled_mode_negative>
		screen_negative = 1;
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	90 93 e5 01 	sts	0x01E5, r25
     b6c:	80 93 e4 01 	sts	0x01E4, r24
     b70:	08 95       	ret

00000b72 <oled_change_contrast>:
	}
}


//badly modularised
void oled_change_contrast(){
     b72:	cf 93       	push	r28

	int contrast;
	oled_clear_screen();
     b74:	0e 94 77 05 	call	0xaee	; 0xaee <oled_clear_screen>
	oled_home();
     b78:	0e 94 dd 04 	call	0x9ba	; 0x9ba <oled_home>
	oled_printf("Contrast");
     b7c:	8c ea       	ldi	r24, 0xAC	; 172
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	9f 93       	push	r25
     b82:	8f 93       	push	r24
     b84:	0e 94 85 05 	call	0xb0a	; 0xb0a <oled_printf>
	oled_goto_pos(0, 3);
     b88:	63 e0       	ldi	r22, 0x03	; 3
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <oled_goto_pos>
	oled_printf("left slider");
     b94:	8f ec       	ldi	r24, 0xCF	; 207
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	9f 93       	push	r25
     b9a:	8f 93       	push	r24
     b9c:	0e 94 85 05 	call	0xb0a	; 0xb0a <oled_printf>
	oled_goto_pos(3,7);
     ba0:	67 e0       	ldi	r22, 0x07	; 7
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	83 e0       	ldi	r24, 0x03	; 3
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <oled_goto_pos>
	oled_printf("Default");
     bac:	8b ed       	ldi	r24, 0xDB	; 219
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	9f 93       	push	r25
     bb2:	8f 93       	push	r24
     bb4:	0e 94 85 05 	call	0xb0a	; 0xb0a <oled_printf>
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
volatile char *oled_command_adr = (char *) 0x1000;



static inline void oled_command_write(char command){
	*oled_command_adr = command; 
     bc4:	c1 e8       	ldi	r28, 0x81	; 129


	while(1){
	
		
		if(button_left_read()){
     bc6:	0e 94 37 03 	call	0x66e	; 0x66e <button_left_read>
     bca:	89 2b       	or	r24, r25
     bcc:	f1 f4       	brne	.+60     	; 0xc0a <oled_change_contrast+0x98>
			return;
		}
		else if(button_right_read()){
     bce:	0e 94 3e 03 	call	0x67c	; 0x67c <button_right_read>
     bd2:	89 2b       	or	r24, r25
     bd4:	69 f0       	breq	.+26     	; 0xbf0 <oled_change_contrast+0x7e>
volatile char *oled_command_adr = (char *) 0x1000;



static inline void oled_command_write(char command){
	*oled_command_adr = command; 
     bd6:	e0 91 06 01 	lds	r30, 0x0106
     bda:	f0 91 07 01 	lds	r31, 0x0107
     bde:	81 e8       	ldi	r24, 0x81	; 129
     be0:	80 83       	st	Z, r24
	*oled_command_adr = command;	
}


static inline void oled_data_write(char data){
	*oled_data_adr = data;
     be2:	e0 91 08 01 	lds	r30, 0x0108
     be6:	f0 91 09 01 	lds	r31, 0x0109
     bea:	80 e5       	ldi	r24, 0x50	; 80
     bec:	80 83       	st	Z, r24
     bee:	0d c0       	rjmp	.+26     	; 0xc0a <oled_change_contrast+0x98>
			oled_command_write(0x81);    
			oled_data_write(0x50);
			return;
		}

		contrast = slider_left_read();
     bf0:	0e 94 10 03 	call	0x620	; 0x620 <slider_left_read>
volatile char *oled_command_adr = (char *) 0x1000;



static inline void oled_command_write(char command){
	*oled_command_adr = command; 
     bf4:	e0 91 06 01 	lds	r30, 0x0106
     bf8:	f0 91 07 01 	lds	r31, 0x0107
     bfc:	c0 83       	st	Z, r28
	*oled_command_adr = command;	
}


static inline void oled_data_write(char data){
	*oled_data_adr = data;
     bfe:	e0 91 08 01 	lds	r30, 0x0108
     c02:	f0 91 09 01 	lds	r31, 0x0109
     c06:	80 83       	st	Z, r24
     c08:	de cf       	rjmp	.-68     	; 0xbc6 <oled_change_contrast+0x54>

		oled_command_write(0x81);    
		oled_data_write(contrast);

	}
}
     c0a:	cf 91       	pop	r28
     c0c:	08 95       	ret

00000c0e <spi_init>:
#include "SPI.h"
#include <avr/io.h>

void spi_init(){
			//SI out		SS out		SCK out
	DDRB |= ( 1 << PB5) | (1 << PB4) | (1 << PB7);
     c0e:	87 b3       	in	r24, 0x17	; 23
     c10:	80 6b       	ori	r24, 0xB0	; 176
     c12:	87 bb       	out	0x17, r24	; 23
			//SO in
	DDRB &= ~(1 << PB6);
     c14:	be 98       	cbi	0x17, 6	; 23
	
	//								 frequency / 16
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     c16:	81 e5       	ldi	r24, 0x51	; 81
     c18:	8d b9       	out	0x0d, r24	; 13
     c1a:	08 95       	ret

00000c1c <spi_write>:

//both read and write
int spi_write(char data){
	//SPDR = data;
	//while(!(SPSR & (1<<SPIF)));
	SPDR = data;
     c1c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     c1e:	77 9b       	sbis	0x0e, 7	; 14
     c20:	fe cf       	rjmp	.-4      	; 0xc1e <spi_write+0x2>
	return SPDR;
     c22:	8f b1       	in	r24, 0x0f	; 15
}
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	08 95       	ret

00000c28 <uart_Transmit>:
}

void uart_Transmit( unsigned char data ){
	
	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     c28:	5d 9b       	sbis	0x0b, 5	; 11
     c2a:	fe cf       	rjmp	.-4      	; 0xc28 <uart_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;
     c2c:	8c b9       	out	0x0c, r24	; 12
     c2e:	08 95       	ret

00000c30 <uart_Receive>:

unsigned char uart_Receive(void){
	
	//Wait for data to be received
	
	while( !(UCSR0A & (1<<RXC0)) );
     c30:	5f 9b       	sbis	0x0b, 7	; 11
     c32:	fe cf       	rjmp	.-4      	; 0xc30 <uart_Receive>
	
	//Get and return received data from buffer
	
	return UDR0;
     c34:	8c b1       	in	r24, 0x0c	; 12
}
     c36:	08 95       	ret

00000c38 <uart_Init>:
#include "uart.h"

void uart_Init(unsigned int ubrr){
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     c38:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     c3a:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN1)|(1<<TXEN1);
     c3c:	88 e1       	ldi	r24, 0x18	; 24
     c3e:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8data, 1stop bit
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
     c40:	86 e8       	ldi	r24, 0x86	; 134
     c42:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uart_Transmit, uart_Receive);
     c44:	68 e1       	ldi	r22, 0x18	; 24
     c46:	76 e0       	ldi	r23, 0x06	; 6
     c48:	84 e1       	ldi	r24, 0x14	; 20
     c4a:	96 e0       	ldi	r25, 0x06	; 6
     c4c:	0e 94 50 07 	call	0xea0	; 0xea0 <fdevopen>
     c50:	08 95       	ret

00000c52 <malloc>:
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	82 30       	cpi	r24, 0x02	; 2
     c58:	91 05       	cpc	r25, r1
     c5a:	10 f4       	brcc	.+4      	; 0xc60 <malloc+0xe>
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	e0 91 ff 01 	lds	r30, 0x01FF
     c64:	f0 91 00 02 	lds	r31, 0x0200
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	a0 e0       	ldi	r26, 0x00	; 0
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	30 97       	sbiw	r30, 0x00	; 0
     c72:	39 f1       	breq	.+78     	; 0xcc2 <malloc+0x70>
     c74:	40 81       	ld	r20, Z
     c76:	51 81       	ldd	r21, Z+1	; 0x01
     c78:	48 17       	cp	r20, r24
     c7a:	59 07       	cpc	r21, r25
     c7c:	b8 f0       	brcs	.+46     	; 0xcac <malloc+0x5a>
     c7e:	48 17       	cp	r20, r24
     c80:	59 07       	cpc	r21, r25
     c82:	71 f4       	brne	.+28     	; 0xca0 <malloc+0x4e>
     c84:	82 81       	ldd	r24, Z+2	; 0x02
     c86:	93 81       	ldd	r25, Z+3	; 0x03
     c88:	10 97       	sbiw	r26, 0x00	; 0
     c8a:	29 f0       	breq	.+10     	; 0xc96 <malloc+0x44>
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	9c 93       	st	X, r25
     c90:	8e 93       	st	-X, r24
     c92:	12 97       	sbiw	r26, 0x02	; 2
     c94:	2c c0       	rjmp	.+88     	; 0xcee <malloc+0x9c>
     c96:	90 93 00 02 	sts	0x0200, r25
     c9a:	80 93 ff 01 	sts	0x01FF, r24
     c9e:	27 c0       	rjmp	.+78     	; 0xcee <malloc+0x9c>
     ca0:	21 15       	cp	r18, r1
     ca2:	31 05       	cpc	r19, r1
     ca4:	31 f0       	breq	.+12     	; 0xcb2 <malloc+0x60>
     ca6:	42 17       	cp	r20, r18
     ca8:	53 07       	cpc	r21, r19
     caa:	18 f0       	brcs	.+6      	; 0xcb2 <malloc+0x60>
     cac:	a9 01       	movw	r20, r18
     cae:	db 01       	movw	r26, r22
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <malloc+0x62>
     cb2:	ef 01       	movw	r28, r30
     cb4:	9a 01       	movw	r18, r20
     cb6:	bd 01       	movw	r22, r26
     cb8:	df 01       	movw	r26, r30
     cba:	02 80       	ldd	r0, Z+2	; 0x02
     cbc:	f3 81       	ldd	r31, Z+3	; 0x03
     cbe:	e0 2d       	mov	r30, r0
     cc0:	d7 cf       	rjmp	.-82     	; 0xc70 <malloc+0x1e>
     cc2:	21 15       	cp	r18, r1
     cc4:	31 05       	cpc	r19, r1
     cc6:	f9 f0       	breq	.+62     	; 0xd06 <malloc+0xb4>
     cc8:	28 1b       	sub	r18, r24
     cca:	39 0b       	sbc	r19, r25
     ccc:	24 30       	cpi	r18, 0x04	; 4
     cce:	31 05       	cpc	r19, r1
     cd0:	80 f4       	brcc	.+32     	; 0xcf2 <malloc+0xa0>
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	9b 81       	ldd	r25, Y+3	; 0x03
     cd6:	61 15       	cp	r22, r1
     cd8:	71 05       	cpc	r23, r1
     cda:	21 f0       	breq	.+8      	; 0xce4 <malloc+0x92>
     cdc:	fb 01       	movw	r30, r22
     cde:	93 83       	std	Z+3, r25	; 0x03
     ce0:	82 83       	std	Z+2, r24	; 0x02
     ce2:	04 c0       	rjmp	.+8      	; 0xcec <malloc+0x9a>
     ce4:	90 93 00 02 	sts	0x0200, r25
     ce8:	80 93 ff 01 	sts	0x01FF, r24
     cec:	fe 01       	movw	r30, r28
     cee:	32 96       	adiw	r30, 0x02	; 2
     cf0:	44 c0       	rjmp	.+136    	; 0xd7a <malloc+0x128>
     cf2:	fe 01       	movw	r30, r28
     cf4:	e2 0f       	add	r30, r18
     cf6:	f3 1f       	adc	r31, r19
     cf8:	81 93       	st	Z+, r24
     cfa:	91 93       	st	Z+, r25
     cfc:	22 50       	subi	r18, 0x02	; 2
     cfe:	31 09       	sbc	r19, r1
     d00:	39 83       	std	Y+1, r19	; 0x01
     d02:	28 83       	st	Y, r18
     d04:	3a c0       	rjmp	.+116    	; 0xd7a <malloc+0x128>
     d06:	20 91 fd 01 	lds	r18, 0x01FD
     d0a:	30 91 fe 01 	lds	r19, 0x01FE
     d0e:	23 2b       	or	r18, r19
     d10:	41 f4       	brne	.+16     	; 0xd22 <malloc+0xd0>
     d12:	20 91 02 01 	lds	r18, 0x0102
     d16:	30 91 03 01 	lds	r19, 0x0103
     d1a:	30 93 fe 01 	sts	0x01FE, r19
     d1e:	20 93 fd 01 	sts	0x01FD, r18
     d22:	20 91 00 01 	lds	r18, 0x0100
     d26:	30 91 01 01 	lds	r19, 0x0101
     d2a:	21 15       	cp	r18, r1
     d2c:	31 05       	cpc	r19, r1
     d2e:	41 f4       	brne	.+16     	; 0xd40 <malloc+0xee>
     d30:	2d b7       	in	r18, 0x3d	; 61
     d32:	3e b7       	in	r19, 0x3e	; 62
     d34:	40 91 04 01 	lds	r20, 0x0104
     d38:	50 91 05 01 	lds	r21, 0x0105
     d3c:	24 1b       	sub	r18, r20
     d3e:	35 0b       	sbc	r19, r21
     d40:	e0 91 fd 01 	lds	r30, 0x01FD
     d44:	f0 91 fe 01 	lds	r31, 0x01FE
     d48:	e2 17       	cp	r30, r18
     d4a:	f3 07       	cpc	r31, r19
     d4c:	a0 f4       	brcc	.+40     	; 0xd76 <malloc+0x124>
     d4e:	2e 1b       	sub	r18, r30
     d50:	3f 0b       	sbc	r19, r31
     d52:	28 17       	cp	r18, r24
     d54:	39 07       	cpc	r19, r25
     d56:	78 f0       	brcs	.+30     	; 0xd76 <malloc+0x124>
     d58:	ac 01       	movw	r20, r24
     d5a:	4e 5f       	subi	r20, 0xFE	; 254
     d5c:	5f 4f       	sbci	r21, 0xFF	; 255
     d5e:	24 17       	cp	r18, r20
     d60:	35 07       	cpc	r19, r21
     d62:	48 f0       	brcs	.+18     	; 0xd76 <malloc+0x124>
     d64:	4e 0f       	add	r20, r30
     d66:	5f 1f       	adc	r21, r31
     d68:	50 93 fe 01 	sts	0x01FE, r21
     d6c:	40 93 fd 01 	sts	0x01FD, r20
     d70:	81 93       	st	Z+, r24
     d72:	91 93       	st	Z+, r25
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <malloc+0x128>
     d76:	e0 e0       	ldi	r30, 0x00	; 0
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	cf 01       	movw	r24, r30
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <free>:
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	09 f4       	brne	.+2      	; 0xd8c <free+0xa>
     d8a:	87 c0       	rjmp	.+270    	; 0xe9a <free+0x118>
     d8c:	fc 01       	movw	r30, r24
     d8e:	32 97       	sbiw	r30, 0x02	; 2
     d90:	13 82       	std	Z+3, r1	; 0x03
     d92:	12 82       	std	Z+2, r1	; 0x02
     d94:	c0 91 ff 01 	lds	r28, 0x01FF
     d98:	d0 91 00 02 	lds	r29, 0x0200
     d9c:	20 97       	sbiw	r28, 0x00	; 0
     d9e:	81 f4       	brne	.+32     	; 0xdc0 <free+0x3e>
     da0:	20 81       	ld	r18, Z
     da2:	31 81       	ldd	r19, Z+1	; 0x01
     da4:	28 0f       	add	r18, r24
     da6:	39 1f       	adc	r19, r25
     da8:	80 91 fd 01 	lds	r24, 0x01FD
     dac:	90 91 fe 01 	lds	r25, 0x01FE
     db0:	82 17       	cp	r24, r18
     db2:	93 07       	cpc	r25, r19
     db4:	79 f5       	brne	.+94     	; 0xe14 <free+0x92>
     db6:	f0 93 fe 01 	sts	0x01FE, r31
     dba:	e0 93 fd 01 	sts	0x01FD, r30
     dbe:	6d c0       	rjmp	.+218    	; 0xe9a <free+0x118>
     dc0:	de 01       	movw	r26, r28
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	ae 17       	cp	r26, r30
     dc8:	bf 07       	cpc	r27, r31
     dca:	50 f4       	brcc	.+20     	; 0xde0 <free+0x5e>
     dcc:	12 96       	adiw	r26, 0x02	; 2
     dce:	4d 91       	ld	r20, X+
     dd0:	5c 91       	ld	r21, X
     dd2:	13 97       	sbiw	r26, 0x03	; 3
     dd4:	9d 01       	movw	r18, r26
     dd6:	41 15       	cp	r20, r1
     dd8:	51 05       	cpc	r21, r1
     dda:	09 f1       	breq	.+66     	; 0xe1e <free+0x9c>
     ddc:	da 01       	movw	r26, r20
     dde:	f3 cf       	rjmp	.-26     	; 0xdc6 <free+0x44>
     de0:	b3 83       	std	Z+3, r27	; 0x03
     de2:	a2 83       	std	Z+2, r26	; 0x02
     de4:	40 81       	ld	r20, Z
     de6:	51 81       	ldd	r21, Z+1	; 0x01
     de8:	84 0f       	add	r24, r20
     dea:	95 1f       	adc	r25, r21
     dec:	8a 17       	cp	r24, r26
     dee:	9b 07       	cpc	r25, r27
     df0:	71 f4       	brne	.+28     	; 0xe0e <free+0x8c>
     df2:	8d 91       	ld	r24, X+
     df4:	9c 91       	ld	r25, X
     df6:	11 97       	sbiw	r26, 0x01	; 1
     df8:	84 0f       	add	r24, r20
     dfa:	95 1f       	adc	r25, r21
     dfc:	02 96       	adiw	r24, 0x02	; 2
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	80 83       	st	Z, r24
     e02:	12 96       	adiw	r26, 0x02	; 2
     e04:	8d 91       	ld	r24, X+
     e06:	9c 91       	ld	r25, X
     e08:	13 97       	sbiw	r26, 0x03	; 3
     e0a:	93 83       	std	Z+3, r25	; 0x03
     e0c:	82 83       	std	Z+2, r24	; 0x02
     e0e:	21 15       	cp	r18, r1
     e10:	31 05       	cpc	r19, r1
     e12:	29 f4       	brne	.+10     	; 0xe1e <free+0x9c>
     e14:	f0 93 00 02 	sts	0x0200, r31
     e18:	e0 93 ff 01 	sts	0x01FF, r30
     e1c:	3e c0       	rjmp	.+124    	; 0xe9a <free+0x118>
     e1e:	d9 01       	movw	r26, r18
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	fc 93       	st	X, r31
     e24:	ee 93       	st	-X, r30
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	4d 91       	ld	r20, X+
     e2a:	5d 91       	ld	r21, X+
     e2c:	a4 0f       	add	r26, r20
     e2e:	b5 1f       	adc	r27, r21
     e30:	ea 17       	cp	r30, r26
     e32:	fb 07       	cpc	r31, r27
     e34:	79 f4       	brne	.+30     	; 0xe54 <free+0xd2>
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	84 0f       	add	r24, r20
     e3c:	95 1f       	adc	r25, r21
     e3e:	02 96       	adiw	r24, 0x02	; 2
     e40:	d9 01       	movw	r26, r18
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	9c 93       	st	X, r25
     e46:	8e 93       	st	-X, r24
     e48:	82 81       	ldd	r24, Z+2	; 0x02
     e4a:	93 81       	ldd	r25, Z+3	; 0x03
     e4c:	13 96       	adiw	r26, 0x03	; 3
     e4e:	9c 93       	st	X, r25
     e50:	8e 93       	st	-X, r24
     e52:	12 97       	sbiw	r26, 0x02	; 2
     e54:	e0 e0       	ldi	r30, 0x00	; 0
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	9b 81       	ldd	r25, Y+3	; 0x03
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	19 f0       	breq	.+6      	; 0xe66 <free+0xe4>
     e60:	fe 01       	movw	r30, r28
     e62:	ec 01       	movw	r28, r24
     e64:	f9 cf       	rjmp	.-14     	; 0xe58 <free+0xd6>
     e66:	ce 01       	movw	r24, r28
     e68:	02 96       	adiw	r24, 0x02	; 2
     e6a:	28 81       	ld	r18, Y
     e6c:	39 81       	ldd	r19, Y+1	; 0x01
     e6e:	82 0f       	add	r24, r18
     e70:	93 1f       	adc	r25, r19
     e72:	20 91 fd 01 	lds	r18, 0x01FD
     e76:	30 91 fe 01 	lds	r19, 0x01FE
     e7a:	28 17       	cp	r18, r24
     e7c:	39 07       	cpc	r19, r25
     e7e:	69 f4       	brne	.+26     	; 0xe9a <free+0x118>
     e80:	30 97       	sbiw	r30, 0x00	; 0
     e82:	29 f4       	brne	.+10     	; 0xe8e <free+0x10c>
     e84:	10 92 00 02 	sts	0x0200, r1
     e88:	10 92 ff 01 	sts	0x01FF, r1
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <free+0x110>
     e8e:	13 82       	std	Z+3, r1	; 0x03
     e90:	12 82       	std	Z+2, r1	; 0x02
     e92:	d0 93 fe 01 	sts	0x01FE, r29
     e96:	c0 93 fd 01 	sts	0x01FD, r28
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <fdevopen>:
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	ec 01       	movw	r28, r24
     eaa:	8b 01       	movw	r16, r22
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	31 f4       	brne	.+12     	; 0xebc <fdevopen+0x1c>
     eb0:	61 15       	cp	r22, r1
     eb2:	71 05       	cpc	r23, r1
     eb4:	19 f4       	brne	.+6      	; 0xebc <fdevopen+0x1c>
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	38 c0       	rjmp	.+112    	; 0xf2c <fdevopen+0x8c>
     ebc:	6e e0       	ldi	r22, 0x0E	; 14
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 ae 09 	call	0x135c	; 0x135c <calloc>
     ec8:	fc 01       	movw	r30, r24
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	a1 f3       	breq	.-24     	; 0xeb6 <fdevopen+0x16>
     ece:	80 e8       	ldi	r24, 0x80	; 128
     ed0:	83 83       	std	Z+3, r24	; 0x03
     ed2:	01 15       	cp	r16, r1
     ed4:	11 05       	cpc	r17, r1
     ed6:	71 f0       	breq	.+28     	; 0xef4 <fdevopen+0x54>
     ed8:	13 87       	std	Z+11, r17	; 0x0b
     eda:	02 87       	std	Z+10, r16	; 0x0a
     edc:	81 e8       	ldi	r24, 0x81	; 129
     ede:	83 83       	std	Z+3, r24	; 0x03
     ee0:	80 91 01 02 	lds	r24, 0x0201
     ee4:	90 91 02 02 	lds	r25, 0x0202
     ee8:	89 2b       	or	r24, r25
     eea:	21 f4       	brne	.+8      	; 0xef4 <fdevopen+0x54>
     eec:	f0 93 02 02 	sts	0x0202, r31
     ef0:	e0 93 01 02 	sts	0x0201, r30
     ef4:	20 97       	sbiw	r28, 0x00	; 0
     ef6:	c9 f0       	breq	.+50     	; 0xf2a <fdevopen+0x8a>
     ef8:	d1 87       	std	Z+9, r29	; 0x09
     efa:	c0 87       	std	Z+8, r28	; 0x08
     efc:	83 81       	ldd	r24, Z+3	; 0x03
     efe:	82 60       	ori	r24, 0x02	; 2
     f00:	83 83       	std	Z+3, r24	; 0x03
     f02:	80 91 03 02 	lds	r24, 0x0203
     f06:	90 91 04 02 	lds	r25, 0x0204
     f0a:	89 2b       	or	r24, r25
     f0c:	71 f4       	brne	.+28     	; 0xf2a <fdevopen+0x8a>
     f0e:	f0 93 04 02 	sts	0x0204, r31
     f12:	e0 93 03 02 	sts	0x0203, r30
     f16:	80 91 05 02 	lds	r24, 0x0205
     f1a:	90 91 06 02 	lds	r25, 0x0206
     f1e:	89 2b       	or	r24, r25
     f20:	21 f4       	brne	.+8      	; 0xf2a <fdevopen+0x8a>
     f22:	f0 93 06 02 	sts	0x0206, r31
     f26:	e0 93 05 02 	sts	0x0205, r30
     f2a:	cf 01       	movw	r24, r30
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	08 95       	ret

00000f36 <printf>:
     f36:	a0 e0       	ldi	r26, 0x00	; 0
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e1 ea       	ldi	r30, 0xA1	; 161
     f3c:	f7 e0       	ldi	r31, 0x07	; 7
     f3e:	0c 94 87 0a 	jmp	0x150e	; 0x150e <__prologue_saves__+0x20>
     f42:	fe 01       	movw	r30, r28
     f44:	35 96       	adiw	r30, 0x05	; 5
     f46:	61 91       	ld	r22, Z+
     f48:	71 91       	ld	r23, Z+
     f4a:	af 01       	movw	r20, r30
     f4c:	80 91 03 02 	lds	r24, 0x0203
     f50:	90 91 04 02 	lds	r25, 0x0204
     f54:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <vfprintf>
     f58:	e2 e0       	ldi	r30, 0x02	; 2
     f5a:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__epilogue_restores__+0x20>

00000f5e <puts>:
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	e0 91 03 02 	lds	r30, 0x0203
     f6a:	f0 91 04 02 	lds	r31, 0x0204
     f6e:	23 81       	ldd	r18, Z+3	; 0x03
     f70:	21 ff       	sbrs	r18, 1
     f72:	1b c0       	rjmp	.+54     	; 0xfaa <puts+0x4c>
     f74:	ec 01       	movw	r28, r24
     f76:	00 e0       	ldi	r16, 0x00	; 0
     f78:	10 e0       	ldi	r17, 0x00	; 0
     f7a:	89 91       	ld	r24, Y+
     f7c:	60 91 03 02 	lds	r22, 0x0203
     f80:	70 91 04 02 	lds	r23, 0x0204
     f84:	db 01       	movw	r26, r22
     f86:	18 96       	adiw	r26, 0x08	; 8
     f88:	ed 91       	ld	r30, X+
     f8a:	fc 91       	ld	r31, X
     f8c:	19 97       	sbiw	r26, 0x09	; 9
     f8e:	88 23       	and	r24, r24
     f90:	31 f0       	breq	.+12     	; 0xf9e <puts+0x40>
     f92:	09 95       	icall
     f94:	89 2b       	or	r24, r25
     f96:	89 f3       	breq	.-30     	; 0xf7a <puts+0x1c>
     f98:	0f ef       	ldi	r16, 0xFF	; 255
     f9a:	1f ef       	ldi	r17, 0xFF	; 255
     f9c:	ee cf       	rjmp	.-36     	; 0xf7a <puts+0x1c>
     f9e:	8a e0       	ldi	r24, 0x0A	; 10
     fa0:	09 95       	icall
     fa2:	89 2b       	or	r24, r25
     fa4:	11 f4       	brne	.+4      	; 0xfaa <puts+0x4c>
     fa6:	c8 01       	movw	r24, r16
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <puts+0x50>
     faa:	8f ef       	ldi	r24, 0xFF	; 255
     fac:	9f ef       	ldi	r25, 0xFF	; 255
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	08 95       	ret

00000fb8 <vfprintf>:
     fb8:	ac e0       	ldi	r26, 0x0C	; 12
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e2 ee       	ldi	r30, 0xE2	; 226
     fbe:	f7 e0       	ldi	r31, 0x07	; 7
     fc0:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__prologue_saves__>
     fc4:	7c 01       	movw	r14, r24
     fc6:	6b 01       	movw	r12, r22
     fc8:	8a 01       	movw	r16, r20
     fca:	fc 01       	movw	r30, r24
     fcc:	17 82       	std	Z+7, r1	; 0x07
     fce:	16 82       	std	Z+6, r1	; 0x06
     fd0:	83 81       	ldd	r24, Z+3	; 0x03
     fd2:	81 ff       	sbrs	r24, 1
     fd4:	bd c1       	rjmp	.+890    	; 0x1350 <vfprintf+0x398>
     fd6:	ce 01       	movw	r24, r28
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	4c 01       	movw	r8, r24
     fdc:	f7 01       	movw	r30, r14
     fde:	93 81       	ldd	r25, Z+3	; 0x03
     fe0:	f6 01       	movw	r30, r12
     fe2:	93 fd       	sbrc	r25, 3
     fe4:	85 91       	lpm	r24, Z+
     fe6:	93 ff       	sbrs	r25, 3
     fe8:	81 91       	ld	r24, Z+
     fea:	6f 01       	movw	r12, r30
     fec:	88 23       	and	r24, r24
     fee:	09 f4       	brne	.+2      	; 0xff2 <vfprintf+0x3a>
     ff0:	ab c1       	rjmp	.+854    	; 0x1348 <vfprintf+0x390>
     ff2:	85 32       	cpi	r24, 0x25	; 37
     ff4:	39 f4       	brne	.+14     	; 0x1004 <vfprintf+0x4c>
     ff6:	93 fd       	sbrc	r25, 3
     ff8:	85 91       	lpm	r24, Z+
     ffa:	93 ff       	sbrs	r25, 3
     ffc:	81 91       	ld	r24, Z+
     ffe:	6f 01       	movw	r12, r30
    1000:	85 32       	cpi	r24, 0x25	; 37
    1002:	29 f4       	brne	.+10     	; 0x100e <vfprintf+0x56>
    1004:	b7 01       	movw	r22, r14
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 e7 09 	call	0x13ce	; 0x13ce <fputc>
    100c:	e7 cf       	rjmp	.-50     	; 0xfdc <vfprintf+0x24>
    100e:	51 2c       	mov	r5, r1
    1010:	31 2c       	mov	r3, r1
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	20 32       	cpi	r18, 0x20	; 32
    1016:	a0 f4       	brcc	.+40     	; 0x1040 <vfprintf+0x88>
    1018:	8b 32       	cpi	r24, 0x2B	; 43
    101a:	69 f0       	breq	.+26     	; 0x1036 <vfprintf+0x7e>
    101c:	30 f4       	brcc	.+12     	; 0x102a <vfprintf+0x72>
    101e:	80 32       	cpi	r24, 0x20	; 32
    1020:	59 f0       	breq	.+22     	; 0x1038 <vfprintf+0x80>
    1022:	83 32       	cpi	r24, 0x23	; 35
    1024:	69 f4       	brne	.+26     	; 0x1040 <vfprintf+0x88>
    1026:	20 61       	ori	r18, 0x10	; 16
    1028:	2c c0       	rjmp	.+88     	; 0x1082 <vfprintf+0xca>
    102a:	8d 32       	cpi	r24, 0x2D	; 45
    102c:	39 f0       	breq	.+14     	; 0x103c <vfprintf+0x84>
    102e:	80 33       	cpi	r24, 0x30	; 48
    1030:	39 f4       	brne	.+14     	; 0x1040 <vfprintf+0x88>
    1032:	21 60       	ori	r18, 0x01	; 1
    1034:	26 c0       	rjmp	.+76     	; 0x1082 <vfprintf+0xca>
    1036:	22 60       	ori	r18, 0x02	; 2
    1038:	24 60       	ori	r18, 0x04	; 4
    103a:	23 c0       	rjmp	.+70     	; 0x1082 <vfprintf+0xca>
    103c:	28 60       	ori	r18, 0x08	; 8
    103e:	21 c0       	rjmp	.+66     	; 0x1082 <vfprintf+0xca>
    1040:	27 fd       	sbrc	r18, 7
    1042:	27 c0       	rjmp	.+78     	; 0x1092 <vfprintf+0xda>
    1044:	30 ed       	ldi	r19, 0xD0	; 208
    1046:	38 0f       	add	r19, r24
    1048:	3a 30       	cpi	r19, 0x0A	; 10
    104a:	78 f4       	brcc	.+30     	; 0x106a <vfprintf+0xb2>
    104c:	26 ff       	sbrs	r18, 6
    104e:	06 c0       	rjmp	.+12     	; 0x105c <vfprintf+0xa4>
    1050:	fa e0       	ldi	r31, 0x0A	; 10
    1052:	5f 9e       	mul	r5, r31
    1054:	30 0d       	add	r19, r0
    1056:	11 24       	eor	r1, r1
    1058:	53 2e       	mov	r5, r19
    105a:	13 c0       	rjmp	.+38     	; 0x1082 <vfprintf+0xca>
    105c:	8a e0       	ldi	r24, 0x0A	; 10
    105e:	38 9e       	mul	r3, r24
    1060:	30 0d       	add	r19, r0
    1062:	11 24       	eor	r1, r1
    1064:	33 2e       	mov	r3, r19
    1066:	20 62       	ori	r18, 0x20	; 32
    1068:	0c c0       	rjmp	.+24     	; 0x1082 <vfprintf+0xca>
    106a:	8e 32       	cpi	r24, 0x2E	; 46
    106c:	21 f4       	brne	.+8      	; 0x1076 <vfprintf+0xbe>
    106e:	26 fd       	sbrc	r18, 6
    1070:	6b c1       	rjmp	.+726    	; 0x1348 <vfprintf+0x390>
    1072:	20 64       	ori	r18, 0x40	; 64
    1074:	06 c0       	rjmp	.+12     	; 0x1082 <vfprintf+0xca>
    1076:	8c 36       	cpi	r24, 0x6C	; 108
    1078:	11 f4       	brne	.+4      	; 0x107e <vfprintf+0xc6>
    107a:	20 68       	ori	r18, 0x80	; 128
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <vfprintf+0xca>
    107e:	88 36       	cpi	r24, 0x68	; 104
    1080:	41 f4       	brne	.+16     	; 0x1092 <vfprintf+0xda>
    1082:	f6 01       	movw	r30, r12
    1084:	93 fd       	sbrc	r25, 3
    1086:	85 91       	lpm	r24, Z+
    1088:	93 ff       	sbrs	r25, 3
    108a:	81 91       	ld	r24, Z+
    108c:	6f 01       	movw	r12, r30
    108e:	81 11       	cpse	r24, r1
    1090:	c1 cf       	rjmp	.-126    	; 0x1014 <vfprintf+0x5c>
    1092:	98 2f       	mov	r25, r24
    1094:	9f 7d       	andi	r25, 0xDF	; 223
    1096:	95 54       	subi	r25, 0x45	; 69
    1098:	93 30       	cpi	r25, 0x03	; 3
    109a:	28 f4       	brcc	.+10     	; 0x10a6 <vfprintf+0xee>
    109c:	0c 5f       	subi	r16, 0xFC	; 252
    109e:	1f 4f       	sbci	r17, 0xFF	; 255
    10a0:	ff e3       	ldi	r31, 0x3F	; 63
    10a2:	f9 83       	std	Y+1, r31	; 0x01
    10a4:	0d c0       	rjmp	.+26     	; 0x10c0 <vfprintf+0x108>
    10a6:	83 36       	cpi	r24, 0x63	; 99
    10a8:	31 f0       	breq	.+12     	; 0x10b6 <vfprintf+0xfe>
    10aa:	83 37       	cpi	r24, 0x73	; 115
    10ac:	71 f0       	breq	.+28     	; 0x10ca <vfprintf+0x112>
    10ae:	83 35       	cpi	r24, 0x53	; 83
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <vfprintf+0xfc>
    10b2:	5b c0       	rjmp	.+182    	; 0x116a <vfprintf+0x1b2>
    10b4:	22 c0       	rjmp	.+68     	; 0x10fa <vfprintf+0x142>
    10b6:	f8 01       	movw	r30, r16
    10b8:	80 81       	ld	r24, Z
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	0e 5f       	subi	r16, 0xFE	; 254
    10be:	1f 4f       	sbci	r17, 0xFF	; 255
    10c0:	44 24       	eor	r4, r4
    10c2:	43 94       	inc	r4
    10c4:	51 2c       	mov	r5, r1
    10c6:	54 01       	movw	r10, r8
    10c8:	15 c0       	rjmp	.+42     	; 0x10f4 <vfprintf+0x13c>
    10ca:	38 01       	movw	r6, r16
    10cc:	f2 e0       	ldi	r31, 0x02	; 2
    10ce:	6f 0e       	add	r6, r31
    10d0:	71 1c       	adc	r7, r1
    10d2:	f8 01       	movw	r30, r16
    10d4:	a0 80       	ld	r10, Z
    10d6:	b1 80       	ldd	r11, Z+1	; 0x01
    10d8:	26 ff       	sbrs	r18, 6
    10da:	03 c0       	rjmp	.+6      	; 0x10e2 <vfprintf+0x12a>
    10dc:	65 2d       	mov	r22, r5
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <vfprintf+0x12e>
    10e2:	6f ef       	ldi	r22, 0xFF	; 255
    10e4:	7f ef       	ldi	r23, 0xFF	; 255
    10e6:	c5 01       	movw	r24, r10
    10e8:	2c 87       	std	Y+12, r18	; 0x0c
    10ea:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <strnlen>
    10ee:	2c 01       	movw	r4, r24
    10f0:	83 01       	movw	r16, r6
    10f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    10f4:	2f 77       	andi	r18, 0x7F	; 127
    10f6:	22 2e       	mov	r2, r18
    10f8:	17 c0       	rjmp	.+46     	; 0x1128 <vfprintf+0x170>
    10fa:	38 01       	movw	r6, r16
    10fc:	f2 e0       	ldi	r31, 0x02	; 2
    10fe:	6f 0e       	add	r6, r31
    1100:	71 1c       	adc	r7, r1
    1102:	f8 01       	movw	r30, r16
    1104:	a0 80       	ld	r10, Z
    1106:	b1 80       	ldd	r11, Z+1	; 0x01
    1108:	26 ff       	sbrs	r18, 6
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <vfprintf+0x15a>
    110c:	65 2d       	mov	r22, r5
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <vfprintf+0x15e>
    1112:	6f ef       	ldi	r22, 0xFF	; 255
    1114:	7f ef       	ldi	r23, 0xFF	; 255
    1116:	c5 01       	movw	r24, r10
    1118:	2c 87       	std	Y+12, r18	; 0x0c
    111a:	0e 94 ca 09 	call	0x1394	; 0x1394 <strnlen_P>
    111e:	2c 01       	movw	r4, r24
    1120:	2c 85       	ldd	r18, Y+12	; 0x0c
    1122:	20 68       	ori	r18, 0x80	; 128
    1124:	22 2e       	mov	r2, r18
    1126:	83 01       	movw	r16, r6
    1128:	23 fc       	sbrc	r2, 3
    112a:	1b c0       	rjmp	.+54     	; 0x1162 <vfprintf+0x1aa>
    112c:	83 2d       	mov	r24, r3
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	48 16       	cp	r4, r24
    1132:	59 06       	cpc	r5, r25
    1134:	b0 f4       	brcc	.+44     	; 0x1162 <vfprintf+0x1aa>
    1136:	b7 01       	movw	r22, r14
    1138:	80 e2       	ldi	r24, 0x20	; 32
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <fputc>
    1140:	3a 94       	dec	r3
    1142:	f4 cf       	rjmp	.-24     	; 0x112c <vfprintf+0x174>
    1144:	f5 01       	movw	r30, r10
    1146:	27 fc       	sbrc	r2, 7
    1148:	85 91       	lpm	r24, Z+
    114a:	27 fe       	sbrs	r2, 7
    114c:	81 91       	ld	r24, Z+
    114e:	5f 01       	movw	r10, r30
    1150:	b7 01       	movw	r22, r14
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 e7 09 	call	0x13ce	; 0x13ce <fputc>
    1158:	31 10       	cpse	r3, r1
    115a:	3a 94       	dec	r3
    115c:	f1 e0       	ldi	r31, 0x01	; 1
    115e:	4f 1a       	sub	r4, r31
    1160:	51 08       	sbc	r5, r1
    1162:	41 14       	cp	r4, r1
    1164:	51 04       	cpc	r5, r1
    1166:	71 f7       	brne	.-36     	; 0x1144 <vfprintf+0x18c>
    1168:	e5 c0       	rjmp	.+458    	; 0x1334 <vfprintf+0x37c>
    116a:	84 36       	cpi	r24, 0x64	; 100
    116c:	11 f0       	breq	.+4      	; 0x1172 <vfprintf+0x1ba>
    116e:	89 36       	cpi	r24, 0x69	; 105
    1170:	39 f5       	brne	.+78     	; 0x11c0 <vfprintf+0x208>
    1172:	f8 01       	movw	r30, r16
    1174:	27 ff       	sbrs	r18, 7
    1176:	07 c0       	rjmp	.+14     	; 0x1186 <vfprintf+0x1ce>
    1178:	60 81       	ld	r22, Z
    117a:	71 81       	ldd	r23, Z+1	; 0x01
    117c:	82 81       	ldd	r24, Z+2	; 0x02
    117e:	93 81       	ldd	r25, Z+3	; 0x03
    1180:	0c 5f       	subi	r16, 0xFC	; 252
    1182:	1f 4f       	sbci	r17, 0xFF	; 255
    1184:	08 c0       	rjmp	.+16     	; 0x1196 <vfprintf+0x1de>
    1186:	60 81       	ld	r22, Z
    1188:	71 81       	ldd	r23, Z+1	; 0x01
    118a:	88 27       	eor	r24, r24
    118c:	77 fd       	sbrc	r23, 7
    118e:	80 95       	com	r24
    1190:	98 2f       	mov	r25, r24
    1192:	0e 5f       	subi	r16, 0xFE	; 254
    1194:	1f 4f       	sbci	r17, 0xFF	; 255
    1196:	2f 76       	andi	r18, 0x6F	; 111
    1198:	b2 2e       	mov	r11, r18
    119a:	97 ff       	sbrs	r25, 7
    119c:	09 c0       	rjmp	.+18     	; 0x11b0 <vfprintf+0x1f8>
    119e:	90 95       	com	r25
    11a0:	80 95       	com	r24
    11a2:	70 95       	com	r23
    11a4:	61 95       	neg	r22
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255
    11a8:	8f 4f       	sbci	r24, 0xFF	; 255
    11aa:	9f 4f       	sbci	r25, 0xFF	; 255
    11ac:	20 68       	ori	r18, 0x80	; 128
    11ae:	b2 2e       	mov	r11, r18
    11b0:	2a e0       	ldi	r18, 0x0A	; 10
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	a4 01       	movw	r20, r8
    11b6:	0e 94 19 0a 	call	0x1432	; 0x1432 <__ultoa_invert>
    11ba:	a8 2e       	mov	r10, r24
    11bc:	a8 18       	sub	r10, r8
    11be:	44 c0       	rjmp	.+136    	; 0x1248 <vfprintf+0x290>
    11c0:	85 37       	cpi	r24, 0x75	; 117
    11c2:	29 f4       	brne	.+10     	; 0x11ce <vfprintf+0x216>
    11c4:	2f 7e       	andi	r18, 0xEF	; 239
    11c6:	b2 2e       	mov	r11, r18
    11c8:	2a e0       	ldi	r18, 0x0A	; 10
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	25 c0       	rjmp	.+74     	; 0x1218 <vfprintf+0x260>
    11ce:	f2 2f       	mov	r31, r18
    11d0:	f9 7f       	andi	r31, 0xF9	; 249
    11d2:	bf 2e       	mov	r11, r31
    11d4:	8f 36       	cpi	r24, 0x6F	; 111
    11d6:	c1 f0       	breq	.+48     	; 0x1208 <vfprintf+0x250>
    11d8:	18 f4       	brcc	.+6      	; 0x11e0 <vfprintf+0x228>
    11da:	88 35       	cpi	r24, 0x58	; 88
    11dc:	79 f0       	breq	.+30     	; 0x11fc <vfprintf+0x244>
    11de:	b4 c0       	rjmp	.+360    	; 0x1348 <vfprintf+0x390>
    11e0:	80 37       	cpi	r24, 0x70	; 112
    11e2:	19 f0       	breq	.+6      	; 0x11ea <vfprintf+0x232>
    11e4:	88 37       	cpi	r24, 0x78	; 120
    11e6:	21 f0       	breq	.+8      	; 0x11f0 <vfprintf+0x238>
    11e8:	af c0       	rjmp	.+350    	; 0x1348 <vfprintf+0x390>
    11ea:	2f 2f       	mov	r18, r31
    11ec:	20 61       	ori	r18, 0x10	; 16
    11ee:	b2 2e       	mov	r11, r18
    11f0:	b4 fe       	sbrs	r11, 4
    11f2:	0d c0       	rjmp	.+26     	; 0x120e <vfprintf+0x256>
    11f4:	8b 2d       	mov	r24, r11
    11f6:	84 60       	ori	r24, 0x04	; 4
    11f8:	b8 2e       	mov	r11, r24
    11fa:	09 c0       	rjmp	.+18     	; 0x120e <vfprintf+0x256>
    11fc:	24 ff       	sbrs	r18, 4
    11fe:	0a c0       	rjmp	.+20     	; 0x1214 <vfprintf+0x25c>
    1200:	9f 2f       	mov	r25, r31
    1202:	96 60       	ori	r25, 0x06	; 6
    1204:	b9 2e       	mov	r11, r25
    1206:	06 c0       	rjmp	.+12     	; 0x1214 <vfprintf+0x25c>
    1208:	28 e0       	ldi	r18, 0x08	; 8
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	05 c0       	rjmp	.+10     	; 0x1218 <vfprintf+0x260>
    120e:	20 e1       	ldi	r18, 0x10	; 16
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <vfprintf+0x260>
    1214:	20 e1       	ldi	r18, 0x10	; 16
    1216:	32 e0       	ldi	r19, 0x02	; 2
    1218:	f8 01       	movw	r30, r16
    121a:	b7 fe       	sbrs	r11, 7
    121c:	07 c0       	rjmp	.+14     	; 0x122c <vfprintf+0x274>
    121e:	60 81       	ld	r22, Z
    1220:	71 81       	ldd	r23, Z+1	; 0x01
    1222:	82 81       	ldd	r24, Z+2	; 0x02
    1224:	93 81       	ldd	r25, Z+3	; 0x03
    1226:	0c 5f       	subi	r16, 0xFC	; 252
    1228:	1f 4f       	sbci	r17, 0xFF	; 255
    122a:	06 c0       	rjmp	.+12     	; 0x1238 <vfprintf+0x280>
    122c:	60 81       	ld	r22, Z
    122e:	71 81       	ldd	r23, Z+1	; 0x01
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 5f       	subi	r16, 0xFE	; 254
    1236:	1f 4f       	sbci	r17, 0xFF	; 255
    1238:	a4 01       	movw	r20, r8
    123a:	0e 94 19 0a 	call	0x1432	; 0x1432 <__ultoa_invert>
    123e:	a8 2e       	mov	r10, r24
    1240:	a8 18       	sub	r10, r8
    1242:	fb 2d       	mov	r31, r11
    1244:	ff 77       	andi	r31, 0x7F	; 127
    1246:	bf 2e       	mov	r11, r31
    1248:	b6 fe       	sbrs	r11, 6
    124a:	0b c0       	rjmp	.+22     	; 0x1262 <vfprintf+0x2aa>
    124c:	2b 2d       	mov	r18, r11
    124e:	2e 7f       	andi	r18, 0xFE	; 254
    1250:	a5 14       	cp	r10, r5
    1252:	50 f4       	brcc	.+20     	; 0x1268 <vfprintf+0x2b0>
    1254:	b4 fe       	sbrs	r11, 4
    1256:	0a c0       	rjmp	.+20     	; 0x126c <vfprintf+0x2b4>
    1258:	b2 fc       	sbrc	r11, 2
    125a:	08 c0       	rjmp	.+16     	; 0x126c <vfprintf+0x2b4>
    125c:	2b 2d       	mov	r18, r11
    125e:	2e 7e       	andi	r18, 0xEE	; 238
    1260:	05 c0       	rjmp	.+10     	; 0x126c <vfprintf+0x2b4>
    1262:	7a 2c       	mov	r7, r10
    1264:	2b 2d       	mov	r18, r11
    1266:	03 c0       	rjmp	.+6      	; 0x126e <vfprintf+0x2b6>
    1268:	7a 2c       	mov	r7, r10
    126a:	01 c0       	rjmp	.+2      	; 0x126e <vfprintf+0x2b6>
    126c:	75 2c       	mov	r7, r5
    126e:	24 ff       	sbrs	r18, 4
    1270:	0d c0       	rjmp	.+26     	; 0x128c <vfprintf+0x2d4>
    1272:	fe 01       	movw	r30, r28
    1274:	ea 0d       	add	r30, r10
    1276:	f1 1d       	adc	r31, r1
    1278:	80 81       	ld	r24, Z
    127a:	80 33       	cpi	r24, 0x30	; 48
    127c:	11 f4       	brne	.+4      	; 0x1282 <vfprintf+0x2ca>
    127e:	29 7e       	andi	r18, 0xE9	; 233
    1280:	09 c0       	rjmp	.+18     	; 0x1294 <vfprintf+0x2dc>
    1282:	22 ff       	sbrs	r18, 2
    1284:	06 c0       	rjmp	.+12     	; 0x1292 <vfprintf+0x2da>
    1286:	73 94       	inc	r7
    1288:	73 94       	inc	r7
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <vfprintf+0x2dc>
    128c:	82 2f       	mov	r24, r18
    128e:	86 78       	andi	r24, 0x86	; 134
    1290:	09 f0       	breq	.+2      	; 0x1294 <vfprintf+0x2dc>
    1292:	73 94       	inc	r7
    1294:	23 fd       	sbrc	r18, 3
    1296:	13 c0       	rjmp	.+38     	; 0x12be <vfprintf+0x306>
    1298:	20 ff       	sbrs	r18, 0
    129a:	06 c0       	rjmp	.+12     	; 0x12a8 <vfprintf+0x2f0>
    129c:	5a 2c       	mov	r5, r10
    129e:	73 14       	cp	r7, r3
    12a0:	18 f4       	brcc	.+6      	; 0x12a8 <vfprintf+0x2f0>
    12a2:	53 0c       	add	r5, r3
    12a4:	57 18       	sub	r5, r7
    12a6:	73 2c       	mov	r7, r3
    12a8:	73 14       	cp	r7, r3
    12aa:	68 f4       	brcc	.+26     	; 0x12c6 <vfprintf+0x30e>
    12ac:	b7 01       	movw	r22, r14
    12ae:	80 e2       	ldi	r24, 0x20	; 32
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	2c 87       	std	Y+12, r18	; 0x0c
    12b4:	0e 94 e7 09 	call	0x13ce	; 0x13ce <fputc>
    12b8:	73 94       	inc	r7
    12ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    12bc:	f5 cf       	rjmp	.-22     	; 0x12a8 <vfprintf+0x2f0>
    12be:	73 14       	cp	r7, r3
    12c0:	10 f4       	brcc	.+4      	; 0x12c6 <vfprintf+0x30e>
    12c2:	37 18       	sub	r3, r7
    12c4:	01 c0       	rjmp	.+2      	; 0x12c8 <vfprintf+0x310>
    12c6:	31 2c       	mov	r3, r1
    12c8:	24 ff       	sbrs	r18, 4
    12ca:	12 c0       	rjmp	.+36     	; 0x12f0 <vfprintf+0x338>
    12cc:	b7 01       	movw	r22, r14
    12ce:	80 e3       	ldi	r24, 0x30	; 48
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	2c 87       	std	Y+12, r18	; 0x0c
    12d4:	0e 94 e7 09 	call	0x13ce	; 0x13ce <fputc>
    12d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    12da:	22 ff       	sbrs	r18, 2
    12dc:	17 c0       	rjmp	.+46     	; 0x130c <vfprintf+0x354>
    12de:	21 ff       	sbrs	r18, 1
    12e0:	03 c0       	rjmp	.+6      	; 0x12e8 <vfprintf+0x330>
    12e2:	88 e5       	ldi	r24, 0x58	; 88
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <vfprintf+0x334>
    12e8:	88 e7       	ldi	r24, 0x78	; 120
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	b7 01       	movw	r22, r14
    12ee:	0c c0       	rjmp	.+24     	; 0x1308 <vfprintf+0x350>
    12f0:	82 2f       	mov	r24, r18
    12f2:	86 78       	andi	r24, 0x86	; 134
    12f4:	59 f0       	breq	.+22     	; 0x130c <vfprintf+0x354>
    12f6:	21 fd       	sbrc	r18, 1
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <vfprintf+0x346>
    12fa:	80 e2       	ldi	r24, 0x20	; 32
    12fc:	01 c0       	rjmp	.+2      	; 0x1300 <vfprintf+0x348>
    12fe:	8b e2       	ldi	r24, 0x2B	; 43
    1300:	27 fd       	sbrc	r18, 7
    1302:	8d e2       	ldi	r24, 0x2D	; 45
    1304:	b7 01       	movw	r22, r14
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 e7 09 	call	0x13ce	; 0x13ce <fputc>
    130c:	a5 14       	cp	r10, r5
    130e:	38 f4       	brcc	.+14     	; 0x131e <vfprintf+0x366>
    1310:	b7 01       	movw	r22, r14
    1312:	80 e3       	ldi	r24, 0x30	; 48
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 e7 09 	call	0x13ce	; 0x13ce <fputc>
    131a:	5a 94       	dec	r5
    131c:	f7 cf       	rjmp	.-18     	; 0x130c <vfprintf+0x354>
    131e:	aa 94       	dec	r10
    1320:	f4 01       	movw	r30, r8
    1322:	ea 0d       	add	r30, r10
    1324:	f1 1d       	adc	r31, r1
    1326:	80 81       	ld	r24, Z
    1328:	b7 01       	movw	r22, r14
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <fputc>
    1330:	a1 10       	cpse	r10, r1
    1332:	f5 cf       	rjmp	.-22     	; 0x131e <vfprintf+0x366>
    1334:	33 20       	and	r3, r3
    1336:	09 f4       	brne	.+2      	; 0x133a <vfprintf+0x382>
    1338:	51 ce       	rjmp	.-862    	; 0xfdc <vfprintf+0x24>
    133a:	b7 01       	movw	r22, r14
    133c:	80 e2       	ldi	r24, 0x20	; 32
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 e7 09 	call	0x13ce	; 0x13ce <fputc>
    1344:	3a 94       	dec	r3
    1346:	f6 cf       	rjmp	.-20     	; 0x1334 <vfprintf+0x37c>
    1348:	f7 01       	movw	r30, r14
    134a:	86 81       	ldd	r24, Z+6	; 0x06
    134c:	97 81       	ldd	r25, Z+7	; 0x07
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <vfprintf+0x39c>
    1350:	8f ef       	ldi	r24, 0xFF	; 255
    1352:	9f ef       	ldi	r25, 0xFF	; 255
    1354:	2c 96       	adiw	r28, 0x0c	; 12
    1356:	e2 e1       	ldi	r30, 0x12	; 18
    1358:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__epilogue_restores__>

0000135c <calloc>:
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	86 9f       	mul	r24, r22
    1366:	80 01       	movw	r16, r0
    1368:	87 9f       	mul	r24, r23
    136a:	10 0d       	add	r17, r0
    136c:	96 9f       	mul	r25, r22
    136e:	10 0d       	add	r17, r0
    1370:	11 24       	eor	r1, r1
    1372:	c8 01       	movw	r24, r16
    1374:	0e 94 29 06 	call	0xc52	; 0xc52 <malloc>
    1378:	ec 01       	movw	r28, r24
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	29 f0       	breq	.+10     	; 0x1388 <calloc+0x2c>
    137e:	a8 01       	movw	r20, r16
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	0e 94 d5 09 	call	0x13aa	; 0x13aa <memset>
    1388:	ce 01       	movw	r24, r28
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	08 95       	ret

00001394 <strnlen_P>:
    1394:	fc 01       	movw	r30, r24
    1396:	05 90       	lpm	r0, Z+
    1398:	61 50       	subi	r22, 0x01	; 1
    139a:	70 40       	sbci	r23, 0x00	; 0
    139c:	01 10       	cpse	r0, r1
    139e:	d8 f7       	brcc	.-10     	; 0x1396 <strnlen_P+0x2>
    13a0:	80 95       	com	r24
    13a2:	90 95       	com	r25
    13a4:	8e 0f       	add	r24, r30
    13a6:	9f 1f       	adc	r25, r31
    13a8:	08 95       	ret

000013aa <memset>:
    13aa:	dc 01       	movw	r26, r24
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <memset+0x6>
    13ae:	6d 93       	st	X+, r22
    13b0:	41 50       	subi	r20, 0x01	; 1
    13b2:	50 40       	sbci	r21, 0x00	; 0
    13b4:	e0 f7       	brcc	.-8      	; 0x13ae <memset+0x4>
    13b6:	08 95       	ret

000013b8 <strnlen>:
    13b8:	fc 01       	movw	r30, r24
    13ba:	61 50       	subi	r22, 0x01	; 1
    13bc:	70 40       	sbci	r23, 0x00	; 0
    13be:	01 90       	ld	r0, Z+
    13c0:	01 10       	cpse	r0, r1
    13c2:	d8 f7       	brcc	.-10     	; 0x13ba <strnlen+0x2>
    13c4:	80 95       	com	r24
    13c6:	90 95       	com	r25
    13c8:	8e 0f       	add	r24, r30
    13ca:	9f 1f       	adc	r25, r31
    13cc:	08 95       	ret

000013ce <fputc>:
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	18 2f       	mov	r17, r24
    13d8:	09 2f       	mov	r16, r25
    13da:	eb 01       	movw	r28, r22
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	81 fd       	sbrc	r24, 1
    13e0:	03 c0       	rjmp	.+6      	; 0x13e8 <fputc+0x1a>
    13e2:	8f ef       	ldi	r24, 0xFF	; 255
    13e4:	9f ef       	ldi	r25, 0xFF	; 255
    13e6:	20 c0       	rjmp	.+64     	; 0x1428 <fputc+0x5a>
    13e8:	82 ff       	sbrs	r24, 2
    13ea:	10 c0       	rjmp	.+32     	; 0x140c <fputc+0x3e>
    13ec:	4e 81       	ldd	r20, Y+6	; 0x06
    13ee:	5f 81       	ldd	r21, Y+7	; 0x07
    13f0:	2c 81       	ldd	r18, Y+4	; 0x04
    13f2:	3d 81       	ldd	r19, Y+5	; 0x05
    13f4:	42 17       	cp	r20, r18
    13f6:	53 07       	cpc	r21, r19
    13f8:	7c f4       	brge	.+30     	; 0x1418 <fputc+0x4a>
    13fa:	e8 81       	ld	r30, Y
    13fc:	f9 81       	ldd	r31, Y+1	; 0x01
    13fe:	9f 01       	movw	r18, r30
    1400:	2f 5f       	subi	r18, 0xFF	; 255
    1402:	3f 4f       	sbci	r19, 0xFF	; 255
    1404:	39 83       	std	Y+1, r19	; 0x01
    1406:	28 83       	st	Y, r18
    1408:	10 83       	st	Z, r17
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <fputc+0x4a>
    140c:	e8 85       	ldd	r30, Y+8	; 0x08
    140e:	f9 85       	ldd	r31, Y+9	; 0x09
    1410:	81 2f       	mov	r24, r17
    1412:	09 95       	icall
    1414:	89 2b       	or	r24, r25
    1416:	29 f7       	brne	.-54     	; 0x13e2 <fputc+0x14>
    1418:	2e 81       	ldd	r18, Y+6	; 0x06
    141a:	3f 81       	ldd	r19, Y+7	; 0x07
    141c:	2f 5f       	subi	r18, 0xFF	; 255
    141e:	3f 4f       	sbci	r19, 0xFF	; 255
    1420:	3f 83       	std	Y+7, r19	; 0x07
    1422:	2e 83       	std	Y+6, r18	; 0x06
    1424:	81 2f       	mov	r24, r17
    1426:	90 2f       	mov	r25, r16
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	08 95       	ret

00001432 <__ultoa_invert>:
    1432:	fa 01       	movw	r30, r20
    1434:	aa 27       	eor	r26, r26
    1436:	28 30       	cpi	r18, 0x08	; 8
    1438:	51 f1       	breq	.+84     	; 0x148e <__ultoa_invert+0x5c>
    143a:	20 31       	cpi	r18, 0x10	; 16
    143c:	81 f1       	breq	.+96     	; 0x149e <__ultoa_invert+0x6c>
    143e:	e8 94       	clt
    1440:	6f 93       	push	r22
    1442:	6e 7f       	andi	r22, 0xFE	; 254
    1444:	6e 5f       	subi	r22, 0xFE	; 254
    1446:	7f 4f       	sbci	r23, 0xFF	; 255
    1448:	8f 4f       	sbci	r24, 0xFF	; 255
    144a:	9f 4f       	sbci	r25, 0xFF	; 255
    144c:	af 4f       	sbci	r26, 0xFF	; 255
    144e:	b1 e0       	ldi	r27, 0x01	; 1
    1450:	3e d0       	rcall	.+124    	; 0x14ce <__ultoa_invert+0x9c>
    1452:	b4 e0       	ldi	r27, 0x04	; 4
    1454:	3c d0       	rcall	.+120    	; 0x14ce <__ultoa_invert+0x9c>
    1456:	67 0f       	add	r22, r23
    1458:	78 1f       	adc	r23, r24
    145a:	89 1f       	adc	r24, r25
    145c:	9a 1f       	adc	r25, r26
    145e:	a1 1d       	adc	r26, r1
    1460:	68 0f       	add	r22, r24
    1462:	79 1f       	adc	r23, r25
    1464:	8a 1f       	adc	r24, r26
    1466:	91 1d       	adc	r25, r1
    1468:	a1 1d       	adc	r26, r1
    146a:	6a 0f       	add	r22, r26
    146c:	71 1d       	adc	r23, r1
    146e:	81 1d       	adc	r24, r1
    1470:	91 1d       	adc	r25, r1
    1472:	a1 1d       	adc	r26, r1
    1474:	20 d0       	rcall	.+64     	; 0x14b6 <__ultoa_invert+0x84>
    1476:	09 f4       	brne	.+2      	; 0x147a <__ultoa_invert+0x48>
    1478:	68 94       	set
    147a:	3f 91       	pop	r19
    147c:	2a e0       	ldi	r18, 0x0A	; 10
    147e:	26 9f       	mul	r18, r22
    1480:	11 24       	eor	r1, r1
    1482:	30 19       	sub	r19, r0
    1484:	30 5d       	subi	r19, 0xD0	; 208
    1486:	31 93       	st	Z+, r19
    1488:	de f6       	brtc	.-74     	; 0x1440 <__ultoa_invert+0xe>
    148a:	cf 01       	movw	r24, r30
    148c:	08 95       	ret
    148e:	46 2f       	mov	r20, r22
    1490:	47 70       	andi	r20, 0x07	; 7
    1492:	40 5d       	subi	r20, 0xD0	; 208
    1494:	41 93       	st	Z+, r20
    1496:	b3 e0       	ldi	r27, 0x03	; 3
    1498:	0f d0       	rcall	.+30     	; 0x14b8 <__ultoa_invert+0x86>
    149a:	c9 f7       	brne	.-14     	; 0x148e <__ultoa_invert+0x5c>
    149c:	f6 cf       	rjmp	.-20     	; 0x148a <__ultoa_invert+0x58>
    149e:	46 2f       	mov	r20, r22
    14a0:	4f 70       	andi	r20, 0x0F	; 15
    14a2:	40 5d       	subi	r20, 0xD0	; 208
    14a4:	4a 33       	cpi	r20, 0x3A	; 58
    14a6:	18 f0       	brcs	.+6      	; 0x14ae <__ultoa_invert+0x7c>
    14a8:	49 5d       	subi	r20, 0xD9	; 217
    14aa:	31 fd       	sbrc	r19, 1
    14ac:	40 52       	subi	r20, 0x20	; 32
    14ae:	41 93       	st	Z+, r20
    14b0:	02 d0       	rcall	.+4      	; 0x14b6 <__ultoa_invert+0x84>
    14b2:	a9 f7       	brne	.-22     	; 0x149e <__ultoa_invert+0x6c>
    14b4:	ea cf       	rjmp	.-44     	; 0x148a <__ultoa_invert+0x58>
    14b6:	b4 e0       	ldi	r27, 0x04	; 4
    14b8:	a6 95       	lsr	r26
    14ba:	97 95       	ror	r25
    14bc:	87 95       	ror	r24
    14be:	77 95       	ror	r23
    14c0:	67 95       	ror	r22
    14c2:	ba 95       	dec	r27
    14c4:	c9 f7       	brne	.-14     	; 0x14b8 <__ultoa_invert+0x86>
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	61 05       	cpc	r22, r1
    14ca:	71 05       	cpc	r23, r1
    14cc:	08 95       	ret
    14ce:	9b 01       	movw	r18, r22
    14d0:	ac 01       	movw	r20, r24
    14d2:	0a 2e       	mov	r0, r26
    14d4:	06 94       	lsr	r0
    14d6:	57 95       	ror	r21
    14d8:	47 95       	ror	r20
    14da:	37 95       	ror	r19
    14dc:	27 95       	ror	r18
    14de:	ba 95       	dec	r27
    14e0:	c9 f7       	brne	.-14     	; 0x14d4 <__ultoa_invert+0xa2>
    14e2:	62 0f       	add	r22, r18
    14e4:	73 1f       	adc	r23, r19
    14e6:	84 1f       	adc	r24, r20
    14e8:	95 1f       	adc	r25, r21
    14ea:	a0 1d       	adc	r26, r0
    14ec:	08 95       	ret

000014ee <__prologue_saves__>:
    14ee:	2f 92       	push	r2
    14f0:	3f 92       	push	r3
    14f2:	4f 92       	push	r4
    14f4:	5f 92       	push	r5
    14f6:	6f 92       	push	r6
    14f8:	7f 92       	push	r7
    14fa:	8f 92       	push	r8
    14fc:	9f 92       	push	r9
    14fe:	af 92       	push	r10
    1500:	bf 92       	push	r11
    1502:	cf 92       	push	r12
    1504:	df 92       	push	r13
    1506:	ef 92       	push	r14
    1508:	ff 92       	push	r15
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	ca 1b       	sub	r28, r26
    1518:	db 0b       	sbc	r29, r27
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	09 94       	ijmp

00001526 <__epilogue_restores__>:
    1526:	2a 88       	ldd	r2, Y+18	; 0x12
    1528:	39 88       	ldd	r3, Y+17	; 0x11
    152a:	48 88       	ldd	r4, Y+16	; 0x10
    152c:	5f 84       	ldd	r5, Y+15	; 0x0f
    152e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1530:	7d 84       	ldd	r7, Y+13	; 0x0d
    1532:	8c 84       	ldd	r8, Y+12	; 0x0c
    1534:	9b 84       	ldd	r9, Y+11	; 0x0b
    1536:	aa 84       	ldd	r10, Y+10	; 0x0a
    1538:	b9 84       	ldd	r11, Y+9	; 0x09
    153a:	c8 84       	ldd	r12, Y+8	; 0x08
    153c:	df 80       	ldd	r13, Y+7	; 0x07
    153e:	ee 80       	ldd	r14, Y+6	; 0x06
    1540:	fd 80       	ldd	r15, Y+5	; 0x05
    1542:	0c 81       	ldd	r16, Y+4	; 0x04
    1544:	1b 81       	ldd	r17, Y+3	; 0x03
    1546:	aa 81       	ldd	r26, Y+2	; 0x02
    1548:	b9 81       	ldd	r27, Y+1	; 0x01
    154a:	ce 0f       	add	r28, r30
    154c:	d1 1d       	adc	r29, r1
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	ed 01       	movw	r28, r26
    155a:	08 95       	ret

0000155c <_exit>:
    155c:	f8 94       	cli

0000155e <__stop_program>:
    155e:	ff cf       	rjmp	.-2      	; 0x155e <__stop_program>
