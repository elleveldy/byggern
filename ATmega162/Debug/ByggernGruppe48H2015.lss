
ByggernGruppe48H2015.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012a  00800100  00001b18  00001bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080022a  0080022a  00001cd6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001cd6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000390  00000000  00000000  00001d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003646  00000000  00000000  000020c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012ea  00000000  00000000  00005708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012e0  00000000  00000000  000069f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000950  00000000  00000000  00007cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000910  00000000  00000000  00008624  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e37  00000000  00000000  00008f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000318  00000000  00000000  0000ad6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <oled_store+0x66>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e8 e1       	ldi	r30, 0x18	; 24
     37c:	fb e1       	ldi	r31, 0x1B	; 27
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 32       	cpi	r26, 0x2A	; 42
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	aa e2       	ldi	r26, 0x2A	; 42
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a4 35       	cpi	r26, 0x54	; 84
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 29 03 	call	0x652	; 0x652 <main>
     39e:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_init>:
#include <string.h>
#include <util/delay.h>



void can_init(int mode){
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	ec 01       	movw	r28, r24

	mcp2515_init();
     3ac:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <mcp2515_init>
	mcp2515_bit_modify(MCP_RXB0CTRL, MCP_MASK_FILTER, 0xff);
     3b0:	4f ef       	ldi	r20, 0xFF	; 255
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	60 e6       	ldi	r22, 0x60	; 96
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	80 e6       	ldi	r24, 0x60	; 96
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXB1CTRL, MCP_MASK_FILTER, 0xff);
     3c0:	4f ef       	ldi	r20, 0xFF	; 255
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	60 e6       	ldi	r22, 0x60	; 96
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 e7       	ldi	r24, 0x70	; 112
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, mode);
     3d0:	ae 01       	movw	r20, r28
     3d2:	60 ee       	ldi	r22, 0xE0	; 224
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	8f e0       	ldi	r24, 0x0F	; 15
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <mcp2515_bit_modify>
	DDRE &= ~(1 << PE0);
     3de:	30 98       	cbi	0x06, 0	; 6
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <gui_alt_print_menu>:
	gui_alt_print_indicator(menu_selector);
}


//Prints the menu you're in and it's submenues
void gui_alt_print_menu(Menuitem* menu){
     3e6:	ef 92       	push	r14
     3e8:	ff 92       	push	r15
     3ea:	0f 93       	push	r16
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
	Menuitem* parent = menu_parent(menu);
     3f2:	0e 94 a0 04 	call	0x940	; 0x940 <menu_parent>
     3f6:	7c 01       	movw	r14, r24
	
	oled_alt_clear_screen();
     3f8:	0e 94 21 06 	call	0xc42	; 0xc42 <oled_alt_clear_screen>
	oled_store_string(menu_name(parent), 0, 0);
     3fc:	c7 01       	movw	r24, r14
     3fe:	0e 94 33 05 	call	0xa66	; 0xa66 <menu_name>
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	0e 94 b2 05 	call	0xb64	; 0xb64 <oled_store_string>
	
	for(int n = 0; n < parent->num_submenus; n++){
     40e:	d7 01       	movw	r26, r14
     410:	8c 91       	ld	r24, X
     412:	88 23       	and	r24, r24
     414:	e9 f0       	breq	.+58     	; 0x450 <gui_alt_print_menu+0x6a>
     416:	00 e0       	ldi	r16, 0x00	; 0
     418:	10 e0       	ldi	r17, 0x00	; 0
     41a:	c0 e0       	ldi	r28, 0x00	; 0
     41c:	d0 e0       	ldi	r29, 0x00	; 0
		oled_store_string(menu_name(parent->submenus[n] ), 8, n+1);
     41e:	21 96       	adiw	r28, 0x01	; 1
     420:	d7 01       	movw	r26, r14
     422:	11 96       	adiw	r26, 0x01	; 1
     424:	ed 91       	ld	r30, X+
     426:	fc 91       	ld	r31, X
     428:	12 97       	sbiw	r26, 0x02	; 2
     42a:	e0 0f       	add	r30, r16
     42c:	f1 1f       	adc	r31, r17
     42e:	80 81       	ld	r24, Z
     430:	91 81       	ldd	r25, Z+1	; 0x01
     432:	0e 94 33 05 	call	0xa66	; 0xa66 <menu_name>
     436:	ae 01       	movw	r20, r28
     438:	68 e0       	ldi	r22, 0x08	; 8
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	0e 94 b2 05 	call	0xb64	; 0xb64 <oled_store_string>
     440:	0e 5f       	subi	r16, 0xFE	; 254
     442:	1f 4f       	sbci	r17, 0xFF	; 255
	Menuitem* parent = menu_parent(menu);
	
	oled_alt_clear_screen();
	oled_store_string(menu_name(parent), 0, 0);
	
	for(int n = 0; n < parent->num_submenus; n++){
     444:	f7 01       	movw	r30, r14
     446:	80 81       	ld	r24, Z
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	c8 17       	cp	r28, r24
     44c:	d9 07       	cpc	r29, r25
     44e:	3c f3       	brlt	.-50     	; 0x41e <gui_alt_print_menu+0x38>
		oled_store_string(menu_name(parent->submenus[n] ), 8, n+1);
	}
}
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	08 95       	ret

0000045e <gui_alt_navigate>:

//uses menu_selector and changes it according to joystick movement

void gui_alt_navigate(){
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
	

	//If we're pointing at Main menu, point to first submenu instead
	if(strcmp(menu_selector->name, "Main") == 0){
     462:	c0 91 2d 02 	lds	r28, 0x022D
     466:	d0 91 2e 02 	lds	r29, 0x022E
     46a:	6a e0       	ldi	r22, 0x0A	; 10
     46c:	71 e0       	ldi	r23, 0x01	; 1
     46e:	8d 81       	ldd	r24, Y+5	; 0x05
     470:	9e 81       	ldd	r25, Y+6	; 0x06
     472:	0e 94 c0 09 	call	0x1380	; 0x1380 <strcmp>
     476:	89 2b       	or	r24, r25
     478:	39 f4       	brne	.+14     	; 0x488 <gui_alt_navigate+0x2a>
		menu_selector = menu_submenu(menu_selector);
     47a:	ce 01       	movw	r24, r28
     47c:	0e 94 93 04 	call	0x926	; 0x926 <menu_submenu>
     480:	90 93 2e 02 	sts	0x022E, r25
     484:	80 93 2d 02 	sts	0x022D, r24
	}

	int threshold = 70;
	
	if(joystick_x_value() > threshold){
     488:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <joystick_x_value>
     48c:	87 34       	cpi	r24, 0x47	; 71
     48e:	91 05       	cpc	r25, r1
     490:	a4 f0       	brlt	.+40     	; 0x4ba <gui_alt_navigate+0x5c>
		menu_selector = menu_submenu(menu_selector);
     492:	80 91 2d 02 	lds	r24, 0x022D
     496:	90 91 2e 02 	lds	r25, 0x022E
     49a:	0e 94 93 04 	call	0x926	; 0x926 <menu_submenu>
     49e:	90 93 2e 02 	sts	0x022E, r25
     4a2:	80 93 2d 02 	sts	0x022D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a6:	2f ef       	ldi	r18, 0xFF	; 255
     4a8:	8f ef       	ldi	r24, 0xFF	; 255
     4aa:	92 e0       	ldi	r25, 0x02	; 2
     4ac:	21 50       	subi	r18, 0x01	; 1
     4ae:	80 40       	sbci	r24, 0x00	; 0
     4b0:	90 40       	sbci	r25, 0x00	; 0
     4b2:	e1 f7       	brne	.-8      	; 0x4ac <gui_alt_navigate+0x4e>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <gui_alt_navigate+0x58>
     4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <gui_alt_navigate+0x5a>
     4b8:	6a c0       	rjmp	.+212    	; 0x58e <__stack+0x8f>
		_delay_ms(200);
	}
	else if(joystick_x_value() < -threshold){
     4ba:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <joystick_x_value>
     4be:	8a 3b       	cpi	r24, 0xBA	; 186
     4c0:	9f 4f       	sbci	r25, 0xFF	; 255
     4c2:	a4 f4       	brge	.+40     	; 0x4ec <gui_alt_navigate+0x8e>
		menu_selector = menu_parent(menu_selector);
     4c4:	80 91 2d 02 	lds	r24, 0x022D
     4c8:	90 91 2e 02 	lds	r25, 0x022E
     4cc:	0e 94 a0 04 	call	0x940	; 0x940 <menu_parent>
     4d0:	90 93 2e 02 	sts	0x022E, r25
     4d4:	80 93 2d 02 	sts	0x022D, r24
     4d8:	8f ef       	ldi	r24, 0xFF	; 255
     4da:	9f ef       	ldi	r25, 0xFF	; 255
     4dc:	22 e0       	ldi	r18, 0x02	; 2
     4de:	81 50       	subi	r24, 0x01	; 1
     4e0:	90 40       	sbci	r25, 0x00	; 0
     4e2:	20 40       	sbci	r18, 0x00	; 0
     4e4:	e1 f7       	brne	.-8      	; 0x4de <gui_alt_navigate+0x80>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <gui_alt_navigate+0x8a>
     4e8:	00 c0       	rjmp	.+0      	; 0x4ea <gui_alt_navigate+0x8c>
     4ea:	51 c0       	rjmp	.+162    	; 0x58e <__stack+0x8f>
		_delay_ms(200);
		
	}
	else if(joystick_y_value() > threshold){
     4ec:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <joystick_y_value>
     4f0:	87 34       	cpi	r24, 0x47	; 71
     4f2:	91 05       	cpc	r25, r1
     4f4:	a4 f0       	brlt	.+40     	; 0x51e <__stack+0x1f>
		menu_selector = menu_prev(menu_selector);
     4f6:	80 91 2d 02 	lds	r24, 0x022D
     4fa:	90 91 2e 02 	lds	r25, 0x022E
     4fe:	0e 94 d5 04 	call	0x9aa	; 0x9aa <menu_prev>
     502:	90 93 2e 02 	sts	0x022E, r25
     506:	80 93 2d 02 	sts	0x022D, r24
     50a:	8f ef       	ldi	r24, 0xFF	; 255
     50c:	9f ef       	ldi	r25, 0xFF	; 255
     50e:	22 e0       	ldi	r18, 0x02	; 2
     510:	81 50       	subi	r24, 0x01	; 1
     512:	90 40       	sbci	r25, 0x00	; 0
     514:	20 40       	sbci	r18, 0x00	; 0
     516:	e1 f7       	brne	.-8      	; 0x510 <__stack+0x11>
     518:	00 c0       	rjmp	.+0      	; 0x51a <__stack+0x1b>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <__stack+0x1d>
     51c:	38 c0       	rjmp	.+112    	; 0x58e <__stack+0x8f>
		_delay_ms(200);

		
	}
	else if(joystick_y_value() < -threshold){
     51e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <joystick_y_value>
     522:	8a 3b       	cpi	r24, 0xBA	; 186
     524:	9f 4f       	sbci	r25, 0xFF	; 255
     526:	e4 f4       	brge	.+56     	; 0x560 <__stack+0x61>
		//if there is a next item:
		if(menu_next(menu_selector) != NULL){
     528:	80 91 2d 02 	lds	r24, 0x022D
     52c:	90 91 2e 02 	lds	r25, 0x022E
     530:	0e 94 a7 04 	call	0x94e	; 0x94e <menu_next>
     534:	89 2b       	or	r24, r25
     536:	59 f1       	breq	.+86     	; 0x58e <__stack+0x8f>
			menu_selector = menu_next(menu_selector);
     538:	80 91 2d 02 	lds	r24, 0x022D
     53c:	90 91 2e 02 	lds	r25, 0x022E
     540:	0e 94 a7 04 	call	0x94e	; 0x94e <menu_next>
     544:	90 93 2e 02 	sts	0x022E, r25
     548:	80 93 2d 02 	sts	0x022D, r24
     54c:	8f ef       	ldi	r24, 0xFF	; 255
     54e:	9f ef       	ldi	r25, 0xFF	; 255
     550:	22 e0       	ldi	r18, 0x02	; 2
     552:	81 50       	subi	r24, 0x01	; 1
     554:	90 40       	sbci	r25, 0x00	; 0
     556:	20 40       	sbci	r18, 0x00	; 0
     558:	e1 f7       	brne	.-8      	; 0x552 <__stack+0x53>
     55a:	00 c0       	rjmp	.+0      	; 0x55c <__stack+0x5d>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <__stack+0x5f>
     55e:	17 c0       	rjmp	.+46     	; 0x58e <__stack+0x8f>
			_delay_ms(200);
		}
	}
	else if(joystick_button_read()){
     560:	0e 94 14 03 	call	0x628	; 0x628 <joystick_button_read>
     564:	89 2b       	or	r24, r25
     566:	99 f0       	breq	.+38     	; 0x58e <__stack+0x8f>
		if(menu_selector->fn != NULL ){	//if the function pointer points to a function, call it
     568:	e0 91 2d 02 	lds	r30, 0x022D
     56c:	f0 91 2e 02 	lds	r31, 0x022E
     570:	07 80       	ldd	r0, Z+7	; 0x07
     572:	f0 85       	ldd	r31, Z+8	; 0x08
     574:	e0 2d       	mov	r30, r0
     576:	30 97       	sbiw	r30, 0x00	; 0
     578:	51 f0       	breq	.+20     	; 0x58e <__stack+0x8f>
			menu_selector->fn();
     57a:	09 95       	icall
     57c:	8f ef       	ldi	r24, 0xFF	; 255
     57e:	9f ef       	ldi	r25, 0xFF	; 255
     580:	22 e0       	ldi	r18, 0x02	; 2
     582:	81 50       	subi	r24, 0x01	; 1
     584:	90 40       	sbci	r25, 0x00	; 0
     586:	20 40       	sbci	r18, 0x00	; 0
     588:	e1 f7       	brne	.-8      	; 0x582 <__stack+0x83>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <__stack+0x8d>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <__stack+0x8f>
		}
		else{}
	}
	
	
}
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	08 95       	ret

00000594 <gui_alt_print_indicator>:
	
	//oled_alt_clear_col_line_interval(0, 1, 7);
	
	//oled_clear_col(0);
	//int line = menu_submenu_number(m);
	uint8_t line = menu_submenu_number(m);
     594:	0e 94 04 05 	call	0xa08	; 0xa08 <menu_submenu_number>
	oled_invert_line(line);
     598:	0e 94 dd 05 	call	0xbba	; 0xbba <oled_invert_line>
     59c:	08 95       	ret

0000059e <gui_alt_run>:
#include "gui_alt.h"


void gui_alt_run()
{
	gui_alt_print_menu(menu_selector);
     59e:	80 91 2d 02 	lds	r24, 0x022D
     5a2:	90 91 2e 02 	lds	r25, 0x022E
     5a6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <gui_alt_print_menu>
	gui_alt_navigate();
     5aa:	0e 94 2f 02 	call	0x45e	; 0x45e <gui_alt_navigate>
	gui_alt_print_indicator(menu_selector);
     5ae:	80 91 2d 02 	lds	r24, 0x022D
     5b2:	90 91 2e 02 	lds	r25, 0x022E
     5b6:	0e 94 ca 02 	call	0x594	; 0x594 <gui_alt_print_indicator>
     5ba:	08 95       	ret

000005bc <joystick_read_x>:
//}

unsigned int joystick_read_x(){
	
	volatile char *ext_joy = (char *) 0x1400;
	ext_joy[0] = 0x04;
     5bc:	84 e0       	ldi	r24, 0x04	; 4
     5be:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5c2:	81 e4       	ldi	r24, 0x41	; 65
     5c4:	8a 95       	dec	r24
     5c6:	f1 f7       	brne	.-4      	; 0x5c4 <joystick_read_x+0x8>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <joystick_read_x+0xe>
	_delay_us(40);
	return (uint8_t)ext_joy[0];
     5ca:	80 91 00 14 	lds	r24, 0x1400
	
}
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	08 95       	ret

000005d2 <joystick_read_y>:


unsigned int joystick_read_y(){
	
	volatile char *ext_joy = (char *) 0x1400;
	ext_joy[0] = 0x05;
     5d2:	85 e0       	ldi	r24, 0x05	; 5
     5d4:	80 93 00 14 	sts	0x1400, r24
     5d8:	81 e4       	ldi	r24, 0x41	; 65
     5da:	8a 95       	dec	r24
     5dc:	f1 f7       	brne	.-4      	; 0x5da <joystick_read_y+0x8>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <joystick_read_y+0xe>
	_delay_us(40);
	return (uint8_t)ext_joy[0];
     5e0:	80 91 00 14 	lds	r24, 0x1400
	
}
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	08 95       	ret

000005e8 <joystick_x_value>:

int joystick_x_value(){
	return (joystick_read_x() - 127);
     5e8:	0e 94 de 02 	call	0x5bc	; 0x5bc <joystick_read_x>
}
     5ec:	8f 57       	subi	r24, 0x7F	; 127
     5ee:	91 09       	sbc	r25, r1
     5f0:	08 95       	ret

000005f2 <joystick_y_value>:

int joystick_y_value(){
	return (joystick_read_y() - 127);
     5f2:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <joystick_read_y>
}
     5f6:	8f 57       	subi	r24, 0x7F	; 127
     5f8:	91 09       	sbc	r25, r1
     5fa:	08 95       	ret

000005fc <slider_left_read>:



uint8_t slider_left_read(){
	volatile char *ext_slide = (char *) 0x1400;
	ext_slide[0] = 0x06;
     5fc:	86 e0       	ldi	r24, 0x06	; 6
     5fe:	80 93 00 14 	sts	0x1400, r24
     602:	81 e4       	ldi	r24, 0x41	; 65
     604:	8a 95       	dec	r24
     606:	f1 f7       	brne	.-4      	; 0x604 <slider_left_read+0x8>
     608:	00 c0       	rjmp	.+0      	; 0x60a <slider_left_read+0xe>
	_delay_us(40);
	return (uint8_t)ext_slide[0];
     60a:	80 91 00 14 	lds	r24, 0x1400
}
     60e:	08 95       	ret

00000610 <buttons_init>:
signed int slider_right_value(){
	return (slider_right_read() - 127);	
}

void buttons_init(){
	DDRB &= ~(1 << DDB1);	// ????
     610:	b9 98       	cbi	0x17, 1	; 23
	
	//left & right
	DDRB &= (1<< PINB0); //right
     612:	87 b3       	in	r24, 0x17	; 23
     614:	81 70       	andi	r24, 0x01	; 1
     616:	87 bb       	out	0x17, r24	; 23
	DDRB &= (1<< PINB1); //left
     618:	87 b3       	in	r24, 0x17	; 23
     61a:	82 70       	andi	r24, 0x02	; 2
     61c:	87 bb       	out	0x17, r24	; 23

	//joystick button activate
	DDRB &= (1 << PINB2);
     61e:	87 b3       	in	r24, 0x17	; 23
     620:	84 70       	andi	r24, 0x04	; 4
     622:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << PINB2);
     624:	c2 9a       	sbi	0x18, 2	; 24
     626:	08 95       	ret

00000628 <joystick_button_read>:
}

int joystick_button_read(){
	int button = (PINB & (1 << PINB3));
	if (button > 0){
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	b3 9b       	sbis	0x16, 3	; 22
     62e:	02 c0       	rjmp	.+4      	; 0x634 <joystick_button_read+0xc>
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
	else{
		return 1;
	}
	
	
}
     634:	08 95       	ret

00000636 <button_left_read>:

int button_left_read(){
	int button = (PINB & (1 << PINB1));
	if (button > 0){
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	b1 99       	sbic	0x16, 1	; 22
     63c:	02 c0       	rjmp	.+4      	; 0x642 <button_left_read+0xc>
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
}
     642:	08 95       	ret

00000644 <button_right_read>:

int button_right_read(){
	int button = (PINB & (1 << PINB0));
	if (button > 0){
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	b0 99       	sbic	0x16, 0	; 22
     64a:	02 c0       	rjmp	.+4      	; 0x650 <button_right_read+0xc>
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	90 e0       	ldi	r25, 0x00	; 0
	}
	else{
		return 0;
	}
	
}
     650:	08 95       	ret

00000652 <main>:
*/



int main(void){
	fdevopen(uart_Transmit, uart_Receive);
     652:	6a e2       	ldi	r22, 0x2A	; 42
     654:	78 e0       	ldi	r23, 0x08	; 8
     656:	86 e2       	ldi	r24, 0x26	; 38
     658:	98 e0       	ldi	r25, 0x08	; 8
     65a:	0e 94 c9 09 	call	0x1392	; 0x1392 <fdevopen>
	
	MCUCR |= (1 << SRE);
     65e:	85 b7       	in	r24, 0x35	; 53
     660:	80 68       	ori	r24, 0x80	; 128
     662:	85 bf       	out	0x35, r24	; 53
	
	uart_Init(MYUBRR);
     664:	8f e1       	ldi	r24, 0x1F	; 31
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 2e 08 	call	0x105c	; 0x105c <uart_Init>
	
	
	buttons_init(); // useless thus far
     66c:	0e 94 08 03 	call	0x610	; 0x610 <buttons_init>

	
	Menuitem* menu = create_menu();
     670:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <create_menu>
	menu_selector = menu;
     674:	90 93 2e 02 	sts	0x022E, r25
     678:	80 93 2d 02 	sts	0x022D, r24
	menu_line_nr = 0; 
     67c:	10 92 2c 02 	sts	0x022C, r1
     680:	10 92 2b 02 	sts	0x022B, r1
	
	can_init(MODE_NORMAL);
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
	
	
	oled_alt_init();
     68c:	0e 94 37 05 	call	0xa6e	; 0xa6e <oled_alt_init>
	

	
	while(1){

		gui_alt_run();
     690:	0e 94 cf 02 	call	0x59e	; 0x59e <gui_alt_run>
		//oled_invert_line(2);
		
		//oled_write_screen();
		
		oled_refresh_60Hz();
     694:	0e 94 d3 05 	call	0xba6	; 0xba6 <oled_refresh_60Hz>
     698:	fb cf       	rjmp	.-10     	; 0x690 <main+0x3e>

0000069a <mcp2515_read>:
	}
	return 0;
}


int mcp2515_read(int address){
     69a:	cf 93       	push	r28
     69c:	c8 2f       	mov	r28, r24
	
	int result;
	
	PORTB &= ~(1 << MCP2515_CS);
     69e:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_READ);
     6a0:	83 e0       	ldi	r24, 0x03	; 3
     6a2:	0e 94 ba 07 	call	0xf74	; 0xf74 <spi_write>
	spi_write(address);
     6a6:	8c 2f       	mov	r24, r28
     6a8:	0e 94 ba 07 	call	0xf74	; 0xf74 <spi_write>
	
	result = spi_write(0x00);
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	0e 94 ba 07 	call	0xf74	; 0xf74 <spi_write>
	
	PORTB |= (1 << MCP2515_CS);
     6b2:	c4 9a       	sbi	0x18, 4	; 24
	return result;
}
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <mcp2515_bit_modify>:
	PORTB &= ~(1 << MCP2515_CS);
	spi_write(buffer_select);
	PORTB |= (1 << MCP2515_CS);
}

void mcp2515_bit_modify(int address, int mask, int data){
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	18 2f       	mov	r17, r24
     6c0:	d6 2f       	mov	r29, r22
     6c2:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS);
     6c4:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_BITMOD);
     6c6:	85 e0       	ldi	r24, 0x05	; 5
     6c8:	0e 94 ba 07 	call	0xf74	; 0xf74 <spi_write>
	spi_write(address);
     6cc:	81 2f       	mov	r24, r17
     6ce:	0e 94 ba 07 	call	0xf74	; 0xf74 <spi_write>
	spi_write(mask);
     6d2:	8d 2f       	mov	r24, r29
     6d4:	0e 94 ba 07 	call	0xf74	; 0xf74 <spi_write>
	spi_write(data);
     6d8:	8c 2f       	mov	r24, r28
     6da:	0e 94 ba 07 	call	0xf74	; 0xf74 <spi_write>

	PORTB |= (1 << MCP2515_CS);
     6de:	c4 9a       	sbi	0x18, 4	; 24
	
}
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	08 95       	ret

000006e8 <mcp2515_reset>:

void mcp2515_reset(){
	PORTB &= ~(1 << MCP2515_CS);
     6e8:	c4 98       	cbi	0x18, 4	; 24
	spi_write(MCP_RESET);
     6ea:	80 ec       	ldi	r24, 0xC0	; 192
     6ec:	0e 94 ba 07 	call	0xf74	; 0xf74 <spi_write>
	PORTB |= (1 << MCP2515_CS);
     6f0:	c4 9a       	sbi	0x18, 4	; 24
     6f2:	08 95       	ret

000006f4 <mcp2515_init>:
#include "SPI.h"
#include "mcp2515_define.h"


int mcp2515_init(){
	spi_init();
     6f4:	0e 94 b3 07 	call	0xf66	; 0xf66 <spi_init>
	mcp2515_reset();
     6f8:	0e 94 74 03 	call	0x6e8	; 0x6e8 <mcp2515_reset>
	
	uint8_t value = mcp2515_read(MCP_CANSTAT);
     6fc:	8e e0       	ldi	r24, 0x0E	; 14
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 4d 03 	call	0x69a	; 0x69a <mcp2515_read>
	if((value & MODE_MASK) != MODE_CONFIG){
     704:	80 7e       	andi	r24, 0xE0	; 224
     706:	99 27       	eor	r25, r25
     708:	80 38       	cpi	r24, 0x80	; 128
     70a:	91 05       	cpc	r25, r1
     70c:	39 f0       	breq	.+14     	; 0x71c <mcp2515_init+0x28>
		printf("ERROR: MCP2515 is NOT in config mode after reset!\n");
     70e:	8f e0       	ldi	r24, 0x0F	; 15
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	0e 94 28 0a 	call	0x1450	; 0x1450 <puts>
		return 1;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	08 95       	ret
	}
	return 0;
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
}
     720:	08 95       	ret

00000722 <new_Menuitem>:

Menuitem* new_Menuitem(
char* name,				
void (*fn)(void),		//pointer to function
uint8_t num_submenus	
){
     722:	df 92       	push	r13
     724:	ef 92       	push	r14
     726:	ff 92       	push	r15
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	7c 01       	movw	r14, r24
     732:	8b 01       	movw	r16, r22
     734:	d4 2e       	mov	r13, r20
	Menuitem* this = malloc(sizeof(Menuitem));
     736:	89 e0       	ldi	r24, 0x09	; 9
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 3b 08 	call	0x1076	; 0x1076 <malloc>
     73e:	ec 01       	movw	r28, r24
	this->name = name;
     740:	fe 82       	std	Y+6, r15	; 0x06
     742:	ed 82       	std	Y+5, r14	; 0x05
	this->fn = fn;
     744:	18 87       	std	Y+8, r17	; 0x08
     746:	0f 83       	std	Y+7, r16	; 0x07
	
	this->num_submenus = num_submenus;
     748:	d8 82       	st	Y, r13
	this->submenus = malloc(sizeof(Menuitem) * num_submenus);
     74a:	4d 2d       	mov	r20, r13
     74c:	50 e0       	ldi	r21, 0x00	; 0
     74e:	ca 01       	movw	r24, r20
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	84 0f       	add	r24, r20
     75e:	95 1f       	adc	r25, r21
     760:	0e 94 3b 08 	call	0x1076	; 0x1076 <malloc>
     764:	9a 83       	std	Y+2, r25	; 0x02
     766:	89 83       	std	Y+1, r24	; 0x01
	
	return this;
}
     768:	ce 01       	movw	r24, r28
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	df 90       	pop	r13
     778:	08 95       	ret

0000077a <assign_parents>:


void assign_parents(Menuitem* menu){
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	ec 01       	movw	r28, r24
	for(uint8_t n = 0; n < menu->num_submenus; n++){
     782:	88 81       	ld	r24, Y
     784:	88 23       	and	r24, r24
     786:	01 f1       	breq	.+64     	; 0x7c8 <assign_parents+0x4e>
     788:	10 e0       	ldi	r17, 0x00	; 0
		menu->submenus[n]->parent = menu;
     78a:	81 2f       	mov	r24, r17
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	88 0f       	add	r24, r24
     790:	99 1f       	adc	r25, r25
     792:	e9 81       	ldd	r30, Y+1	; 0x01
     794:	fa 81       	ldd	r31, Y+2	; 0x02
     796:	e8 0f       	add	r30, r24
     798:	f9 1f       	adc	r31, r25
     79a:	01 90       	ld	r0, Z+
     79c:	f0 81       	ld	r31, Z
     79e:	e0 2d       	mov	r30, r0
     7a0:	d4 83       	std	Z+4, r29	; 0x04
     7a2:	c3 83       	std	Z+3, r28	; 0x03
		if(menu->submenus[n]->num_submenus > 0){
     7a4:	29 81       	ldd	r18, Y+1	; 0x01
     7a6:	3a 81       	ldd	r19, Y+2	; 0x02
     7a8:	f9 01       	movw	r30, r18
     7aa:	e8 0f       	add	r30, r24
     7ac:	f9 1f       	adc	r31, r25
     7ae:	01 90       	ld	r0, Z+
     7b0:	f0 81       	ld	r31, Z
     7b2:	e0 2d       	mov	r30, r0
     7b4:	80 81       	ld	r24, Z
     7b6:	88 23       	and	r24, r24
     7b8:	19 f0       	breq	.+6      	; 0x7c0 <assign_parents+0x46>
			assign_parents(menu->submenus[n]);
     7ba:	cf 01       	movw	r24, r30
     7bc:	0e 94 bd 03 	call	0x77a	; 0x77a <assign_parents>
	return this;
}


void assign_parents(Menuitem* menu){
	for(uint8_t n = 0; n < menu->num_submenus; n++){
     7c0:	1f 5f       	subi	r17, 0xFF	; 255
     7c2:	88 81       	ld	r24, Y
     7c4:	18 17       	cp	r17, r24
     7c6:	08 f3       	brcs	.-62     	; 0x78a <assign_parents+0x10>
		menu->submenus[n]->parent = menu;
		if(menu->submenus[n]->num_submenus > 0){
			assign_parents(menu->submenus[n]);
		}
	}
}
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <create_menu>:


Menuitem* create_menu(){
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
	
	//Store these strings in progmem maybe naaah
	
	
	//for some reason, MENU/GUI instantly goes into first submenu in main, but this pattern doesn't repeat in sub menus, so wtf
	Menuitem* base = new_Menuitem("Main", NULL, 3);
     7d8:	43 e0       	ldi	r20, 0x03	; 3
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	8a e0       	ldi	r24, 0x0A	; 10
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0e 94 91 03 	call	0x722	; 0x722 <new_Menuitem>
     7e6:	ec 01       	movw	r28, r24
	base->submenus[0] = new_Menuitem("Snake", snake_run, 0);
     7e8:	09 81       	ldd	r16, Y+1	; 0x01
     7ea:	1a 81       	ldd	r17, Y+2	; 0x02
     7ec:	40 e0       	ldi	r20, 0x00	; 0
     7ee:	68 e8       	ldi	r22, 0x88	; 136
     7f0:	77 e0       	ldi	r23, 0x07	; 7
     7f2:	81 e4       	ldi	r24, 0x41	; 65
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	0e 94 91 03 	call	0x722	; 0x722 <new_Menuitem>
     7fa:	f8 01       	movw	r30, r16
     7fc:	91 83       	std	Z+1, r25	; 0x01
     7fe:	80 83       	st	Z, r24
	
	base->submenus[1] = new_Menuitem("Settings", NULL, 2);
     800:	09 81       	ldd	r16, Y+1	; 0x01
     802:	1a 81       	ldd	r17, Y+2	; 0x02
     804:	42 e0       	ldi	r20, 0x02	; 2
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	87 e4       	ldi	r24, 0x47	; 71
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 91 03 	call	0x722	; 0x722 <new_Menuitem>
     812:	f8 01       	movw	r30, r16
     814:	93 83       	std	Z+3, r25	; 0x03
     816:	82 83       	std	Z+2, r24	; 0x02
		base->submenus[1]->submenus[0] = new_Menuitem("Contrast", oled_alt_change_contrast, 0);
     818:	e9 81       	ldd	r30, Y+1	; 0x01
     81a:	fa 81       	ldd	r31, Y+2	; 0x02
     81c:	02 80       	ldd	r0, Z+2	; 0x02
     81e:	f3 81       	ldd	r31, Z+3	; 0x03
     820:	e0 2d       	mov	r30, r0
     822:	01 81       	ldd	r16, Z+1	; 0x01
     824:	12 81       	ldd	r17, Z+2	; 0x02
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	60 e4       	ldi	r22, 0x40	; 64
     82a:	76 e0       	ldi	r23, 0x06	; 6
     82c:	80 e5       	ldi	r24, 0x50	; 80
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	0e 94 91 03 	call	0x722	; 0x722 <new_Menuitem>
     834:	f8 01       	movw	r30, r16
     836:	91 83       	std	Z+1, r25	; 0x01
     838:	80 83       	st	Z, r24
		base->submenus[1]->submenus[1] = new_Menuitem("Toggle negative", oled_alt_toggle_negative, 0);
     83a:	e9 81       	ldd	r30, Y+1	; 0x01
     83c:	fa 81       	ldd	r31, Y+2	; 0x02
     83e:	02 80       	ldd	r0, Z+2	; 0x02
     840:	f3 81       	ldd	r31, Z+3	; 0x03
     842:	e0 2d       	mov	r30, r0
     844:	01 81       	ldd	r16, Z+1	; 0x01
     846:	12 81       	ldd	r17, Z+2	; 0x02
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	6f e2       	ldi	r22, 0x2F	; 47
     84c:	76 e0       	ldi	r23, 0x06	; 6
     84e:	89 e5       	ldi	r24, 0x59	; 89
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 91 03 	call	0x722	; 0x722 <new_Menuitem>
     856:	f8 01       	movw	r30, r16
     858:	93 83       	std	Z+3, r25	; 0x03
     85a:	82 83       	std	Z+2, r24	; 0x02
		
	base->submenus[2] = new_Menuitem("Tests", NULL, 2);
     85c:	09 81       	ldd	r16, Y+1	; 0x01
     85e:	1a 81       	ldd	r17, Y+2	; 0x02
     860:	42 e0       	ldi	r20, 0x02	; 2
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	89 e6       	ldi	r24, 0x69	; 105
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	0e 94 91 03 	call	0x722	; 0x722 <new_Menuitem>
     86e:	f8 01       	movw	r30, r16
     870:	95 83       	std	Z+5, r25	; 0x05
     872:	84 83       	std	Z+4, r24	; 0x04
		base->submenus[2]->submenus[0] = new_Menuitem("Can", NULL, 2);
     874:	e9 81       	ldd	r30, Y+1	; 0x01
     876:	fa 81       	ldd	r31, Y+2	; 0x02
     878:	04 80       	ldd	r0, Z+4	; 0x04
     87a:	f5 81       	ldd	r31, Z+5	; 0x05
     87c:	e0 2d       	mov	r30, r0
     87e:	01 81       	ldd	r16, Z+1	; 0x01
     880:	12 81       	ldd	r17, Z+2	; 0x02
     882:	42 e0       	ldi	r20, 0x02	; 2
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	8f e6       	ldi	r24, 0x6F	; 111
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 91 03 	call	0x722	; 0x722 <new_Menuitem>
     890:	f8 01       	movw	r30, r16
     892:	91 83       	std	Z+1, r25	; 0x01
     894:	80 83       	st	Z, r24
			base->submenus[2]->submenus[0]->submenus[0] = new_Menuitem("Loopback", NULL, 0);
     896:	e9 81       	ldd	r30, Y+1	; 0x01
     898:	fa 81       	ldd	r31, Y+2	; 0x02
     89a:	04 80       	ldd	r0, Z+4	; 0x04
     89c:	f5 81       	ldd	r31, Z+5	; 0x05
     89e:	e0 2d       	mov	r30, r0
     8a0:	01 80       	ldd	r0, Z+1	; 0x01
     8a2:	f2 81       	ldd	r31, Z+2	; 0x02
     8a4:	e0 2d       	mov	r30, r0
     8a6:	01 90       	ld	r0, Z+
     8a8:	f0 81       	ld	r31, Z
     8aa:	e0 2d       	mov	r30, r0
     8ac:	01 81       	ldd	r16, Z+1	; 0x01
     8ae:	12 81       	ldd	r17, Z+2	; 0x02
     8b0:	40 e0       	ldi	r20, 0x00	; 0
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	83 e7       	ldi	r24, 0x73	; 115
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	0e 94 91 03 	call	0x722	; 0x722 <new_Menuitem>
     8be:	f8 01       	movw	r30, r16
     8c0:	91 83       	std	Z+1, r25	; 0x01
     8c2:	80 83       	st	Z, r24
			base->submenus[2]->submenus[0]->submenus[1] = new_Menuitem("Node1 to Node2", NULL, 0);
     8c4:	e9 81       	ldd	r30, Y+1	; 0x01
     8c6:	fa 81       	ldd	r31, Y+2	; 0x02
     8c8:	04 80       	ldd	r0, Z+4	; 0x04
     8ca:	f5 81       	ldd	r31, Z+5	; 0x05
     8cc:	e0 2d       	mov	r30, r0
     8ce:	01 80       	ldd	r0, Z+1	; 0x01
     8d0:	f2 81       	ldd	r31, Z+2	; 0x02
     8d2:	e0 2d       	mov	r30, r0
     8d4:	01 90       	ld	r0, Z+
     8d6:	f0 81       	ld	r31, Z
     8d8:	e0 2d       	mov	r30, r0
     8da:	01 81       	ldd	r16, Z+1	; 0x01
     8dc:	12 81       	ldd	r17, Z+2	; 0x02
     8de:	40 e0       	ldi	r20, 0x00	; 0
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	8c e7       	ldi	r24, 0x7C	; 124
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	0e 94 91 03 	call	0x722	; 0x722 <new_Menuitem>
     8ec:	f8 01       	movw	r30, r16
     8ee:	93 83       	std	Z+3, r25	; 0x03
     8f0:	82 83       	std	Z+2, r24	; 0x02
		base->submenus[2]->submenus[1] = new_Menuitem("SRAM", SRAM_test, 0);
     8f2:	e9 81       	ldd	r30, Y+1	; 0x01
     8f4:	fa 81       	ldd	r31, Y+2	; 0x02
     8f6:	04 80       	ldd	r0, Z+4	; 0x04
     8f8:	f5 81       	ldd	r31, Z+5	; 0x05
     8fa:	e0 2d       	mov	r30, r0
     8fc:	01 81       	ldd	r16, Z+1	; 0x01
     8fe:	12 81       	ldd	r17, Z+2	; 0x02
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	60 ec       	ldi	r22, 0xC0	; 192
     904:	77 e0       	ldi	r23, 0x07	; 7
     906:	8b e8       	ldi	r24, 0x8B	; 139
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	0e 94 91 03 	call	0x722	; 0x722 <new_Menuitem>
     90e:	f8 01       	movw	r30, r16
     910:	93 83       	std	Z+3, r25	; 0x03
     912:	82 83       	std	Z+2, r24	; 0x02
		
		
		
	assign_parents(base);
     914:	ce 01       	movw	r24, r28
     916:	0e 94 bd 03 	call	0x77a	; 0x77a <assign_parents>
	
	return base;
}
     91a:	ce 01       	movw	r24, r28
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	08 95       	ret

00000926 <menu_submenu>:



//works
Menuitem* menu_submenu(Menuitem* m){
     926:	fc 01       	movw	r30, r24
	if (m->num_submenus != 0){
     928:	80 81       	ld	r24, Z
     92a:	88 23       	and	r24, r24
     92c:	31 f0       	breq	.+12     	; 0x93a <menu_submenu+0x14>
		return m->submenus[0];
     92e:	01 80       	ldd	r0, Z+1	; 0x01
     930:	f2 81       	ldd	r31, Z+2	; 0x02
     932:	e0 2d       	mov	r30, r0
     934:	80 81       	ld	r24, Z
     936:	91 81       	ldd	r25, Z+1	; 0x01
     938:	08 95       	ret
	}
	else{
		return m;
     93a:	8e 2f       	mov	r24, r30
     93c:	9f 2f       	mov	r25, r31
	}
}
     93e:	08 95       	ret

00000940 <menu_parent>:

//works
Menuitem* menu_parent(Menuitem* m){
     940:	fc 01       	movw	r30, r24
	if (m->parent != NULL){
     942:	83 81       	ldd	r24, Z+3	; 0x03
     944:	94 81       	ldd	r25, Z+4	; 0x04
     946:	00 97       	sbiw	r24, 0x00	; 0
     948:	09 f4       	brne	.+2      	; 0x94c <menu_parent+0xc>
		return m->parent;
	}
	else{
		return m;
     94a:	cf 01       	movw	r24, r30
	}
}
     94c:	08 95       	ret

0000094e <menu_next>:

//works
Menuitem* menu_next(Menuitem* m){
     94e:	cf 93       	push	r28
     950:	dc 01       	movw	r26, r24
	}
}

//works
Menuitem* menu_parent(Menuitem* m){
	if (m->parent != NULL){
     952:	13 96       	adiw	r26, 0x03	; 3
     954:	ed 91       	ld	r30, X+
     956:	fc 91       	ld	r31, X
     958:	14 97       	sbiw	r26, 0x04	; 4
     95a:	30 97       	sbiw	r30, 0x00	; 0
     95c:	09 f4       	brne	.+2      	; 0x960 <menu_next+0x12>
		return m->parent;
	}
	else{
		return m;
     95e:	fc 01       	movw	r30, r24
}

//works
Menuitem* menu_next(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	for(uint8_t n = 0; n < parent->num_submenus; n++){
     960:	c0 81       	ld	r28, Z
     962:	cc 23       	and	r28, r28
     964:	d9 f0       	breq	.+54     	; 0x99c <menu_next+0x4e>
		if(parent->submenus[n] == m  &&  n < parent->num_submenus){
     966:	61 81       	ldd	r22, Z+1	; 0x01
     968:	72 81       	ldd	r23, Z+2	; 0x02
     96a:	fb 01       	movw	r30, r22
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	c9 01       	movw	r24, r18
     972:	41 91       	ld	r20, Z+
     974:	51 91       	ld	r21, Z+
     976:	4a 17       	cp	r20, r26
     978:	5b 07       	cpc	r21, r27
     97a:	59 f4       	brne	.+22     	; 0x992 <menu_next+0x44>
     97c:	2c 17       	cp	r18, r28
     97e:	48 f4       	brcc	.+18     	; 0x992 <menu_next+0x44>
			return parent->submenus[n+1];
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	fc 01       	movw	r30, r24
     984:	ee 0f       	add	r30, r30
     986:	ff 1f       	adc	r31, r31
     988:	e6 0f       	add	r30, r22
     98a:	f7 1f       	adc	r31, r23
     98c:	80 81       	ld	r24, Z
     98e:	91 81       	ldd	r25, Z+1	; 0x01
     990:	0a c0       	rjmp	.+20     	; 0x9a6 <menu_next+0x58>
     992:	2f 5f       	subi	r18, 0xFF	; 255
     994:	3f 4f       	sbci	r19, 0xFF	; 255
}

//works
Menuitem* menu_next(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	for(uint8_t n = 0; n < parent->num_submenus; n++){
     996:	2c 17       	cp	r18, r28
     998:	58 f3       	brcs	.-42     	; 0x970 <menu_next+0x22>
     99a:	03 c0       	rjmp	.+6      	; 0x9a2 <menu_next+0x54>
		if(parent->submenus[n] == m  &&  n < parent->num_submenus){
			return parent->submenus[n+1];
		}
	}
	return m;
     99c:	8a 2f       	mov	r24, r26
     99e:	9b 2f       	mov	r25, r27
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <menu_next+0x58>
     9a2:	8a 2f       	mov	r24, r26
     9a4:	9b 2f       	mov	r25, r27
}
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <menu_prev>:

//works
Menuitem* menu_prev(Menuitem* m){
     9aa:	cf 93       	push	r28
     9ac:	dc 01       	movw	r26, r24
	}
}

//works
Menuitem* menu_parent(Menuitem* m){
	if (m->parent != NULL){
     9ae:	13 96       	adiw	r26, 0x03	; 3
     9b0:	ed 91       	ld	r30, X+
     9b2:	fc 91       	ld	r31, X
     9b4:	14 97       	sbiw	r26, 0x04	; 4
     9b6:	30 97       	sbiw	r30, 0x00	; 0
     9b8:	09 f4       	brne	.+2      	; 0x9bc <menu_prev+0x12>
		return m->parent;
	}
	else{
		return m;
     9ba:	fc 01       	movw	r30, r24

//works
Menuitem* menu_prev(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	
	for(uint8_t n = 0; n < parent->num_submenus; n++){
     9bc:	c0 81       	ld	r28, Z
     9be:	cc 23       	and	r28, r28
     9c0:	e1 f0       	breq	.+56     	; 0x9fa <menu_prev+0x50>
		if(parent->submenus[n] == m  &&  n > 0){
     9c2:	61 81       	ldd	r22, Z+1	; 0x01
     9c4:	72 81       	ldd	r23, Z+2	; 0x02
     9c6:	fb 01       	movw	r30, r22
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	c9 01       	movw	r24, r18
     9ce:	41 91       	ld	r20, Z+
     9d0:	51 91       	ld	r21, Z+
     9d2:	4a 17       	cp	r20, r26
     9d4:	5b 07       	cpc	r21, r27
     9d6:	61 f4       	brne	.+24     	; 0x9f0 <menu_prev+0x46>
     9d8:	22 23       	and	r18, r18
     9da:	51 f0       	breq	.+20     	; 0x9f0 <menu_prev+0x46>
			return parent->submenus[n-1];
     9dc:	81 50       	subi	r24, 0x01	; 1
     9de:	90 48       	sbci	r25, 0x80	; 128
     9e0:	fc 01       	movw	r30, r24
     9e2:	ee 0f       	add	r30, r30
     9e4:	ff 1f       	adc	r31, r31
     9e6:	e6 0f       	add	r30, r22
     9e8:	f7 1f       	adc	r31, r23
     9ea:	80 81       	ld	r24, Z
     9ec:	91 81       	ldd	r25, Z+1	; 0x01
     9ee:	0a c0       	rjmp	.+20     	; 0xa04 <menu_prev+0x5a>
     9f0:	2f 5f       	subi	r18, 0xFF	; 255
     9f2:	3f 4f       	sbci	r19, 0xFF	; 255

//works
Menuitem* menu_prev(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	
	for(uint8_t n = 0; n < parent->num_submenus; n++){
     9f4:	2c 17       	cp	r18, r28
     9f6:	50 f3       	brcs	.-44     	; 0x9cc <menu_prev+0x22>
     9f8:	03 c0       	rjmp	.+6      	; 0xa00 <menu_prev+0x56>
		if(parent->submenus[n] == m  &&  n > 0){
			return parent->submenus[n-1];
		}
	}
	return m;
     9fa:	8a 2f       	mov	r24, r26
     9fc:	9b 2f       	mov	r25, r27
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <menu_prev+0x5a>
     a00:	8a 2f       	mov	r24, r26
     a02:	9b 2f       	mov	r25, r27
}
     a04:	cf 91       	pop	r28
     a06:	08 95       	ret

00000a08 <menu_submenu_number>:
	}
}

//works
Menuitem* menu_parent(Menuitem* m){
	if (m->parent != NULL){
     a08:	dc 01       	movw	r26, r24
     a0a:	13 96       	adiw	r26, 0x03	; 3
     a0c:	ed 91       	ld	r30, X+
     a0e:	fc 91       	ld	r31, X
     a10:	14 97       	sbiw	r26, 0x04	; 4
     a12:	30 97       	sbiw	r30, 0x00	; 0
     a14:	09 f4       	brne	.+2      	; 0xa18 <menu_submenu_number+0x10>
		return m->parent;
	}
	else{
		return m;
     a16:	fc 01       	movw	r30, r24

//works
int menu_submenu_number(Menuitem* m){
	//oled_goto_pos(0,5); removed in conjunction with oled_alt/gui_alt
	Menuitem* parent = menu_parent(m);
	for(int i = 0; i < parent->num_submenus; i++){
     a18:	60 81       	ld	r22, Z
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	16 16       	cp	r1, r22
     a1e:	17 06       	cpc	r1, r23
     a20:	fc f4       	brge	.+62     	; 0xa60 <menu_submenu_number+0x58>
		if(parent->submenus[i] == m)
     a22:	01 80       	ldd	r0, Z+1	; 0x01
     a24:	f2 81       	ldd	r31, Z+2	; 0x02
     a26:	e0 2d       	mov	r30, r0
     a28:	20 81       	ld	r18, Z
     a2a:	31 81       	ldd	r19, Z+1	; 0x01
     a2c:	28 17       	cp	r18, r24
     a2e:	39 07       	cpc	r19, r25
     a30:	61 f4       	brne	.+24     	; 0xa4a <menu_submenu_number+0x42>
     a32:	06 c0       	rjmp	.+12     	; 0xa40 <menu_submenu_number+0x38>
     a34:	41 91       	ld	r20, Z+
     a36:	51 91       	ld	r21, Z+
     a38:	48 17       	cp	r20, r24
     a3a:	59 07       	cpc	r21, r25
     a3c:	49 f4       	brne	.+18     	; 0xa50 <menu_submenu_number+0x48>
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <menu_submenu_number+0x3c>

//works
int menu_submenu_number(Menuitem* m){
	//oled_goto_pos(0,5); removed in conjunction with oled_alt/gui_alt
	Menuitem* parent = menu_parent(m);
	for(int i = 0; i < parent->num_submenus; i++){
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
		if(parent->submenus[i] == m)

			return i + 1;
     a44:	c9 01       	movw	r24, r18
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	08 95       	ret
     a4a:	32 96       	adiw	r30, 0x02	; 2

//works
int menu_submenu_number(Menuitem* m){
	//oled_goto_pos(0,5); removed in conjunction with oled_alt/gui_alt
	Menuitem* parent = menu_parent(m);
	for(int i = 0; i < parent->num_submenus; i++){
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	2f 5f       	subi	r18, 0xFF	; 255
     a52:	3f 4f       	sbci	r19, 0xFF	; 255
     a54:	26 17       	cp	r18, r22
     a56:	37 07       	cpc	r19, r23
     a58:	6c f3       	brlt	.-38     	; 0xa34 <menu_submenu_number+0x2c>
		if(parent->submenus[i] == m)

			return i + 1;
	}
	return 0; 		//make safeguarding from this?
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	08 95       	ret
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
}
     a64:	08 95       	ret

00000a66 <menu_name>:
	//return this->name;
//}

char* menu_name(Menuitem* m){
	return m->name;
}
     a66:	fc 01       	movw	r30, r24
     a68:	85 81       	ldd	r24, Z+5	; 0x05
     a6a:	96 81       	ldd	r25, Z+6	; 0x06
     a6c:	08 95       	ret

00000a6e <oled_alt_init>:
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
     a6e:	e0 e0       	ldi	r30, 0x00	; 0
     a70:	f0 e1       	ldi	r31, 0x10	; 16
     a72:	8e ea       	ldi	r24, 0xAE	; 174
     a74:	80 83       	st	Z, r24
     a76:	81 ea       	ldi	r24, 0xA1	; 161
     a78:	80 83       	st	Z, r24
     a7a:	8a ed       	ldi	r24, 0xDA	; 218
     a7c:	80 83       	st	Z, r24
     a7e:	82 e1       	ldi	r24, 0x12	; 18
     a80:	80 83       	st	Z, r24
     a82:	88 ec       	ldi	r24, 0xC8	; 200
     a84:	80 83       	st	Z, r24
     a86:	88 ea       	ldi	r24, 0xA8	; 168
     a88:	80 83       	st	Z, r24
     a8a:	8f e3       	ldi	r24, 0x3F	; 63
     a8c:	80 83       	st	Z, r24
     a8e:	85 ed       	ldi	r24, 0xD5	; 213
     a90:	80 83       	st	Z, r24
     a92:	80 e8       	ldi	r24, 0x80	; 128
     a94:	80 83       	st	Z, r24
     a96:	81 e8       	ldi	r24, 0x81	; 129
     a98:	80 83       	st	Z, r24
     a9a:	80 e5       	ldi	r24, 0x50	; 80
     a9c:	80 83       	st	Z, r24
     a9e:	89 ed       	ldi	r24, 0xD9	; 217
     aa0:	80 83       	st	Z, r24
     aa2:	81 e2       	ldi	r24, 0x21	; 33
     aa4:	80 83       	st	Z, r24
     aa6:	90 e2       	ldi	r25, 0x20	; 32
     aa8:	90 83       	st	Z, r25
     aaa:	10 82       	st	Z, r1
     aac:	9b ed       	ldi	r25, 0xDB	; 219
     aae:	90 83       	st	Z, r25
     ab0:	90 e3       	ldi	r25, 0x30	; 48
     ab2:	90 83       	st	Z, r25
     ab4:	9d ea       	ldi	r25, 0xAD	; 173
     ab6:	90 83       	st	Z, r25
     ab8:	10 82       	st	Z, r1
     aba:	94 ea       	ldi	r25, 0xA4	; 164
     abc:	90 83       	st	Z, r25
     abe:	96 ea       	ldi	r25, 0xA6	; 166
     ac0:	90 83       	st	Z, r25
     ac2:	9f ea       	ldi	r25, 0xAF	; 175
     ac4:	90 83       	st	Z, r25
     ac6:	80 83       	st	Z, r24
     ac8:	10 82       	st	Z, r1
     aca:	8f e7       	ldi	r24, 0x7F	; 127
     acc:	80 83       	st	Z, r24
     ace:	92 e2       	ldi	r25, 0x22	; 34
     ad0:	90 83       	st	Z, r25
     ad2:	10 82       	st	Z, r1
     ad4:	80 83       	st	Z, r24
	
	//oled_clear_screen();
	//oled_home();
	
	//to allow 60Hz refresh rate	
	timer_init();
     ad6:	0e 94 0b 08 	call	0x1016	; 0x1016 <timer_init>
     ada:	08 95       	ret

00000adc <oled_store>:
	
}

void oled_store(char* string, int* position){
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
	//calculate position offset
	int start_position = position[0]*128 + position[1];
     ae4:	fb 01       	movw	r30, r22
     ae6:	40 81       	ld	r20, Z
     ae8:	51 81       	ldd	r21, Z+1	; 0x01
     aea:	56 95       	lsr	r21
     aec:	54 2f       	mov	r21, r20
     aee:	44 27       	eor	r20, r20
     af0:	57 95       	ror	r21
     af2:	47 95       	ror	r20
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	33 81       	ldd	r19, Z+3	; 0x03
     af8:	42 0f       	add	r20, r18
     afa:	53 1f       	adc	r21, r19
	for(int i = 0; string[i] != '\0'; ++i){
     afc:	fc 01       	movw	r30, r24
     afe:	20 81       	ld	r18, Z
     b00:	22 23       	and	r18, r18
     b02:	59 f1       	breq	.+86     	; 0xb5a <oled_store+0x7e>
     b04:	bc 01       	movw	r22, r24
     b06:	6f 5f       	subi	r22, 0xFF	; 255
     b08:	7f 4f       	sbci	r23, 0xFF	; 255
     b0a:	ec 01       	movw	r28, r24
	//to allow 60Hz refresh rate	
	timer_init();
	
}

void oled_store(char* string, int* position){
     b0c:	00 e0       	ldi	r16, 0x00	; 0
     b0e:	10 e0       	ldi	r17, 0x00	; 0
     b10:	1f c0       	rjmp	.+62     	; 0xb50 <oled_store+0x74>
     b12:	dc 01       	movw	r26, r24
     b14:	a2 0f       	add	r26, r18
     b16:	b3 1f       	adc	r27, r19
	int start_position = position[0]*128 + position[1];
	for(int i = 0; string[i] != '\0'; ++i){
		//j goes through each col	n of the char in font
		for(int j = 0; j < FONT_SIZE; ++j){
			//font[char index in font][column of char]
			*(SRAM_ADRESS + start_position + i * FONT_SIZE + j) = pgm_read_byte(&font[(int)string[i] - 32][j]);
     b18:	e8 81       	ld	r30, Y
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	b0 97       	sbiw	r30, 0x20	; 32
     b1e:	ee 0f       	add	r30, r30
     b20:	ff 1f       	adc	r31, r31
     b22:	ee 0f       	add	r30, r30
     b24:	ff 1f       	adc	r31, r31
     b26:	ee 0f       	add	r30, r30
     b28:	ff 1f       	adc	r31, r31
     b2a:	e2 0f       	add	r30, r18
     b2c:	f3 1f       	adc	r31, r19
     b2e:	e0 59       	subi	r30, 0x90	; 144
     b30:	ff 4f       	sbci	r31, 0xFF	; 255
     b32:	e4 91       	lpm	r30, Z
     b34:	ec 93       	st	X, r30
void oled_store(char* string, int* position){
	//calculate position offset
	int start_position = position[0]*128 + position[1];
	for(int i = 0; string[i] != '\0'; ++i){
		//j goes through each col	n of the char in font
		for(int j = 0; j < FONT_SIZE; ++j){
     b36:	2f 5f       	subi	r18, 0xFF	; 255
     b38:	3f 4f       	sbci	r19, 0xFF	; 255
     b3a:	28 30       	cpi	r18, 0x08	; 8
     b3c:	31 05       	cpc	r19, r1
     b3e:	49 f7       	brne	.-46     	; 0xb12 <oled_store+0x36>
}

void oled_store(char* string, int* position){
	//calculate position offset
	int start_position = position[0]*128 + position[1];
	for(int i = 0; string[i] != '\0'; ++i){
     b40:	eb 01       	movw	r28, r22
     b42:	6f 5f       	subi	r22, 0xFF	; 255
     b44:	7f 4f       	sbci	r23, 0xFF	; 255
     b46:	48 5f       	subi	r20, 0xF8	; 248
     b48:	5f 4f       	sbci	r21, 0xFF	; 255
     b4a:	88 81       	ld	r24, Y
     b4c:	88 23       	and	r24, r24
     b4e:	29 f0       	breq	.+10     	; 0xb5a <oled_store+0x7e>
	//to allow 60Hz refresh rate	
	timer_init();
	
}

void oled_store(char* string, int* position){
     b50:	20 2f       	mov	r18, r16
     b52:	31 2f       	mov	r19, r17
     b54:	ca 01       	movw	r24, r20
     b56:	98 5e       	subi	r25, 0xE8	; 232
     b58:	dc cf       	rjmp	.-72     	; 0xb12 <oled_store+0x36>
		for(int j = 0; j < FONT_SIZE; ++j){
			//font[char index in font][column of char]
			*(SRAM_ADRESS + start_position + i * FONT_SIZE + j) = pgm_read_byte(&font[(int)string[i] - 32][j]);
		}
	}
}
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	08 95       	ret

00000b64 <oled_store_string>:


//might be unreliable, due to uncertain string length
void oled_store_string(char* string, int col, int line){
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	00 d0       	rcall	.+0      	; 0xb6a <oled_store_string+0x6>
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <oled_store_string+0x8>
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	
	oled_store(string, (int[2]){line, col});
     b70:	5a 83       	std	Y+2, r21	; 0x02
     b72:	49 83       	std	Y+1, r20	; 0x01
     b74:	7c 83       	std	Y+4, r23	; 0x04
     b76:	6b 83       	std	Y+3, r22	; 0x03
     b78:	be 01       	movw	r22, r28
     b7a:	6f 5f       	subi	r22, 0xFF	; 255
     b7c:	7f 4f       	sbci	r23, 0xFF	; 255
     b7e:	0e 94 6e 05 	call	0xadc	; 0xadc <oled_store>
	
}
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	08 95       	ret

00000b90 <oled_write_screen>:





void oled_write_screen(){
     b90:	e0 e0       	ldi	r30, 0x00	; 0
     b92:	f8 e1       	ldi	r31, 0x18	; 24
	for(int i = 0; i < 1024; ++i){
		*OLED_DATA_ADRESS = *(SRAM_ADRESS + i);
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b2 e1       	ldi	r27, 0x12	; 18
     b98:	81 91       	ld	r24, Z+
     b9a:	8c 93       	st	X, r24




void oled_write_screen(){
	for(int i = 0; i < 1024; ++i){
     b9c:	e1 15       	cp	r30, r1
     b9e:	8c e1       	ldi	r24, 0x1C	; 28
     ba0:	f8 07       	cpc	r31, r24
     ba2:	d1 f7       	brne	.-12     	; 0xb98 <oled_write_screen+0x8>
		*OLED_DATA_ADRESS = *(SRAM_ADRESS + i);
	}
}
     ba4:	08 95       	ret

00000ba6 <oled_refresh_60Hz>:
//printing to oled has yet to be tested
void oled_refresh_60Hz(){
	
	//F_CPU = 4.9152MHz, prescaler = 1024
	//F_CPU / prescaler = 4800Hz = 60Hz * 80
	if(timer_read() > 80){
     ba6:	0e 94 20 08 	call	0x1040	; 0x1040 <timer_read>
     baa:	81 35       	cpi	r24, 0x51	; 81
     bac:	91 05       	cpc	r25, r1
     bae:	20 f0       	brcs	.+8      	; 0xbb8 <oled_refresh_60Hz+0x12>
		oled_write_screen();
     bb0:	0e 94 c8 05 	call	0xb90	; 0xb90 <oled_write_screen>
		timer_reset();
     bb4:	0e 94 23 08 	call	0x1046	; 0x1046 <timer_reset>
     bb8:	08 95       	ret

00000bba <oled_invert_line>:


void oled_invert_line(uint8_t line){
	

	uint16_t start_position = line * 128;
     bba:	20 e8       	ldi	r18, 0x80	; 128
     bbc:	82 9f       	mul	r24, r18
     bbe:	c0 01       	movw	r24, r0
     bc0:	11 24       	eor	r1, r1
     bc2:	fc 01       	movw	r30, r24
     bc4:	f8 5e       	subi	r31, 0xE8	; 232
     bc6:	80 58       	subi	r24, 0x80	; 128
     bc8:	97 4e       	sbci	r25, 0xE7	; 231
	uint8_t col_byte;
	
	for(int col = 0; col < 128; ++col){
		col_byte = ~*(SRAM_ADRESS + start_position + col);
     bca:	20 81       	ld	r18, Z
     bcc:	20 95       	com	r18
		*(SRAM_ADRESS + start_position + col) = col_byte;
     bce:	21 93       	st	Z+, r18
	

	uint16_t start_position = line * 128;
	uint8_t col_byte;
	
	for(int col = 0; col < 128; ++col){
     bd0:	e8 17       	cp	r30, r24
     bd2:	f9 07       	cpc	r31, r25
     bd4:	d1 f7       	brne	.-12     	; 0xbca <oled_invert_line+0x10>
		col_byte = ~*(SRAM_ADRESS + start_position + col);
		*(SRAM_ADRESS + start_position + col) = col_byte;
	}
	
	
}
     bd6:	08 95       	ret

00000bd8 <oled_alt_clear_line>:

void oled_alt_clear_line(int line){
     bd8:	cf 92       	push	r12
     bda:	df 92       	push	r13
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	00 d0       	rcall	.+0      	; 0xbea <oled_alt_clear_line+0x12>
     bea:	00 d0       	rcall	.+0      	; 0xbec <oled_alt_clear_line+0x14>
     bec:	00 d0       	rcall	.+0      	; 0xbee <oled_alt_clear_line+0x16>
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
     bf2:	6c 01       	movw	r12, r24
	
	for(int col = 0; col < NR_COL; col += 8){
     bf4:	00 e0       	ldi	r16, 0x00	; 0
     bf6:	10 e0       	ldi	r17, 0x00	; 0
		oled_store((char[2]){" "}, (int[2]){line, col});
     bf8:	68 94       	set
     bfa:	ee 24       	eor	r14, r14
     bfc:	e5 f8       	bld	r14, 5
     bfe:	f1 2c       	mov	r15, r1
     c00:	dc 82       	std	Y+4, r13	; 0x04
     c02:	cb 82       	std	Y+3, r12	; 0x03
     c04:	1e 83       	std	Y+6, r17	; 0x06
     c06:	0d 83       	std	Y+5, r16	; 0x05
     c08:	fa 82       	std	Y+2, r15	; 0x02
     c0a:	e9 82       	std	Y+1, r14	; 0x01
     c0c:	be 01       	movw	r22, r28
     c0e:	6d 5f       	subi	r22, 0xFD	; 253
     c10:	7f 4f       	sbci	r23, 0xFF	; 255
     c12:	ce 01       	movw	r24, r28
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	0e 94 6e 05 	call	0xadc	; 0xadc <oled_store>
	
}

void oled_alt_clear_line(int line){
	
	for(int col = 0; col < NR_COL; col += 8){
     c1a:	08 5f       	subi	r16, 0xF8	; 248
     c1c:	1f 4f       	sbci	r17, 0xFF	; 255
     c1e:	00 38       	cpi	r16, 0x80	; 128
     c20:	11 05       	cpc	r17, r1
     c22:	71 f7       	brne	.-36     	; 0xc00 <oled_alt_clear_line+0x28>
		oled_store((char[2]){" "}, (int[2]){line, col});
	}
	
}
     c24:	26 96       	adiw	r28, 0x06	; 6
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	ff 90       	pop	r15
     c3a:	ef 90       	pop	r14
     c3c:	df 90       	pop	r13
     c3e:	cf 90       	pop	r12
     c40:	08 95       	ret

00000c42 <oled_alt_clear_screen>:
	
}



void oled_alt_clear_screen(){
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
	for(int line = 0; line < NR_LINES; ++line){
     c46:	c0 e0       	ldi	r28, 0x00	; 0
     c48:	d0 e0       	ldi	r29, 0x00	; 0
		oled_alt_clear_line(line);
     c4a:	ce 01       	movw	r24, r28
     c4c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <oled_alt_clear_line>
}



void oled_alt_clear_screen(){
	for(int line = 0; line < NR_LINES; ++line){
     c50:	21 96       	adiw	r28, 0x01	; 1
     c52:	c8 30       	cpi	r28, 0x08	; 8
     c54:	d1 05       	cpc	r29, r1
     c56:	c9 f7       	brne	.-14     	; 0xc4a <oled_alt_clear_screen+0x8>
		oled_alt_clear_line(line);
	}
}
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	08 95       	ret

00000c5e <oled_alt_toggle_negative>:


uint8_t screen_negative = 0;

void oled_alt_toggle_negative(){
	if(screen_negative){
     c5e:	80 91 2a 02 	lds	r24, 0x022A
     c62:	88 23       	and	r24, r24
     c64:	31 f0       	breq	.+12     	; 0xc72 <oled_alt_toggle_negative+0x14>
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
     c66:	86 ea       	ldi	r24, 0xA6	; 166
     c68:	80 93 00 10 	sts	0x1000, r24
uint8_t screen_negative = 0;

void oled_alt_toggle_negative(){
	if(screen_negative){
		oled_alt_mode_normal();
		screen_negative = 0;
     c6c:	10 92 2a 02 	sts	0x022A, r1
     c70:	08 95       	ret
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
     c72:	87 ea       	ldi	r24, 0xA7	; 167
     c74:	80 93 00 10 	sts	0x1000, r24
		oled_alt_mode_normal();
		screen_negative = 0;
	}
	else{
		oled_alt_mode_negative();
		screen_negative = 1;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	80 93 2a 02 	sts	0x022A, r24
     c7e:	08 95       	ret

00000c80 <oled_alt_change_contrast>:
	}
}


void oled_alt_change_contrast(){
     c80:	4f 92       	push	r4
     c82:	5f 92       	push	r5
     c84:	6f 92       	push	r6
     c86:	7f 92       	push	r7
     c88:	8f 92       	push	r8
     c8a:	9f 92       	push	r9
     c8c:	af 92       	push	r10
     c8e:	bf 92       	push	r11
     c90:	cf 92       	push	r12
     c92:	df 92       	push	r13
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	ac 97       	sbiw	r28, 0x2c	; 44
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t contrast;
	
	//print usefull information
	
	oled_alt_clear_screen();
     cb0:	0e 94 21 06 	call	0xc42	; 0xc42 <oled_alt_clear_screen>
	
	while(1){
		//oled_alt_clear_screen();
		
		oled_store((char[9]){"Contrast"}, (int[2]){0, 0});
     cb4:	0f 2e       	mov	r0, r31
     cb6:	f9 e0       	ldi	r31, 0x09	; 9
     cb8:	8f 2e       	mov	r8, r31
     cba:	f0 2d       	mov	r31, r0
		oled_store((char[12]){"left slider"}, (int[2]){4, 3*8});
     cbc:	68 94       	set
     cbe:	aa 24       	eor	r10, r10
     cc0:	a2 f8       	bld	r10, 2
     cc2:	b1 2c       	mov	r11, r1
     cc4:	0f 2e       	mov	r0, r31
     cc6:	f8 e1       	ldi	r31, 0x18	; 24
     cc8:	cf 2e       	mov	r12, r31
     cca:	d1 2c       	mov	r13, r1
     ccc:	f0 2d       	mov	r31, r0
     cce:	0f 2e       	mov	r0, r31
     cd0:	fc e0       	ldi	r31, 0x0C	; 12
     cd2:	9f 2e       	mov	r9, r31
     cd4:	f0 2d       	mov	r31, r0
		oled_store((char[7]){"Return"}, (int[2]){7, 0});
     cd6:	0f 2e       	mov	r0, r31
     cd8:	f7 e0       	ldi	r31, 0x07	; 7
     cda:	ef 2e       	mov	r14, r31
     cdc:	f1 2c       	mov	r15, r1
     cde:	f0 2d       	mov	r31, r0
		//oled_store((char[4]){"Max"}, (int[2]){7, 12*8});
		oled_store_string((char[4]){"Max"}, 12*8, 7);
     ce0:	0f 2e       	mov	r0, r31
     ce2:	fd e4       	ldi	r31, 0x4D	; 77
     ce4:	4f 2e       	mov	r4, r31
     ce6:	f1 e6       	ldi	r31, 0x61	; 97
     ce8:	5f 2e       	mov	r5, r31
     cea:	f8 e7       	ldi	r31, 0x78	; 120
     cec:	6f 2e       	mov	r6, r31
     cee:	71 2c       	mov	r7, r1
     cf0:	f0 2d       	mov	r31, r0
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
     cf2:	00 e0       	ldi	r16, 0x00	; 0
     cf4:	10 e1       	ldi	r17, 0x10	; 16
	oled_alt_clear_screen();
	
	while(1){
		//oled_alt_clear_screen();
		
		oled_store((char[9]){"Contrast"}, (int[2]){0, 0});
     cf6:	1a a6       	std	Y+42, r1	; 0x2a
     cf8:	19 a6       	std	Y+41, r1	; 0x29
     cfa:	1c a6       	std	Y+44, r1	; 0x2c
     cfc:	1b a6       	std	Y+43, r1	; 0x2b
     cfe:	e0 e5       	ldi	r30, 0x50	; 80
     d00:	f1 e0       	ldi	r31, 0x01	; 1
     d02:	de 01       	movw	r26, r28
     d04:	90 96       	adiw	r26, 0x20	; 32
     d06:	88 2d       	mov	r24, r8
     d08:	01 90       	ld	r0, Z+
     d0a:	0d 92       	st	X+, r0
     d0c:	8a 95       	dec	r24
     d0e:	e1 f7       	brne	.-8      	; 0xd08 <oled_alt_change_contrast+0x88>
     d10:	be 01       	movw	r22, r28
     d12:	67 5d       	subi	r22, 0xD7	; 215
     d14:	7f 4f       	sbci	r23, 0xFF	; 255
     d16:	ce 01       	movw	r24, r28
     d18:	80 96       	adiw	r24, 0x20	; 32
     d1a:	0e 94 6e 05 	call	0xadc	; 0xadc <oled_store>
		oled_store((char[12]){"left slider"}, (int[2]){4, 3*8});
     d1e:	bd 8e       	std	Y+29, r11	; 0x1d
     d20:	ac 8e       	std	Y+28, r10	; 0x1c
     d22:	df 8e       	std	Y+31, r13	; 0x1f
     d24:	ce 8e       	std	Y+30, r12	; 0x1e
     d26:	e7 ea       	ldi	r30, 0xA7	; 167
     d28:	f1 e0       	ldi	r31, 0x01	; 1
     d2a:	de 01       	movw	r26, r28
     d2c:	50 96       	adiw	r26, 0x10	; 16
     d2e:	89 2d       	mov	r24, r9
     d30:	01 90       	ld	r0, Z+
     d32:	0d 92       	st	X+, r0
     d34:	8a 95       	dec	r24
     d36:	e1 f7       	brne	.-8      	; 0xd30 <oled_alt_change_contrast+0xb0>
     d38:	be 01       	movw	r22, r28
     d3a:	64 5e       	subi	r22, 0xE4	; 228
     d3c:	7f 4f       	sbci	r23, 0xFF	; 255
     d3e:	ce 01       	movw	r24, r28
     d40:	40 96       	adiw	r24, 0x10	; 16
     d42:	0e 94 6e 05 	call	0xadc	; 0xadc <oled_store>
		oled_store((char[7]){"Return"}, (int[2]){7, 0});
     d46:	fd 86       	std	Y+13, r15	; 0x0d
     d48:	ec 86       	std	Y+12, r14	; 0x0c
     d4a:	1f 86       	std	Y+15, r1	; 0x0f
     d4c:	1e 86       	std	Y+14, r1	; 0x0e
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	e3 eb       	ldi	r30, 0xB3	; 179
     d52:	f1 e0       	ldi	r31, 0x01	; 1
     d54:	de 01       	movw	r26, r28
     d56:	15 96       	adiw	r26, 0x05	; 5
     d58:	01 90       	ld	r0, Z+
     d5a:	0d 92       	st	X+, r0
     d5c:	8a 95       	dec	r24
     d5e:	e1 f7       	brne	.-8      	; 0xd58 <oled_alt_change_contrast+0xd8>
     d60:	be 01       	movw	r22, r28
     d62:	64 5f       	subi	r22, 0xF4	; 244
     d64:	7f 4f       	sbci	r23, 0xFF	; 255
     d66:	ce 01       	movw	r24, r28
     d68:	05 96       	adiw	r24, 0x05	; 5
     d6a:	0e 94 6e 05 	call	0xadc	; 0xadc <oled_store>
		//oled_store((char[4]){"Max"}, (int[2]){7, 12*8});
		oled_store_string((char[4]){"Max"}, 12*8, 7);
     d6e:	49 82       	std	Y+1, r4	; 0x01
     d70:	5a 82       	std	Y+2, r5	; 0x02
     d72:	6b 82       	std	Y+3, r6	; 0x03
     d74:	7c 82       	std	Y+4, r7	; 0x04
     d76:	a7 01       	movw	r20, r14
     d78:	60 e6       	ldi	r22, 0x60	; 96
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	ce 01       	movw	r24, r28
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	0e 94 b2 05 	call	0xb64	; 0xb64 <oled_store_string>
			
			
		
		oled_write_screen();
     d84:	0e 94 c8 05 	call	0xb90	; 0xb90 <oled_write_screen>
		
		contrast = slider_left_read() - 2;
     d88:	0e 94 fe 02 	call	0x5fc	; 0x5fc <slider_left_read>
     d8c:	82 50       	subi	r24, 0x02	; 2
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
     d8e:	91 e8       	ldi	r25, 0x81	; 129
     d90:	f8 01       	movw	r30, r16
     d92:	90 83       	st	Z, r25
     d94:	80 83       	st	Z, r24
		contrast = slider_left_read() - 2;
		oled_command_write(0x81);    //contrast control
		oled_command_write(contrast);  
		
		
		if(button_left_read()){
     d96:	0e 94 1b 03 	call	0x636	; 0x636 <button_left_read>
     d9a:	89 2b       	or	r24, r25
     d9c:	59 f4       	brne	.+22     	; 0xdb4 <oled_alt_change_contrast+0x134>
			return;
		}
		if(button_right_read()){
     d9e:	0e 94 22 03 	call	0x644	; 0x644 <button_right_read>
     da2:	89 2b       	or	r24, r25
     da4:	09 f4       	brne	.+2      	; 0xda8 <oled_alt_change_contrast+0x128>
     da6:	a7 cf       	rjmp	.-178    	; 0xcf6 <oled_alt_change_contrast+0x76>
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
     da8:	e0 e0       	ldi	r30, 0x00	; 0
     daa:	f0 e1       	ldi	r31, 0x10	; 16
     dac:	81 e8       	ldi	r24, 0x81	; 129
     dae:	80 83       	st	Z, r24
     db0:	8f ef       	ldi	r24, 0xFF	; 255
     db2:	80 83       	st	Z, r24
			oled_command_write(0xff);
			return;
		}
	}	

}
     db4:	ac 96       	adiw	r28, 0x2c	; 44
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	cf 90       	pop	r12
     dd0:	bf 90       	pop	r11
     dd2:	af 90       	pop	r10
     dd4:	9f 90       	pop	r9
     dd6:	8f 90       	pop	r8
     dd8:	7f 90       	pop	r7
     dda:	6f 90       	pop	r6
     ddc:	5f 90       	pop	r5
     dde:	4f 90       	pop	r4
     de0:	08 95       	ret

00000de2 <snake_print>:





void snake_print(int snake[MAX_LENGTH][3]){
     de2:	df 92       	push	r13
     de4:	ef 92       	push	r14
     de6:	ff 92       	push	r15
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <snake_print+0x10>
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <snake_print+0x12>
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <snake_print+0x14>
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	8c 01       	movw	r16, r24

	oled_alt_clear_screen();
     dfc:	0e 94 21 06 	call	0xc42	; 0xc42 <oled_alt_clear_screen>

	for (uint8_t i = 0; i < slength; i++){
     e00:	80 91 49 02 	lds	r24, 0x0249
     e04:	88 23       	and	r24, r24
     e06:	71 f1       	breq	.+92     	; 0xe64 <snake_print+0x82>
     e08:	d1 2c       	mov	r13, r1
		oled_store((char[2]){"O"}, (int[2]){snake[i][2], snake[i][0]*8});
     e0a:	0f 2e       	mov	r0, r31
     e0c:	ff e4       	ldi	r31, 0x4F	; 79
     e0e:	ef 2e       	mov	r14, r31
     e10:	f1 2c       	mov	r15, r1
     e12:	f0 2d       	mov	r31, r0
     e14:	2d 2d       	mov	r18, r13
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	f9 01       	movw	r30, r18
     e1a:	ee 0f       	add	r30, r30
     e1c:	ff 1f       	adc	r31, r31
     e1e:	2e 0f       	add	r18, r30
     e20:	3f 1f       	adc	r19, r31
     e22:	f9 01       	movw	r30, r18
     e24:	ee 0f       	add	r30, r30
     e26:	ff 1f       	adc	r31, r31
     e28:	e0 0f       	add	r30, r16
     e2a:	f1 1f       	adc	r31, r17
     e2c:	84 81       	ldd	r24, Z+4	; 0x04
     e2e:	95 81       	ldd	r25, Z+5	; 0x05
     e30:	9c 83       	std	Y+4, r25	; 0x04
     e32:	8b 83       	std	Y+3, r24	; 0x03
     e34:	20 81       	ld	r18, Z
     e36:	31 81       	ldd	r19, Z+1	; 0x01
     e38:	22 0f       	add	r18, r18
     e3a:	33 1f       	adc	r19, r19
     e3c:	22 0f       	add	r18, r18
     e3e:	33 1f       	adc	r19, r19
     e40:	22 0f       	add	r18, r18
     e42:	33 1f       	adc	r19, r19
     e44:	3e 83       	std	Y+6, r19	; 0x06
     e46:	2d 83       	std	Y+5, r18	; 0x05
     e48:	fa 82       	std	Y+2, r15	; 0x02
     e4a:	e9 82       	std	Y+1, r14	; 0x01
     e4c:	be 01       	movw	r22, r28
     e4e:	6d 5f       	subi	r22, 0xFD	; 253
     e50:	7f 4f       	sbci	r23, 0xFF	; 255
     e52:	ce 01       	movw	r24, r28
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	0e 94 6e 05 	call	0xadc	; 0xadc <oled_store>

void snake_print(int snake[MAX_LENGTH][3]){

	oled_alt_clear_screen();

	for (uint8_t i = 0; i < slength; i++){
     e5a:	d3 94       	inc	r13
     e5c:	80 91 49 02 	lds	r24, 0x0249
     e60:	d8 16       	cp	r13, r24
     e62:	c0 f2       	brcs	.-80     	; 0xe14 <snake_print+0x32>
		oled_store((char[2]){"O"}, (int[2]){snake[i][2], snake[i][0]*8});

	}

}
     e64:	26 96       	adiw	r28, 0x06	; 6
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	df 90       	pop	r13
     e7e:	08 95       	ret

00000e80 <snake_move>:
	}
	return 0;
}


void snake_move(int direction, int snake[MAX_LENGTH][3]){
     e80:	db 01       	movw	r26, r22

	int x = x_no_dir;
	int y = y_no_dir;

	switch (direction){
     e82:	8e 3f       	cpi	r24, 0xFE	; 254
     e84:	2f ef       	ldi	r18, 0xFF	; 255
     e86:	92 07       	cpc	r25, r18
     e88:	31 f0       	breq	.+12     	; 0xe96 <snake_move+0x16>
     e8a:	82 30       	cpi	r24, 0x02	; 2
     e8c:	91 05       	cpc	r25, r1
     e8e:	19 f0       	breq	.+6      	; 0xe96 <snake_move+0x16>


void snake_move(int direction, int snake[MAX_LENGTH][3]){

	int x = x_no_dir;
	int y = y_no_dir;
     e90:	40 e0       	ldi	r20, 0x00	; 0
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <snake_move+0x1a>

	switch (direction){
	case up:
		y = y_up;
	case down:
		y = y_down;
     e96:	4f ef       	ldi	r20, 0xFF	; 255
     e98:	5f ef       	ldi	r21, 0xFF	; 255
	}
	switch (direction){
     e9a:	8f 3f       	cpi	r24, 0xFF	; 255
     e9c:	2f ef       	ldi	r18, 0xFF	; 255
     e9e:	92 07       	cpc	r25, r18
     ea0:	29 f0       	breq	.+10     	; 0xeac <snake_move+0x2c>
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	19 f0       	breq	.+6      	; 0xeac <snake_move+0x2c>
}


void snake_move(int direction, int snake[MAX_LENGTH][3]){

	int x = x_no_dir;
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <snake_move+0x30>
	}
	switch (direction){
	case left:
		x = x_left;
	case right:
		x = x_right;
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	70 e0       	ldi	r23, 0x00	; 0
	}


	for (int point = slength -1; point > 0; point--){
     eb0:	80 91 49 02 	lds	r24, 0x0249
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	18 16       	cp	r1, r24
     eba:	19 06       	cpc	r1, r25
     ebc:	b4 f4       	brge	.+44     	; 0xeea <snake_move+0x6a>
		snake[point][pos_x] = snake[point - 1][pos_x];
     ebe:	fc 01       	movw	r30, r24
     ec0:	ee 0f       	add	r30, r30
     ec2:	ff 1f       	adc	r31, r31
     ec4:	e8 0f       	add	r30, r24
     ec6:	f9 1f       	adc	r31, r25
     ec8:	ee 0f       	add	r30, r30
     eca:	ff 1f       	adc	r31, r31
     ecc:	36 97       	sbiw	r30, 0x06	; 6
     ece:	ea 0f       	add	r30, r26
     ed0:	fb 1f       	adc	r31, r27
     ed2:	20 81       	ld	r18, Z
     ed4:	31 81       	ldd	r19, Z+1	; 0x01
     ed6:	37 83       	std	Z+7, r19	; 0x07
     ed8:	26 83       	std	Z+6, r18	; 0x06
		snake[point][pos_y] = snake[point - 1][pos_y];
     eda:	22 81       	ldd	r18, Z+2	; 0x02
     edc:	33 81       	ldd	r19, Z+3	; 0x03
     ede:	31 87       	std	Z+9, r19	; 0x09
     ee0:	20 87       	std	Z+8, r18	; 0x08
	case right:
		x = x_right;
	}


	for (int point = slength -1; point > 0; point--){
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	36 97       	sbiw	r30, 0x06	; 6
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	a1 f7       	brne	.-24     	; 0xed2 <snake_move+0x52>
		snake[point][pos_x] = snake[point - 1][pos_x];
		snake[point][pos_y] = snake[point - 1][pos_y];
	}
	
	snake[0][pos_x] = snake[0][pos_x] + x;
     eea:	8d 91       	ld	r24, X+
     eec:	9c 91       	ld	r25, X
     eee:	11 97       	sbiw	r26, 0x01	; 1
     ef0:	86 0f       	add	r24, r22
     ef2:	97 1f       	adc	r25, r23
     ef4:	11 96       	adiw	r26, 0x01	; 1
     ef6:	9c 93       	st	X, r25
     ef8:	8e 93       	st	-X, r24
	snake[0][pos_y] = snake[0][pos_y] + y;
     efa:	12 96       	adiw	r26, 0x02	; 2
     efc:	8d 91       	ld	r24, X+
     efe:	9c 91       	ld	r25, X
     f00:	13 97       	sbiw	r26, 0x03	; 3
     f02:	84 0f       	add	r24, r20
     f04:	95 1f       	adc	r25, r21
     f06:	13 96       	adiw	r26, 0x03	; 3
     f08:	9c 93       	st	X, r25
     f0a:	8e 93       	st	-X, r24
     f0c:	12 97       	sbiw	r26, 0x02	; 2
     f0e:	08 95       	ret

00000f10 <snake_run>:
	snake[2][pos_y] = 2;
*/

}

void snake_run(int snake[][3]){
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	ec 01       	movw	r28, r24

	snake_print(snake);
}

void snake_init(int snake[][3]){
	slength = 1;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	80 93 49 02 	sts	0x0249, r24
	
	snake[0][pos_x] = 5;
     f1c:	85 e0       	ldi	r24, 0x05	; 5
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	99 83       	std	Y+1, r25	; 0x01
     f22:	88 83       	st	Y, r24
	snake[0][pos_y] = 5;
     f24:	9b 83       	std	Y+3, r25	; 0x03
     f26:	8a 83       	std	Y+2, r24	; 0x02
void snake_run(int snake[][3]){


	snake_init(snake);
	while (1){
		snake_print(snake);
     f28:	ce 01       	movw	r24, r28
     f2a:	0e 94 f1 06 	call	0xde2	; 0xde2 <snake_print>
		oled_refresh_60Hz();
     f2e:	0e 94 d3 05 	call	0xba6	; 0xba6 <oled_refresh_60Hz>
		
		if(joystick_x_value() > 70)
     f32:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <joystick_x_value>
     f36:	87 34       	cpi	r24, 0x47	; 71
     f38:	91 05       	cpc	r25, r1
     f3a:	2c f0       	brlt	.+10     	; 0xf46 <snake_run+0x36>
			snake_move(snake, right);
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	ce 01       	movw	r24, r28
     f42:	0e 94 40 07 	call	0xe80	; 0xe80 <snake_move>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f46:	2f ef       	ldi	r18, 0xFF	; 255
     f48:	8f ef       	ldi	r24, 0xFF	; 255
     f4a:	95 e0       	ldi	r25, 0x05	; 5
     f4c:	21 50       	subi	r18, 0x01	; 1
     f4e:	80 40       	sbci	r24, 0x00	; 0
     f50:	90 40       	sbci	r25, 0x00	; 0
     f52:	e1 f7       	brne	.-8      	; 0xf4c <snake_run+0x3c>
     f54:	00 c0       	rjmp	.+0      	; 0xf56 <snake_run+0x46>
     f56:	00 c0       	rjmp	.+0      	; 0xf58 <snake_run+0x48>
		_delay_ms(400);
		
		
		if(button_left_read()){
     f58:	0e 94 1b 03 	call	0x636	; 0x636 <button_left_read>
     f5c:	89 2b       	or	r24, r25
     f5e:	21 f3       	breq	.-56     	; 0xf28 <snake_run+0x18>
			return;
		}
	}
	

}
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	08 95       	ret

00000f66 <spi_init>:
#include "SPI.h"
#include <avr/io.h>

void spi_init(){
			//SI out		SS out		SCK out
	DDRB |= ( 1 << PB5) | (1 << PB4) | (1 << PB7);
     f66:	87 b3       	in	r24, 0x17	; 23
     f68:	80 6b       	ori	r24, 0xB0	; 176
     f6a:	87 bb       	out	0x17, r24	; 23
			//SO in
	DDRB &= ~(1 << PB6);
     f6c:	be 98       	cbi	0x17, 6	; 23
	
	//								 frequency / 16
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     f6e:	81 e5       	ldi	r24, 0x51	; 81
     f70:	8d b9       	out	0x0d, r24	; 13
     f72:	08 95       	ret

00000f74 <spi_write>:

//both read and write
int spi_write(char data){
	//SPDR = data;
	//while(!(SPSR & (1<<SPIF)));
	SPDR = data;
     f74:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     f76:	77 9b       	sbis	0x0e, 7	; 14
     f78:	fe cf       	rjmp	.-4      	; 0xf76 <spi_write+0x2>
	return SPDR;
     f7a:	8f b1       	in	r24, 0x0f	; 15
}
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	08 95       	ret

00000f80 <SRAM_test>:
#include <avr/io.h>

void SRAM_test(void)
{
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;

	printf("Starting SRAM test...\n");
     f8c:	8a eb       	ldi	r24, 0xBA	; 186
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	0e 94 28 0a 	call	0x1450	; 0x1450 <puts>

	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     f94:	0e 94 b0 09 	call	0x1360	; 0x1360 <rand>
     f98:	7c 01       	movw	r14, r24

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     f9a:	0e 94 b5 09 	call	0x136a	; 0x136a <srand>
     f9e:	c0 e0       	ldi	r28, 0x00	; 0
     fa0:	d8 e1       	ldi	r29, 0x18	; 24

void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
     fa2:	00 e0       	ldi	r16, 0x00	; 0
     fa4:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     fa6:	0e 94 b0 09 	call	0x1360	; 0x1360 <rand>
		ext_ram[i] = some_value;
     faa:	88 83       	st	Y, r24
		uint8_t retreived_value = ext_ram[i];
     fac:	98 81       	ld	r25, Y
		if (retreived_value != some_value) {
     fae:	98 17       	cp	r25, r24
     fb0:	11 f0       	breq	.+4      	; 0xfb6 <SRAM_test+0x36>
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
     fb2:	0f 5f       	subi	r16, 0xFF	; 255
     fb4:	1f 4f       	sbci	r17, 0xFF	; 255
     fb6:	21 96       	adiw	r28, 0x01	; 1
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     fb8:	c1 15       	cp	r28, r1
     fba:	80 e2       	ldi	r24, 0x20	; 32
     fbc:	d8 07       	cpc	r29, r24
     fbe:	99 f7       	brne	.-26     	; 0xfa6 <SRAM_test+0x26>
			write_errors++;
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
     fc0:	c7 01       	movw	r24, r14
     fc2:	0e 94 b5 09 	call	0x136a	; 0x136a <srand>
     fc6:	c0 e0       	ldi	r28, 0x00	; 0
     fc8:	d8 e1       	ldi	r29, 0x18	; 24
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;
     fca:	e1 2c       	mov	r14, r1
     fcc:	f1 2c       	mov	r15, r1
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     fce:	0e 94 b0 09 	call	0x1360	; 0x1360 <rand>
		uint8_t retreived_value = ext_ram[i];
     fd2:	98 81       	ld	r25, Y
		if (retreived_value != some_value) {
     fd4:	98 17       	cp	r25, r24
     fd6:	19 f0       	breq	.+6      	; 0xfde <SRAM_test+0x5e>
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	e8 1a       	sub	r14, r24
     fdc:	f8 0a       	sbc	r15, r24
     fde:	21 96       	adiw	r28, 0x01	; 1
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     fe0:	c1 15       	cp	r28, r1
     fe2:	80 e2       	ldi	r24, 0x20	; 32
     fe4:	d8 07       	cpc	r29, r24
     fe6:	99 f7       	brne	.-26     	; 0xfce <SRAM_test+0x4e>
		if (retreived_value != some_value) {
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     fe8:	ff 92       	push	r15
     fea:	ef 92       	push	r14
     fec:	1f 93       	push	r17
     fee:	0f 93       	push	r16
     ff0:	80 ed       	ldi	r24, 0xD0	; 208
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	9f 93       	push	r25
     ff6:	8f 93       	push	r24
     ff8:	0e 94 14 0a 	call	0x1428	; 0x1428 <printf>
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
}
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	08 95       	ret

00001016 <timer_init>:


//timer to be used for Oled_refresh at 60 Hz
void timer_init(){
	
	TCCR1A = 0;
    1016:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
    1018:	1e bc       	out	0x2e, r1	; 46
	
	//prescaler = 1024. Clock now counts at F_CPU / 1024 Hz = 4800 Hz
	TCCR1B |= (1<<CS12) | (1<<CS10);
    101a:	8e b5       	in	r24, 0x2e	; 46
    101c:	85 60       	ori	r24, 0x05	; 5
    101e:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<CS11);
    1020:	8e b5       	in	r24, 0x2e	; 46
    1022:	8d 7f       	andi	r24, 0xFD	; 253
    1024:	8e bd       	out	0x2e, r24	; 46
	//or simpler, but makes it impossible for other modules
	//to use timer1, just reset and refresh oled after
	//80 clock ticks
	
	//Mode 0, clock max = 0xFFFF
	TCCR1A &= ~(1<<WGM10);
    1026:	8f b5       	in	r24, 0x2f	; 47
    1028:	8e 7f       	andi	r24, 0xFE	; 254
    102a:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1<<WGM11);
    102c:	8f b5       	in	r24, 0x2f	; 47
    102e:	8d 7f       	andi	r24, 0xFD	; 253
    1030:	8f bd       	out	0x2f, r24	; 47
	TCCR1B &= ~(1<<WGM12);
    1032:	8e b5       	in	r24, 0x2e	; 46
    1034:	87 7f       	andi	r24, 0xF7	; 247
    1036:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<WGM13);
    1038:	8e b5       	in	r24, 0x2e	; 46
    103a:	8f 7e       	andi	r24, 0xEF	; 239
    103c:	8e bd       	out	0x2e, r24	; 46
    103e:	08 95       	ret

00001040 <timer_read>:
	
	
}

uint16_t timer_read(){
	return TCNT1;
    1040:	8c b5       	in	r24, 0x2c	; 44
    1042:	9d b5       	in	r25, 0x2d	; 45
}
    1044:	08 95       	ret

00001046 <timer_reset>:

void timer_reset(){
	TCNT1 = 0;
    1046:	1d bc       	out	0x2d, r1	; 45
    1048:	1c bc       	out	0x2c, r1	; 44
    104a:	08 95       	ret

0000104c <uart_Transmit>:
}

void uart_Transmit( unsigned char data ){
	
	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
    104c:	5d 9b       	sbis	0x0b, 5	; 11
    104e:	fe cf       	rjmp	.-4      	; 0x104c <uart_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;
    1050:	8c b9       	out	0x0c, r24	; 12
    1052:	08 95       	ret

00001054 <uart_Receive>:

unsigned char uart_Receive(void){
	
	//Wait for data to be received
	
	while( !(UCSR0A & (1<<RXC0)) );
    1054:	5f 9b       	sbis	0x0b, 7	; 11
    1056:	fe cf       	rjmp	.-4      	; 0x1054 <uart_Receive>
	
	//Get and return received data from buffer
	
	return UDR0;
    1058:	8c b1       	in	r24, 0x0c	; 12
}
    105a:	08 95       	ret

0000105c <uart_Init>:
#include "uart.h"

void uart_Init(unsigned int ubrr){
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
    105c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
    105e:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN1)|(1<<TXEN1);
    1060:	88 e1       	ldi	r24, 0x18	; 24
    1062:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8data, 1stop bit
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    1064:	86 e8       	ldi	r24, 0x86	; 134
    1066:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uart_Transmit, uart_Receive);
    1068:	6a e2       	ldi	r22, 0x2A	; 42
    106a:	78 e0       	ldi	r23, 0x08	; 8
    106c:	86 e2       	ldi	r24, 0x26	; 38
    106e:	98 e0       	ldi	r25, 0x08	; 8
    1070:	0e 94 c9 09 	call	0x1392	; 0x1392 <fdevopen>
    1074:	08 95       	ret

00001076 <malloc>:
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	82 30       	cpi	r24, 0x02	; 2
    107c:	91 05       	cpc	r25, r1
    107e:	10 f4       	brcc	.+4      	; 0x1084 <malloc+0xe>
    1080:	82 e0       	ldi	r24, 0x02	; 2
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	e0 91 4c 02 	lds	r30, 0x024C
    1088:	f0 91 4d 02 	lds	r31, 0x024D
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	a0 e0       	ldi	r26, 0x00	; 0
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	30 97       	sbiw	r30, 0x00	; 0
    1096:	39 f1       	breq	.+78     	; 0x10e6 <malloc+0x70>
    1098:	40 81       	ld	r20, Z
    109a:	51 81       	ldd	r21, Z+1	; 0x01
    109c:	48 17       	cp	r20, r24
    109e:	59 07       	cpc	r21, r25
    10a0:	b8 f0       	brcs	.+46     	; 0x10d0 <malloc+0x5a>
    10a2:	48 17       	cp	r20, r24
    10a4:	59 07       	cpc	r21, r25
    10a6:	71 f4       	brne	.+28     	; 0x10c4 <malloc+0x4e>
    10a8:	82 81       	ldd	r24, Z+2	; 0x02
    10aa:	93 81       	ldd	r25, Z+3	; 0x03
    10ac:	10 97       	sbiw	r26, 0x00	; 0
    10ae:	29 f0       	breq	.+10     	; 0x10ba <malloc+0x44>
    10b0:	13 96       	adiw	r26, 0x03	; 3
    10b2:	9c 93       	st	X, r25
    10b4:	8e 93       	st	-X, r24
    10b6:	12 97       	sbiw	r26, 0x02	; 2
    10b8:	2c c0       	rjmp	.+88     	; 0x1112 <malloc+0x9c>
    10ba:	90 93 4d 02 	sts	0x024D, r25
    10be:	80 93 4c 02 	sts	0x024C, r24
    10c2:	27 c0       	rjmp	.+78     	; 0x1112 <malloc+0x9c>
    10c4:	21 15       	cp	r18, r1
    10c6:	31 05       	cpc	r19, r1
    10c8:	31 f0       	breq	.+12     	; 0x10d6 <malloc+0x60>
    10ca:	42 17       	cp	r20, r18
    10cc:	53 07       	cpc	r21, r19
    10ce:	18 f0       	brcs	.+6      	; 0x10d6 <malloc+0x60>
    10d0:	a9 01       	movw	r20, r18
    10d2:	db 01       	movw	r26, r22
    10d4:	01 c0       	rjmp	.+2      	; 0x10d8 <malloc+0x62>
    10d6:	ef 01       	movw	r28, r30
    10d8:	9a 01       	movw	r18, r20
    10da:	bd 01       	movw	r22, r26
    10dc:	df 01       	movw	r26, r30
    10de:	02 80       	ldd	r0, Z+2	; 0x02
    10e0:	f3 81       	ldd	r31, Z+3	; 0x03
    10e2:	e0 2d       	mov	r30, r0
    10e4:	d7 cf       	rjmp	.-82     	; 0x1094 <malloc+0x1e>
    10e6:	21 15       	cp	r18, r1
    10e8:	31 05       	cpc	r19, r1
    10ea:	f9 f0       	breq	.+62     	; 0x112a <malloc+0xb4>
    10ec:	28 1b       	sub	r18, r24
    10ee:	39 0b       	sbc	r19, r25
    10f0:	24 30       	cpi	r18, 0x04	; 4
    10f2:	31 05       	cpc	r19, r1
    10f4:	80 f4       	brcc	.+32     	; 0x1116 <malloc+0xa0>
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	9b 81       	ldd	r25, Y+3	; 0x03
    10fa:	61 15       	cp	r22, r1
    10fc:	71 05       	cpc	r23, r1
    10fe:	21 f0       	breq	.+8      	; 0x1108 <malloc+0x92>
    1100:	fb 01       	movw	r30, r22
    1102:	93 83       	std	Z+3, r25	; 0x03
    1104:	82 83       	std	Z+2, r24	; 0x02
    1106:	04 c0       	rjmp	.+8      	; 0x1110 <malloc+0x9a>
    1108:	90 93 4d 02 	sts	0x024D, r25
    110c:	80 93 4c 02 	sts	0x024C, r24
    1110:	fe 01       	movw	r30, r28
    1112:	32 96       	adiw	r30, 0x02	; 2
    1114:	44 c0       	rjmp	.+136    	; 0x119e <malloc+0x128>
    1116:	fe 01       	movw	r30, r28
    1118:	e2 0f       	add	r30, r18
    111a:	f3 1f       	adc	r31, r19
    111c:	81 93       	st	Z+, r24
    111e:	91 93       	st	Z+, r25
    1120:	22 50       	subi	r18, 0x02	; 2
    1122:	31 09       	sbc	r19, r1
    1124:	39 83       	std	Y+1, r19	; 0x01
    1126:	28 83       	st	Y, r18
    1128:	3a c0       	rjmp	.+116    	; 0x119e <malloc+0x128>
    112a:	20 91 4a 02 	lds	r18, 0x024A
    112e:	30 91 4b 02 	lds	r19, 0x024B
    1132:	23 2b       	or	r18, r19
    1134:	41 f4       	brne	.+16     	; 0x1146 <malloc+0xd0>
    1136:	20 91 02 01 	lds	r18, 0x0102
    113a:	30 91 03 01 	lds	r19, 0x0103
    113e:	30 93 4b 02 	sts	0x024B, r19
    1142:	20 93 4a 02 	sts	0x024A, r18
    1146:	20 91 00 01 	lds	r18, 0x0100
    114a:	30 91 01 01 	lds	r19, 0x0101
    114e:	21 15       	cp	r18, r1
    1150:	31 05       	cpc	r19, r1
    1152:	41 f4       	brne	.+16     	; 0x1164 <malloc+0xee>
    1154:	2d b7       	in	r18, 0x3d	; 61
    1156:	3e b7       	in	r19, 0x3e	; 62
    1158:	40 91 04 01 	lds	r20, 0x0104
    115c:	50 91 05 01 	lds	r21, 0x0105
    1160:	24 1b       	sub	r18, r20
    1162:	35 0b       	sbc	r19, r21
    1164:	e0 91 4a 02 	lds	r30, 0x024A
    1168:	f0 91 4b 02 	lds	r31, 0x024B
    116c:	e2 17       	cp	r30, r18
    116e:	f3 07       	cpc	r31, r19
    1170:	a0 f4       	brcc	.+40     	; 0x119a <malloc+0x124>
    1172:	2e 1b       	sub	r18, r30
    1174:	3f 0b       	sbc	r19, r31
    1176:	28 17       	cp	r18, r24
    1178:	39 07       	cpc	r19, r25
    117a:	78 f0       	brcs	.+30     	; 0x119a <malloc+0x124>
    117c:	ac 01       	movw	r20, r24
    117e:	4e 5f       	subi	r20, 0xFE	; 254
    1180:	5f 4f       	sbci	r21, 0xFF	; 255
    1182:	24 17       	cp	r18, r20
    1184:	35 07       	cpc	r19, r21
    1186:	48 f0       	brcs	.+18     	; 0x119a <malloc+0x124>
    1188:	4e 0f       	add	r20, r30
    118a:	5f 1f       	adc	r21, r31
    118c:	50 93 4b 02 	sts	0x024B, r21
    1190:	40 93 4a 02 	sts	0x024A, r20
    1194:	81 93       	st	Z+, r24
    1196:	91 93       	st	Z+, r25
    1198:	02 c0       	rjmp	.+4      	; 0x119e <malloc+0x128>
    119a:	e0 e0       	ldi	r30, 0x00	; 0
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	cf 01       	movw	r24, r30
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	08 95       	ret

000011a6 <free>:
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <free+0xa>
    11ae:	87 c0       	rjmp	.+270    	; 0x12be <free+0x118>
    11b0:	fc 01       	movw	r30, r24
    11b2:	32 97       	sbiw	r30, 0x02	; 2
    11b4:	13 82       	std	Z+3, r1	; 0x03
    11b6:	12 82       	std	Z+2, r1	; 0x02
    11b8:	c0 91 4c 02 	lds	r28, 0x024C
    11bc:	d0 91 4d 02 	lds	r29, 0x024D
    11c0:	20 97       	sbiw	r28, 0x00	; 0
    11c2:	81 f4       	brne	.+32     	; 0x11e4 <free+0x3e>
    11c4:	20 81       	ld	r18, Z
    11c6:	31 81       	ldd	r19, Z+1	; 0x01
    11c8:	28 0f       	add	r18, r24
    11ca:	39 1f       	adc	r19, r25
    11cc:	80 91 4a 02 	lds	r24, 0x024A
    11d0:	90 91 4b 02 	lds	r25, 0x024B
    11d4:	82 17       	cp	r24, r18
    11d6:	93 07       	cpc	r25, r19
    11d8:	79 f5       	brne	.+94     	; 0x1238 <free+0x92>
    11da:	f0 93 4b 02 	sts	0x024B, r31
    11de:	e0 93 4a 02 	sts	0x024A, r30
    11e2:	6d c0       	rjmp	.+218    	; 0x12be <free+0x118>
    11e4:	de 01       	movw	r26, r28
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	ae 17       	cp	r26, r30
    11ec:	bf 07       	cpc	r27, r31
    11ee:	50 f4       	brcc	.+20     	; 0x1204 <free+0x5e>
    11f0:	12 96       	adiw	r26, 0x02	; 2
    11f2:	4d 91       	ld	r20, X+
    11f4:	5c 91       	ld	r21, X
    11f6:	13 97       	sbiw	r26, 0x03	; 3
    11f8:	9d 01       	movw	r18, r26
    11fa:	41 15       	cp	r20, r1
    11fc:	51 05       	cpc	r21, r1
    11fe:	09 f1       	breq	.+66     	; 0x1242 <free+0x9c>
    1200:	da 01       	movw	r26, r20
    1202:	f3 cf       	rjmp	.-26     	; 0x11ea <free+0x44>
    1204:	b3 83       	std	Z+3, r27	; 0x03
    1206:	a2 83       	std	Z+2, r26	; 0x02
    1208:	40 81       	ld	r20, Z
    120a:	51 81       	ldd	r21, Z+1	; 0x01
    120c:	84 0f       	add	r24, r20
    120e:	95 1f       	adc	r25, r21
    1210:	8a 17       	cp	r24, r26
    1212:	9b 07       	cpc	r25, r27
    1214:	71 f4       	brne	.+28     	; 0x1232 <free+0x8c>
    1216:	8d 91       	ld	r24, X+
    1218:	9c 91       	ld	r25, X
    121a:	11 97       	sbiw	r26, 0x01	; 1
    121c:	84 0f       	add	r24, r20
    121e:	95 1f       	adc	r25, r21
    1220:	02 96       	adiw	r24, 0x02	; 2
    1222:	91 83       	std	Z+1, r25	; 0x01
    1224:	80 83       	st	Z, r24
    1226:	12 96       	adiw	r26, 0x02	; 2
    1228:	8d 91       	ld	r24, X+
    122a:	9c 91       	ld	r25, X
    122c:	13 97       	sbiw	r26, 0x03	; 3
    122e:	93 83       	std	Z+3, r25	; 0x03
    1230:	82 83       	std	Z+2, r24	; 0x02
    1232:	21 15       	cp	r18, r1
    1234:	31 05       	cpc	r19, r1
    1236:	29 f4       	brne	.+10     	; 0x1242 <free+0x9c>
    1238:	f0 93 4d 02 	sts	0x024D, r31
    123c:	e0 93 4c 02 	sts	0x024C, r30
    1240:	3e c0       	rjmp	.+124    	; 0x12be <free+0x118>
    1242:	d9 01       	movw	r26, r18
    1244:	13 96       	adiw	r26, 0x03	; 3
    1246:	fc 93       	st	X, r31
    1248:	ee 93       	st	-X, r30
    124a:	12 97       	sbiw	r26, 0x02	; 2
    124c:	4d 91       	ld	r20, X+
    124e:	5d 91       	ld	r21, X+
    1250:	a4 0f       	add	r26, r20
    1252:	b5 1f       	adc	r27, r21
    1254:	ea 17       	cp	r30, r26
    1256:	fb 07       	cpc	r31, r27
    1258:	79 f4       	brne	.+30     	; 0x1278 <free+0xd2>
    125a:	80 81       	ld	r24, Z
    125c:	91 81       	ldd	r25, Z+1	; 0x01
    125e:	84 0f       	add	r24, r20
    1260:	95 1f       	adc	r25, r21
    1262:	02 96       	adiw	r24, 0x02	; 2
    1264:	d9 01       	movw	r26, r18
    1266:	11 96       	adiw	r26, 0x01	; 1
    1268:	9c 93       	st	X, r25
    126a:	8e 93       	st	-X, r24
    126c:	82 81       	ldd	r24, Z+2	; 0x02
    126e:	93 81       	ldd	r25, Z+3	; 0x03
    1270:	13 96       	adiw	r26, 0x03	; 3
    1272:	9c 93       	st	X, r25
    1274:	8e 93       	st	-X, r24
    1276:	12 97       	sbiw	r26, 0x02	; 2
    1278:	e0 e0       	ldi	r30, 0x00	; 0
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	9b 81       	ldd	r25, Y+3	; 0x03
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	19 f0       	breq	.+6      	; 0x128a <free+0xe4>
    1284:	fe 01       	movw	r30, r28
    1286:	ec 01       	movw	r28, r24
    1288:	f9 cf       	rjmp	.-14     	; 0x127c <free+0xd6>
    128a:	ce 01       	movw	r24, r28
    128c:	02 96       	adiw	r24, 0x02	; 2
    128e:	28 81       	ld	r18, Y
    1290:	39 81       	ldd	r19, Y+1	; 0x01
    1292:	82 0f       	add	r24, r18
    1294:	93 1f       	adc	r25, r19
    1296:	20 91 4a 02 	lds	r18, 0x024A
    129a:	30 91 4b 02 	lds	r19, 0x024B
    129e:	28 17       	cp	r18, r24
    12a0:	39 07       	cpc	r19, r25
    12a2:	69 f4       	brne	.+26     	; 0x12be <free+0x118>
    12a4:	30 97       	sbiw	r30, 0x00	; 0
    12a6:	29 f4       	brne	.+10     	; 0x12b2 <free+0x10c>
    12a8:	10 92 4d 02 	sts	0x024D, r1
    12ac:	10 92 4c 02 	sts	0x024C, r1
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <free+0x110>
    12b2:	13 82       	std	Z+3, r1	; 0x03
    12b4:	12 82       	std	Z+2, r1	; 0x02
    12b6:	d0 93 4b 02 	sts	0x024B, r29
    12ba:	c0 93 4a 02 	sts	0x024A, r28
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	08 95       	ret

000012c4 <do_rand>:
    12c4:	8f 92       	push	r8
    12c6:	9f 92       	push	r9
    12c8:	af 92       	push	r10
    12ca:	bf 92       	push	r11
    12cc:	cf 92       	push	r12
    12ce:	df 92       	push	r13
    12d0:	ef 92       	push	r14
    12d2:	ff 92       	push	r15
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	ec 01       	movw	r28, r24
    12da:	68 81       	ld	r22, Y
    12dc:	79 81       	ldd	r23, Y+1	; 0x01
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	9b 81       	ldd	r25, Y+3	; 0x03
    12e2:	61 15       	cp	r22, r1
    12e4:	71 05       	cpc	r23, r1
    12e6:	81 05       	cpc	r24, r1
    12e8:	91 05       	cpc	r25, r1
    12ea:	21 f4       	brne	.+8      	; 0x12f4 <do_rand+0x30>
    12ec:	64 e2       	ldi	r22, 0x24	; 36
    12ee:	79 ed       	ldi	r23, 0xD9	; 217
    12f0:	8b e5       	ldi	r24, 0x5B	; 91
    12f2:	97 e0       	ldi	r25, 0x07	; 7
    12f4:	2d e1       	ldi	r18, 0x1D	; 29
    12f6:	33 ef       	ldi	r19, 0xF3	; 243
    12f8:	41 e0       	ldi	r20, 0x01	; 1
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__divmodsi4>
    1300:	49 01       	movw	r8, r18
    1302:	5a 01       	movw	r10, r20
    1304:	9b 01       	movw	r18, r22
    1306:	ac 01       	movw	r20, r24
    1308:	a7 ea       	ldi	r26, 0xA7	; 167
    130a:	b1 e4       	ldi	r27, 0x41	; 65
    130c:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__muluhisi3>
    1310:	6b 01       	movw	r12, r22
    1312:	7c 01       	movw	r14, r24
    1314:	ac ee       	ldi	r26, 0xEC	; 236
    1316:	b4 ef       	ldi	r27, 0xF4	; 244
    1318:	a5 01       	movw	r20, r10
    131a:	94 01       	movw	r18, r8
    131c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__mulohisi3>
    1320:	c6 0e       	add	r12, r22
    1322:	d7 1e       	adc	r13, r23
    1324:	e8 1e       	adc	r14, r24
    1326:	f9 1e       	adc	r15, r25
    1328:	f7 fe       	sbrs	r15, 7
    132a:	06 c0       	rjmp	.+12     	; 0x1338 <do_rand+0x74>
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	c8 1a       	sub	r12, r24
    1330:	d1 08       	sbc	r13, r1
    1332:	e1 08       	sbc	r14, r1
    1334:	80 e8       	ldi	r24, 0x80	; 128
    1336:	f8 0a       	sbc	r15, r24
    1338:	c8 82       	st	Y, r12
    133a:	d9 82       	std	Y+1, r13	; 0x01
    133c:	ea 82       	std	Y+2, r14	; 0x02
    133e:	fb 82       	std	Y+3, r15	; 0x03
    1340:	c6 01       	movw	r24, r12
    1342:	9f 77       	andi	r25, 0x7F	; 127
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	df 90       	pop	r13
    134e:	cf 90       	pop	r12
    1350:	bf 90       	pop	r11
    1352:	af 90       	pop	r10
    1354:	9f 90       	pop	r9
    1356:	8f 90       	pop	r8
    1358:	08 95       	ret

0000135a <rand_r>:
    135a:	0e 94 62 09 	call	0x12c4	; 0x12c4 <do_rand>
    135e:	08 95       	ret

00001360 <rand>:
    1360:	86 e0       	ldi	r24, 0x06	; 6
    1362:	91 e0       	ldi	r25, 0x01	; 1
    1364:	0e 94 62 09 	call	0x12c4	; 0x12c4 <do_rand>
    1368:	08 95       	ret

0000136a <srand>:
    136a:	a0 e0       	ldi	r26, 0x00	; 0
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	80 93 06 01 	sts	0x0106, r24
    1372:	90 93 07 01 	sts	0x0107, r25
    1376:	a0 93 08 01 	sts	0x0108, r26
    137a:	b0 93 09 01 	sts	0x0109, r27
    137e:	08 95       	ret

00001380 <strcmp>:
    1380:	fb 01       	movw	r30, r22
    1382:	dc 01       	movw	r26, r24
    1384:	8d 91       	ld	r24, X+
    1386:	01 90       	ld	r0, Z+
    1388:	80 19       	sub	r24, r0
    138a:	01 10       	cpse	r0, r1
    138c:	d9 f3       	breq	.-10     	; 0x1384 <strcmp+0x4>
    138e:	99 0b       	sbc	r25, r25
    1390:	08 95       	ret

00001392 <fdevopen>:
    1392:	0f 93       	push	r16
    1394:	1f 93       	push	r17
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	ec 01       	movw	r28, r24
    139c:	8b 01       	movw	r16, r22
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	31 f4       	brne	.+12     	; 0x13ae <fdevopen+0x1c>
    13a2:	61 15       	cp	r22, r1
    13a4:	71 05       	cpc	r23, r1
    13a6:	19 f4       	brne	.+6      	; 0x13ae <fdevopen+0x1c>
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	38 c0       	rjmp	.+112    	; 0x141e <fdevopen+0x8c>
    13ae:	6e e0       	ldi	r22, 0x0E	; 14
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 27 0c 	call	0x184e	; 0x184e <calloc>
    13ba:	fc 01       	movw	r30, r24
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	a1 f3       	breq	.-24     	; 0x13a8 <fdevopen+0x16>
    13c0:	80 e8       	ldi	r24, 0x80	; 128
    13c2:	83 83       	std	Z+3, r24	; 0x03
    13c4:	01 15       	cp	r16, r1
    13c6:	11 05       	cpc	r17, r1
    13c8:	71 f0       	breq	.+28     	; 0x13e6 <fdevopen+0x54>
    13ca:	13 87       	std	Z+11, r17	; 0x0b
    13cc:	02 87       	std	Z+10, r16	; 0x0a
    13ce:	81 e8       	ldi	r24, 0x81	; 129
    13d0:	83 83       	std	Z+3, r24	; 0x03
    13d2:	80 91 4e 02 	lds	r24, 0x024E
    13d6:	90 91 4f 02 	lds	r25, 0x024F
    13da:	89 2b       	or	r24, r25
    13dc:	21 f4       	brne	.+8      	; 0x13e6 <fdevopen+0x54>
    13de:	f0 93 4f 02 	sts	0x024F, r31
    13e2:	e0 93 4e 02 	sts	0x024E, r30
    13e6:	20 97       	sbiw	r28, 0x00	; 0
    13e8:	c9 f0       	breq	.+50     	; 0x141c <fdevopen+0x8a>
    13ea:	d1 87       	std	Z+9, r29	; 0x09
    13ec:	c0 87       	std	Z+8, r28	; 0x08
    13ee:	83 81       	ldd	r24, Z+3	; 0x03
    13f0:	82 60       	ori	r24, 0x02	; 2
    13f2:	83 83       	std	Z+3, r24	; 0x03
    13f4:	80 91 50 02 	lds	r24, 0x0250
    13f8:	90 91 51 02 	lds	r25, 0x0251
    13fc:	89 2b       	or	r24, r25
    13fe:	71 f4       	brne	.+28     	; 0x141c <fdevopen+0x8a>
    1400:	f0 93 51 02 	sts	0x0251, r31
    1404:	e0 93 50 02 	sts	0x0250, r30
    1408:	80 91 52 02 	lds	r24, 0x0252
    140c:	90 91 53 02 	lds	r25, 0x0253
    1410:	89 2b       	or	r24, r25
    1412:	21 f4       	brne	.+8      	; 0x141c <fdevopen+0x8a>
    1414:	f0 93 53 02 	sts	0x0253, r31
    1418:	e0 93 52 02 	sts	0x0252, r30
    141c:	cf 01       	movw	r24, r30
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	08 95       	ret

00001428 <printf>:
    1428:	a0 e0       	ldi	r26, 0x00	; 0
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	ea e1       	ldi	r30, 0x1A	; 26
    142e:	fa e0       	ldi	r31, 0x0A	; 10
    1430:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__prologue_saves__+0x20>
    1434:	fe 01       	movw	r30, r28
    1436:	35 96       	adiw	r30, 0x05	; 5
    1438:	61 91       	ld	r22, Z+
    143a:	71 91       	ld	r23, Z+
    143c:	af 01       	movw	r20, r30
    143e:	80 91 50 02 	lds	r24, 0x0250
    1442:	90 91 51 02 	lds	r25, 0x0251
    1446:	0e 94 55 0a 	call	0x14aa	; 0x14aa <vfprintf>
    144a:	e2 e0       	ldi	r30, 0x02	; 2
    144c:	0c 94 4e 0d 	jmp	0x1a9c	; 0x1a9c <__epilogue_restores__+0x20>

00001450 <puts>:
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	e0 91 50 02 	lds	r30, 0x0250
    145c:	f0 91 51 02 	lds	r31, 0x0251
    1460:	23 81       	ldd	r18, Z+3	; 0x03
    1462:	21 ff       	sbrs	r18, 1
    1464:	1b c0       	rjmp	.+54     	; 0x149c <puts+0x4c>
    1466:	ec 01       	movw	r28, r24
    1468:	00 e0       	ldi	r16, 0x00	; 0
    146a:	10 e0       	ldi	r17, 0x00	; 0
    146c:	89 91       	ld	r24, Y+
    146e:	60 91 50 02 	lds	r22, 0x0250
    1472:	70 91 51 02 	lds	r23, 0x0251
    1476:	db 01       	movw	r26, r22
    1478:	18 96       	adiw	r26, 0x08	; 8
    147a:	ed 91       	ld	r30, X+
    147c:	fc 91       	ld	r31, X
    147e:	19 97       	sbiw	r26, 0x09	; 9
    1480:	88 23       	and	r24, r24
    1482:	31 f0       	breq	.+12     	; 0x1490 <puts+0x40>
    1484:	09 95       	icall
    1486:	89 2b       	or	r24, r25
    1488:	89 f3       	breq	.-30     	; 0x146c <puts+0x1c>
    148a:	0f ef       	ldi	r16, 0xFF	; 255
    148c:	1f ef       	ldi	r17, 0xFF	; 255
    148e:	ee cf       	rjmp	.-36     	; 0x146c <puts+0x1c>
    1490:	8a e0       	ldi	r24, 0x0A	; 10
    1492:	09 95       	icall
    1494:	89 2b       	or	r24, r25
    1496:	11 f4       	brne	.+4      	; 0x149c <puts+0x4c>
    1498:	c8 01       	movw	r24, r16
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <puts+0x50>
    149c:	8f ef       	ldi	r24, 0xFF	; 255
    149e:	9f ef       	ldi	r25, 0xFF	; 255
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	1f 91       	pop	r17
    14a6:	0f 91       	pop	r16
    14a8:	08 95       	ret

000014aa <vfprintf>:
    14aa:	ac e0       	ldi	r26, 0x0C	; 12
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	eb e5       	ldi	r30, 0x5B	; 91
    14b0:	fa e0       	ldi	r31, 0x0A	; 10
    14b2:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <__prologue_saves__>
    14b6:	7c 01       	movw	r14, r24
    14b8:	6b 01       	movw	r12, r22
    14ba:	8a 01       	movw	r16, r20
    14bc:	fc 01       	movw	r30, r24
    14be:	17 82       	std	Z+7, r1	; 0x07
    14c0:	16 82       	std	Z+6, r1	; 0x06
    14c2:	83 81       	ldd	r24, Z+3	; 0x03
    14c4:	81 ff       	sbrs	r24, 1
    14c6:	bd c1       	rjmp	.+890    	; 0x1842 <vfprintf+0x398>
    14c8:	ce 01       	movw	r24, r28
    14ca:	01 96       	adiw	r24, 0x01	; 1
    14cc:	4c 01       	movw	r8, r24
    14ce:	f7 01       	movw	r30, r14
    14d0:	93 81       	ldd	r25, Z+3	; 0x03
    14d2:	f6 01       	movw	r30, r12
    14d4:	93 fd       	sbrc	r25, 3
    14d6:	85 91       	lpm	r24, Z+
    14d8:	93 ff       	sbrs	r25, 3
    14da:	81 91       	ld	r24, Z+
    14dc:	6f 01       	movw	r12, r30
    14de:	88 23       	and	r24, r24
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <vfprintf+0x3a>
    14e2:	ab c1       	rjmp	.+854    	; 0x183a <vfprintf+0x390>
    14e4:	85 32       	cpi	r24, 0x25	; 37
    14e6:	39 f4       	brne	.+14     	; 0x14f6 <vfprintf+0x4c>
    14e8:	93 fd       	sbrc	r25, 3
    14ea:	85 91       	lpm	r24, Z+
    14ec:	93 ff       	sbrs	r25, 3
    14ee:	81 91       	ld	r24, Z+
    14f0:	6f 01       	movw	r12, r30
    14f2:	85 32       	cpi	r24, 0x25	; 37
    14f4:	29 f4       	brne	.+10     	; 0x1500 <vfprintf+0x56>
    14f6:	b7 01       	movw	r22, r14
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <fputc>
    14fe:	e7 cf       	rjmp	.-50     	; 0x14ce <vfprintf+0x24>
    1500:	51 2c       	mov	r5, r1
    1502:	31 2c       	mov	r3, r1
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	20 32       	cpi	r18, 0x20	; 32
    1508:	a0 f4       	brcc	.+40     	; 0x1532 <vfprintf+0x88>
    150a:	8b 32       	cpi	r24, 0x2B	; 43
    150c:	69 f0       	breq	.+26     	; 0x1528 <vfprintf+0x7e>
    150e:	30 f4       	brcc	.+12     	; 0x151c <vfprintf+0x72>
    1510:	80 32       	cpi	r24, 0x20	; 32
    1512:	59 f0       	breq	.+22     	; 0x152a <vfprintf+0x80>
    1514:	83 32       	cpi	r24, 0x23	; 35
    1516:	69 f4       	brne	.+26     	; 0x1532 <vfprintf+0x88>
    1518:	20 61       	ori	r18, 0x10	; 16
    151a:	2c c0       	rjmp	.+88     	; 0x1574 <vfprintf+0xca>
    151c:	8d 32       	cpi	r24, 0x2D	; 45
    151e:	39 f0       	breq	.+14     	; 0x152e <vfprintf+0x84>
    1520:	80 33       	cpi	r24, 0x30	; 48
    1522:	39 f4       	brne	.+14     	; 0x1532 <vfprintf+0x88>
    1524:	21 60       	ori	r18, 0x01	; 1
    1526:	26 c0       	rjmp	.+76     	; 0x1574 <vfprintf+0xca>
    1528:	22 60       	ori	r18, 0x02	; 2
    152a:	24 60       	ori	r18, 0x04	; 4
    152c:	23 c0       	rjmp	.+70     	; 0x1574 <vfprintf+0xca>
    152e:	28 60       	ori	r18, 0x08	; 8
    1530:	21 c0       	rjmp	.+66     	; 0x1574 <vfprintf+0xca>
    1532:	27 fd       	sbrc	r18, 7
    1534:	27 c0       	rjmp	.+78     	; 0x1584 <vfprintf+0xda>
    1536:	30 ed       	ldi	r19, 0xD0	; 208
    1538:	38 0f       	add	r19, r24
    153a:	3a 30       	cpi	r19, 0x0A	; 10
    153c:	78 f4       	brcc	.+30     	; 0x155c <vfprintf+0xb2>
    153e:	26 ff       	sbrs	r18, 6
    1540:	06 c0       	rjmp	.+12     	; 0x154e <vfprintf+0xa4>
    1542:	fa e0       	ldi	r31, 0x0A	; 10
    1544:	5f 9e       	mul	r5, r31
    1546:	30 0d       	add	r19, r0
    1548:	11 24       	eor	r1, r1
    154a:	53 2e       	mov	r5, r19
    154c:	13 c0       	rjmp	.+38     	; 0x1574 <vfprintf+0xca>
    154e:	8a e0       	ldi	r24, 0x0A	; 10
    1550:	38 9e       	mul	r3, r24
    1552:	30 0d       	add	r19, r0
    1554:	11 24       	eor	r1, r1
    1556:	33 2e       	mov	r3, r19
    1558:	20 62       	ori	r18, 0x20	; 32
    155a:	0c c0       	rjmp	.+24     	; 0x1574 <vfprintf+0xca>
    155c:	8e 32       	cpi	r24, 0x2E	; 46
    155e:	21 f4       	brne	.+8      	; 0x1568 <vfprintf+0xbe>
    1560:	26 fd       	sbrc	r18, 6
    1562:	6b c1       	rjmp	.+726    	; 0x183a <vfprintf+0x390>
    1564:	20 64       	ori	r18, 0x40	; 64
    1566:	06 c0       	rjmp	.+12     	; 0x1574 <vfprintf+0xca>
    1568:	8c 36       	cpi	r24, 0x6C	; 108
    156a:	11 f4       	brne	.+4      	; 0x1570 <vfprintf+0xc6>
    156c:	20 68       	ori	r18, 0x80	; 128
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <vfprintf+0xca>
    1570:	88 36       	cpi	r24, 0x68	; 104
    1572:	41 f4       	brne	.+16     	; 0x1584 <vfprintf+0xda>
    1574:	f6 01       	movw	r30, r12
    1576:	93 fd       	sbrc	r25, 3
    1578:	85 91       	lpm	r24, Z+
    157a:	93 ff       	sbrs	r25, 3
    157c:	81 91       	ld	r24, Z+
    157e:	6f 01       	movw	r12, r30
    1580:	81 11       	cpse	r24, r1
    1582:	c1 cf       	rjmp	.-126    	; 0x1506 <vfprintf+0x5c>
    1584:	98 2f       	mov	r25, r24
    1586:	9f 7d       	andi	r25, 0xDF	; 223
    1588:	95 54       	subi	r25, 0x45	; 69
    158a:	93 30       	cpi	r25, 0x03	; 3
    158c:	28 f4       	brcc	.+10     	; 0x1598 <vfprintf+0xee>
    158e:	0c 5f       	subi	r16, 0xFC	; 252
    1590:	1f 4f       	sbci	r17, 0xFF	; 255
    1592:	ff e3       	ldi	r31, 0x3F	; 63
    1594:	f9 83       	std	Y+1, r31	; 0x01
    1596:	0d c0       	rjmp	.+26     	; 0x15b2 <vfprintf+0x108>
    1598:	83 36       	cpi	r24, 0x63	; 99
    159a:	31 f0       	breq	.+12     	; 0x15a8 <vfprintf+0xfe>
    159c:	83 37       	cpi	r24, 0x73	; 115
    159e:	71 f0       	breq	.+28     	; 0x15bc <vfprintf+0x112>
    15a0:	83 35       	cpi	r24, 0x53	; 83
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <vfprintf+0xfc>
    15a4:	5b c0       	rjmp	.+182    	; 0x165c <vfprintf+0x1b2>
    15a6:	22 c0       	rjmp	.+68     	; 0x15ec <vfprintf+0x142>
    15a8:	f8 01       	movw	r30, r16
    15aa:	80 81       	ld	r24, Z
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	0e 5f       	subi	r16, 0xFE	; 254
    15b0:	1f 4f       	sbci	r17, 0xFF	; 255
    15b2:	44 24       	eor	r4, r4
    15b4:	43 94       	inc	r4
    15b6:	51 2c       	mov	r5, r1
    15b8:	54 01       	movw	r10, r8
    15ba:	15 c0       	rjmp	.+42     	; 0x15e6 <vfprintf+0x13c>
    15bc:	38 01       	movw	r6, r16
    15be:	f2 e0       	ldi	r31, 0x02	; 2
    15c0:	6f 0e       	add	r6, r31
    15c2:	71 1c       	adc	r7, r1
    15c4:	f8 01       	movw	r30, r16
    15c6:	a0 80       	ld	r10, Z
    15c8:	b1 80       	ldd	r11, Z+1	; 0x01
    15ca:	26 ff       	sbrs	r18, 6
    15cc:	03 c0       	rjmp	.+6      	; 0x15d4 <vfprintf+0x12a>
    15ce:	65 2d       	mov	r22, r5
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <vfprintf+0x12e>
    15d4:	6f ef       	ldi	r22, 0xFF	; 255
    15d6:	7f ef       	ldi	r23, 0xFF	; 255
    15d8:	c5 01       	movw	r24, r10
    15da:	2c 87       	std	Y+12, r18	; 0x0c
    15dc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <strnlen>
    15e0:	2c 01       	movw	r4, r24
    15e2:	83 01       	movw	r16, r6
    15e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    15e6:	2f 77       	andi	r18, 0x7F	; 127
    15e8:	22 2e       	mov	r2, r18
    15ea:	17 c0       	rjmp	.+46     	; 0x161a <vfprintf+0x170>
    15ec:	38 01       	movw	r6, r16
    15ee:	f2 e0       	ldi	r31, 0x02	; 2
    15f0:	6f 0e       	add	r6, r31
    15f2:	71 1c       	adc	r7, r1
    15f4:	f8 01       	movw	r30, r16
    15f6:	a0 80       	ld	r10, Z
    15f8:	b1 80       	ldd	r11, Z+1	; 0x01
    15fa:	26 ff       	sbrs	r18, 6
    15fc:	03 c0       	rjmp	.+6      	; 0x1604 <vfprintf+0x15a>
    15fe:	65 2d       	mov	r22, r5
    1600:	70 e0       	ldi	r23, 0x00	; 0
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <vfprintf+0x15e>
    1604:	6f ef       	ldi	r22, 0xFF	; 255
    1606:	7f ef       	ldi	r23, 0xFF	; 255
    1608:	c5 01       	movw	r24, r10
    160a:	2c 87       	std	Y+12, r18	; 0x0c
    160c:	0e 94 43 0c 	call	0x1886	; 0x1886 <strnlen_P>
    1610:	2c 01       	movw	r4, r24
    1612:	2c 85       	ldd	r18, Y+12	; 0x0c
    1614:	20 68       	ori	r18, 0x80	; 128
    1616:	22 2e       	mov	r2, r18
    1618:	83 01       	movw	r16, r6
    161a:	23 fc       	sbrc	r2, 3
    161c:	1b c0       	rjmp	.+54     	; 0x1654 <vfprintf+0x1aa>
    161e:	83 2d       	mov	r24, r3
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	48 16       	cp	r4, r24
    1624:	59 06       	cpc	r5, r25
    1626:	b0 f4       	brcc	.+44     	; 0x1654 <vfprintf+0x1aa>
    1628:	b7 01       	movw	r22, r14
    162a:	80 e2       	ldi	r24, 0x20	; 32
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <fputc>
    1632:	3a 94       	dec	r3
    1634:	f4 cf       	rjmp	.-24     	; 0x161e <vfprintf+0x174>
    1636:	f5 01       	movw	r30, r10
    1638:	27 fc       	sbrc	r2, 7
    163a:	85 91       	lpm	r24, Z+
    163c:	27 fe       	sbrs	r2, 7
    163e:	81 91       	ld	r24, Z+
    1640:	5f 01       	movw	r10, r30
    1642:	b7 01       	movw	r22, r14
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <fputc>
    164a:	31 10       	cpse	r3, r1
    164c:	3a 94       	dec	r3
    164e:	f1 e0       	ldi	r31, 0x01	; 1
    1650:	4f 1a       	sub	r4, r31
    1652:	51 08       	sbc	r5, r1
    1654:	41 14       	cp	r4, r1
    1656:	51 04       	cpc	r5, r1
    1658:	71 f7       	brne	.-36     	; 0x1636 <vfprintf+0x18c>
    165a:	e5 c0       	rjmp	.+458    	; 0x1826 <vfprintf+0x37c>
    165c:	84 36       	cpi	r24, 0x64	; 100
    165e:	11 f0       	breq	.+4      	; 0x1664 <vfprintf+0x1ba>
    1660:	89 36       	cpi	r24, 0x69	; 105
    1662:	39 f5       	brne	.+78     	; 0x16b2 <vfprintf+0x208>
    1664:	f8 01       	movw	r30, r16
    1666:	27 ff       	sbrs	r18, 7
    1668:	07 c0       	rjmp	.+14     	; 0x1678 <vfprintf+0x1ce>
    166a:	60 81       	ld	r22, Z
    166c:	71 81       	ldd	r23, Z+1	; 0x01
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	0c 5f       	subi	r16, 0xFC	; 252
    1674:	1f 4f       	sbci	r17, 0xFF	; 255
    1676:	08 c0       	rjmp	.+16     	; 0x1688 <vfprintf+0x1de>
    1678:	60 81       	ld	r22, Z
    167a:	71 81       	ldd	r23, Z+1	; 0x01
    167c:	88 27       	eor	r24, r24
    167e:	77 fd       	sbrc	r23, 7
    1680:	80 95       	com	r24
    1682:	98 2f       	mov	r25, r24
    1684:	0e 5f       	subi	r16, 0xFE	; 254
    1686:	1f 4f       	sbci	r17, 0xFF	; 255
    1688:	2f 76       	andi	r18, 0x6F	; 111
    168a:	b2 2e       	mov	r11, r18
    168c:	97 ff       	sbrs	r25, 7
    168e:	09 c0       	rjmp	.+18     	; 0x16a2 <vfprintf+0x1f8>
    1690:	90 95       	com	r25
    1692:	80 95       	com	r24
    1694:	70 95       	com	r23
    1696:	61 95       	neg	r22
    1698:	7f 4f       	sbci	r23, 0xFF	; 255
    169a:	8f 4f       	sbci	r24, 0xFF	; 255
    169c:	9f 4f       	sbci	r25, 0xFF	; 255
    169e:	20 68       	ori	r18, 0x80	; 128
    16a0:	b2 2e       	mov	r11, r18
    16a2:	2a e0       	ldi	r18, 0x0A	; 10
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	a4 01       	movw	r20, r8
    16a8:	0e 94 92 0c 	call	0x1924	; 0x1924 <__ultoa_invert>
    16ac:	a8 2e       	mov	r10, r24
    16ae:	a8 18       	sub	r10, r8
    16b0:	44 c0       	rjmp	.+136    	; 0x173a <vfprintf+0x290>
    16b2:	85 37       	cpi	r24, 0x75	; 117
    16b4:	29 f4       	brne	.+10     	; 0x16c0 <vfprintf+0x216>
    16b6:	2f 7e       	andi	r18, 0xEF	; 239
    16b8:	b2 2e       	mov	r11, r18
    16ba:	2a e0       	ldi	r18, 0x0A	; 10
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	25 c0       	rjmp	.+74     	; 0x170a <vfprintf+0x260>
    16c0:	f2 2f       	mov	r31, r18
    16c2:	f9 7f       	andi	r31, 0xF9	; 249
    16c4:	bf 2e       	mov	r11, r31
    16c6:	8f 36       	cpi	r24, 0x6F	; 111
    16c8:	c1 f0       	breq	.+48     	; 0x16fa <vfprintf+0x250>
    16ca:	18 f4       	brcc	.+6      	; 0x16d2 <vfprintf+0x228>
    16cc:	88 35       	cpi	r24, 0x58	; 88
    16ce:	79 f0       	breq	.+30     	; 0x16ee <vfprintf+0x244>
    16d0:	b4 c0       	rjmp	.+360    	; 0x183a <vfprintf+0x390>
    16d2:	80 37       	cpi	r24, 0x70	; 112
    16d4:	19 f0       	breq	.+6      	; 0x16dc <vfprintf+0x232>
    16d6:	88 37       	cpi	r24, 0x78	; 120
    16d8:	21 f0       	breq	.+8      	; 0x16e2 <vfprintf+0x238>
    16da:	af c0       	rjmp	.+350    	; 0x183a <vfprintf+0x390>
    16dc:	2f 2f       	mov	r18, r31
    16de:	20 61       	ori	r18, 0x10	; 16
    16e0:	b2 2e       	mov	r11, r18
    16e2:	b4 fe       	sbrs	r11, 4
    16e4:	0d c0       	rjmp	.+26     	; 0x1700 <vfprintf+0x256>
    16e6:	8b 2d       	mov	r24, r11
    16e8:	84 60       	ori	r24, 0x04	; 4
    16ea:	b8 2e       	mov	r11, r24
    16ec:	09 c0       	rjmp	.+18     	; 0x1700 <vfprintf+0x256>
    16ee:	24 ff       	sbrs	r18, 4
    16f0:	0a c0       	rjmp	.+20     	; 0x1706 <vfprintf+0x25c>
    16f2:	9f 2f       	mov	r25, r31
    16f4:	96 60       	ori	r25, 0x06	; 6
    16f6:	b9 2e       	mov	r11, r25
    16f8:	06 c0       	rjmp	.+12     	; 0x1706 <vfprintf+0x25c>
    16fa:	28 e0       	ldi	r18, 0x08	; 8
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	05 c0       	rjmp	.+10     	; 0x170a <vfprintf+0x260>
    1700:	20 e1       	ldi	r18, 0x10	; 16
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	02 c0       	rjmp	.+4      	; 0x170a <vfprintf+0x260>
    1706:	20 e1       	ldi	r18, 0x10	; 16
    1708:	32 e0       	ldi	r19, 0x02	; 2
    170a:	f8 01       	movw	r30, r16
    170c:	b7 fe       	sbrs	r11, 7
    170e:	07 c0       	rjmp	.+14     	; 0x171e <vfprintf+0x274>
    1710:	60 81       	ld	r22, Z
    1712:	71 81       	ldd	r23, Z+1	; 0x01
    1714:	82 81       	ldd	r24, Z+2	; 0x02
    1716:	93 81       	ldd	r25, Z+3	; 0x03
    1718:	0c 5f       	subi	r16, 0xFC	; 252
    171a:	1f 4f       	sbci	r17, 0xFF	; 255
    171c:	06 c0       	rjmp	.+12     	; 0x172a <vfprintf+0x280>
    171e:	60 81       	ld	r22, Z
    1720:	71 81       	ldd	r23, Z+1	; 0x01
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 5f       	subi	r16, 0xFE	; 254
    1728:	1f 4f       	sbci	r17, 0xFF	; 255
    172a:	a4 01       	movw	r20, r8
    172c:	0e 94 92 0c 	call	0x1924	; 0x1924 <__ultoa_invert>
    1730:	a8 2e       	mov	r10, r24
    1732:	a8 18       	sub	r10, r8
    1734:	fb 2d       	mov	r31, r11
    1736:	ff 77       	andi	r31, 0x7F	; 127
    1738:	bf 2e       	mov	r11, r31
    173a:	b6 fe       	sbrs	r11, 6
    173c:	0b c0       	rjmp	.+22     	; 0x1754 <vfprintf+0x2aa>
    173e:	2b 2d       	mov	r18, r11
    1740:	2e 7f       	andi	r18, 0xFE	; 254
    1742:	a5 14       	cp	r10, r5
    1744:	50 f4       	brcc	.+20     	; 0x175a <vfprintf+0x2b0>
    1746:	b4 fe       	sbrs	r11, 4
    1748:	0a c0       	rjmp	.+20     	; 0x175e <vfprintf+0x2b4>
    174a:	b2 fc       	sbrc	r11, 2
    174c:	08 c0       	rjmp	.+16     	; 0x175e <vfprintf+0x2b4>
    174e:	2b 2d       	mov	r18, r11
    1750:	2e 7e       	andi	r18, 0xEE	; 238
    1752:	05 c0       	rjmp	.+10     	; 0x175e <vfprintf+0x2b4>
    1754:	7a 2c       	mov	r7, r10
    1756:	2b 2d       	mov	r18, r11
    1758:	03 c0       	rjmp	.+6      	; 0x1760 <vfprintf+0x2b6>
    175a:	7a 2c       	mov	r7, r10
    175c:	01 c0       	rjmp	.+2      	; 0x1760 <vfprintf+0x2b6>
    175e:	75 2c       	mov	r7, r5
    1760:	24 ff       	sbrs	r18, 4
    1762:	0d c0       	rjmp	.+26     	; 0x177e <vfprintf+0x2d4>
    1764:	fe 01       	movw	r30, r28
    1766:	ea 0d       	add	r30, r10
    1768:	f1 1d       	adc	r31, r1
    176a:	80 81       	ld	r24, Z
    176c:	80 33       	cpi	r24, 0x30	; 48
    176e:	11 f4       	brne	.+4      	; 0x1774 <vfprintf+0x2ca>
    1770:	29 7e       	andi	r18, 0xE9	; 233
    1772:	09 c0       	rjmp	.+18     	; 0x1786 <vfprintf+0x2dc>
    1774:	22 ff       	sbrs	r18, 2
    1776:	06 c0       	rjmp	.+12     	; 0x1784 <vfprintf+0x2da>
    1778:	73 94       	inc	r7
    177a:	73 94       	inc	r7
    177c:	04 c0       	rjmp	.+8      	; 0x1786 <vfprintf+0x2dc>
    177e:	82 2f       	mov	r24, r18
    1780:	86 78       	andi	r24, 0x86	; 134
    1782:	09 f0       	breq	.+2      	; 0x1786 <vfprintf+0x2dc>
    1784:	73 94       	inc	r7
    1786:	23 fd       	sbrc	r18, 3
    1788:	13 c0       	rjmp	.+38     	; 0x17b0 <vfprintf+0x306>
    178a:	20 ff       	sbrs	r18, 0
    178c:	06 c0       	rjmp	.+12     	; 0x179a <vfprintf+0x2f0>
    178e:	5a 2c       	mov	r5, r10
    1790:	73 14       	cp	r7, r3
    1792:	18 f4       	brcc	.+6      	; 0x179a <vfprintf+0x2f0>
    1794:	53 0c       	add	r5, r3
    1796:	57 18       	sub	r5, r7
    1798:	73 2c       	mov	r7, r3
    179a:	73 14       	cp	r7, r3
    179c:	68 f4       	brcc	.+26     	; 0x17b8 <vfprintf+0x30e>
    179e:	b7 01       	movw	r22, r14
    17a0:	80 e2       	ldi	r24, 0x20	; 32
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	2c 87       	std	Y+12, r18	; 0x0c
    17a6:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <fputc>
    17aa:	73 94       	inc	r7
    17ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    17ae:	f5 cf       	rjmp	.-22     	; 0x179a <vfprintf+0x2f0>
    17b0:	73 14       	cp	r7, r3
    17b2:	10 f4       	brcc	.+4      	; 0x17b8 <vfprintf+0x30e>
    17b4:	37 18       	sub	r3, r7
    17b6:	01 c0       	rjmp	.+2      	; 0x17ba <vfprintf+0x310>
    17b8:	31 2c       	mov	r3, r1
    17ba:	24 ff       	sbrs	r18, 4
    17bc:	12 c0       	rjmp	.+36     	; 0x17e2 <vfprintf+0x338>
    17be:	b7 01       	movw	r22, r14
    17c0:	80 e3       	ldi	r24, 0x30	; 48
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	2c 87       	std	Y+12, r18	; 0x0c
    17c6:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <fputc>
    17ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    17cc:	22 ff       	sbrs	r18, 2
    17ce:	17 c0       	rjmp	.+46     	; 0x17fe <vfprintf+0x354>
    17d0:	21 ff       	sbrs	r18, 1
    17d2:	03 c0       	rjmp	.+6      	; 0x17da <vfprintf+0x330>
    17d4:	88 e5       	ldi	r24, 0x58	; 88
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <vfprintf+0x334>
    17da:	88 e7       	ldi	r24, 0x78	; 120
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	b7 01       	movw	r22, r14
    17e0:	0c c0       	rjmp	.+24     	; 0x17fa <vfprintf+0x350>
    17e2:	82 2f       	mov	r24, r18
    17e4:	86 78       	andi	r24, 0x86	; 134
    17e6:	59 f0       	breq	.+22     	; 0x17fe <vfprintf+0x354>
    17e8:	21 fd       	sbrc	r18, 1
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <vfprintf+0x346>
    17ec:	80 e2       	ldi	r24, 0x20	; 32
    17ee:	01 c0       	rjmp	.+2      	; 0x17f2 <vfprintf+0x348>
    17f0:	8b e2       	ldi	r24, 0x2B	; 43
    17f2:	27 fd       	sbrc	r18, 7
    17f4:	8d e2       	ldi	r24, 0x2D	; 45
    17f6:	b7 01       	movw	r22, r14
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <fputc>
    17fe:	a5 14       	cp	r10, r5
    1800:	38 f4       	brcc	.+14     	; 0x1810 <vfprintf+0x366>
    1802:	b7 01       	movw	r22, r14
    1804:	80 e3       	ldi	r24, 0x30	; 48
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <fputc>
    180c:	5a 94       	dec	r5
    180e:	f7 cf       	rjmp	.-18     	; 0x17fe <vfprintf+0x354>
    1810:	aa 94       	dec	r10
    1812:	f4 01       	movw	r30, r8
    1814:	ea 0d       	add	r30, r10
    1816:	f1 1d       	adc	r31, r1
    1818:	80 81       	ld	r24, Z
    181a:	b7 01       	movw	r22, r14
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <fputc>
    1822:	a1 10       	cpse	r10, r1
    1824:	f5 cf       	rjmp	.-22     	; 0x1810 <vfprintf+0x366>
    1826:	33 20       	and	r3, r3
    1828:	09 f4       	brne	.+2      	; 0x182c <vfprintf+0x382>
    182a:	51 ce       	rjmp	.-862    	; 0x14ce <vfprintf+0x24>
    182c:	b7 01       	movw	r22, r14
    182e:	80 e2       	ldi	r24, 0x20	; 32
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <fputc>
    1836:	3a 94       	dec	r3
    1838:	f6 cf       	rjmp	.-20     	; 0x1826 <vfprintf+0x37c>
    183a:	f7 01       	movw	r30, r14
    183c:	86 81       	ldd	r24, Z+6	; 0x06
    183e:	97 81       	ldd	r25, Z+7	; 0x07
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <vfprintf+0x39c>
    1842:	8f ef       	ldi	r24, 0xFF	; 255
    1844:	9f ef       	ldi	r25, 0xFF	; 255
    1846:	2c 96       	adiw	r28, 0x0c	; 12
    1848:	e2 e1       	ldi	r30, 0x12	; 18
    184a:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__epilogue_restores__>

0000184e <calloc>:
    184e:	0f 93       	push	r16
    1850:	1f 93       	push	r17
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	86 9f       	mul	r24, r22
    1858:	80 01       	movw	r16, r0
    185a:	87 9f       	mul	r24, r23
    185c:	10 0d       	add	r17, r0
    185e:	96 9f       	mul	r25, r22
    1860:	10 0d       	add	r17, r0
    1862:	11 24       	eor	r1, r1
    1864:	c8 01       	movw	r24, r16
    1866:	0e 94 3b 08 	call	0x1076	; 0x1076 <malloc>
    186a:	ec 01       	movw	r28, r24
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	29 f0       	breq	.+10     	; 0x187a <calloc+0x2c>
    1870:	a8 01       	movw	r20, r16
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	0e 94 4e 0c 	call	0x189c	; 0x189c <memset>
    187a:	ce 01       	movw	r24, r28
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	08 95       	ret

00001886 <strnlen_P>:
    1886:	fc 01       	movw	r30, r24
    1888:	05 90       	lpm	r0, Z+
    188a:	61 50       	subi	r22, 0x01	; 1
    188c:	70 40       	sbci	r23, 0x00	; 0
    188e:	01 10       	cpse	r0, r1
    1890:	d8 f7       	brcc	.-10     	; 0x1888 <strnlen_P+0x2>
    1892:	80 95       	com	r24
    1894:	90 95       	com	r25
    1896:	8e 0f       	add	r24, r30
    1898:	9f 1f       	adc	r25, r31
    189a:	08 95       	ret

0000189c <memset>:
    189c:	dc 01       	movw	r26, r24
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <memset+0x6>
    18a0:	6d 93       	st	X+, r22
    18a2:	41 50       	subi	r20, 0x01	; 1
    18a4:	50 40       	sbci	r21, 0x00	; 0
    18a6:	e0 f7       	brcc	.-8      	; 0x18a0 <memset+0x4>
    18a8:	08 95       	ret

000018aa <strnlen>:
    18aa:	fc 01       	movw	r30, r24
    18ac:	61 50       	subi	r22, 0x01	; 1
    18ae:	70 40       	sbci	r23, 0x00	; 0
    18b0:	01 90       	ld	r0, Z+
    18b2:	01 10       	cpse	r0, r1
    18b4:	d8 f7       	brcc	.-10     	; 0x18ac <strnlen+0x2>
    18b6:	80 95       	com	r24
    18b8:	90 95       	com	r25
    18ba:	8e 0f       	add	r24, r30
    18bc:	9f 1f       	adc	r25, r31
    18be:	08 95       	ret

000018c0 <fputc>:
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	18 2f       	mov	r17, r24
    18ca:	09 2f       	mov	r16, r25
    18cc:	eb 01       	movw	r28, r22
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	81 fd       	sbrc	r24, 1
    18d2:	03 c0       	rjmp	.+6      	; 0x18da <fputc+0x1a>
    18d4:	8f ef       	ldi	r24, 0xFF	; 255
    18d6:	9f ef       	ldi	r25, 0xFF	; 255
    18d8:	20 c0       	rjmp	.+64     	; 0x191a <fputc+0x5a>
    18da:	82 ff       	sbrs	r24, 2
    18dc:	10 c0       	rjmp	.+32     	; 0x18fe <fputc+0x3e>
    18de:	4e 81       	ldd	r20, Y+6	; 0x06
    18e0:	5f 81       	ldd	r21, Y+7	; 0x07
    18e2:	2c 81       	ldd	r18, Y+4	; 0x04
    18e4:	3d 81       	ldd	r19, Y+5	; 0x05
    18e6:	42 17       	cp	r20, r18
    18e8:	53 07       	cpc	r21, r19
    18ea:	7c f4       	brge	.+30     	; 0x190a <fputc+0x4a>
    18ec:	e8 81       	ld	r30, Y
    18ee:	f9 81       	ldd	r31, Y+1	; 0x01
    18f0:	9f 01       	movw	r18, r30
    18f2:	2f 5f       	subi	r18, 0xFF	; 255
    18f4:	3f 4f       	sbci	r19, 0xFF	; 255
    18f6:	39 83       	std	Y+1, r19	; 0x01
    18f8:	28 83       	st	Y, r18
    18fa:	10 83       	st	Z, r17
    18fc:	06 c0       	rjmp	.+12     	; 0x190a <fputc+0x4a>
    18fe:	e8 85       	ldd	r30, Y+8	; 0x08
    1900:	f9 85       	ldd	r31, Y+9	; 0x09
    1902:	81 2f       	mov	r24, r17
    1904:	09 95       	icall
    1906:	89 2b       	or	r24, r25
    1908:	29 f7       	brne	.-54     	; 0x18d4 <fputc+0x14>
    190a:	2e 81       	ldd	r18, Y+6	; 0x06
    190c:	3f 81       	ldd	r19, Y+7	; 0x07
    190e:	2f 5f       	subi	r18, 0xFF	; 255
    1910:	3f 4f       	sbci	r19, 0xFF	; 255
    1912:	3f 83       	std	Y+7, r19	; 0x07
    1914:	2e 83       	std	Y+6, r18	; 0x06
    1916:	81 2f       	mov	r24, r17
    1918:	90 2f       	mov	r25, r16
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	08 95       	ret

00001924 <__ultoa_invert>:
    1924:	fa 01       	movw	r30, r20
    1926:	aa 27       	eor	r26, r26
    1928:	28 30       	cpi	r18, 0x08	; 8
    192a:	51 f1       	breq	.+84     	; 0x1980 <__ultoa_invert+0x5c>
    192c:	20 31       	cpi	r18, 0x10	; 16
    192e:	81 f1       	breq	.+96     	; 0x1990 <__ultoa_invert+0x6c>
    1930:	e8 94       	clt
    1932:	6f 93       	push	r22
    1934:	6e 7f       	andi	r22, 0xFE	; 254
    1936:	6e 5f       	subi	r22, 0xFE	; 254
    1938:	7f 4f       	sbci	r23, 0xFF	; 255
    193a:	8f 4f       	sbci	r24, 0xFF	; 255
    193c:	9f 4f       	sbci	r25, 0xFF	; 255
    193e:	af 4f       	sbci	r26, 0xFF	; 255
    1940:	b1 e0       	ldi	r27, 0x01	; 1
    1942:	3e d0       	rcall	.+124    	; 0x19c0 <__ultoa_invert+0x9c>
    1944:	b4 e0       	ldi	r27, 0x04	; 4
    1946:	3c d0       	rcall	.+120    	; 0x19c0 <__ultoa_invert+0x9c>
    1948:	67 0f       	add	r22, r23
    194a:	78 1f       	adc	r23, r24
    194c:	89 1f       	adc	r24, r25
    194e:	9a 1f       	adc	r25, r26
    1950:	a1 1d       	adc	r26, r1
    1952:	68 0f       	add	r22, r24
    1954:	79 1f       	adc	r23, r25
    1956:	8a 1f       	adc	r24, r26
    1958:	91 1d       	adc	r25, r1
    195a:	a1 1d       	adc	r26, r1
    195c:	6a 0f       	add	r22, r26
    195e:	71 1d       	adc	r23, r1
    1960:	81 1d       	adc	r24, r1
    1962:	91 1d       	adc	r25, r1
    1964:	a1 1d       	adc	r26, r1
    1966:	20 d0       	rcall	.+64     	; 0x19a8 <__ultoa_invert+0x84>
    1968:	09 f4       	brne	.+2      	; 0x196c <__ultoa_invert+0x48>
    196a:	68 94       	set
    196c:	3f 91       	pop	r19
    196e:	2a e0       	ldi	r18, 0x0A	; 10
    1970:	26 9f       	mul	r18, r22
    1972:	11 24       	eor	r1, r1
    1974:	30 19       	sub	r19, r0
    1976:	30 5d       	subi	r19, 0xD0	; 208
    1978:	31 93       	st	Z+, r19
    197a:	de f6       	brtc	.-74     	; 0x1932 <__ultoa_invert+0xe>
    197c:	cf 01       	movw	r24, r30
    197e:	08 95       	ret
    1980:	46 2f       	mov	r20, r22
    1982:	47 70       	andi	r20, 0x07	; 7
    1984:	40 5d       	subi	r20, 0xD0	; 208
    1986:	41 93       	st	Z+, r20
    1988:	b3 e0       	ldi	r27, 0x03	; 3
    198a:	0f d0       	rcall	.+30     	; 0x19aa <__ultoa_invert+0x86>
    198c:	c9 f7       	brne	.-14     	; 0x1980 <__ultoa_invert+0x5c>
    198e:	f6 cf       	rjmp	.-20     	; 0x197c <__ultoa_invert+0x58>
    1990:	46 2f       	mov	r20, r22
    1992:	4f 70       	andi	r20, 0x0F	; 15
    1994:	40 5d       	subi	r20, 0xD0	; 208
    1996:	4a 33       	cpi	r20, 0x3A	; 58
    1998:	18 f0       	brcs	.+6      	; 0x19a0 <__ultoa_invert+0x7c>
    199a:	49 5d       	subi	r20, 0xD9	; 217
    199c:	31 fd       	sbrc	r19, 1
    199e:	40 52       	subi	r20, 0x20	; 32
    19a0:	41 93       	st	Z+, r20
    19a2:	02 d0       	rcall	.+4      	; 0x19a8 <__ultoa_invert+0x84>
    19a4:	a9 f7       	brne	.-22     	; 0x1990 <__ultoa_invert+0x6c>
    19a6:	ea cf       	rjmp	.-44     	; 0x197c <__ultoa_invert+0x58>
    19a8:	b4 e0       	ldi	r27, 0x04	; 4
    19aa:	a6 95       	lsr	r26
    19ac:	97 95       	ror	r25
    19ae:	87 95       	ror	r24
    19b0:	77 95       	ror	r23
    19b2:	67 95       	ror	r22
    19b4:	ba 95       	dec	r27
    19b6:	c9 f7       	brne	.-14     	; 0x19aa <__ultoa_invert+0x86>
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	61 05       	cpc	r22, r1
    19bc:	71 05       	cpc	r23, r1
    19be:	08 95       	ret
    19c0:	9b 01       	movw	r18, r22
    19c2:	ac 01       	movw	r20, r24
    19c4:	0a 2e       	mov	r0, r26
    19c6:	06 94       	lsr	r0
    19c8:	57 95       	ror	r21
    19ca:	47 95       	ror	r20
    19cc:	37 95       	ror	r19
    19ce:	27 95       	ror	r18
    19d0:	ba 95       	dec	r27
    19d2:	c9 f7       	brne	.-14     	; 0x19c6 <__ultoa_invert+0xa2>
    19d4:	62 0f       	add	r22, r18
    19d6:	73 1f       	adc	r23, r19
    19d8:	84 1f       	adc	r24, r20
    19da:	95 1f       	adc	r25, r21
    19dc:	a0 1d       	adc	r26, r0
    19de:	08 95       	ret

000019e0 <__divmodsi4>:
    19e0:	05 2e       	mov	r0, r21
    19e2:	97 fb       	bst	r25, 7
    19e4:	1e f4       	brtc	.+6      	; 0x19ec <__divmodsi4+0xc>
    19e6:	00 94       	com	r0
    19e8:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__negsi2>
    19ec:	57 fd       	sbrc	r21, 7
    19ee:	07 d0       	rcall	.+14     	; 0x19fe <__divmodsi4_neg2>
    19f0:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__udivmodsi4>
    19f4:	07 fc       	sbrc	r0, 7
    19f6:	03 d0       	rcall	.+6      	; 0x19fe <__divmodsi4_neg2>
    19f8:	4e f4       	brtc	.+18     	; 0x1a0c <__divmodsi4_exit>
    19fa:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__negsi2>

000019fe <__divmodsi4_neg2>:
    19fe:	50 95       	com	r21
    1a00:	40 95       	com	r20
    1a02:	30 95       	com	r19
    1a04:	21 95       	neg	r18
    1a06:	3f 4f       	sbci	r19, 0xFF	; 255
    1a08:	4f 4f       	sbci	r20, 0xFF	; 255
    1a0a:	5f 4f       	sbci	r21, 0xFF	; 255

00001a0c <__divmodsi4_exit>:
    1a0c:	08 95       	ret

00001a0e <__negsi2>:
    1a0e:	90 95       	com	r25
    1a10:	80 95       	com	r24
    1a12:	70 95       	com	r23
    1a14:	61 95       	neg	r22
    1a16:	7f 4f       	sbci	r23, 0xFF	; 255
    1a18:	8f 4f       	sbci	r24, 0xFF	; 255
    1a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1c:	08 95       	ret

00001a1e <__muluhisi3>:
    1a1e:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__umulhisi3>
    1a22:	a5 9f       	mul	r26, r21
    1a24:	90 0d       	add	r25, r0
    1a26:	b4 9f       	mul	r27, r20
    1a28:	90 0d       	add	r25, r0
    1a2a:	a4 9f       	mul	r26, r20
    1a2c:	80 0d       	add	r24, r0
    1a2e:	91 1d       	adc	r25, r1
    1a30:	11 24       	eor	r1, r1
    1a32:	08 95       	ret

00001a34 <__mulshisi3>:
    1a34:	b7 ff       	sbrs	r27, 7
    1a36:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__muluhisi3>

00001a3a <__mulohisi3>:
    1a3a:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__muluhisi3>
    1a3e:	82 1b       	sub	r24, r18
    1a40:	93 0b       	sbc	r25, r19
    1a42:	08 95       	ret

00001a44 <__prologue_saves__>:
    1a44:	2f 92       	push	r2
    1a46:	3f 92       	push	r3
    1a48:	4f 92       	push	r4
    1a4a:	5f 92       	push	r5
    1a4c:	6f 92       	push	r6
    1a4e:	7f 92       	push	r7
    1a50:	8f 92       	push	r8
    1a52:	9f 92       	push	r9
    1a54:	af 92       	push	r10
    1a56:	bf 92       	push	r11
    1a58:	cf 92       	push	r12
    1a5a:	df 92       	push	r13
    1a5c:	ef 92       	push	r14
    1a5e:	ff 92       	push	r15
    1a60:	0f 93       	push	r16
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	ca 1b       	sub	r28, r26
    1a6e:	db 0b       	sbc	r29, r27
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	09 94       	ijmp

00001a7c <__epilogue_restores__>:
    1a7c:	2a 88       	ldd	r2, Y+18	; 0x12
    1a7e:	39 88       	ldd	r3, Y+17	; 0x11
    1a80:	48 88       	ldd	r4, Y+16	; 0x10
    1a82:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a84:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a86:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a88:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a8e:	b9 84       	ldd	r11, Y+9	; 0x09
    1a90:	c8 84       	ldd	r12, Y+8	; 0x08
    1a92:	df 80       	ldd	r13, Y+7	; 0x07
    1a94:	ee 80       	ldd	r14, Y+6	; 0x06
    1a96:	fd 80       	ldd	r15, Y+5	; 0x05
    1a98:	0c 81       	ldd	r16, Y+4	; 0x04
    1a9a:	1b 81       	ldd	r17, Y+3	; 0x03
    1a9c:	aa 81       	ldd	r26, Y+2	; 0x02
    1a9e:	b9 81       	ldd	r27, Y+1	; 0x01
    1aa0:	ce 0f       	add	r28, r30
    1aa2:	d1 1d       	adc	r29, r1
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	ed 01       	movw	r28, r26
    1ab0:	08 95       	ret

00001ab2 <__udivmodsi4>:
    1ab2:	a1 e2       	ldi	r26, 0x21	; 33
    1ab4:	1a 2e       	mov	r1, r26
    1ab6:	aa 1b       	sub	r26, r26
    1ab8:	bb 1b       	sub	r27, r27
    1aba:	fd 01       	movw	r30, r26
    1abc:	0d c0       	rjmp	.+26     	; 0x1ad8 <__udivmodsi4_ep>

00001abe <__udivmodsi4_loop>:
    1abe:	aa 1f       	adc	r26, r26
    1ac0:	bb 1f       	adc	r27, r27
    1ac2:	ee 1f       	adc	r30, r30
    1ac4:	ff 1f       	adc	r31, r31
    1ac6:	a2 17       	cp	r26, r18
    1ac8:	b3 07       	cpc	r27, r19
    1aca:	e4 07       	cpc	r30, r20
    1acc:	f5 07       	cpc	r31, r21
    1ace:	20 f0       	brcs	.+8      	; 0x1ad8 <__udivmodsi4_ep>
    1ad0:	a2 1b       	sub	r26, r18
    1ad2:	b3 0b       	sbc	r27, r19
    1ad4:	e4 0b       	sbc	r30, r20
    1ad6:	f5 0b       	sbc	r31, r21

00001ad8 <__udivmodsi4_ep>:
    1ad8:	66 1f       	adc	r22, r22
    1ada:	77 1f       	adc	r23, r23
    1adc:	88 1f       	adc	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	1a 94       	dec	r1
    1ae2:	69 f7       	brne	.-38     	; 0x1abe <__udivmodsi4_loop>
    1ae4:	60 95       	com	r22
    1ae6:	70 95       	com	r23
    1ae8:	80 95       	com	r24
    1aea:	90 95       	com	r25
    1aec:	9b 01       	movw	r18, r22
    1aee:	ac 01       	movw	r20, r24
    1af0:	bd 01       	movw	r22, r26
    1af2:	cf 01       	movw	r24, r30
    1af4:	08 95       	ret

00001af6 <__umulhisi3>:
    1af6:	a2 9f       	mul	r26, r18
    1af8:	b0 01       	movw	r22, r0
    1afa:	b3 9f       	mul	r27, r19
    1afc:	c0 01       	movw	r24, r0
    1afe:	a3 9f       	mul	r26, r19
    1b00:	70 0d       	add	r23, r0
    1b02:	81 1d       	adc	r24, r1
    1b04:	11 24       	eor	r1, r1
    1b06:	91 1d       	adc	r25, r1
    1b08:	b2 9f       	mul	r27, r18
    1b0a:	70 0d       	add	r23, r0
    1b0c:	81 1d       	adc	r24, r1
    1b0e:	11 24       	eor	r1, r1
    1b10:	91 1d       	adc	r25, r1
    1b12:	08 95       	ret

00001b14 <_exit>:
    1b14:	f8 94       	cli

00001b16 <__stop_program>:
    1b16:	ff cf       	rjmp	.-2      	; 0x1b16 <__stop_program>
