
ByggernGruppe48H2015.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000022a  00800100  00002250  000022e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002250  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  0080032a  0080032a  0000250e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000250e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003e0  00000000  00000000  0000256a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003c12  00000000  00000000  0000294a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001543  00000000  00000000  0000655c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001584  00000000  00000000  00007a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a70  00000000  00000000  00009024  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009b7  00000000  00000000  00009a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f72  00000000  00000000  0000a44b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000358  00000000  00000000  0000c3bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <gui_print_menu+0x28>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e0 e5       	ldi	r30, 0x50	; 80
     37c:	f2 e2       	ldi	r31, 0x22	; 34
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 32       	cpi	r26, 0x2A	; 42
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	aa e2       	ldi	r26, 0x2A	; 42
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	aa 34       	cpi	r26, 0x4A	; 74
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 c1 06 	call	0xd82	; 0xd82 <main>
     39e:	0c 94 26 11 	jmp	0x224c	; 0x224c <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_init>:
#include <string.h>
#include <util/delay.h>



void can_init(int mode){
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	ec 01       	movw	r28, r24

	mcp2515_init();
     3ac:	0e 94 23 07 	call	0xe46	; 0xe46 <mcp2515_init>
	mcp2515_bit_modify(MCP_RXB0CTRL, MCP_MASK_FILTER, 0xff);
     3b0:	4f ef       	ldi	r20, 0xFF	; 255
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	60 e6       	ldi	r22, 0x60	; 96
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	80 e6       	ldi	r24, 0x60	; 96
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 05 07 	call	0xe0a	; 0xe0a <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXB1CTRL, MCP_MASK_FILTER, 0xff);
     3c0:	4f ef       	ldi	r20, 0xFF	; 255
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	60 e6       	ldi	r22, 0x60	; 96
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 e7       	ldi	r24, 0x70	; 112
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 05 07 	call	0xe0a	; 0xe0a <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, mode);
     3d0:	ae 01       	movw	r20, r28
     3d2:	60 ee       	ldi	r22, 0xE0	; 224
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	8f e0       	ldi	r24, 0x0F	; 15
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 05 07 	call	0xe0a	; 0xe0a <mcp2515_bit_modify>
	DDRE &= ~(1 << PE0);
     3de:	30 98       	cbi	0x06, 0	; 6
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <can_transmit>:

void can_transmit(can_message* msg, int buffer_select){
     3e6:	8f 92       	push	r8
     3e8:	9f 92       	push	r9
     3ea:	af 92       	push	r10
     3ec:	bf 92       	push	r11
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	00 d0       	rcall	.+0      	; 0x400 <can_transmit+0x1a>
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
     404:	5c 01       	movw	r10, r24
     406:	7b 01       	movw	r14, r22
	
	mcp2515_bit_modify(buffer_select, 0x08, 0xff);
     408:	4f ef       	ldi	r20, 0xFF	; 255
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	68 e0       	ldi	r22, 0x08	; 8
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	c7 01       	movw	r24, r14
     412:	0e 94 05 07 	call	0xe0a	; 0xe0a <mcp2515_bit_modify>
	
	while(mcp2515_read(buffer_select) & (1 << MCP_TXREQ));
     416:	c7 01       	movw	r24, r14
     418:	0e 94 df 06 	call	0xdbe	; 0xdbe <mcp2515_read>
     41c:	83 fd       	sbrc	r24, 3
     41e:	fb cf       	rjmp	.-10     	; 0x416 <can_transmit+0x30>
	
	volatile uint8_t idl = MCP2515_MASK_IDL & (msg->id << 5);
     420:	f5 01       	movw	r30, r10
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	28 2f       	mov	r18, r24
     428:	22 95       	swap	r18
     42a:	22 0f       	add	r18, r18
     42c:	20 7e       	andi	r18, 0xE0	; 224
     42e:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t idh = MCP2515_MASK_IDH & (msg->id >> 3);
     430:	96 95       	lsr	r25
     432:	87 95       	ror	r24
     434:	96 95       	lsr	r25
     436:	87 95       	ror	r24
     438:	96 95       	lsr	r25
     43a:	87 95       	ror	r24
     43c:	8a 83       	std	Y+2, r24	; 0x02
	
	mcp2515_write(buffer_select + MCP2515_IDL_OFFSET, idl); //3 LSB
     43e:	69 81       	ldd	r22, Y+1	; 0x01
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	c7 01       	movw	r24, r14
     444:	02 96       	adiw	r24, 0x02	; 2
     446:	0e 94 ee 06 	call	0xddc	; 0xddc <mcp2515_write>
	mcp2515_write(buffer_select + MCP2515_IDH_OFFSET, idh); //8 MSB
     44a:	6a 81       	ldd	r22, Y+2	; 0x02
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	c7 01       	movw	r24, r14
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	0e 94 ee 06 	call	0xddc	; 0xddc <mcp2515_write>
	
	mcp2515_write(buffer_select + MCP2515_DLC_OFFSET, MCP2515_MASK_DLC & (msg->length));
     456:	f5 01       	movw	r30, r10
     458:	62 81       	ldd	r22, Z+2	; 0x02
     45a:	6f 70       	andi	r22, 0x0F	; 15
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	c7 01       	movw	r24, r14
     460:	05 96       	adiw	r24, 0x05	; 5
     462:	0e 94 ee 06 	call	0xddc	; 0xddc <mcp2515_write>
	
	
	for(int i = 0; i < msg->length; i++){
     466:	f5 01       	movw	r30, r10
     468:	82 81       	ldd	r24, Z+2	; 0x02
     46a:	88 23       	and	r24, r24
     46c:	d9 f0       	breq	.+54     	; 0x4a4 <can_transmit+0xbe>
     46e:	65 01       	movw	r12, r10
     470:	f3 e0       	ldi	r31, 0x03	; 3
     472:	cf 0e       	add	r12, r31
     474:	d1 1c       	adc	r13, r1
     476:	00 e0       	ldi	r16, 0x00	; 0
     478:	10 e0       	ldi	r17, 0x00	; 0
     47a:	47 01       	movw	r8, r14
     47c:	86 e0       	ldi	r24, 0x06	; 6
     47e:	88 0e       	add	r8, r24
     480:	91 1c       	adc	r9, r1
		mcp2515_write(buffer_select + MCP2515_TXB_OFFSET + i, msg->data[i]);
     482:	f6 01       	movw	r30, r12
     484:	61 91       	ld	r22, Z+
     486:	6f 01       	movw	r12, r30
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	c4 01       	movw	r24, r8
     48c:	80 0f       	add	r24, r16
     48e:	91 1f       	adc	r25, r17
     490:	0e 94 ee 06 	call	0xddc	; 0xddc <mcp2515_write>
	mcp2515_write(buffer_select + MCP2515_IDH_OFFSET, idh); //8 MSB
	
	mcp2515_write(buffer_select + MCP2515_DLC_OFFSET, MCP2515_MASK_DLC & (msg->length));
	
	
	for(int i = 0; i < msg->length; i++){
     494:	0f 5f       	subi	r16, 0xFF	; 255
     496:	1f 4f       	sbci	r17, 0xFF	; 255
     498:	f5 01       	movw	r30, r10
     49a:	82 81       	ldd	r24, Z+2	; 0x02
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	08 17       	cp	r16, r24
     4a0:	19 07       	cpc	r17, r25
     4a2:	7c f3       	brlt	.-34     	; 0x482 <can_transmit+0x9c>
		
	}
	
	int buffer_control;
	
	if (buffer_select == MCP_TXB0CTRL){
     4a4:	f0 e3       	ldi	r31, 0x30	; 48
     4a6:	ef 16       	cp	r14, r31
     4a8:	f1 04       	cpc	r15, r1
     4aa:	59 f0       	breq	.+22     	; 0x4c2 <can_transmit+0xdc>
		buffer_control = MCP_RTS_TX0;
	}
	else if (buffer_select == MCP_TXB1CTRL){
     4ac:	80 e4       	ldi	r24, 0x40	; 64
     4ae:	e8 16       	cp	r14, r24
     4b0:	f1 04       	cpc	r15, r1
     4b2:	51 f0       	breq	.+20     	; 0x4c8 <can_transmit+0xe2>
		buffer_control = MCP_RTS_TX1;
	}
	else if (buffer_select == MCP_TXB2CTRL){
     4b4:	e0 e5       	ldi	r30, 0x50	; 80
     4b6:	ee 16       	cp	r14, r30
     4b8:	f1 04       	cpc	r15, r1
     4ba:	51 f4       	brne	.+20     	; 0x4d0 <can_transmit+0xea>
		buffer_control=MCP_RTS_TX2;
     4bc:	84 e8       	ldi	r24, 0x84	; 132
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	05 c0       	rjmp	.+10     	; 0x4cc <can_transmit+0xe6>
	}
	
	int buffer_control;
	
	if (buffer_select == MCP_TXB0CTRL){
		buffer_control = MCP_RTS_TX0;
     4c2:	81 e8       	ldi	r24, 0x81	; 129
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <can_transmit+0xe6>
	}
	else if (buffer_select == MCP_TXB1CTRL){
		buffer_control = MCP_RTS_TX1;
     4c8:	82 e8       	ldi	r24, 0x82	; 130
     4ca:	90 e0       	ldi	r25, 0x00	; 0
		return; 
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
     4cc:	0e 94 00 07 	call	0xe00	; 0xe00 <mcp2515_request_to_send>
}
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	9f 90       	pop	r9
     4ea:	8f 90       	pop	r8
     4ec:	08 95       	ret

000004ee <can_poll_interrupt>:
}


uint8_t can_poll_interrupt(){
	
	while(!(PINE & (1 << PE0))){}
     4ee:	28 9b       	sbis	0x05, 0	; 5
     4f0:	fe cf       	rjmp	.-4      	; 0x4ee <can_poll_interrupt>
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
     4f2:	8c e2       	ldi	r24, 0x2C	; 44
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 df 06 	call	0xdbe	; 0xdbe <mcp2515_read>
     4fa:	80 fd       	sbrc	r24, 0
     4fc:	08 c0       	rjmp	.+16     	; 0x50e <__stack+0xf>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
	}
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
     4fe:	8c e2       	ldi	r24, 0x2C	; 44
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 df 06 	call	0xdbe	; 0xdbe <mcp2515_read>
     506:	81 ff       	sbrs	r24, 1
     508:	04 c0       	rjmp	.+8      	; 0x512 <__stack+0x13>
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
     50a:	80 e7       	ldi	r24, 0x70	; 112
     50c:	08 95       	ret
	
	while(!(PINE & (1 << PE0))){}
	
	if(mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
		return MCP_RXB0CTRL;
     50e:	80 e6       	ldi	r24, 0x60	; 96
     510:	08 95       	ret
	
	else if(mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
		//mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
		return MCP_RXB1CTRL;
	}
	return -1;
     512:	8f ef       	ldi	r24, 0xFF	; 255
}
     514:	08 95       	ret

00000516 <can_recieve>:
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
}

can_message can_recieve(can_message* msg){
     516:	7f 92       	push	r7
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	2b 97       	sbiw	r28, 0x0b	; 11
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	6c 01       	movw	r12, r24
	can_message m;
	
	uint8_t buffer_select = can_poll_interrupt();
     542:	0e 94 77 02 	call	0x4ee	; 0x4ee <can_poll_interrupt>
     546:	98 2e       	mov	r9, r24
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
     548:	08 2f       	mov	r16, r24
     54a:	10 e0       	ldi	r17, 0x00	; 0
     54c:	c8 01       	movw	r24, r16
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	0e 94 df 06 	call	0xdbe	; 0xdbe <mcp2515_read>
     554:	7c 01       	movw	r14, r24
     556:	c8 01       	movw	r24, r16
     558:	02 96       	adiw	r24, 0x02	; 2
     55a:	0e 94 df 06 	call	0xdbe	; 0xdbe <mcp2515_read>
     55e:	95 95       	asr	r25
     560:	87 95       	ror	r24
     562:	95 95       	asr	r25
     564:	87 95       	ror	r24
     566:	95 95       	asr	r25
     568:	87 95       	ror	r24
     56a:	95 95       	asr	r25
     56c:	87 95       	ror	r24
     56e:	95 95       	asr	r25
     570:	87 95       	ror	r24
     572:	ee 0c       	add	r14, r14
     574:	ff 1c       	adc	r15, r15
     576:	ee 0c       	add	r14, r14
     578:	ff 1c       	adc	r15, r15
     57a:	ee 0c       	add	r14, r14
     57c:	ff 1c       	adc	r15, r15
     57e:	5c 01       	movw	r10, r24
     580:	ae 28       	or	r10, r14
     582:	bf 28       	or	r11, r15
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
     584:	c8 01       	movw	r24, r16
     586:	05 96       	adiw	r24, 0x05	; 5
     588:	0e 94 df 06 	call	0xdbe	; 0xdbe <mcp2515_read>
     58c:	8f 70       	andi	r24, 0x0F	; 15
     58e:	78 2e       	mov	r7, r24
	
	for(uint8_t i = 0; i < m.length; i++){
     590:	b1 f0       	breq	.+44     	; 0x5be <can_recieve+0xa8>
     592:	8e 01       	movw	r16, r28
     594:	0c 5f       	subi	r16, 0xFC	; 252
     596:	1f 4f       	sbci	r17, 0xFF	; 255
     598:	81 2c       	mov	r8, r1
     59a:	ce 01       	movw	r24, r28
     59c:	80 95       	com	r24
     59e:	90 95       	com	r25
     5a0:	03 96       	adiw	r24, 0x03	; 3
     5a2:	7c 01       	movw	r14, r24
     5a4:	e9 0c       	add	r14, r9
     5a6:	f1 1c       	adc	r15, r1
		m.data[i] = mcp2515_read(buffer_select + MCP2515_RXB_OFFSET + i);// + i, msg->data[i]);
     5a8:	c7 01       	movw	r24, r14
     5aa:	80 0f       	add	r24, r16
     5ac:	91 1f       	adc	r25, r17
     5ae:	0e 94 df 06 	call	0xdbe	; 0xdbe <mcp2515_read>
     5b2:	f8 01       	movw	r30, r16
     5b4:	81 93       	st	Z+, r24
     5b6:	8f 01       	movw	r16, r30
	uint8_t buffer_select = can_poll_interrupt();
	
	m.id = mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5);
	m.length = mcp2515_read(buffer_select + MCP2515_DLC_OFFSET) & MCP2515_MASK_DLC;
	
	for(uint8_t i = 0; i < m.length; i++){
     5b8:	83 94       	inc	r8
     5ba:	87 10       	cpse	r8, r7
     5bc:	f5 cf       	rjmp	.-22     	; 0x5a8 <can_recieve+0x92>
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) << 3 | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	
	switch(buffer_select){
     5be:	f0 e6       	ldi	r31, 0x60	; 96
     5c0:	9f 16       	cp	r9, r31
     5c2:	21 f0       	breq	.+8      	; 0x5cc <can_recieve+0xb6>
     5c4:	80 e7       	ldi	r24, 0x70	; 112
     5c6:	98 16       	cp	r9, r24
     5c8:	51 f0       	breq	.+20     	; 0x5de <can_recieve+0xc8>
     5ca:	11 c0       	rjmp	.+34     	; 0x5ee <can_recieve+0xd8>
		case MCP_RXB0CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	61 e0       	ldi	r22, 0x01	; 1
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	8c e2       	ldi	r24, 0x2C	; 44
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 05 07 	call	0xe0a	; 0xe0a <mcp2515_bit_modify>
		break;
     5dc:	08 c0       	rjmp	.+16     	; 0x5ee <can_recieve+0xd8>
		case MCP_RXB1CTRL:
			mcp2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	62 e0       	ldi	r22, 0x02	; 2
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	8c e2       	ldi	r24, 0x2C	; 44
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 05 07 	call	0xe0a	; 0xe0a <mcp2515_bit_modify>
		break;
	}
	
	return m;
     5ee:	ba 82       	std	Y+2, r11	; 0x02
     5f0:	a9 82       	std	Y+1, r10	; 0x01
     5f2:	7b 82       	std	Y+3, r7	; 0x03
     5f4:	8b e0       	ldi	r24, 0x0B	; 11
     5f6:	fe 01       	movw	r30, r28
     5f8:	31 96       	adiw	r30, 0x01	; 1
     5fa:	d6 01       	movw	r26, r12
     5fc:	01 90       	ld	r0, Z+
     5fe:	0d 92       	st	X+, r0
     600:	8a 95       	dec	r24
     602:	e1 f7       	brne	.-8      	; 0x5fc <can_recieve+0xe6>
}
     604:	c6 01       	movw	r24, r12
     606:	2b 96       	adiw	r28, 0x0b	; 11
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	cd bf       	out	0x3d, r28	; 61
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	ff 90       	pop	r15
     61c:	ef 90       	pop	r14
     61e:	df 90       	pop	r13
     620:	cf 90       	pop	r12
     622:	bf 90       	pop	r11
     624:	af 90       	pop	r10
     626:	9f 90       	pop	r9
     628:	8f 90       	pop	r8
     62a:	7f 90       	pop	r7
     62c:	08 95       	ret

0000062e <can_test_loopback>:

In other words, Node 2 is told to test the can driver
by a can message. Yes, CAN see the irony.
**********************************************************/

void can_test_loopback(){
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
     636:	a1 97       	sbiw	r28, 0x21	; 33
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	cd bf       	out	0x3d, r28	; 61
	can_init(MODE_LOOPBACK);
     642:	80 e4       	ldi	r24, 0x40	; 64
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
	
	can_message msg;
	msg.id = CAN_TEST_LOOPBACK;
     64a:	8c e2       	ldi	r24, 0x2C	; 44
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	9a 83       	std	Y+2, r25	; 0x02
     650:	89 83       	std	Y+1, r24	; 0x01
	msg.length = 1;
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	8b 83       	std	Y+3, r24	; 0x03
	msg.data[0] = 'T';
     656:	84 e5       	ldi	r24, 0x54	; 84
     658:	8c 83       	std	Y+4, r24	; 0x04
	
	can_transmit(&msg, MCP_TXB0CTRL);
     65a:	60 e3       	ldi	r22, 0x30	; 48
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	ce 01       	movw	r24, r28
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <can_transmit>
	
	can_message recieved;
	can_message done = can_recieve(&recieved);
     666:	be 01       	movw	r22, r28
     668:	64 5f       	subi	r22, 0xF4	; 244
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	ce 01       	movw	r24, r28
     66e:	47 96       	adiw	r24, 0x17	; 23
     670:	0e 94 8b 02 	call	0x516	; 0x516 <can_recieve>
	
	printf("\n\nSend ID = 10\tRecieved ID = %d\nSend Length = 1\tRecieved Length = %d\nSend Data = 'T'\tRecieved Data = %c\n\n", done.id, done.length, done.data[0]);
     674:	8a 8d       	ldd	r24, Y+26	; 0x1a
     676:	1f 92       	push	r1
     678:	8f 93       	push	r24
     67a:	89 8d       	ldd	r24, Y+25	; 0x19
     67c:	1f 92       	push	r1
     67e:	8f 93       	push	r24
     680:	88 8d       	ldd	r24, Y+24	; 0x18
     682:	8f 93       	push	r24
     684:	8f 89       	ldd	r24, Y+23	; 0x17
     686:	8f 93       	push	r24
     688:	8a e0       	ldi	r24, 0x0A	; 10
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	9f 93       	push	r25
     68e:	8f 93       	push	r24
     690:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <printf>
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	de bf       	out	0x3e, r29	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	cd bf       	out	0x3d, r28	; 61
	
	
}
     69e:	a1 96       	adiw	r28, 0x21	; 33
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	08 95       	ret

000006b0 <canjoy_transmit>:


uint16_t CANJOY_ID = 7;

void canjoy_transmit()
{
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	cd b7       	in	r28, 0x3d	; 61
     6b6:	de b7       	in	r29, 0x3e	; 62
     6b8:	2b 97       	sbiw	r28, 0x0b	; 11
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	cd bf       	out	0x3d, r28	; 61
	can_message joy;
	joy.id = GAME_ID;
     6c4:	87 e0       	ldi	r24, 0x07	; 7
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	9a 83       	std	Y+2, r25	; 0x02
     6ca:	89 83       	std	Y+1, r24	; 0x01
	joy.length = 7;
     6cc:	8b 83       	std	Y+3, r24	; 0x03
	//printf("ID set to 7\n");
	
	joy.data[0] = joystick_read_x();
     6ce:	0e 94 75 06 	call	0xcea	; 0xcea <joystick_read_x>
     6d2:	8c 83       	std	Y+4, r24	; 0x04
	joy.data[1] = joystick_read_y();
     6d4:	0e 94 80 06 	call	0xd00	; 0xd00 <joystick_read_y>
     6d8:	8d 83       	std	Y+5, r24	; 0x05
	joy.data[2] = joystick_button_read();
     6da:	0e 94 b5 06 	call	0xd6a	; 0xd6a <joystick_button_read>
     6de:	8e 83       	std	Y+6, r24	; 0x06
	joy.data[3] = slider_left_read();
     6e0:	0e 94 95 06 	call	0xd2a	; 0xd2a <slider_left_read>
     6e4:	8f 83       	std	Y+7, r24	; 0x07
	joy.data[4] = slider_right_read();
     6e6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <slider_right_read>
     6ea:	88 87       	std	Y+8, r24	; 0x08
	joy.data[5] = button_left_read();
     6ec:	0e 94 b9 06 	call	0xd72	; 0xd72 <button_left_read>
     6f0:	89 87       	std	Y+9, r24	; 0x09
	joy.data[6] = button_right_read();
     6f2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <button_right_read>
     6f6:	8a 87       	std	Y+10, r24	; 0x0a
	
	can_transmit(&joy, MCP_TXB0CTRL);
     6f8:	60 e3       	ldi	r22, 0x30	; 48
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ce 01       	movw	r24, r28
     6fe:	01 96       	adiw	r24, 0x01	; 1
     700:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <can_transmit>
	
	

}
     704:	2b 96       	adiw	r28, 0x0b	; 11
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	de bf       	out	0x3e, r29	; 62
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <canjoy_recieve>:


//Not needed in Node1
can_message canjoy_recieve(){
     716:	8f 92       	push	r8
     718:	9f 92       	push	r9
     71a:	af 92       	push	r10
     71c:	bf 92       	push	r11
     71e:	cf 92       	push	r12
     720:	df 92       	push	r13
     722:	ef 92       	push	r14
     724:	ff 92       	push	r15
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	2b 97       	sbiw	r28, 0x0b	; 11
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	de bf       	out	0x3e, r29	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	cd bf       	out	0x3d, r28	; 61
     73e:	8c 01       	movw	r16, r24
	
	can_message unused;
	
	can_message joy = can_recieve(&unused);
     740:	be 01       	movw	r22, r28
     742:	6f 5f       	subi	r22, 0xFF	; 255
     744:	7f 4f       	sbci	r23, 0xFF	; 255
     746:	0e 94 8b 02 	call	0x516	; 0x516 <can_recieve>
     74a:	f8 01       	movw	r30, r16
     74c:	82 80       	ldd	r8, Z+2	; 0x02
     74e:	93 80       	ldd	r9, Z+3	; 0x03
     750:	a4 80       	ldd	r10, Z+4	; 0x04
     752:	b5 80       	ldd	r11, Z+5	; 0x05
     754:	c6 80       	ldd	r12, Z+6	; 0x06
     756:	d7 80       	ldd	r13, Z+7	; 0x07
     758:	e0 84       	ldd	r14, Z+8	; 0x08
     75a:	f1 84       	ldd	r15, Z+9	; 0x09
	
	if(joy.id == GAME_ID){
     75c:	80 81       	ld	r24, Z
     75e:	91 81       	ldd	r25, Z+1	; 0x01
     760:	07 97       	sbiw	r24, 0x07	; 7
     762:	f1 f4       	brne	.+60     	; 0x7a0 <canjoy_recieve+0x8a>
		printf("Correct ID\n");
     764:	85 ea       	ldi	r24, 0xA5	; 165
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <puts>
		canjoy_msg = joy;
     76c:	f8 01       	movw	r30, r16
     76e:	82 82       	std	Z+2, r8	; 0x02
     770:	93 82       	std	Z+3, r9	; 0x03
     772:	a4 82       	std	Z+4, r10	; 0x04
     774:	b5 82       	std	Z+5, r11	; 0x05
     776:	c6 82       	std	Z+6, r12	; 0x06
     778:	d7 82       	std	Z+7, r13	; 0x07
     77a:	e0 86       	std	Z+8, r14	; 0x08
     77c:	f1 86       	std	Z+9, r15	; 0x09
     77e:	8b e0       	ldi	r24, 0x0B	; 11
     780:	ad e2       	ldi	r26, 0x2D	; 45
     782:	b3 e0       	ldi	r27, 0x03	; 3
     784:	01 90       	ld	r0, Z+
     786:	0d 92       	st	X+, r0
     788:	8a 95       	dec	r24
     78a:	e1 f7       	brne	.-8      	; 0x784 <canjoy_recieve+0x6e>
		return joy;
     78c:	f8 01       	movw	r30, r16
     78e:	82 82       	std	Z+2, r8	; 0x02
     790:	93 82       	std	Z+3, r9	; 0x03
     792:	a4 82       	std	Z+4, r10	; 0x04
     794:	b5 82       	std	Z+5, r11	; 0x05
     796:	c6 82       	std	Z+6, r12	; 0x06
     798:	d7 82       	std	Z+7, r13	; 0x07
     79a:	e0 86       	std	Z+8, r14	; 0x08
     79c:	f1 86       	std	Z+9, r15	; 0x09
     79e:	0a c0       	rjmp	.+20     	; 0x7b4 <canjoy_recieve+0x9e>
	joy.data[2] = 0;
	joy.data[3] = 0;
	joy.data[4] = 0;
	joy.data[5] = 0;
	joy.data[6] = 0;
	return joy;
     7a0:	87 e0       	ldi	r24, 0x07	; 7
     7a2:	f8 01       	movw	r30, r16
     7a4:	82 83       	std	Z+2, r24	; 0x02
     7a6:	13 82       	std	Z+3, r1	; 0x03
     7a8:	14 82       	std	Z+4, r1	; 0x04
     7aa:	15 82       	std	Z+5, r1	; 0x05
     7ac:	16 82       	std	Z+6, r1	; 0x06
     7ae:	17 82       	std	Z+7, r1	; 0x07
     7b0:	10 86       	std	Z+8, r1	; 0x08
     7b2:	11 86       	std	Z+9, r1	; 0x09
}
     7b4:	c8 01       	movw	r24, r16
     7b6:	2b 96       	adiw	r28, 0x0b	; 11
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	df 90       	pop	r13
     7d0:	cf 90       	pop	r12
     7d2:	bf 90       	pop	r11
     7d4:	af 90       	pop	r10
     7d6:	9f 90       	pop	r9
     7d8:	8f 90       	pop	r8
     7da:	08 95       	ret

000007dc <game_save_highscore>:
	
}

void game_save_highscore(){
	
	oled_clear_screen();
     7dc:	0e 94 e6 09 	call	0x13cc	; 0x13cc <oled_clear_screen>
	
	oled_put_string(0*8 , 0, "Score: %i", global_score);
     7e0:	80 91 2b 03 	lds	r24, 0x032B
     7e4:	8f 93       	push	r24
     7e6:	80 91 2a 03 	lds	r24, 0x032A
     7ea:	8f 93       	push	r24
     7ec:	8c eb       	ldi	r24, 0xBC	; 188
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	9f 93       	push	r25
     7f2:	8f 93       	push	r24
     7f4:	1f 92       	push	r1
     7f6:	1f 92       	push	r1
     7f8:	0e 94 a4 0a 	call	0x1548	; 0x1548 <oled_put_string>
	oled_put_string(0*8, 4, "P1");
     7fc:	86 ec       	ldi	r24, 0xC6	; 198
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	9f 93       	push	r25
     802:	8f 93       	push	r24
     804:	d4 e0       	ldi	r29, 0x04	; 4
     806:	df 93       	push	r29
     808:	1f 92       	push	r1
     80a:	0e 94 a4 0a 	call	0x1548	; 0x1548 <oled_put_string>
	oled_put_string(3*8, 3, "P2");
     80e:	89 ec       	ldi	r24, 0xC9	; 201
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	9f 93       	push	r25
     814:	8f 93       	push	r24
     816:	83 e0       	ldi	r24, 0x03	; 3
     818:	8f 93       	push	r24
     81a:	c8 e1       	ldi	r28, 0x18	; 24
     81c:	cf 93       	push	r28
     81e:	0e 94 a4 0a 	call	0x1548	; 0x1548 <oled_put_string>
	oled_put_string(7*8, 4, "P3");
     822:	8c ec       	ldi	r24, 0xCC	; 204
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	9f 93       	push	r25
     828:	8f 93       	push	r24
     82a:	df 93       	push	r29
     82c:	88 e3       	ldi	r24, 0x38	; 56
     82e:	8f 93       	push	r24
     830:	0e 94 a4 0a 	call	0x1548	; 0x1548 <oled_put_string>
	oled_put_string(3*8, 5, "P4");
     834:	8f ec       	ldi	r24, 0xCF	; 207
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	9f 93       	push	r25
     83a:	8f 93       	push	r24
     83c:	85 e0       	ldi	r24, 0x05	; 5
     83e:	8f 93       	push	r24
     840:	cf 93       	push	r28
     842:	0e 94 a4 0a 	call	0x1548	; 0x1548 <oled_put_string>

	oled_write_screen();
     846:	0e 94 8b 09 	call	0x1316	; 0x1316 <oled_write_screen>
     84a:	8d b7       	in	r24, 0x3d	; 61
     84c:	9e b7       	in	r25, 0x3e	; 62
     84e:	46 96       	adiw	r24, 0x16	; 22
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	9e bf       	out	0x3e, r25	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	8d bf       	out	0x3d, r24	; 61
     85a:	ff cf       	rjmp	.-2      	; 0x85a <game_save_highscore+0x7e>

0000085c <game_over>:
	}
	
}


void game_over(){
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	61 97       	sbiw	r28, 0x11	; 17
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	cd bf       	out	0x3d, r28	; 61
	oled_clear_screen();
     870:	0e 94 e6 09 	call	0x13cc	; 0x13cc <oled_clear_screen>
	oled_store_string((char[10]){"GAME OVER"}, 3*8, 3);
     874:	8a e0       	ldi	r24, 0x0A	; 10
     876:	e2 ed       	ldi	r30, 0xD2	; 210
     878:	f1 e0       	ldi	r31, 0x01	; 1
     87a:	de 01       	movw	r26, r28
     87c:	18 96       	adiw	r26, 0x08	; 8
     87e:	01 90       	ld	r0, Z+
     880:	0d 92       	st	X+, r0
     882:	8a 95       	dec	r24
     884:	e1 f7       	brne	.-8      	; 0x87e <game_over+0x22>
     886:	43 e0       	ldi	r20, 0x03	; 3
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	68 e1       	ldi	r22, 0x18	; 24
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	ce 01       	movw	r24, r28
     890:	08 96       	adiw	r24, 0x08	; 8
     892:	0e 94 75 09 	call	0x12ea	; 0x12ea <oled_store_string>
	oled_store_string((char[7]){"Return"}, 0, 7);
     896:	87 e0       	ldi	r24, 0x07	; 7
     898:	ec ed       	ldi	r30, 0xDC	; 220
     89a:	f1 e0       	ldi	r31, 0x01	; 1
     89c:	de 01       	movw	r26, r28
     89e:	11 96       	adiw	r26, 0x01	; 1
     8a0:	01 90       	ld	r0, Z+
     8a2:	0d 92       	st	X+, r0
     8a4:	8a 95       	dec	r24
     8a6:	e1 f7       	brne	.-8      	; 0x8a0 <game_over+0x44>
     8a8:	47 e0       	ldi	r20, 0x07	; 7
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	ce 01       	movw	r24, r28
     8b2:	01 96       	adiw	r24, 0x01	; 1
     8b4:	0e 94 75 09 	call	0x12ea	; 0x12ea <oled_store_string>
	oled_put_string(3*8, 5, "Score: %i", global_score);
     8b8:	80 91 2b 03 	lds	r24, 0x032B
     8bc:	8f 93       	push	r24
     8be:	80 91 2a 03 	lds	r24, 0x032A
     8c2:	8f 93       	push	r24
     8c4:	8c eb       	ldi	r24, 0xBC	; 188
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	9f 93       	push	r25
     8ca:	8f 93       	push	r24
     8cc:	85 e0       	ldi	r24, 0x05	; 5
     8ce:	8f 93       	push	r24
     8d0:	88 e1       	ldi	r24, 0x18	; 24
     8d2:	8f 93       	push	r24
     8d4:	0e 94 a4 0a 	call	0x1548	; 0x1548 <oled_put_string>

	oled_write_screen();
     8d8:	0e 94 8b 09 	call	0x1316	; 0x1316 <oled_write_screen>
	
	uint8_t number = 125; 

	oled_write_screen();
     8dc:	0e 94 8b 09 	call	0x1316	; 0x1316 <oled_write_screen>
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
	
	while(1){
		if(button_left_read()){
     8ec:	0e 94 b9 06 	call	0xd72	; 0xd72 <button_left_read>
     8f0:	81 11       	cpse	r24, r1
     8f2:	0f c0       	rjmp	.+30     	; 0x912 <game_over+0xb6>
			return;
		}
		
		if(timer_read(TIMER_3) > 80){
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	0e 94 81 0b 	call	0x1702	; 0x1702 <timer_read>
     8fa:	81 35       	cpi	r24, 0x51	; 81
     8fc:	91 05       	cpc	r25, r1
     8fe:	18 f0       	brcs	.+6      	; 0x906 <game_over+0xaa>
			
			//oled_store_string((char[6]){score_string}, 2*8, 5);
				
		
			
			timer_reset(TIMER_3);
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	0e 94 96 0b 	call	0x172c	; 0x172c <timer_reset>
		}
		
		if(button_right_read()){
     906:	0e 94 bd 06 	call	0xd7a	; 0xd7a <button_right_read>
     90a:	88 23       	and	r24, r24
     90c:	79 f3       	breq	.-34     	; 0x8ec <game_over+0x90>
			game_save_highscore();
     90e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <game_save_highscore>
	}
	
	
	
	
}
     912:	61 96       	adiw	r28, 0x11	; 17
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	de bf       	out	0x3e, r29	; 62
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	cd bf       	out	0x3d, r28	; 61
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <game_play>:
//Allows you to leave game by button pressing

uint16_t global_score = 0;


void game_play(){
     924:	6f 92       	push	r6
     926:	7f 92       	push	r7
     928:	8f 92       	push	r8
     92a:	9f 92       	push	r9
     92c:	af 92       	push	r10
     92e:	bf 92       	push	r11
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
     944:	e1 97       	sbiw	r28, 0x31	; 49
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	f8 94       	cli
     94a:	de bf       	out	0x3e, r29	; 62
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	cd bf       	out	0x3d, r28	; 61
		//fiks this
	can_init(MODE_NORMAL);
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
	can_message game_status = canjoy_recieve(&game_status);
     958:	be 01       	movw	r22, r28
     95a:	64 5e       	subi	r22, 0xE4	; 228
     95c:	7f 4f       	sbci	r23, 0xFF	; 255
     95e:	cb 01       	movw	r24, r22
     960:	0e 94 8b 03 	call	0x716	; 0x716 <canjoy_recieve>
	
	
	
	oled_clear_screen();
     964:	0e 94 e6 09 	call	0x13cc	; 0x13cc <oled_clear_screen>
	oled_store_string((char[7]){"Return"}, 0, 7);
     968:	87 e0       	ldi	r24, 0x07	; 7
     96a:	ec ed       	ldi	r30, 0xDC	; 220
     96c:	f1 e0       	ldi	r31, 0x01	; 1
     96e:	de 01       	movw	r26, r28
     970:	55 96       	adiw	r26, 0x15	; 21
     972:	01 90       	ld	r0, Z+
     974:	0d 92       	st	X+, r0
     976:	8a 95       	dec	r24
     978:	e1 f7       	brne	.-8      	; 0x972 <game_play+0x4e>
     97a:	47 e0       	ldi	r20, 0x07	; 7
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	ce 01       	movw	r24, r28
     984:	45 96       	adiw	r24, 0x15	; 21
     986:	0e 94 75 09 	call	0x12ea	; 0x12ea <oled_store_string>
	oled_store_string((char[13]){"Playing game"}, 2*8, 3);
     98a:	8d e0       	ldi	r24, 0x0D	; 13
     98c:	e1 e0       	ldi	r30, 0x01	; 1
     98e:	f2 e0       	ldi	r31, 0x02	; 2
     990:	de 01       	movw	r26, r28
     992:	18 96       	adiw	r26, 0x08	; 8
     994:	01 90       	ld	r0, Z+
     996:	0d 92       	st	X+, r0
     998:	8a 95       	dec	r24
     99a:	e1 f7       	brne	.-8      	; 0x994 <game_play+0x70>
     99c:	43 e0       	ldi	r20, 0x03	; 3
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	60 e1       	ldi	r22, 0x10	; 16
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	ce 01       	movw	r24, r28
     9a6:	08 96       	adiw	r24, 0x08	; 8
     9a8:	0e 94 75 09 	call	0x12ea	; 0x12ea <oled_store_string>
		if(button_left_read()){
			return;
		}
	
		
		printf("running: %u\tScore: %u\tId: %u\n",game_status.data[0], game_status.data[2], game_status.id);
     9ac:	03 ee       	ldi	r16, 0xE3	; 227
     9ae:	11 e0       	ldi	r17, 0x01	; 1
			
			
			
			global_score++;
			
			oled_store_string((char[7]){"Return"}, 0, 7);;
     9b0:	0f 2e       	mov	r0, r31
     9b2:	f7 e0       	ldi	r31, 0x07	; 7
     9b4:	bf 2e       	mov	r11, r31
     9b6:	f0 2d       	mov	r31, r0
			oled_put_string(0, 7, "Return");
			oled_put_string(2*8, 3, "Playing game");
     9b8:	0f 2e       	mov	r0, r31
     9ba:	f1 e0       	ldi	r31, 0x01	; 1
     9bc:	cf 2e       	mov	r12, r31
     9be:	f2 e0       	ldi	r31, 0x02	; 2
     9c0:	df 2e       	mov	r13, r31
     9c2:	f0 2d       	mov	r31, r0
     9c4:	0f 2e       	mov	r0, r31
     9c6:	f3 e0       	ldi	r31, 0x03	; 3
     9c8:	6f 2e       	mov	r6, r31
     9ca:	f0 2d       	mov	r31, r0
     9cc:	68 94       	set
     9ce:	77 24       	eor	r7, r7
     9d0:	74 f8       	bld	r7, 4
			
			
			oled_put_string(3*8, 5, "Score: %i", global_score);
     9d2:	0f 2e       	mov	r0, r31
     9d4:	fc eb       	ldi	r31, 0xBC	; 188
     9d6:	ef 2e       	mov	r14, r31
     9d8:	f1 e0       	ldi	r31, 0x01	; 1
     9da:	ff 2e       	mov	r15, r31
     9dc:	f0 2d       	mov	r31, r0
     9de:	0f 2e       	mov	r0, r31
     9e0:	f5 e0       	ldi	r31, 0x05	; 5
     9e2:	8f 2e       	mov	r8, r31
     9e4:	f0 2d       	mov	r31, r0
     9e6:	0f 2e       	mov	r0, r31
     9e8:	f8 e1       	ldi	r31, 0x18	; 24
     9ea:	9f 2e       	mov	r9, r31
     9ec:	f0 2d       	mov	r31, r0


			oled_write_screen();
			canjoy_transmit();
			_delay_ms(5);
			game_status = canjoy_recieve(&game_status);
     9ee:	0f 2e       	mov	r0, r31
     9f0:	fb e0       	ldi	r31, 0x0B	; 11
     9f2:	af 2e       	mov	r10, r31
     9f4:	f0 2d       	mov	r31, r0
	while(1){
		
		
		
		//leave game
		if(button_left_read()){
     9f6:	0e 94 b9 06 	call	0xd72	; 0xd72 <button_left_read>
     9fa:	81 11       	cpse	r24, r1
     9fc:	79 c0       	rjmp	.+242    	; 0xaf0 <game_play+0x1cc>
			return;
		}
	
		
		printf("running: %u\tScore: %u\tId: %u\n",game_status.data[0], game_status.data[2], game_status.id);
     9fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a00:	8f 93       	push	r24
     a02:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a04:	8f 93       	push	r24
     a06:	89 a1       	ldd	r24, Y+33	; 0x21
     a08:	1f 92       	push	r1
     a0a:	8f 93       	push	r24
     a0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a0e:	1f 92       	push	r1
     a10:	8f 93       	push	r24
     a12:	1f 93       	push	r17
     a14:	0f 93       	push	r16
     a16:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <printf>
		
		//*******************************************		
		//60 oled writing and canjoy transmition
		//*******************************************
		if(timer_read(TIMER_3) > 80){
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	0e 94 81 0b 	call	0x1702	; 0x1702 <timer_read>
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	de bf       	out	0x3e, r29	; 62
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	cd bf       	out	0x3d, r28	; 61
     a2a:	81 35       	cpi	r24, 0x51	; 81
     a2c:	91 05       	cpc	r25, r1
     a2e:	18 f3       	brcs	.-58     	; 0x9f6 <game_play+0xd2>
			oled_clear_screen();
     a30:	0e 94 e6 09 	call	0x13cc	; 0x13cc <oled_clear_screen>
			
			
			
			global_score++;
     a34:	80 91 2a 03 	lds	r24, 0x032A
     a38:	90 91 2b 03 	lds	r25, 0x032B
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	90 93 2b 03 	sts	0x032B, r25
     a42:	80 93 2a 03 	sts	0x032A, r24
			
			oled_store_string((char[7]){"Return"}, 0, 7);;
     a46:	ec ed       	ldi	r30, 0xDC	; 220
     a48:	f1 e0       	ldi	r31, 0x01	; 1
     a4a:	de 01       	movw	r26, r28
     a4c:	11 96       	adiw	r26, 0x01	; 1
     a4e:	8b 2d       	mov	r24, r11
     a50:	01 90       	ld	r0, Z+
     a52:	0d 92       	st	X+, r0
     a54:	8a 95       	dec	r24
     a56:	e1 f7       	brne	.-8      	; 0xa50 <game_play+0x12c>
     a58:	47 e0       	ldi	r20, 0x07	; 7
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	ce 01       	movw	r24, r28
     a62:	01 96       	adiw	r24, 0x01	; 1
     a64:	0e 94 75 09 	call	0x12ea	; 0x12ea <oled_store_string>
			oled_put_string(0, 7, "Return");
     a68:	8c ed       	ldi	r24, 0xDC	; 220
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	9f 93       	push	r25
     a6e:	8f 93       	push	r24
     a70:	bf 92       	push	r11
     a72:	1f 92       	push	r1
     a74:	0e 94 a4 0a 	call	0x1548	; 0x1548 <oled_put_string>
			oled_put_string(2*8, 3, "Playing game");
     a78:	df 92       	push	r13
     a7a:	cf 92       	push	r12
     a7c:	6f 92       	push	r6
     a7e:	7f 92       	push	r7
     a80:	0e 94 a4 0a 	call	0x1548	; 0x1548 <oled_put_string>
			
			
			oled_put_string(3*8, 5, "Score: %i", global_score);
     a84:	80 91 2b 03 	lds	r24, 0x032B
     a88:	8f 93       	push	r24
     a8a:	80 91 2a 03 	lds	r24, 0x032A
     a8e:	8f 93       	push	r24
     a90:	ff 92       	push	r15
     a92:	ef 92       	push	r14
     a94:	8f 92       	push	r8
     a96:	9f 92       	push	r9
     a98:	0e 94 a4 0a 	call	0x1548	; 0x1548 <oled_put_string>


			oled_write_screen();
     a9c:	0e 94 8b 09 	call	0x1316	; 0x1316 <oled_write_screen>
			canjoy_transmit();
     aa0:	0e 94 58 03 	call	0x6b0	; 0x6b0 <canjoy_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aa4:	8f ef       	ldi	r24, 0xFF	; 255
     aa6:	97 e1       	ldi	r25, 0x17	; 23
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <game_play+0x184>
     aac:	00 c0       	rjmp	.+0      	; 0xaae <game_play+0x18a>
     aae:	00 00       	nop
			_delay_ms(5);
			game_status = canjoy_recieve(&game_status);
     ab0:	be 01       	movw	r22, r28
     ab2:	64 5e       	subi	r22, 0xE4	; 228
     ab4:	7f 4f       	sbci	r23, 0xFF	; 255
     ab6:	ce 01       	movw	r24, r28
     ab8:	87 96       	adiw	r24, 0x27	; 39
     aba:	0e 94 8b 03 	call	0x716	; 0x716 <canjoy_recieve>
     abe:	fe 01       	movw	r30, r28
     ac0:	b7 96       	adiw	r30, 0x27	; 39
     ac2:	de 01       	movw	r26, r28
     ac4:	5c 96       	adiw	r26, 0x1c	; 28
     ac6:	8a 2d       	mov	r24, r10
     ac8:	01 90       	ld	r0, Z+
     aca:	0d 92       	st	X+, r0
     acc:	8a 95       	dec	r24
     ace:	e1 f7       	brne	.-8      	; 0xac8 <game_play+0x1a4>
			
			//printf("buffer: %s\n", buffer);
			
			if(game_status.id == CAN_GAME_STATE_OVER){
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	8c 8d       	ldd	r24, Y+28	; 0x1c
     adc:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ade:	80 39       	cpi	r24, 0x90	; 144
     ae0:	91 40       	sbci	r25, 0x01	; 1
     ae2:	11 f4       	brne	.+4      	; 0xae8 <game_play+0x1c4>
				

				game_over();
     ae4:	0e 94 2e 04 	call	0x85c	; 0x85c <game_over>
			}
			
			timer_reset(TIMER_3);
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	0e 94 96 0b 	call	0x172c	; 0x172c <timer_reset>
     aee:	83 cf       	rjmp	.-250    	; 0x9f6 <game_play+0xd2>
		
		
		
	}
	
}
     af0:	e1 96       	adiw	r28, 0x31	; 49
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	de bf       	out	0x3e, r29	; 62
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	cd bf       	out	0x3d, r28	; 61
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	1f 91       	pop	r17
     b02:	0f 91       	pop	r16
     b04:	ff 90       	pop	r15
     b06:	ef 90       	pop	r14
     b08:	df 90       	pop	r13
     b0a:	cf 90       	pop	r12
     b0c:	bf 90       	pop	r11
     b0e:	af 90       	pop	r10
     b10:	9f 90       	pop	r9
     b12:	8f 90       	pop	r8
     b14:	7f 90       	pop	r7
     b16:	6f 90       	pop	r6
     b18:	08 95       	ret

00000b1a <gui_print_menu>:

}


//Prints the menu you're in and it's submenues
void gui_print_menu(Menuitem* menu){
     b1a:	ef 92       	push	r14
     b1c:	ff 92       	push	r15
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
	
	Menuitem* parent = menu_parent(menu);
     b26:	0e 94 65 08 	call	0x10ca	; 0x10ca <menu_parent>
     b2a:	7c 01       	movw	r14, r24
	
	
	oled_clear_screen();
     b2c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <oled_clear_screen>
	oled_store_string(menu_name(parent), 0, 0);
     b30:	c7 01       	movw	r24, r14
     b32:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <menu_name>
     b36:	40 e0       	ldi	r20, 0x00	; 0
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	0e 94 75 09 	call	0x12ea	; 0x12ea <oled_store_string>
	//oled_store((char[sizeof(menu_name(parent)) + 1]){menu_name(parent)}, (int[2]){0,0});
	
	for(int n = 0; n < parent->num_submenus; n++){
     b42:	d7 01       	movw	r26, r14
     b44:	8c 91       	ld	r24, X
     b46:	88 23       	and	r24, r24
     b48:	e9 f0       	breq	.+58     	; 0xb84 <gui_print_menu+0x6a>
     b4a:	00 e0       	ldi	r16, 0x00	; 0
     b4c:	10 e0       	ldi	r17, 0x00	; 0
     b4e:	c0 e0       	ldi	r28, 0x00	; 0
     b50:	d0 e0       	ldi	r29, 0x00	; 0
		oled_store_string(menu_name(parent->submenus[n] ), 8, n+1);
     b52:	21 96       	adiw	r28, 0x01	; 1
     b54:	d7 01       	movw	r26, r14
     b56:	11 96       	adiw	r26, 0x01	; 1
     b58:	ed 91       	ld	r30, X+
     b5a:	fc 91       	ld	r31, X
     b5c:	12 97       	sbiw	r26, 0x02	; 2
     b5e:	e0 0f       	add	r30, r16
     b60:	f1 1f       	adc	r31, r17
     b62:	80 81       	ld	r24, Z
     b64:	91 81       	ldd	r25, Z+1	; 0x01
     b66:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <menu_name>
     b6a:	ae 01       	movw	r20, r28
     b6c:	68 e0       	ldi	r22, 0x08	; 8
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	0e 94 75 09 	call	0x12ea	; 0x12ea <oled_store_string>
     b74:	0e 5f       	subi	r16, 0xFE	; 254
     b76:	1f 4f       	sbci	r17, 0xFF	; 255
	
	oled_clear_screen();
	oled_store_string(menu_name(parent), 0, 0);
	//oled_store((char[sizeof(menu_name(parent)) + 1]){menu_name(parent)}, (int[2]){0,0});
	
	for(int n = 0; n < parent->num_submenus; n++){
     b78:	f7 01       	movw	r30, r14
     b7a:	80 81       	ld	r24, Z
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	c8 17       	cp	r28, r24
     b80:	d9 07       	cpc	r29, r25
     b82:	3c f3       	brlt	.-50     	; 0xb52 <gui_print_menu+0x38>
		oled_store_string(menu_name(parent->submenus[n] ), 8, n+1);
		//oled_store((char[sizeof(menu_name(parent->submenus[n])) + 1]){menu_name(parent->submenus[n])}, (int[2]){0,0});
		
	}
}
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	08 95       	ret

00000b92 <gui_navigate>:


//uses global variable menu_selector and changes 
//what submenu it points to according to joystick movement.
//Must be run in a while loop
void gui_navigate(){
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
	
	
	//If we're pointing at Main menu, point to first submenu instead
	if(strcmp(menu_selector->name, "Main") == 0){
     b96:	c0 91 3e 03 	lds	r28, 0x033E
     b9a:	d0 91 3f 03 	lds	r29, 0x033F
     b9e:	6e e0       	ldi	r22, 0x0E	; 14
     ba0:	72 e0       	ldi	r23, 0x02	; 2
     ba2:	8d 81       	ldd	r24, Y+5	; 0x05
     ba4:	9e 81       	ldd	r25, Y+6	; 0x06
     ba6:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <strcmp>
     baa:	89 2b       	or	r24, r25
     bac:	39 f4       	brne	.+14     	; 0xbbc <gui_navigate+0x2a>
		menu_selector = menu_submenu(menu_selector);
     bae:	ce 01       	movw	r24, r28
     bb0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <menu_submenu>
     bb4:	90 93 3f 03 	sts	0x033F, r25
     bb8:	80 93 3e 03 	sts	0x033E, r24
	}

	int threshold = 70;
	
	
	if(joystick_x_value() > threshold){
     bbc:	0e 94 8b 06 	call	0xd16	; 0xd16 <joystick_x_value>
     bc0:	87 34       	cpi	r24, 0x47	; 71
     bc2:	91 05       	cpc	r25, r1
     bc4:	a4 f0       	brlt	.+40     	; 0xbee <gui_navigate+0x5c>
		menu_selector = menu_submenu(menu_selector);
     bc6:	80 91 3e 03 	lds	r24, 0x033E
     bca:	90 91 3f 03 	lds	r25, 0x033F
     bce:	0e 94 58 08 	call	0x10b0	; 0x10b0 <menu_submenu>
     bd2:	90 93 3f 03 	sts	0x033F, r25
     bd6:	80 93 3e 03 	sts	0x033E, r24
     bda:	2f ef       	ldi	r18, 0xFF	; 255
     bdc:	8f ef       	ldi	r24, 0xFF	; 255
     bde:	92 e0       	ldi	r25, 0x02	; 2
     be0:	21 50       	subi	r18, 0x01	; 1
     be2:	80 40       	sbci	r24, 0x00	; 0
     be4:	90 40       	sbci	r25, 0x00	; 0
     be6:	e1 f7       	brne	.-8      	; 0xbe0 <gui_navigate+0x4e>
     be8:	00 c0       	rjmp	.+0      	; 0xbea <gui_navigate+0x58>
     bea:	00 c0       	rjmp	.+0      	; 0xbec <gui_navigate+0x5a>
     bec:	6a c0       	rjmp	.+212    	; 0xcc2 <gui_navigate+0x130>
		_delay_ms(200);
	}
	else if(joystick_x_value() < -threshold){
     bee:	0e 94 8b 06 	call	0xd16	; 0xd16 <joystick_x_value>
     bf2:	8a 3b       	cpi	r24, 0xBA	; 186
     bf4:	9f 4f       	sbci	r25, 0xFF	; 255
     bf6:	a4 f4       	brge	.+40     	; 0xc20 <gui_navigate+0x8e>
		menu_selector = menu_parent(menu_selector);
     bf8:	80 91 3e 03 	lds	r24, 0x033E
     bfc:	90 91 3f 03 	lds	r25, 0x033F
     c00:	0e 94 65 08 	call	0x10ca	; 0x10ca <menu_parent>
     c04:	90 93 3f 03 	sts	0x033F, r25
     c08:	80 93 3e 03 	sts	0x033E, r24
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	9f ef       	ldi	r25, 0xFF	; 255
     c10:	22 e0       	ldi	r18, 0x02	; 2
     c12:	81 50       	subi	r24, 0x01	; 1
     c14:	90 40       	sbci	r25, 0x00	; 0
     c16:	20 40       	sbci	r18, 0x00	; 0
     c18:	e1 f7       	brne	.-8      	; 0xc12 <gui_navigate+0x80>
     c1a:	00 c0       	rjmp	.+0      	; 0xc1c <gui_navigate+0x8a>
     c1c:	00 c0       	rjmp	.+0      	; 0xc1e <gui_navigate+0x8c>
     c1e:	51 c0       	rjmp	.+162    	; 0xcc2 <gui_navigate+0x130>
		_delay_ms(200);
		
	}
	else if(joystick_y_value() > threshold){
     c20:	0e 94 90 06 	call	0xd20	; 0xd20 <joystick_y_value>
     c24:	87 34       	cpi	r24, 0x47	; 71
     c26:	91 05       	cpc	r25, r1
     c28:	a4 f0       	brlt	.+40     	; 0xc52 <gui_navigate+0xc0>
		menu_selector = menu_prev(menu_selector);
     c2a:	80 91 3e 03 	lds	r24, 0x033E
     c2e:	90 91 3f 03 	lds	r25, 0x033F
     c32:	0e 94 9a 08 	call	0x1134	; 0x1134 <menu_prev>
     c36:	90 93 3f 03 	sts	0x033F, r25
     c3a:	80 93 3e 03 	sts	0x033E, r24
     c3e:	8f ef       	ldi	r24, 0xFF	; 255
     c40:	9f ef       	ldi	r25, 0xFF	; 255
     c42:	22 e0       	ldi	r18, 0x02	; 2
     c44:	81 50       	subi	r24, 0x01	; 1
     c46:	90 40       	sbci	r25, 0x00	; 0
     c48:	20 40       	sbci	r18, 0x00	; 0
     c4a:	e1 f7       	brne	.-8      	; 0xc44 <gui_navigate+0xb2>
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <gui_navigate+0xbc>
     c4e:	00 c0       	rjmp	.+0      	; 0xc50 <gui_navigate+0xbe>
     c50:	38 c0       	rjmp	.+112    	; 0xcc2 <gui_navigate+0x130>
		_delay_ms(200);

		
	}
	else if(joystick_y_value() < -threshold){
     c52:	0e 94 90 06 	call	0xd20	; 0xd20 <joystick_y_value>
     c56:	8a 3b       	cpi	r24, 0xBA	; 186
     c58:	9f 4f       	sbci	r25, 0xFF	; 255
     c5a:	e4 f4       	brge	.+56     	; 0xc94 <gui_navigate+0x102>
		//if there is a next item:
		if(menu_next(menu_selector) != NULL){
     c5c:	80 91 3e 03 	lds	r24, 0x033E
     c60:	90 91 3f 03 	lds	r25, 0x033F
     c64:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <menu_next>
     c68:	89 2b       	or	r24, r25
     c6a:	59 f1       	breq	.+86     	; 0xcc2 <gui_navigate+0x130>
			menu_selector = menu_next(menu_selector);
     c6c:	80 91 3e 03 	lds	r24, 0x033E
     c70:	90 91 3f 03 	lds	r25, 0x033F
     c74:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <menu_next>
     c78:	90 93 3f 03 	sts	0x033F, r25
     c7c:	80 93 3e 03 	sts	0x033E, r24
     c80:	8f ef       	ldi	r24, 0xFF	; 255
     c82:	9f ef       	ldi	r25, 0xFF	; 255
     c84:	22 e0       	ldi	r18, 0x02	; 2
     c86:	81 50       	subi	r24, 0x01	; 1
     c88:	90 40       	sbci	r25, 0x00	; 0
     c8a:	20 40       	sbci	r18, 0x00	; 0
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <gui_navigate+0xf4>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <gui_navigate+0xfe>
     c90:	00 c0       	rjmp	.+0      	; 0xc92 <gui_navigate+0x100>
     c92:	17 c0       	rjmp	.+46     	; 0xcc2 <gui_navigate+0x130>
			_delay_ms(200);
		}
	}
	else if(button_right_read()){
     c94:	0e 94 bd 06 	call	0xd7a	; 0xd7a <button_right_read>
     c98:	88 23       	and	r24, r24
     c9a:	99 f0       	breq	.+38     	; 0xcc2 <gui_navigate+0x130>
		if(menu_selector->fn != NULL ){	//if the function pointer points to a function, call it
     c9c:	e0 91 3e 03 	lds	r30, 0x033E
     ca0:	f0 91 3f 03 	lds	r31, 0x033F
     ca4:	07 80       	ldd	r0, Z+7	; 0x07
     ca6:	f0 85       	ldd	r31, Z+8	; 0x08
     ca8:	e0 2d       	mov	r30, r0
     caa:	30 97       	sbiw	r30, 0x00	; 0
     cac:	51 f0       	breq	.+20     	; 0xcc2 <gui_navigate+0x130>
			menu_selector->fn();
     cae:	09 95       	icall
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	9f ef       	ldi	r25, 0xFF	; 255
     cb4:	22 e0       	ldi	r18, 0x02	; 2
     cb6:	81 50       	subi	r24, 0x01	; 1
     cb8:	90 40       	sbci	r25, 0x00	; 0
     cba:	20 40       	sbci	r18, 0x00	; 0
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <gui_navigate+0x124>
     cbe:	00 c0       	rjmp	.+0      	; 0xcc0 <gui_navigate+0x12e>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <gui_navigate+0x130>
		}
		else{}
	}
	
	
}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	08 95       	ret

00000cc8 <gui_run>:
#include "gui_alt.h"


void gui_run()
{
	gui_print_menu(menu_selector);
     cc8:	80 91 3e 03 	lds	r24, 0x033E
     ccc:	90 91 3f 03 	lds	r25, 0x033F
     cd0:	0e 94 8d 05 	call	0xb1a	; 0xb1a <gui_print_menu>
	
	gui_navigate();
     cd4:	0e 94 c9 05 	call	0xb92	; 0xb92 <gui_navigate>
	
	oled_invert_line(menu_submenu_number(menu_selector));
     cd8:	80 91 3e 03 	lds	r24, 0x033E
     cdc:	90 91 3f 03 	lds	r25, 0x033F
     ce0:	0e 94 c9 08 	call	0x1192	; 0x1192 <menu_submenu_number>
     ce4:	0e 94 a2 09 	call	0x1344	; 0x1344 <oled_invert_line>
     ce8:	08 95       	ret

00000cea <joystick_read_x>:


uint16_t joystick_read_x(){
	
	volatile char *ext_joy = (char *) 0x1400;
	ext_joy[0] = 0x04;
     cea:	84 e0       	ldi	r24, 0x04	; 4
     cec:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cf0:	81 e4       	ldi	r24, 0x41	; 65
     cf2:	8a 95       	dec	r24
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <joystick_read_x+0x8>
     cf6:	00 c0       	rjmp	.+0      	; 0xcf8 <joystick_read_x+0xe>
	_delay_us(40);
	return (uint8_t)ext_joy[0];
     cf8:	80 91 00 14 	lds	r24, 0x1400
	
}
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	08 95       	ret

00000d00 <joystick_read_y>:


uint16_t joystick_read_y(){
	
	volatile char *ext_joy = (char *) 0x1400;
	ext_joy[0] = 0x05;
     d00:	85 e0       	ldi	r24, 0x05	; 5
     d02:	80 93 00 14 	sts	0x1400, r24
     d06:	81 e4       	ldi	r24, 0x41	; 65
     d08:	8a 95       	dec	r24
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <joystick_read_y+0x8>
     d0c:	00 c0       	rjmp	.+0      	; 0xd0e <joystick_read_y+0xe>
	_delay_us(40);
	return (uint8_t)ext_joy[0];
     d0e:	80 91 00 14 	lds	r24, 0x1400
	
}
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	08 95       	ret

00000d16 <joystick_x_value>:

int16_t joystick_x_value(){
	return (joystick_read_x() - 127);
     d16:	0e 94 75 06 	call	0xcea	; 0xcea <joystick_read_x>
}
     d1a:	8f 57       	subi	r24, 0x7F	; 127
     d1c:	91 09       	sbc	r25, r1
     d1e:	08 95       	ret

00000d20 <joystick_y_value>:

int16_t joystick_y_value(){
	return (joystick_read_y() - 127);
     d20:	0e 94 80 06 	call	0xd00	; 0xd00 <joystick_read_y>
}
     d24:	8f 57       	subi	r24, 0x7F	; 127
     d26:	91 09       	sbc	r25, r1
     d28:	08 95       	ret

00000d2a <slider_left_read>:



uint8_t slider_left_read(){
	volatile char *ext_slide = (char *) 0x1400;
	ext_slide[0] = 0x06;
     d2a:	86 e0       	ldi	r24, 0x06	; 6
     d2c:	80 93 00 14 	sts	0x1400, r24
     d30:	81 e4       	ldi	r24, 0x41	; 65
     d32:	8a 95       	dec	r24
     d34:	f1 f7       	brne	.-4      	; 0xd32 <slider_left_read+0x8>
     d36:	00 c0       	rjmp	.+0      	; 0xd38 <slider_left_read+0xe>
	_delay_us(40);
	return (uint8_t)ext_slide[0];
     d38:	80 91 00 14 	lds	r24, 0x1400
}
     d3c:	08 95       	ret

00000d3e <slider_right_read>:

uint8_t slider_right_read(){
	volatile char *ext_slide = (char *) 0x1400;
	ext_slide[0] = 0x07;
     d3e:	87 e0       	ldi	r24, 0x07	; 7
     d40:	80 93 00 14 	sts	0x1400, r24
     d44:	81 e4       	ldi	r24, 0x41	; 65
     d46:	8a 95       	dec	r24
     d48:	f1 f7       	brne	.-4      	; 0xd46 <slider_right_read+0x8>
     d4a:	00 c0       	rjmp	.+0      	; 0xd4c <slider_right_read+0xe>
	_delay_us(40);
	return (uint8_t)ext_slide[0];
     d4c:	80 91 00 14 	lds	r24, 0x1400
}
     d50:	08 95       	ret

00000d52 <buttons_init>:
int8_t slider_right_value(){
	return (slider_right_read() - 127);	
}

void buttons_init(){
	DDRB &= ~(1 << DDB1);	// ????
     d52:	b9 98       	cbi	0x17, 1	; 23
	
	//left & right
	DDRB &= (1<< PINB0); //right
     d54:	87 b3       	in	r24, 0x17	; 23
     d56:	81 70       	andi	r24, 0x01	; 1
     d58:	87 bb       	out	0x17, r24	; 23
	DDRB &= (1<< PINB1); //left
     d5a:	87 b3       	in	r24, 0x17	; 23
     d5c:	82 70       	andi	r24, 0x02	; 2
     d5e:	87 bb       	out	0x17, r24	; 23

	//joystick button activate
	DDRB &= (1 << PINB2);
     d60:	87 b3       	in	r24, 0x17	; 23
     d62:	84 70       	andi	r24, 0x04	; 4
     d64:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << PINB2);
     d66:	c2 9a       	sbi	0x18, 2	; 24
     d68:	08 95       	ret

00000d6a <joystick_button_read>:
}

uint8_t joystick_button_read(){
	int button = (PINB & (1 << PINB3));
	if (button > 0){
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	b3 99       	sbic	0x16, 3	; 22
     d6e:	80 e0       	ldi	r24, 0x00	; 0
	else{
		return 1;
	}
	
	
}
     d70:	08 95       	ret

00000d72 <button_left_read>:

uint8_t button_left_read(){
	int button = (PINB & (1 << PINB1));
	if (button > 0){
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	b1 9b       	sbis	0x16, 1	; 22
     d76:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
}
     d78:	08 95       	ret

00000d7a <button_right_read>:

uint8_t button_right_read(){
	int button = (PINB & (1 << PINB0));
	if (button > 0){
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	b0 9b       	sbis	0x16, 0	; 22
     d7e:	80 e0       	ldi	r24, 0x00	; 0
	}
	else{
		return 0;
	}
	
}
     d80:	08 95       	ret

00000d82 <main>:

*/


int main(void){
	fdevopen(uart_Transmit, uart_Receive);
     d82:	6a ea       	ldi	r22, 0xAA	; 170
     d84:	7b e0       	ldi	r23, 0x0B	; 11
     d86:	86 ea       	ldi	r24, 0xA6	; 166
     d88:	9b e0       	ldi	r25, 0x0B	; 11
     d8a:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <fdevopen>
	
	MCUCR |= (1 << SRE);
     d8e:	85 b7       	in	r24, 0x35	; 53
     d90:	80 68       	ori	r24, 0x80	; 128
     d92:	85 bf       	out	0x35, r24	; 53
	
	uart_Init(MYUBRR);
     d94:	8f e1       	ldi	r24, 0x1F	; 31
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 ae 0b 	call	0x175c	; 0x175c <uart_Init>
	
	
	buttons_init(); // useless thus far
     d9c:	0e 94 a9 06 	call	0xd52	; 0xd52 <buttons_init>

	
	Menuitem* menu = create_menu();
     da0:	0e 94 91 07 	call	0xf22	; 0xf22 <create_menu>
	menu_selector = menu;
     da4:	90 93 3f 03 	sts	0x033F, r25
     da8:	80 93 3e 03 	sts	0x033E, r24
	
	//consider putting this elsewhere, to
	//allow selection of can tests in runtime
	//can_init(MODE_NORMAL);
	
	timer_init();	
     dac:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <timer_init>
	oled_init();
     db0:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <oled_init>

	
	while(1){


		gui_run();
     db4:	0e 94 64 06 	call	0xcc8	; 0xcc8 <gui_run>

		oled_refresh_60Hz();
     db8:	0e 94 96 09 	call	0x132c	; 0x132c <oled_refresh_60Hz>
     dbc:	fb cf       	rjmp	.-10     	; 0xdb4 <main+0x32>

00000dbe <mcp2515_read>:
	}
	return 0;
}


int mcp2515_read(int address){
     dbe:	cf 93       	push	r28
     dc0:	c8 2f       	mov	r28, r24
	
	int result;
	
	PORTB &= ~(1 << MCP2515_CS);
     dc2:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_READ);
     dc4:	83 e0       	ldi	r24, 0x03	; 3
     dc6:	0e 94 03 0b 	call	0x1606	; 0x1606 <spi_write>
	spi_write(address);
     dca:	8c 2f       	mov	r24, r28
     dcc:	0e 94 03 0b 	call	0x1606	; 0x1606 <spi_write>
	
	result = spi_write(0x00);
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	0e 94 03 0b 	call	0x1606	; 0x1606 <spi_write>
	
	PORTB |= (1 << MCP2515_CS);
     dd6:	c4 9a       	sbi	0x18, 4	; 24
	return result;
}
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <mcp2515_write>:

void mcp2515_write(int address, int data){
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	d8 2f       	mov	r29, r24
     de2:	c6 2f       	mov	r28, r22
	
	PORTB &= ~(1 << MCP2515_CS);
     de4:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_WRITE);
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	0e 94 03 0b 	call	0x1606	; 0x1606 <spi_write>
	spi_write(address);
     dec:	8d 2f       	mov	r24, r29
     dee:	0e 94 03 0b 	call	0x1606	; 0x1606 <spi_write>
	spi_write(data);
     df2:	8c 2f       	mov	r24, r28
     df4:	0e 94 03 0b 	call	0x1606	; 0x1606 <spi_write>
	
	PORTB |= (1 << MCP2515_CS);	
     df8:	c4 9a       	sbi	0x18, 4	; 24
}
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <mcp2515_request_to_send>:

void mcp2515_request_to_send(int buffer_select){
	PORTB &= ~(1 << MCP2515_CS);
     e00:	c4 98       	cbi	0x18, 4	; 24
	spi_write(buffer_select);
     e02:	0e 94 03 0b 	call	0x1606	; 0x1606 <spi_write>
	PORTB |= (1 << MCP2515_CS);
     e06:	c4 9a       	sbi	0x18, 4	; 24
     e08:	08 95       	ret

00000e0a <mcp2515_bit_modify>:
}

void mcp2515_bit_modify(int address, int mask, int data){
     e0a:	1f 93       	push	r17
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	18 2f       	mov	r17, r24
     e12:	d6 2f       	mov	r29, r22
     e14:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS);
     e16:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_BITMOD);
     e18:	85 e0       	ldi	r24, 0x05	; 5
     e1a:	0e 94 03 0b 	call	0x1606	; 0x1606 <spi_write>
	spi_write(address);
     e1e:	81 2f       	mov	r24, r17
     e20:	0e 94 03 0b 	call	0x1606	; 0x1606 <spi_write>
	spi_write(mask);
     e24:	8d 2f       	mov	r24, r29
     e26:	0e 94 03 0b 	call	0x1606	; 0x1606 <spi_write>
	spi_write(data);
     e2a:	8c 2f       	mov	r24, r28
     e2c:	0e 94 03 0b 	call	0x1606	; 0x1606 <spi_write>

	PORTB |= (1 << MCP2515_CS);
     e30:	c4 9a       	sbi	0x18, 4	; 24
	
}
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	08 95       	ret

00000e3a <mcp2515_reset>:

void mcp2515_reset(){
	PORTB &= ~(1 << MCP2515_CS);
     e3a:	c4 98       	cbi	0x18, 4	; 24
	spi_write(MCP_RESET);
     e3c:	80 ec       	ldi	r24, 0xC0	; 192
     e3e:	0e 94 03 0b 	call	0x1606	; 0x1606 <spi_write>
	PORTB |= (1 << MCP2515_CS);
     e42:	c4 9a       	sbi	0x18, 4	; 24
     e44:	08 95       	ret

00000e46 <mcp2515_init>:
#include "SPI.h"
#include "mcp2515_define.h"


int mcp2515_init(){
	spi_init();
     e46:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spi_init>
	mcp2515_reset();
     e4a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <mcp2515_reset>
	
	uint8_t value = mcp2515_read(MCP_CANSTAT);
     e4e:	8e e0       	ldi	r24, 0x0E	; 14
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 df 06 	call	0xdbe	; 0xdbe <mcp2515_read>
	if((value & MODE_MASK) != MODE_CONFIG){
     e56:	80 7e       	andi	r24, 0xE0	; 224
     e58:	99 27       	eor	r25, r25
     e5a:	80 38       	cpi	r24, 0x80	; 128
     e5c:	91 05       	cpc	r25, r1
     e5e:	39 f0       	breq	.+14     	; 0xe6e <mcp2515_init+0x28>
		printf("ERROR: MCP2515 is NOT in config mode after reset!\n");
     e60:	83 e1       	ldi	r24, 0x13	; 19
     e62:	92 e0       	ldi	r25, 0x02	; 2
     e64:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <puts>
		return 1;
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	08 95       	ret
	}
	return 0;
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
}
     e72:	08 95       	ret

00000e74 <new_Menuitem>:

Menuitem* new_Menuitem(
char* name,				
void (*fn)(void),		//pointer to function
uint8_t num_submenus	
){
     e74:	df 92       	push	r13
     e76:	ef 92       	push	r14
     e78:	ff 92       	push	r15
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	7c 01       	movw	r14, r24
     e84:	8b 01       	movw	r16, r22
     e86:	d4 2e       	mov	r13, r20
	Menuitem* this = malloc(sizeof(Menuitem));
     e88:	89 e0       	ldi	r24, 0x09	; 9
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 bb 0b 	call	0x1776	; 0x1776 <malloc>
     e90:	ec 01       	movw	r28, r24
	this->name = name;
     e92:	fe 82       	std	Y+6, r15	; 0x06
     e94:	ed 82       	std	Y+5, r14	; 0x05
	this->fn = fn;
     e96:	18 87       	std	Y+8, r17	; 0x08
     e98:	0f 83       	std	Y+7, r16	; 0x07
	
	this->num_submenus = num_submenus;
     e9a:	d8 82       	st	Y, r13
	this->submenus = malloc(sizeof(Menuitem) * num_submenus);
     e9c:	4d 2d       	mov	r20, r13
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	ca 01       	movw	r24, r20
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	84 0f       	add	r24, r20
     eb0:	95 1f       	adc	r25, r21
     eb2:	0e 94 bb 0b 	call	0x1776	; 0x1776 <malloc>
     eb6:	9a 83       	std	Y+2, r25	; 0x02
     eb8:	89 83       	std	Y+1, r24	; 0x01
	
	return this;
}
     eba:	ce 01       	movw	r24, r28
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	ff 90       	pop	r15
     ec6:	ef 90       	pop	r14
     ec8:	df 90       	pop	r13
     eca:	08 95       	ret

00000ecc <assign_parents>:


void assign_parents(Menuitem* menu){
     ecc:	1f 93       	push	r17
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	ec 01       	movw	r28, r24
	for(uint8_t n = 0; n < menu->num_submenus; n++){
     ed4:	88 81       	ld	r24, Y
     ed6:	88 23       	and	r24, r24
     ed8:	01 f1       	breq	.+64     	; 0xf1a <assign_parents+0x4e>
     eda:	10 e0       	ldi	r17, 0x00	; 0
		menu->submenus[n]->parent = menu;
     edc:	81 2f       	mov	r24, r17
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	e9 81       	ldd	r30, Y+1	; 0x01
     ee6:	fa 81       	ldd	r31, Y+2	; 0x02
     ee8:	e8 0f       	add	r30, r24
     eea:	f9 1f       	adc	r31, r25
     eec:	01 90       	ld	r0, Z+
     eee:	f0 81       	ld	r31, Z
     ef0:	e0 2d       	mov	r30, r0
     ef2:	d4 83       	std	Z+4, r29	; 0x04
     ef4:	c3 83       	std	Z+3, r28	; 0x03
		if(menu->submenus[n]->num_submenus > 0){
     ef6:	29 81       	ldd	r18, Y+1	; 0x01
     ef8:	3a 81       	ldd	r19, Y+2	; 0x02
     efa:	f9 01       	movw	r30, r18
     efc:	e8 0f       	add	r30, r24
     efe:	f9 1f       	adc	r31, r25
     f00:	01 90       	ld	r0, Z+
     f02:	f0 81       	ld	r31, Z
     f04:	e0 2d       	mov	r30, r0
     f06:	80 81       	ld	r24, Z
     f08:	88 23       	and	r24, r24
     f0a:	19 f0       	breq	.+6      	; 0xf12 <assign_parents+0x46>
			assign_parents(menu->submenus[n]);
     f0c:	cf 01       	movw	r24, r30
     f0e:	0e 94 66 07 	call	0xecc	; 0xecc <assign_parents>
	return this;
}


void assign_parents(Menuitem* menu){
	for(uint8_t n = 0; n < menu->num_submenus; n++){
     f12:	1f 5f       	subi	r17, 0xFF	; 255
     f14:	88 81       	ld	r24, Y
     f16:	18 17       	cp	r17, r24
     f18:	08 f3       	brcs	.-62     	; 0xedc <assign_parents+0x10>
		menu->submenus[n]->parent = menu;
		if(menu->submenus[n]->num_submenus > 0){
			assign_parents(menu->submenus[n]);
		}
	}
}
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	08 95       	ret

00000f22 <create_menu>:


Menuitem* create_menu(){
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
base->submenus[1] = new_Menuitem("Games", NULL, 2);
base->submenus[0]->submenus[0] = new_Menuitem("Ping Pong", NULL, 0);
base->submenus[0]->submenus[1] = new_Menuitem("Snake", NULL, 0);
*/

	Menuitem* base = new_Menuitem("Main", NULL, 3);
     f2a:	43 e0       	ldi	r20, 0x03	; 3
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	8e e0       	ldi	r24, 0x0E	; 14
     f32:	92 e0       	ldi	r25, 0x02	; 2
     f34:	0e 94 3a 07 	call	0xe74	; 0xe74 <new_Menuitem>
     f38:	ec 01       	movw	r28, r24
	
	base->submenus[0] = new_Menuitem("Games", NULL, 2);
     f3a:	09 81       	ldd	r16, Y+1	; 0x01
     f3c:	1a 81       	ldd	r17, Y+2	; 0x02
     f3e:	42 e0       	ldi	r20, 0x02	; 2
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	85 e4       	ldi	r24, 0x45	; 69
     f46:	92 e0       	ldi	r25, 0x02	; 2
     f48:	0e 94 3a 07 	call	0xe74	; 0xe74 <new_Menuitem>
     f4c:	f8 01       	movw	r30, r16
     f4e:	91 83       	std	Z+1, r25	; 0x01
     f50:	80 83       	st	Z, r24
		base->submenus[0]->submenus[0] = new_Menuitem("Game", game_play, 0);
     f52:	e9 81       	ldd	r30, Y+1	; 0x01
     f54:	fa 81       	ldd	r31, Y+2	; 0x02
     f56:	01 90       	ld	r0, Z+
     f58:	f0 81       	ld	r31, Z
     f5a:	e0 2d       	mov	r30, r0
     f5c:	01 81       	ldd	r16, Z+1	; 0x01
     f5e:	12 81       	ldd	r17, Z+2	; 0x02
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	62 e9       	ldi	r22, 0x92	; 146
     f64:	74 e0       	ldi	r23, 0x04	; 4
     f66:	8b e4       	ldi	r24, 0x4B	; 75
     f68:	92 e0       	ldi	r25, 0x02	; 2
     f6a:	0e 94 3a 07 	call	0xe74	; 0xe74 <new_Menuitem>
     f6e:	f8 01       	movw	r30, r16
     f70:	91 83       	std	Z+1, r25	; 0x01
     f72:	80 83       	st	Z, r24
		base->submenus[0]->submenus[1] = new_Menuitem("Snake", NULL, 0);
     f74:	e9 81       	ldd	r30, Y+1	; 0x01
     f76:	fa 81       	ldd	r31, Y+2	; 0x02
     f78:	01 90       	ld	r0, Z+
     f7a:	f0 81       	ld	r31, Z
     f7c:	e0 2d       	mov	r30, r0
     f7e:	01 81       	ldd	r16, Z+1	; 0x01
     f80:	12 81       	ldd	r17, Z+2	; 0x02
     f82:	40 e0       	ldi	r20, 0x00	; 0
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	80 e5       	ldi	r24, 0x50	; 80
     f8a:	92 e0       	ldi	r25, 0x02	; 2
     f8c:	0e 94 3a 07 	call	0xe74	; 0xe74 <new_Menuitem>
     f90:	f8 01       	movw	r30, r16
     f92:	93 83       	std	Z+3, r25	; 0x03
     f94:	82 83       	std	Z+2, r24	; 0x02
	
	base->submenus[1] = new_Menuitem("Settings", NULL, 3);
     f96:	09 81       	ldd	r16, Y+1	; 0x01
     f98:	1a 81       	ldd	r17, Y+2	; 0x02
     f9a:	43 e0       	ldi	r20, 0x03	; 3
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	86 e5       	ldi	r24, 0x56	; 86
     fa2:	92 e0       	ldi	r25, 0x02	; 2
     fa4:	0e 94 3a 07 	call	0xe74	; 0xe74 <new_Menuitem>
     fa8:	f8 01       	movw	r30, r16
     faa:	93 83       	std	Z+3, r25	; 0x03
     fac:	82 83       	std	Z+2, r24	; 0x02
		base->submenus[1]->submenus[0] = new_Menuitem("Contrast", oled_change_contrast, 0);
     fae:	e9 81       	ldd	r30, Y+1	; 0x01
     fb0:	fa 81       	ldd	r31, Y+2	; 0x02
     fb2:	02 80       	ldd	r0, Z+2	; 0x02
     fb4:	f3 81       	ldd	r31, Z+3	; 0x03
     fb6:	e0 2d       	mov	r30, r0
     fb8:	01 81       	ldd	r16, Z+1	; 0x01
     fba:	12 81       	ldd	r17, Z+2	; 0x02
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	65 e0       	ldi	r22, 0x05	; 5
     fc0:	7a e0       	ldi	r23, 0x0A	; 10
     fc2:	8f e5       	ldi	r24, 0x5F	; 95
     fc4:	92 e0       	ldi	r25, 0x02	; 2
     fc6:	0e 94 3a 07 	call	0xe74	; 0xe74 <new_Menuitem>
     fca:	f8 01       	movw	r30, r16
     fcc:	91 83       	std	Z+1, r25	; 0x01
     fce:	80 83       	st	Z, r24
		base->submenus[1]->submenus[1] = new_Menuitem("Toggle negative", oled_toggle_negative, 0);
     fd0:	e9 81       	ldd	r30, Y+1	; 0x01
     fd2:	fa 81       	ldd	r31, Y+2	; 0x02
     fd4:	02 80       	ldd	r0, Z+2	; 0x02
     fd6:	f3 81       	ldd	r31, Z+3	; 0x03
     fd8:	e0 2d       	mov	r30, r0
     fda:	01 81       	ldd	r16, Z+1	; 0x01
     fdc:	12 81       	ldd	r17, Z+2	; 0x02
     fde:	40 e0       	ldi	r20, 0x00	; 0
     fe0:	64 ef       	ldi	r22, 0xF4	; 244
     fe2:	79 e0       	ldi	r23, 0x09	; 9
     fe4:	88 e6       	ldi	r24, 0x68	; 104
     fe6:	92 e0       	ldi	r25, 0x02	; 2
     fe8:	0e 94 3a 07 	call	0xe74	; 0xe74 <new_Menuitem>
     fec:	f8 01       	movw	r30, r16
     fee:	93 83       	std	Z+3, r25	; 0x03
     ff0:	82 83       	std	Z+2, r24	; 0x02
		base->submenus[1]->submenus[2] = new_Menuitem("Seizure", oled_epleptic_seizure, 0);
     ff2:	e9 81       	ldd	r30, Y+1	; 0x01
     ff4:	fa 81       	ldd	r31, Y+2	; 0x02
     ff6:	02 80       	ldd	r0, Z+2	; 0x02
     ff8:	f3 81       	ldd	r31, Z+3	; 0x03
     ffa:	e0 2d       	mov	r30, r0
     ffc:	01 81       	ldd	r16, Z+1	; 0x01
     ffe:	12 81       	ldd	r17, Z+2	; 0x02
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	65 e9       	ldi	r22, 0x95	; 149
    1004:	7a e0       	ldi	r23, 0x0A	; 10
    1006:	88 e7       	ldi	r24, 0x78	; 120
    1008:	92 e0       	ldi	r25, 0x02	; 2
    100a:	0e 94 3a 07 	call	0xe74	; 0xe74 <new_Menuitem>
    100e:	f8 01       	movw	r30, r16
    1010:	95 83       	std	Z+5, r25	; 0x05
    1012:	84 83       	std	Z+4, r24	; 0x04
		
		
	base->submenus[2] = new_Menuitem("Tests", NULL, 2);
    1014:	09 81       	ldd	r16, Y+1	; 0x01
    1016:	1a 81       	ldd	r17, Y+2	; 0x02
    1018:	42 e0       	ldi	r20, 0x02	; 2
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	80 e8       	ldi	r24, 0x80	; 128
    1020:	92 e0       	ldi	r25, 0x02	; 2
    1022:	0e 94 3a 07 	call	0xe74	; 0xe74 <new_Menuitem>
    1026:	f8 01       	movw	r30, r16
    1028:	95 83       	std	Z+5, r25	; 0x05
    102a:	84 83       	std	Z+4, r24	; 0x04
		base->submenus[2]->submenus[0] = new_Menuitem("Can", NULL, 1);
    102c:	e9 81       	ldd	r30, Y+1	; 0x01
    102e:	fa 81       	ldd	r31, Y+2	; 0x02
    1030:	04 80       	ldd	r0, Z+4	; 0x04
    1032:	f5 81       	ldd	r31, Z+5	; 0x05
    1034:	e0 2d       	mov	r30, r0
    1036:	01 81       	ldd	r16, Z+1	; 0x01
    1038:	12 81       	ldd	r17, Z+2	; 0x02
    103a:	41 e0       	ldi	r20, 0x01	; 1
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	86 e8       	ldi	r24, 0x86	; 134
    1042:	92 e0       	ldi	r25, 0x02	; 2
    1044:	0e 94 3a 07 	call	0xe74	; 0xe74 <new_Menuitem>
    1048:	f8 01       	movw	r30, r16
    104a:	91 83       	std	Z+1, r25	; 0x01
    104c:	80 83       	st	Z, r24
			base->submenus[2]->submenus[0]->submenus[0] = new_Menuitem("Loopback", can_test_loopback, 0);
    104e:	e9 81       	ldd	r30, Y+1	; 0x01
    1050:	fa 81       	ldd	r31, Y+2	; 0x02
    1052:	04 80       	ldd	r0, Z+4	; 0x04
    1054:	f5 81       	ldd	r31, Z+5	; 0x05
    1056:	e0 2d       	mov	r30, r0
    1058:	01 80       	ldd	r0, Z+1	; 0x01
    105a:	f2 81       	ldd	r31, Z+2	; 0x02
    105c:	e0 2d       	mov	r30, r0
    105e:	01 90       	ld	r0, Z+
    1060:	f0 81       	ld	r31, Z
    1062:	e0 2d       	mov	r30, r0
    1064:	01 81       	ldd	r16, Z+1	; 0x01
    1066:	12 81       	ldd	r17, Z+2	; 0x02
    1068:	40 e0       	ldi	r20, 0x00	; 0
    106a:	67 e1       	ldi	r22, 0x17	; 23
    106c:	73 e0       	ldi	r23, 0x03	; 3
    106e:	8a e8       	ldi	r24, 0x8A	; 138
    1070:	92 e0       	ldi	r25, 0x02	; 2
    1072:	0e 94 3a 07 	call	0xe74	; 0xe74 <new_Menuitem>
    1076:	f8 01       	movw	r30, r16
    1078:	91 83       	std	Z+1, r25	; 0x01
    107a:	80 83       	st	Z, r24
			//base->submenus[2]->submenus[0]->submenus[1] = new_Menuitem("Node1 to Node2", can_test_transmit, 0);
			//base->submenus[2]->submenus[0]->submenus[2] = new_Menuitem("Node2 to Node1", can_test_recieve, 0);
			
		base->submenus[2]->submenus[1] = new_Menuitem("SRAM", SRAM_test, 0);
    107c:	e9 81       	ldd	r30, Y+1	; 0x01
    107e:	fa 81       	ldd	r31, Y+2	; 0x02
    1080:	04 80       	ldd	r0, Z+4	; 0x04
    1082:	f5 81       	ldd	r31, Z+5	; 0x05
    1084:	e0 2d       	mov	r30, r0
    1086:	01 81       	ldd	r16, Z+1	; 0x01
    1088:	12 81       	ldd	r17, Z+2	; 0x02
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	69 e0       	ldi	r22, 0x09	; 9
    108e:	7b e0       	ldi	r23, 0x0B	; 11
    1090:	83 e9       	ldi	r24, 0x93	; 147
    1092:	92 e0       	ldi	r25, 0x02	; 2
    1094:	0e 94 3a 07 	call	0xe74	; 0xe74 <new_Menuitem>
    1098:	f8 01       	movw	r30, r16
    109a:	93 83       	std	Z+3, r25	; 0x03
    109c:	82 83       	std	Z+2, r24	; 0x02
		
		
		
	assign_parents(base);
    109e:	ce 01       	movw	r24, r28
    10a0:	0e 94 66 07 	call	0xecc	; 0xecc <assign_parents>
	
	return base;
}
    10a4:	ce 01       	movw	r24, r28
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	08 95       	ret

000010b0 <menu_submenu>:



//works
Menuitem* menu_submenu(Menuitem* m){
    10b0:	fc 01       	movw	r30, r24
	if (m->num_submenus != 0){
    10b2:	80 81       	ld	r24, Z
    10b4:	88 23       	and	r24, r24
    10b6:	31 f0       	breq	.+12     	; 0x10c4 <menu_submenu+0x14>
		return m->submenus[0];
    10b8:	01 80       	ldd	r0, Z+1	; 0x01
    10ba:	f2 81       	ldd	r31, Z+2	; 0x02
    10bc:	e0 2d       	mov	r30, r0
    10be:	80 81       	ld	r24, Z
    10c0:	91 81       	ldd	r25, Z+1	; 0x01
    10c2:	08 95       	ret
	}
	else{
		return m;
    10c4:	8e 2f       	mov	r24, r30
    10c6:	9f 2f       	mov	r25, r31
	}
}
    10c8:	08 95       	ret

000010ca <menu_parent>:

//works
Menuitem* menu_parent(Menuitem* m){
    10ca:	fc 01       	movw	r30, r24
	if (m->parent != NULL){
    10cc:	83 81       	ldd	r24, Z+3	; 0x03
    10ce:	94 81       	ldd	r25, Z+4	; 0x04
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <menu_parent+0xc>
		return m->parent;
	}
	else{
		return m;
    10d4:	cf 01       	movw	r24, r30
	}
}
    10d6:	08 95       	ret

000010d8 <menu_next>:

//works
Menuitem* menu_next(Menuitem* m){
    10d8:	cf 93       	push	r28
    10da:	dc 01       	movw	r26, r24
	}
}

//works
Menuitem* menu_parent(Menuitem* m){
	if (m->parent != NULL){
    10dc:	13 96       	adiw	r26, 0x03	; 3
    10de:	ed 91       	ld	r30, X+
    10e0:	fc 91       	ld	r31, X
    10e2:	14 97       	sbiw	r26, 0x04	; 4
    10e4:	30 97       	sbiw	r30, 0x00	; 0
    10e6:	09 f4       	brne	.+2      	; 0x10ea <menu_next+0x12>
		return m->parent;
	}
	else{
		return m;
    10e8:	fc 01       	movw	r30, r24
}

//works
Menuitem* menu_next(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	for(uint8_t n = 0; n < parent->num_submenus; n++){
    10ea:	c0 81       	ld	r28, Z
    10ec:	cc 23       	and	r28, r28
    10ee:	d9 f0       	breq	.+54     	; 0x1126 <menu_next+0x4e>
		if(parent->submenus[n] == m  &&  n < parent->num_submenus){
    10f0:	61 81       	ldd	r22, Z+1	; 0x01
    10f2:	72 81       	ldd	r23, Z+2	; 0x02
    10f4:	fb 01       	movw	r30, r22
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	c9 01       	movw	r24, r18
    10fc:	41 91       	ld	r20, Z+
    10fe:	51 91       	ld	r21, Z+
    1100:	4a 17       	cp	r20, r26
    1102:	5b 07       	cpc	r21, r27
    1104:	59 f4       	brne	.+22     	; 0x111c <menu_next+0x44>
    1106:	2c 17       	cp	r18, r28
    1108:	48 f4       	brcc	.+18     	; 0x111c <menu_next+0x44>
			return parent->submenus[n+1];
    110a:	01 96       	adiw	r24, 0x01	; 1
    110c:	fc 01       	movw	r30, r24
    110e:	ee 0f       	add	r30, r30
    1110:	ff 1f       	adc	r31, r31
    1112:	e6 0f       	add	r30, r22
    1114:	f7 1f       	adc	r31, r23
    1116:	80 81       	ld	r24, Z
    1118:	91 81       	ldd	r25, Z+1	; 0x01
    111a:	0a c0       	rjmp	.+20     	; 0x1130 <menu_next+0x58>
    111c:	2f 5f       	subi	r18, 0xFF	; 255
    111e:	3f 4f       	sbci	r19, 0xFF	; 255
}

//works
Menuitem* menu_next(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	for(uint8_t n = 0; n < parent->num_submenus; n++){
    1120:	2c 17       	cp	r18, r28
    1122:	58 f3       	brcs	.-42     	; 0x10fa <menu_next+0x22>
    1124:	03 c0       	rjmp	.+6      	; 0x112c <menu_next+0x54>
		if(parent->submenus[n] == m  &&  n < parent->num_submenus){
			return parent->submenus[n+1];
		}
	}
	return m;
    1126:	8a 2f       	mov	r24, r26
    1128:	9b 2f       	mov	r25, r27
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <menu_next+0x58>
    112c:	8a 2f       	mov	r24, r26
    112e:	9b 2f       	mov	r25, r27
}
    1130:	cf 91       	pop	r28
    1132:	08 95       	ret

00001134 <menu_prev>:

//works
Menuitem* menu_prev(Menuitem* m){
    1134:	cf 93       	push	r28
    1136:	dc 01       	movw	r26, r24
	}
}

//works
Menuitem* menu_parent(Menuitem* m){
	if (m->parent != NULL){
    1138:	13 96       	adiw	r26, 0x03	; 3
    113a:	ed 91       	ld	r30, X+
    113c:	fc 91       	ld	r31, X
    113e:	14 97       	sbiw	r26, 0x04	; 4
    1140:	30 97       	sbiw	r30, 0x00	; 0
    1142:	09 f4       	brne	.+2      	; 0x1146 <menu_prev+0x12>
		return m->parent;
	}
	else{
		return m;
    1144:	fc 01       	movw	r30, r24

//works
Menuitem* menu_prev(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	
	for(uint8_t n = 0; n < parent->num_submenus; n++){
    1146:	c0 81       	ld	r28, Z
    1148:	cc 23       	and	r28, r28
    114a:	e1 f0       	breq	.+56     	; 0x1184 <menu_prev+0x50>
		if(parent->submenus[n] == m  &&  n > 0){
    114c:	61 81       	ldd	r22, Z+1	; 0x01
    114e:	72 81       	ldd	r23, Z+2	; 0x02
    1150:	fb 01       	movw	r30, r22
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	c9 01       	movw	r24, r18
    1158:	41 91       	ld	r20, Z+
    115a:	51 91       	ld	r21, Z+
    115c:	4a 17       	cp	r20, r26
    115e:	5b 07       	cpc	r21, r27
    1160:	61 f4       	brne	.+24     	; 0x117a <menu_prev+0x46>
    1162:	22 23       	and	r18, r18
    1164:	51 f0       	breq	.+20     	; 0x117a <menu_prev+0x46>
			return parent->submenus[n-1];
    1166:	81 50       	subi	r24, 0x01	; 1
    1168:	90 48       	sbci	r25, 0x80	; 128
    116a:	fc 01       	movw	r30, r24
    116c:	ee 0f       	add	r30, r30
    116e:	ff 1f       	adc	r31, r31
    1170:	e6 0f       	add	r30, r22
    1172:	f7 1f       	adc	r31, r23
    1174:	80 81       	ld	r24, Z
    1176:	91 81       	ldd	r25, Z+1	; 0x01
    1178:	0a c0       	rjmp	.+20     	; 0x118e <menu_prev+0x5a>
    117a:	2f 5f       	subi	r18, 0xFF	; 255
    117c:	3f 4f       	sbci	r19, 0xFF	; 255

//works
Menuitem* menu_prev(Menuitem* m){
	Menuitem* parent = menu_parent(m);
	
	for(uint8_t n = 0; n < parent->num_submenus; n++){
    117e:	2c 17       	cp	r18, r28
    1180:	50 f3       	brcs	.-44     	; 0x1156 <menu_prev+0x22>
    1182:	03 c0       	rjmp	.+6      	; 0x118a <menu_prev+0x56>
		if(parent->submenus[n] == m  &&  n > 0){
			return parent->submenus[n-1];
		}
	}
	return m;
    1184:	8a 2f       	mov	r24, r26
    1186:	9b 2f       	mov	r25, r27
    1188:	02 c0       	rjmp	.+4      	; 0x118e <menu_prev+0x5a>
    118a:	8a 2f       	mov	r24, r26
    118c:	9b 2f       	mov	r25, r27
}
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <menu_submenu_number>:
	}
}

//works
Menuitem* menu_parent(Menuitem* m){
	if (m->parent != NULL){
    1192:	dc 01       	movw	r26, r24
    1194:	13 96       	adiw	r26, 0x03	; 3
    1196:	ed 91       	ld	r30, X+
    1198:	fc 91       	ld	r31, X
    119a:	14 97       	sbiw	r26, 0x04	; 4
    119c:	30 97       	sbiw	r30, 0x00	; 0
    119e:	09 f4       	brne	.+2      	; 0x11a2 <menu_submenu_number+0x10>
		return m->parent;
	}
	else{
		return m;
    11a0:	fc 01       	movw	r30, r24

//works
int menu_submenu_number(Menuitem* m){
	//oled_goto_pos(0,5); removed in conjunction with oled_alt/gui_alt
	Menuitem* parent = menu_parent(m);
	for(int i = 0; i < parent->num_submenus; i++){
    11a2:	60 81       	ld	r22, Z
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	16 16       	cp	r1, r22
    11a8:	17 06       	cpc	r1, r23
    11aa:	fc f4       	brge	.+62     	; 0x11ea <menu_submenu_number+0x58>
		if(parent->submenus[i] == m)
    11ac:	01 80       	ldd	r0, Z+1	; 0x01
    11ae:	f2 81       	ldd	r31, Z+2	; 0x02
    11b0:	e0 2d       	mov	r30, r0
    11b2:	20 81       	ld	r18, Z
    11b4:	31 81       	ldd	r19, Z+1	; 0x01
    11b6:	28 17       	cp	r18, r24
    11b8:	39 07       	cpc	r19, r25
    11ba:	61 f4       	brne	.+24     	; 0x11d4 <menu_submenu_number+0x42>
    11bc:	06 c0       	rjmp	.+12     	; 0x11ca <menu_submenu_number+0x38>
    11be:	41 91       	ld	r20, Z+
    11c0:	51 91       	ld	r21, Z+
    11c2:	48 17       	cp	r20, r24
    11c4:	59 07       	cpc	r21, r25
    11c6:	49 f4       	brne	.+18     	; 0x11da <menu_submenu_number+0x48>
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <menu_submenu_number+0x3c>

//works
int menu_submenu_number(Menuitem* m){
	//oled_goto_pos(0,5); removed in conjunction with oled_alt/gui_alt
	Menuitem* parent = menu_parent(m);
	for(int i = 0; i < parent->num_submenus; i++){
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
		if(parent->submenus[i] == m)

			return i + 1;
    11ce:	c9 01       	movw	r24, r18
    11d0:	01 96       	adiw	r24, 0x01	; 1
    11d2:	08 95       	ret
    11d4:	32 96       	adiw	r30, 0x02	; 2

//works
int menu_submenu_number(Menuitem* m){
	//oled_goto_pos(0,5); removed in conjunction with oled_alt/gui_alt
	Menuitem* parent = menu_parent(m);
	for(int i = 0; i < parent->num_submenus; i++){
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	2f 5f       	subi	r18, 0xFF	; 255
    11dc:	3f 4f       	sbci	r19, 0xFF	; 255
    11de:	26 17       	cp	r18, r22
    11e0:	37 07       	cpc	r19, r23
    11e2:	6c f3       	brlt	.-38     	; 0x11be <menu_submenu_number+0x2c>
		if(parent->submenus[i] == m)

			return i + 1;
	}
	return 0; 		//make safeguarding from this?
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	08 95       	ret
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
}
    11ee:	08 95       	ret

000011f0 <menu_name>:
	//return this->name;
//}

char* menu_name(Menuitem* m){
	return m->name;
}
    11f0:	fc 01       	movw	r30, r24
    11f2:	85 81       	ldd	r24, Z+5	; 0x05
    11f4:	96 81       	ldd	r25, Z+6	; 0x06
    11f6:	08 95       	ret

000011f8 <oled_init>:
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
    11f8:	e0 e0       	ldi	r30, 0x00	; 0
    11fa:	f0 e1       	ldi	r31, 0x10	; 16
    11fc:	8e ea       	ldi	r24, 0xAE	; 174
    11fe:	80 83       	st	Z, r24
    1200:	81 ea       	ldi	r24, 0xA1	; 161
    1202:	80 83       	st	Z, r24
    1204:	8a ed       	ldi	r24, 0xDA	; 218
    1206:	80 83       	st	Z, r24
    1208:	82 e1       	ldi	r24, 0x12	; 18
    120a:	80 83       	st	Z, r24
    120c:	88 ec       	ldi	r24, 0xC8	; 200
    120e:	80 83       	st	Z, r24
    1210:	88 ea       	ldi	r24, 0xA8	; 168
    1212:	80 83       	st	Z, r24
    1214:	8f e3       	ldi	r24, 0x3F	; 63
    1216:	80 83       	st	Z, r24
    1218:	85 ed       	ldi	r24, 0xD5	; 213
    121a:	80 83       	st	Z, r24
    121c:	80 e8       	ldi	r24, 0x80	; 128
    121e:	80 83       	st	Z, r24
    1220:	81 e8       	ldi	r24, 0x81	; 129
    1222:	80 83       	st	Z, r24
    1224:	80 e5       	ldi	r24, 0x50	; 80
    1226:	80 83       	st	Z, r24
    1228:	89 ed       	ldi	r24, 0xD9	; 217
    122a:	80 83       	st	Z, r24
    122c:	81 e2       	ldi	r24, 0x21	; 33
    122e:	80 83       	st	Z, r24
    1230:	90 e2       	ldi	r25, 0x20	; 32
    1232:	90 83       	st	Z, r25
    1234:	10 82       	st	Z, r1
    1236:	9b ed       	ldi	r25, 0xDB	; 219
    1238:	90 83       	st	Z, r25
    123a:	90 e3       	ldi	r25, 0x30	; 48
    123c:	90 83       	st	Z, r25
    123e:	9d ea       	ldi	r25, 0xAD	; 173
    1240:	90 83       	st	Z, r25
    1242:	10 82       	st	Z, r1
    1244:	94 ea       	ldi	r25, 0xA4	; 164
    1246:	90 83       	st	Z, r25
    1248:	96 ea       	ldi	r25, 0xA6	; 166
    124a:	90 83       	st	Z, r25
    124c:	9f ea       	ldi	r25, 0xAF	; 175
    124e:	90 83       	st	Z, r25
    1250:	80 83       	st	Z, r24
    1252:	10 82       	st	Z, r1
    1254:	8f e7       	ldi	r24, 0x7F	; 127
    1256:	80 83       	st	Z, r24
    1258:	92 e2       	ldi	r25, 0x22	; 34
    125a:	90 83       	st	Z, r25
    125c:	10 82       	st	Z, r1
    125e:	80 83       	st	Z, r24
    1260:	08 95       	ret

00001262 <oled_store>:
	
	//to allow 60Hz refresh rate	
	
}

void oled_store(char* string, int* position){
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
	//calculate position offset
	int start_position = position[0]*128 + position[1];
    126a:	fb 01       	movw	r30, r22
    126c:	40 81       	ld	r20, Z
    126e:	51 81       	ldd	r21, Z+1	; 0x01
    1270:	56 95       	lsr	r21
    1272:	54 2f       	mov	r21, r20
    1274:	44 27       	eor	r20, r20
    1276:	57 95       	ror	r21
    1278:	47 95       	ror	r20
    127a:	22 81       	ldd	r18, Z+2	; 0x02
    127c:	33 81       	ldd	r19, Z+3	; 0x03
    127e:	42 0f       	add	r20, r18
    1280:	53 1f       	adc	r21, r19
	for(int i = 0; string[i] != '\0'; ++i){
    1282:	fc 01       	movw	r30, r24
    1284:	20 81       	ld	r18, Z
    1286:	22 23       	and	r18, r18
    1288:	59 f1       	breq	.+86     	; 0x12e0 <oled_store+0x7e>
    128a:	bc 01       	movw	r22, r24
    128c:	6f 5f       	subi	r22, 0xFF	; 255
    128e:	7f 4f       	sbci	r23, 0xFF	; 255
    1290:	ec 01       	movw	r28, r24
	
	//to allow 60Hz refresh rate	
	
}

void oled_store(char* string, int* position){
    1292:	00 e0       	ldi	r16, 0x00	; 0
    1294:	10 e0       	ldi	r17, 0x00	; 0
    1296:	1f c0       	rjmp	.+62     	; 0x12d6 <oled_store+0x74>
    1298:	dc 01       	movw	r26, r24
    129a:	a2 0f       	add	r26, r18
    129c:	b3 1f       	adc	r27, r19
	int start_position = position[0]*128 + position[1];
	for(int i = 0; string[i] != '\0'; ++i){
		//j goes through each col	n of the char in font
		for(int j = 0; j < FONT_SIZE; ++j){
			//font[char index in font][column of char]
			*(SRAM_ADRESS + start_position + i * FONT_SIZE + j) = pgm_read_byte(&font[(int)string[i] - 32][j]);
    129e:	e8 81       	ld	r30, Y
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	b0 97       	sbiw	r30, 0x20	; 32
    12a4:	ee 0f       	add	r30, r30
    12a6:	ff 1f       	adc	r31, r31
    12a8:	ee 0f       	add	r30, r30
    12aa:	ff 1f       	adc	r31, r31
    12ac:	ee 0f       	add	r30, r30
    12ae:	ff 1f       	adc	r31, r31
    12b0:	e2 0f       	add	r30, r18
    12b2:	f3 1f       	adc	r31, r19
    12b4:	e0 59       	subi	r30, 0x90	; 144
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255
    12b8:	e4 91       	lpm	r30, Z
    12ba:	ec 93       	st	X, r30
void oled_store(char* string, int* position){
	//calculate position offset
	int start_position = position[0]*128 + position[1];
	for(int i = 0; string[i] != '\0'; ++i){
		//j goes through each col	n of the char in font
		for(int j = 0; j < FONT_SIZE; ++j){
    12bc:	2f 5f       	subi	r18, 0xFF	; 255
    12be:	3f 4f       	sbci	r19, 0xFF	; 255
    12c0:	28 30       	cpi	r18, 0x08	; 8
    12c2:	31 05       	cpc	r19, r1
    12c4:	49 f7       	brne	.-46     	; 0x1298 <oled_store+0x36>
}

void oled_store(char* string, int* position){
	//calculate position offset
	int start_position = position[0]*128 + position[1];
	for(int i = 0; string[i] != '\0'; ++i){
    12c6:	eb 01       	movw	r28, r22
    12c8:	6f 5f       	subi	r22, 0xFF	; 255
    12ca:	7f 4f       	sbci	r23, 0xFF	; 255
    12cc:	48 5f       	subi	r20, 0xF8	; 248
    12ce:	5f 4f       	sbci	r21, 0xFF	; 255
    12d0:	88 81       	ld	r24, Y
    12d2:	88 23       	and	r24, r24
    12d4:	29 f0       	breq	.+10     	; 0x12e0 <oled_store+0x7e>
	
	//to allow 60Hz refresh rate	
	
}

void oled_store(char* string, int* position){
    12d6:	20 2f       	mov	r18, r16
    12d8:	31 2f       	mov	r19, r17
    12da:	ca 01       	movw	r24, r20
    12dc:	98 5e       	subi	r25, 0xE8	; 232
    12de:	dc cf       	rjmp	.-72     	; 0x1298 <oled_store+0x36>
		for(int j = 0; j < FONT_SIZE; ++j){
			//font[char index in font][column of char]
			*(SRAM_ADRESS + start_position + i * FONT_SIZE + j) = pgm_read_byte(&font[(int)string[i] - 32][j]);
		}
	}
}
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	08 95       	ret

000012ea <oled_store_string>:


//might be unreliable, due to uncertain string length
void oled_store_string(char* string, int col, int line){
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <oled_store_string+0x6>
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <oled_store_string+0x8>
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
	
	oled_store(string, (int[2]){line, col});
    12f6:	5a 83       	std	Y+2, r21	; 0x02
    12f8:	49 83       	std	Y+1, r20	; 0x01
    12fa:	7c 83       	std	Y+4, r23	; 0x04
    12fc:	6b 83       	std	Y+3, r22	; 0x03
    12fe:	be 01       	movw	r22, r28
    1300:	6f 5f       	subi	r22, 0xFF	; 255
    1302:	7f 4f       	sbci	r23, 0xFF	; 255
    1304:	0e 94 31 09 	call	0x1262	; 0x1262 <oled_store>
	
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	08 95       	ret

00001316 <oled_write_screen>:





void oled_write_screen(){
    1316:	e0 e0       	ldi	r30, 0x00	; 0
    1318:	f8 e1       	ldi	r31, 0x18	; 24
	for(int i = 0; i < 1024; ++i){
		*OLED_DATA_ADRESS = *(SRAM_ADRESS + i);
    131a:	a0 e0       	ldi	r26, 0x00	; 0
    131c:	b2 e1       	ldi	r27, 0x12	; 18
    131e:	81 91       	ld	r24, Z+
    1320:	8c 93       	st	X, r24




void oled_write_screen(){
	for(int i = 0; i < 1024; ++i){
    1322:	e1 15       	cp	r30, r1
    1324:	8c e1       	ldi	r24, 0x1C	; 28
    1326:	f8 07       	cpc	r31, r24
    1328:	d1 f7       	brne	.-12     	; 0x131e <oled_write_screen+0x8>
		*OLED_DATA_ADRESS = *(SRAM_ADRESS + i);
	}
}
    132a:	08 95       	ret

0000132c <oled_refresh_60Hz>:
//Seems work at 60Hz
void oled_refresh_60Hz(){
	
	//F_CPU = 4.9152MHz, prescaler = 1024
	//F_CPU / prescaler = 4800Hz = 60Hz * 80
	if(timer_read(TIMER_1) > 80){
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	0e 94 81 0b 	call	0x1702	; 0x1702 <timer_read>
    1332:	81 35       	cpi	r24, 0x51	; 81
    1334:	91 05       	cpc	r25, r1
    1336:	28 f0       	brcs	.+10     	; 0x1342 <oled_refresh_60Hz+0x16>
		oled_write_screen();
    1338:	0e 94 8b 09 	call	0x1316	; 0x1316 <oled_write_screen>
		timer_reset(TIMER_1);
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	0e 94 96 0b 	call	0x172c	; 0x172c <timer_reset>
    1342:	08 95       	ret

00001344 <oled_invert_line>:
}


void oled_invert_line(uint8_t line){
	
	uint16_t start_position = line * 128;
    1344:	20 e8       	ldi	r18, 0x80	; 128
    1346:	82 9f       	mul	r24, r18
    1348:	c0 01       	movw	r24, r0
    134a:	11 24       	eor	r1, r1
    134c:	fc 01       	movw	r30, r24
    134e:	f8 5e       	subi	r31, 0xE8	; 232
    1350:	80 58       	subi	r24, 0x80	; 128
    1352:	97 4e       	sbci	r25, 0xE7	; 231
	uint8_t col_byte;
	
	for(int col = 0; col < 128; ++col){
		col_byte = ~*(SRAM_ADRESS + start_position + col);
    1354:	20 81       	ld	r18, Z
    1356:	20 95       	com	r18
		*(SRAM_ADRESS + start_position + col) = col_byte;
    1358:	21 93       	st	Z+, r18
void oled_invert_line(uint8_t line){
	
	uint16_t start_position = line * 128;
	uint8_t col_byte;
	
	for(int col = 0; col < 128; ++col){
    135a:	e8 17       	cp	r30, r24
    135c:	f9 07       	cpc	r31, r25
    135e:	d1 f7       	brne	.-12     	; 0x1354 <oled_invert_line+0x10>
		col_byte = ~*(SRAM_ADRESS + start_position + col);
		*(SRAM_ADRESS + start_position + col) = col_byte;
	}

}
    1360:	08 95       	ret

00001362 <oled_clear_line>:

void oled_clear_line(int line){
    1362:	cf 92       	push	r12
    1364:	df 92       	push	r13
    1366:	ef 92       	push	r14
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	00 d0       	rcall	.+0      	; 0x1374 <oled_clear_line+0x12>
    1374:	00 d0       	rcall	.+0      	; 0x1376 <oled_clear_line+0x14>
    1376:	00 d0       	rcall	.+0      	; 0x1378 <oled_clear_line+0x16>
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	6c 01       	movw	r12, r24
	
	for(int col = 0; col < NR_COL; col += 8){
    137e:	00 e0       	ldi	r16, 0x00	; 0
    1380:	10 e0       	ldi	r17, 0x00	; 0
		oled_store((char[2]){" "}, (int[2]){line, col});
    1382:	68 94       	set
    1384:	ee 24       	eor	r14, r14
    1386:	e5 f8       	bld	r14, 5
    1388:	f1 2c       	mov	r15, r1
    138a:	dc 82       	std	Y+4, r13	; 0x04
    138c:	cb 82       	std	Y+3, r12	; 0x03
    138e:	1e 83       	std	Y+6, r17	; 0x06
    1390:	0d 83       	std	Y+5, r16	; 0x05
    1392:	fa 82       	std	Y+2, r15	; 0x02
    1394:	e9 82       	std	Y+1, r14	; 0x01
    1396:	be 01       	movw	r22, r28
    1398:	6d 5f       	subi	r22, 0xFD	; 253
    139a:	7f 4f       	sbci	r23, 0xFF	; 255
    139c:	ce 01       	movw	r24, r28
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	0e 94 31 09 	call	0x1262	; 0x1262 <oled_store>

}

void oled_clear_line(int line){
	
	for(int col = 0; col < NR_COL; col += 8){
    13a4:	08 5f       	subi	r16, 0xF8	; 248
    13a6:	1f 4f       	sbci	r17, 0xFF	; 255
    13a8:	00 38       	cpi	r16, 0x80	; 128
    13aa:	11 05       	cpc	r17, r1
    13ac:	71 f7       	brne	.-36     	; 0x138a <oled_clear_line+0x28>
		oled_store((char[2]){" "}, (int[2]){line, col});
	}
	
}
    13ae:	26 96       	adiw	r28, 0x06	; 6
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	08 95       	ret

000013cc <oled_clear_screen>:
	
}



void oled_clear_screen(){
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
	for(int line = 0; line < NR_LINES; ++line){
    13d0:	c0 e0       	ldi	r28, 0x00	; 0
    13d2:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(line);
    13d4:	ce 01       	movw	r24, r28
    13d6:	0e 94 b1 09 	call	0x1362	; 0x1362 <oled_clear_line>
}



void oled_clear_screen(){
	for(int line = 0; line < NR_LINES; ++line){
    13da:	21 96       	adiw	r28, 0x01	; 1
    13dc:	c8 30       	cpi	r28, 0x08	; 8
    13de:	d1 05       	cpc	r29, r1
    13e0:	c9 f7       	brne	.-14     	; 0x13d4 <oled_clear_screen+0x8>
		oled_clear_line(line);
	}
}
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	08 95       	ret

000013e8 <oled_toggle_negative>:


uint8_t screen_negative = 0;

void oled_toggle_negative(){
	if(screen_negative){
    13e8:	80 91 2c 03 	lds	r24, 0x032C
    13ec:	88 23       	and	r24, r24
    13ee:	31 f0       	breq	.+12     	; 0x13fc <oled_toggle_negative+0x14>
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
    13f0:	86 ea       	ldi	r24, 0xA6	; 166
    13f2:	80 93 00 10 	sts	0x1000, r24
uint8_t screen_negative = 0;

void oled_toggle_negative(){
	if(screen_negative){
		oled_mode_normal();
		screen_negative = 0;
    13f6:	10 92 2c 03 	sts	0x032C, r1
    13fa:	08 95       	ret
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
    13fc:	87 ea       	ldi	r24, 0xA7	; 167
    13fe:	80 93 00 10 	sts	0x1000, r24
		oled_mode_normal();
		screen_negative = 0;
	}
	else{
		oled_mode_negative();
		screen_negative = 1;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	80 93 2c 03 	sts	0x032C, r24
    1408:	08 95       	ret

0000140a <oled_change_contrast>:
	}
}


void oled_change_contrast(){
    140a:	7f 92       	push	r7
    140c:	8f 92       	push	r8
    140e:	9f 92       	push	r9
    1410:	af 92       	push	r10
    1412:	bf 92       	push	r11
    1414:	cf 92       	push	r12
    1416:	df 92       	push	r13
    1418:	ef 92       	push	r14
    141a:	ff 92       	push	r15
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	a8 97       	sbiw	r28, 0x28	; 40
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
	
	while(1){
		
		oled_clear_screen();
		
		oled_store((char[9]){"Contrast"}, (int[2]){0, 0});
    1434:	0f 2e       	mov	r0, r31
    1436:	f9 e0       	ldi	r31, 0x09	; 9
    1438:	7f 2e       	mov	r7, r31
    143a:	f0 2d       	mov	r31, r0
		oled_store((char[12]){"left slider"}, (int[2]){4, 3*8});
    143c:	68 94       	set
    143e:	aa 24       	eor	r10, r10
    1440:	a2 f8       	bld	r10, 2
    1442:	b1 2c       	mov	r11, r1
    1444:	0f 2e       	mov	r0, r31
    1446:	f8 e1       	ldi	r31, 0x18	; 24
    1448:	cf 2e       	mov	r12, r31
    144a:	d1 2c       	mov	r13, r1
    144c:	f0 2d       	mov	r31, r0
    144e:	0f 2e       	mov	r0, r31
    1450:	fc e0       	ldi	r31, 0x0C	; 12
    1452:	8f 2e       	mov	r8, r31
    1454:	f0 2d       	mov	r31, r0
		oled_store((char[7]){"Return"}, (int[2]){7, 0});
    1456:	0f 2e       	mov	r0, r31
    1458:	f7 e0       	ldi	r31, 0x07	; 7
    145a:	ef 2e       	mov	r14, r31
    145c:	f1 2c       	mov	r15, r1
    145e:	f0 2d       	mov	r31, r0
    1460:	0f 2e       	mov	r0, r31
    1462:	f7 e0       	ldi	r31, 0x07	; 7
    1464:	9f 2e       	mov	r9, r31
    1466:	f0 2d       	mov	r31, r0
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
    1468:	00 e0       	ldi	r16, 0x00	; 0
    146a:	10 e1       	ldi	r17, 0x10	; 16
	
	uint8_t contrast;
	
	while(1){
		
		oled_clear_screen();
    146c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <oled_clear_screen>
		
		oled_store((char[9]){"Contrast"}, (int[2]){0, 0});
    1470:	1e a2       	std	Y+38, r1	; 0x26
    1472:	1d a2       	std	Y+37, r1	; 0x25
    1474:	18 a6       	std	Y+40, r1	; 0x28
    1476:	1f a2       	std	Y+39, r1	; 0x27
    1478:	ef e5       	ldi	r30, 0x5F	; 95
    147a:	f2 e0       	ldi	r31, 0x02	; 2
    147c:	de 01       	movw	r26, r28
    147e:	5c 96       	adiw	r26, 0x1c	; 28
    1480:	87 2d       	mov	r24, r7
    1482:	01 90       	ld	r0, Z+
    1484:	0d 92       	st	X+, r0
    1486:	8a 95       	dec	r24
    1488:	e1 f7       	brne	.-8      	; 0x1482 <oled_change_contrast+0x78>
    148a:	be 01       	movw	r22, r28
    148c:	6b 5d       	subi	r22, 0xDB	; 219
    148e:	7f 4f       	sbci	r23, 0xFF	; 255
    1490:	ce 01       	movw	r24, r28
    1492:	4c 96       	adiw	r24, 0x1c	; 28
    1494:	0e 94 31 09 	call	0x1262	; 0x1262 <oled_store>
		oled_store((char[12]){"left slider"}, (int[2]){4, 3*8});
    1498:	b9 8e       	std	Y+25, r11	; 0x19
    149a:	a8 8e       	std	Y+24, r10	; 0x18
    149c:	db 8e       	std	Y+27, r13	; 0x1b
    149e:	ca 8e       	std	Y+26, r12	; 0x1a
    14a0:	ef ea       	ldi	r30, 0xAF	; 175
    14a2:	f2 e0       	ldi	r31, 0x02	; 2
    14a4:	de 01       	movw	r26, r28
    14a6:	1c 96       	adiw	r26, 0x0c	; 12
    14a8:	88 2d       	mov	r24, r8
    14aa:	01 90       	ld	r0, Z+
    14ac:	0d 92       	st	X+, r0
    14ae:	8a 95       	dec	r24
    14b0:	e1 f7       	brne	.-8      	; 0x14aa <oled_change_contrast+0xa0>
    14b2:	be 01       	movw	r22, r28
    14b4:	68 5e       	subi	r22, 0xE8	; 232
    14b6:	7f 4f       	sbci	r23, 0xFF	; 255
    14b8:	ce 01       	movw	r24, r28
    14ba:	0c 96       	adiw	r24, 0x0c	; 12
    14bc:	0e 94 31 09 	call	0x1262	; 0x1262 <oled_store>
		oled_store((char[7]){"Return"}, (int[2]){7, 0});
    14c0:	f9 86       	std	Y+9, r15	; 0x09
    14c2:	e8 86       	std	Y+8, r14	; 0x08
    14c4:	1b 86       	std	Y+11, r1	; 0x0b
    14c6:	1a 86       	std	Y+10, r1	; 0x0a
    14c8:	ec ed       	ldi	r30, 0xDC	; 220
    14ca:	f1 e0       	ldi	r31, 0x01	; 1
    14cc:	de 01       	movw	r26, r28
    14ce:	11 96       	adiw	r26, 0x01	; 1
    14d0:	89 2d       	mov	r24, r9
    14d2:	01 90       	ld	r0, Z+
    14d4:	0d 92       	st	X+, r0
    14d6:	8a 95       	dec	r24
    14d8:	e1 f7       	brne	.-8      	; 0x14d2 <oled_change_contrast+0xc8>
    14da:	be 01       	movw	r22, r28
    14dc:	68 5f       	subi	r22, 0xF8	; 248
    14de:	7f 4f       	sbci	r23, 0xFF	; 255
    14e0:	ce 01       	movw	r24, r28
    14e2:	01 96       	adiw	r24, 0x01	; 1
    14e4:	0e 94 31 09 	call	0x1262	; 0x1262 <oled_store>

			
			
		
		oled_write_screen();
    14e8:	0e 94 8b 09 	call	0x1316	; 0x1316 <oled_write_screen>
		
		contrast = slider_left_read();
    14ec:	0e 94 95 06 	call	0xd2a	; 0xd2a <slider_left_read>
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
    14f0:	91 e8       	ldi	r25, 0x81	; 129
    14f2:	f8 01       	movw	r30, r16
    14f4:	90 83       	st	Z, r25
    14f6:	80 83       	st	Z, r24
		contrast = slider_left_read();
		oled_command_write(0x81);    //contrast control
		oled_command_write(contrast);  
		
		
		if(button_left_read()){
    14f8:	0e 94 b9 06 	call	0xd72	; 0xd72 <button_left_read>
    14fc:	88 23       	and	r24, r24
    14fe:	09 f4       	brne	.+2      	; 0x1502 <oled_change_contrast+0xf8>
    1500:	b5 cf       	rjmp	.-150    	; 0x146c <oled_change_contrast+0x62>
			return;
		}
	}	

}
    1502:	a8 96       	adiw	r28, 0x28	; 40
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	ff 90       	pop	r15
    1518:	ef 90       	pop	r14
    151a:	df 90       	pop	r13
    151c:	cf 90       	pop	r12
    151e:	bf 90       	pop	r11
    1520:	af 90       	pop	r10
    1522:	9f 90       	pop	r9
    1524:	8f 90       	pop	r8
    1526:	7f 90       	pop	r7
    1528:	08 95       	ret

0000152a <oled_epleptic_seizure>:


void oled_epleptic_seizure(){
	while(1){
		oled_toggle_negative();
    152a:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <oled_toggle_negative>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    152e:	2c ec       	ldi	r18, 0xCC	; 204
    1530:	8c e0       	ldi	r24, 0x0C	; 12
    1532:	91 e0       	ldi	r25, 0x01	; 1
    1534:	21 50       	subi	r18, 0x01	; 1
    1536:	80 40       	sbci	r24, 0x00	; 0
    1538:	90 40       	sbci	r25, 0x00	; 0
    153a:	e1 f7       	brne	.-8      	; 0x1534 <oled_epleptic_seizure+0xa>
    153c:	00 c0       	rjmp	.+0      	; 0x153e <oled_epleptic_seizure+0x14>
		_delay_ms(70);
		
		if(button_left_read()){
    153e:	0e 94 b9 06 	call	0xd72	; 0xd72 <button_left_read>
    1542:	88 23       	and	r24, r24
    1544:	91 f3       	breq	.-28     	; 0x152a <oled_epleptic_seizure>
			return;
		}
	}
}
    1546:	08 95       	ret

00001548 <oled_put_string>:


//Last minute function to allow printing numbers
void oled_put_string(uint8_t col,uint8_t page, char * string, ...){
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	61 97       	sbiw	r28, 0x11	; 17
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
	char buffer[17];
	va_list v;
	va_start(v,string);
	vsprintf(buffer, string, v);
    155c:	ae 01       	movw	r20, r28
    155e:	46 5e       	subi	r20, 0xE6	; 230
    1560:	5f 4f       	sbci	r21, 0xFF	; 255
    1562:	68 8d       	ldd	r22, Y+24	; 0x18
    1564:	79 8d       	ldd	r23, Y+25	; 0x19
    1566:	ce 01       	movw	r24, r28
    1568:	01 96       	adiw	r24, 0x01	; 1
    156a:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <vsprintf>
	va_end(v);
	
	
	uint16_t start_position = page * 128 + col;
    156e:	4e 89       	ldd	r20, Y+22	; 0x16
    1570:	50 e0       	ldi	r21, 0x00	; 0
    1572:	8f 89       	ldd	r24, Y+23	; 0x17
    1574:	90 e8       	ldi	r25, 0x80	; 128
    1576:	89 9f       	mul	r24, r25
    1578:	40 0d       	add	r20, r0
    157a:	51 1d       	adc	r21, r1
    157c:	11 24       	eor	r1, r1
	for(uint8_t i = 0; buffer[i] != '\0'; ++i){
    157e:	e9 81       	ldd	r30, Y+1	; 0x01
    1580:	ee 23       	and	r30, r30
    1582:	89 f1       	breq	.+98     	; 0x15e6 <oled_put_string+0x9e>
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	60 e0       	ldi	r22, 0x00	; 0
		//j goes through each col n of the char in font
		for(uint8_t j = 0; j < FONT_SIZE; ++j){
			//font[char index in font][column of char]
			*(SRAM_ADRESS + start_position + i * FONT_SIZE + j) = pgm_read_byte(&font[(int)buffer[i] - 32][j]);
    158a:	78 e0       	ldi	r23, 0x08	; 8
    158c:	13 c0       	rjmp	.+38     	; 0x15b4 <oled_put_string+0x6c>
    158e:	fc 01       	movw	r30, r24
    1590:	ea 0f       	add	r30, r26
    1592:	fb 1f       	adc	r31, r27
    1594:	e4 91       	lpm	r30, Z
    1596:	ed 93       	st	X+, r30
    1598:	21 50       	subi	r18, 0x01	; 1
	
	
	uint16_t start_position = page * 128 + col;
	for(uint8_t i = 0; buffer[i] != '\0'; ++i){
		//j goes through each col n of the char in font
		for(uint8_t j = 0; j < FONT_SIZE; ++j){
    159a:	c9 f7       	brne	.-14     	; 0x158e <oled_put_string+0x46>
	vsprintf(buffer, string, v);
	va_end(v);
	
	
	uint16_t start_position = page * 128 + col;
	for(uint8_t i = 0; buffer[i] != '\0'; ++i){
    159c:	6f 5f       	subi	r22, 0xFF	; 255
    159e:	86 2f       	mov	r24, r22
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	e1 e0       	ldi	r30, 0x01	; 1
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	ec 0f       	add	r30, r28
    15a8:	fd 1f       	adc	r31, r29
    15aa:	e8 0f       	add	r30, r24
    15ac:	f9 1f       	adc	r31, r25
    15ae:	e0 81       	ld	r30, Z
    15b0:	ee 23       	and	r30, r30
    15b2:	c9 f0       	breq	.+50     	; 0x15e6 <oled_put_string+0x9e>
		//j goes through each col n of the char in font
		for(uint8_t j = 0; j < FONT_SIZE; ++j){
			//font[char index in font][column of char]
			*(SRAM_ADRESS + start_position + i * FONT_SIZE + j) = pgm_read_byte(&font[(int)buffer[i] - 32][j]);
    15b4:	9c 01       	movw	r18, r24
    15b6:	22 0f       	add	r18, r18
    15b8:	33 1f       	adc	r19, r19
    15ba:	22 0f       	add	r18, r18
    15bc:	33 1f       	adc	r19, r19
    15be:	22 0f       	add	r18, r18
    15c0:	33 1f       	adc	r19, r19
    15c2:	24 0f       	add	r18, r20
    15c4:	35 1f       	adc	r19, r21
    15c6:	d9 01       	movw	r26, r18
    15c8:	b8 5e       	subi	r27, 0xE8	; 232
    15ca:	8e 2f       	mov	r24, r30
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	82 1b       	sub	r24, r18
    15dc:	93 0b       	sbc	r25, r19
    15de:	27 2f       	mov	r18, r23
    15e0:	80 59       	subi	r24, 0x90	; 144
    15e2:	98 41       	sbci	r25, 0x18	; 24
    15e4:	d4 cf       	rjmp	.-88     	; 0x158e <oled_put_string+0x46>
		}
	}

}
    15e6:	61 96       	adiw	r28, 0x11	; 17
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	08 95       	ret

000015f8 <spi_init>:
#include "SPI.h"
#include <avr/io.h>

void spi_init(){
			//SI out		SS out		SCK out
	DDRB |= ( 1 << PB5) | (1 << PB4) | (1 << PB7);
    15f8:	87 b3       	in	r24, 0x17	; 23
    15fa:	80 6b       	ori	r24, 0xB0	; 176
    15fc:	87 bb       	out	0x17, r24	; 23
			//SO in
	DDRB &= ~(1 << PB6);
    15fe:	be 98       	cbi	0x17, 6	; 23
	
	//								 frequency / 16
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
    1600:	81 e5       	ldi	r24, 0x51	; 81
    1602:	8d b9       	out	0x0d, r24	; 13
    1604:	08 95       	ret

00001606 <spi_write>:

//both read and write
int spi_write(char data){
	//SPDR = data;
	//while(!(SPSR & (1<<SPIF)));
	SPDR = data;
    1606:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
    1608:	77 9b       	sbis	0x0e, 7	; 14
    160a:	fe cf       	rjmp	.-4      	; 0x1608 <spi_write+0x2>
	return SPDR;
    160c:	8f b1       	in	r24, 0x0f	; 15
}
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	08 95       	ret

00001612 <SRAM_test>:
#include <avr/io.h>

void SRAM_test(void)
{
    1612:	ef 92       	push	r14
    1614:	ff 92       	push	r15
    1616:	0f 93       	push	r16
    1618:	1f 93       	push	r17
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;

	printf("Starting SRAM test...\n");
    161e:	8b eb       	ldi	r24, 0xBB	; 187
    1620:	92 e0       	ldi	r25, 0x02	; 2
    1622:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <puts>

	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
    1626:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <rand>
    162a:	7c 01       	movw	r14, r24

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
    162c:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <srand>
    1630:	c0 e0       	ldi	r28, 0x00	; 0
    1632:	d8 e1       	ldi	r29, 0x18	; 24

void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
    1634:	00 e0       	ldi	r16, 0x00	; 0
    1636:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
    1638:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <rand>
		ext_ram[i] = some_value;
    163c:	88 83       	st	Y, r24
		uint8_t retreived_value = ext_ram[i];
    163e:	98 81       	ld	r25, Y
		if (retreived_value != some_value) {
    1640:	98 17       	cp	r25, r24
    1642:	11 f0       	breq	.+4      	; 0x1648 <SRAM_test+0x36>
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
    1644:	0f 5f       	subi	r16, 0xFF	; 255
    1646:	1f 4f       	sbci	r17, 0xFF	; 255
    1648:	21 96       	adiw	r28, 0x01	; 1
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
    164a:	c1 15       	cp	r28, r1
    164c:	80 e2       	ldi	r24, 0x20	; 32
    164e:	d8 07       	cpc	r29, r24
    1650:	99 f7       	brne	.-26     	; 0x1638 <SRAM_test+0x26>
			write_errors++;
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
    1652:	c7 01       	movw	r24, r14
    1654:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <srand>
    1658:	c0 e0       	ldi	r28, 0x00	; 0
    165a:	d8 e1       	ldi	r29, 0x18	; 24
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;
    165c:	e1 2c       	mov	r14, r1
    165e:	f1 2c       	mov	r15, r1
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
    1660:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <rand>
		uint8_t retreived_value = ext_ram[i];
    1664:	98 81       	ld	r25, Y
		if (retreived_value != some_value) {
    1666:	98 17       	cp	r25, r24
    1668:	19 f0       	breq	.+6      	; 0x1670 <SRAM_test+0x5e>
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
    166a:	8f ef       	ldi	r24, 0xFF	; 255
    166c:	e8 1a       	sub	r14, r24
    166e:	f8 0a       	sbc	r15, r24
    1670:	21 96       	adiw	r28, 0x01	; 1
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
    1672:	c1 15       	cp	r28, r1
    1674:	80 e2       	ldi	r24, 0x20	; 32
    1676:	d8 07       	cpc	r29, r24
    1678:	99 f7       	brne	.-26     	; 0x1660 <SRAM_test+0x4e>
		if (retreived_value != some_value) {
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
    167a:	ff 92       	push	r15
    167c:	ef 92       	push	r14
    167e:	1f 93       	push	r17
    1680:	0f 93       	push	r16
    1682:	81 ed       	ldi	r24, 0xD1	; 209
    1684:	92 e0       	ldi	r25, 0x02	; 2
    1686:	9f 93       	push	r25
    1688:	8f 93       	push	r24
    168a:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <printf>
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
}
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	ff 90       	pop	r15
    16a4:	ef 90       	pop	r14
    16a6:	08 95       	ret

000016a8 <timer_init>:
//timer 1 and 3 are 16 bit timers

void timer_init(){
	//timer1 to be used for Oled_refresh at 60 Hz
	
	TCCR1A = 0;
    16a8:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
    16aa:	1e bc       	out	0x2e, r1	; 46
	
	//prescaler = 1024. Clock now counts at F_CPU / 1024 Hz = 4800 Hz
	TCCR1B |= (1<<CS12) | (1<<CS10);
    16ac:	8e b5       	in	r24, 0x2e	; 46
    16ae:	85 60       	ori	r24, 0x05	; 5
    16b0:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<CS11);
    16b2:	8e b5       	in	r24, 0x2e	; 46
    16b4:	8d 7f       	andi	r24, 0xFD	; 253
    16b6:	8e bd       	out	0x2e, r24	; 46
	//or simpler, but makes it impossible for other modules
	//to use timer1, just reset and refresh oled after
	//80 clock ticks
	
	//Mode 0, clock max = 0xFFFF
	TCCR1A &= ~(1<<WGM10);
    16b8:	8f b5       	in	r24, 0x2f	; 47
    16ba:	8e 7f       	andi	r24, 0xFE	; 254
    16bc:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1<<WGM11);
    16be:	8f b5       	in	r24, 0x2f	; 47
    16c0:	8d 7f       	andi	r24, 0xFD	; 253
    16c2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B &= ~(1<<WGM12);
    16c4:	8e b5       	in	r24, 0x2e	; 46
    16c6:	87 7f       	andi	r24, 0xF7	; 247
    16c8:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<WGM13);
    16ca:	8e b5       	in	r24, 0x2e	; 46
    16cc:	8f 7e       	andi	r24, 0xEF	; 239
    16ce:	8e bd       	out	0x2e, r24	; 46
	
	
	//timer 3 to avoid can message spam
	//same mode and prescalre as timer 1
	TCCR3A = 0;
    16d0:	ab e8       	ldi	r26, 0x8B	; 139
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	1c 92       	st	X, r1
	TCCR3B = 0;
    16d6:	ea e8       	ldi	r30, 0x8A	; 138
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	10 82       	st	Z, r1
	
	TCCR3B |= (1<<CS32) | (1<<CS30);
    16dc:	80 81       	ld	r24, Z
    16de:	85 60       	ori	r24, 0x05	; 5
    16e0:	80 83       	st	Z, r24
	TCCR3B &= ~(1<<CS31);
    16e2:	80 81       	ld	r24, Z
    16e4:	8d 7f       	andi	r24, 0xFD	; 253
    16e6:	80 83       	st	Z, r24
	
	TCCR3A &= ~(1<<WGM10);
    16e8:	8c 91       	ld	r24, X
    16ea:	8e 7f       	andi	r24, 0xFE	; 254
    16ec:	8c 93       	st	X, r24
	TCCR3A &= ~(1<<WGM11);
    16ee:	8c 91       	ld	r24, X
    16f0:	8d 7f       	andi	r24, 0xFD	; 253
    16f2:	8c 93       	st	X, r24
	TCCR3B &= ~(1<<WGM12);
    16f4:	80 81       	ld	r24, Z
    16f6:	87 7f       	andi	r24, 0xF7	; 247
    16f8:	80 83       	st	Z, r24
	TCCR3B &= ~(1<<WGM13);
    16fa:	80 81       	ld	r24, Z
    16fc:	8f 7e       	andi	r24, 0xEF	; 239
    16fe:	80 83       	st	Z, r24
    1700:	08 95       	ret

00001702 <timer_read>:
}

uint16_t timer_read(timer nr){
	if(nr == TIMER_1)
    1702:	81 11       	cpse	r24, r1
    1704:	03 c0       	rjmp	.+6      	; 0x170c <timer_read+0xa>
		return TCNT1;
    1706:	2c b5       	in	r18, 0x2c	; 44
    1708:	3d b5       	in	r19, 0x2d	; 45
    170a:	0d c0       	rjmp	.+26     	; 0x1726 <timer_read+0x24>
	else if(nr == TIMER_2)
    170c:	81 30       	cpi	r24, 0x01	; 1
    170e:	19 f4       	brne	.+6      	; 0x1716 <timer_read+0x14>
		return TCNT2;
    1710:	23 b5       	in	r18, 0x23	; 35
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	08 c0       	rjmp	.+16     	; 0x1726 <timer_read+0x24>
	else if(nr == TIMER_3)
    1716:	82 30       	cpi	r24, 0x02	; 2
    1718:	29 f4       	brne	.+10     	; 0x1724 <timer_read+0x22>
		return TCNT3;
    171a:	20 91 88 00 	lds	r18, 0x0088
    171e:	30 91 89 00 	lds	r19, 0x0089
    1722:	01 c0       	rjmp	.+2      	; 0x1726 <timer_read+0x24>
    1724:	08 95       	ret
    1726:	82 2f       	mov	r24, r18
    1728:	93 2f       	mov	r25, r19
}
    172a:	08 95       	ret

0000172c <timer_reset>:

void timer_reset(timer nr){
	if(nr == TIMER_1)
    172c:	81 11       	cpse	r24, r1
    172e:	03 c0       	rjmp	.+6      	; 0x1736 <timer_reset+0xa>
		TCNT1 = 0;
    1730:	1d bc       	out	0x2d, r1	; 45
    1732:	1c bc       	out	0x2c, r1	; 44
    1734:	08 95       	ret
	else if(nr == TIMER_2)
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	11 f4       	brne	.+4      	; 0x173e <timer_reset+0x12>
		TCNT2 = 0;
    173a:	13 bc       	out	0x23, r1	; 35
    173c:	08 95       	ret
	else if(nr == TIMER_3)
    173e:	82 30       	cpi	r24, 0x02	; 2
    1740:	21 f4       	brne	.+8      	; 0x174a <timer_reset+0x1e>
		TCNT3 = 0;
    1742:	10 92 89 00 	sts	0x0089, r1
    1746:	10 92 88 00 	sts	0x0088, r1
    174a:	08 95       	ret

0000174c <uart_Transmit>:
}

void uart_Transmit( unsigned char data ){
	
	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
    174c:	5d 9b       	sbis	0x0b, 5	; 11
    174e:	fe cf       	rjmp	.-4      	; 0x174c <uart_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;
    1750:	8c b9       	out	0x0c, r24	; 12
    1752:	08 95       	ret

00001754 <uart_Receive>:

unsigned char uart_Receive(void){
	
	//Wait for data to be received
	
	while( !(UCSR0A & (1<<RXC0)) );
    1754:	5f 9b       	sbis	0x0b, 7	; 11
    1756:	fe cf       	rjmp	.-4      	; 0x1754 <uart_Receive>
	
	//Get and return received data from buffer
	
	return UDR0;
    1758:	8c b1       	in	r24, 0x0c	; 12
}
    175a:	08 95       	ret

0000175c <uart_Init>:
#include "uart.h"

void uart_Init(unsigned int ubrr){
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
    175c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
    175e:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN1)|(1<<TXEN1);
    1760:	88 e1       	ldi	r24, 0x18	; 24
    1762:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8data, 1stop bit
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    1764:	86 e8       	ldi	r24, 0x86	; 134
    1766:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uart_Transmit, uart_Receive);
    1768:	6a ea       	ldi	r22, 0xAA	; 170
    176a:	7b e0       	ldi	r23, 0x0B	; 11
    176c:	86 ea       	ldi	r24, 0xA6	; 166
    176e:	9b e0       	ldi	r25, 0x0B	; 11
    1770:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <fdevopen>
    1774:	08 95       	ret

00001776 <malloc>:
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	82 30       	cpi	r24, 0x02	; 2
    177c:	91 05       	cpc	r25, r1
    177e:	10 f4       	brcc	.+4      	; 0x1784 <malloc+0xe>
    1780:	82 e0       	ldi	r24, 0x02	; 2
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	e0 91 42 03 	lds	r30, 0x0342
    1788:	f0 91 43 03 	lds	r31, 0x0343
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	a0 e0       	ldi	r26, 0x00	; 0
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	30 97       	sbiw	r30, 0x00	; 0
    1796:	39 f1       	breq	.+78     	; 0x17e6 <malloc+0x70>
    1798:	40 81       	ld	r20, Z
    179a:	51 81       	ldd	r21, Z+1	; 0x01
    179c:	48 17       	cp	r20, r24
    179e:	59 07       	cpc	r21, r25
    17a0:	b8 f0       	brcs	.+46     	; 0x17d0 <malloc+0x5a>
    17a2:	48 17       	cp	r20, r24
    17a4:	59 07       	cpc	r21, r25
    17a6:	71 f4       	brne	.+28     	; 0x17c4 <malloc+0x4e>
    17a8:	82 81       	ldd	r24, Z+2	; 0x02
    17aa:	93 81       	ldd	r25, Z+3	; 0x03
    17ac:	10 97       	sbiw	r26, 0x00	; 0
    17ae:	29 f0       	breq	.+10     	; 0x17ba <malloc+0x44>
    17b0:	13 96       	adiw	r26, 0x03	; 3
    17b2:	9c 93       	st	X, r25
    17b4:	8e 93       	st	-X, r24
    17b6:	12 97       	sbiw	r26, 0x02	; 2
    17b8:	2c c0       	rjmp	.+88     	; 0x1812 <malloc+0x9c>
    17ba:	90 93 43 03 	sts	0x0343, r25
    17be:	80 93 42 03 	sts	0x0342, r24
    17c2:	27 c0       	rjmp	.+78     	; 0x1812 <malloc+0x9c>
    17c4:	21 15       	cp	r18, r1
    17c6:	31 05       	cpc	r19, r1
    17c8:	31 f0       	breq	.+12     	; 0x17d6 <malloc+0x60>
    17ca:	42 17       	cp	r20, r18
    17cc:	53 07       	cpc	r21, r19
    17ce:	18 f0       	brcs	.+6      	; 0x17d6 <malloc+0x60>
    17d0:	a9 01       	movw	r20, r18
    17d2:	db 01       	movw	r26, r22
    17d4:	01 c0       	rjmp	.+2      	; 0x17d8 <malloc+0x62>
    17d6:	ef 01       	movw	r28, r30
    17d8:	9a 01       	movw	r18, r20
    17da:	bd 01       	movw	r22, r26
    17dc:	df 01       	movw	r26, r30
    17de:	02 80       	ldd	r0, Z+2	; 0x02
    17e0:	f3 81       	ldd	r31, Z+3	; 0x03
    17e2:	e0 2d       	mov	r30, r0
    17e4:	d7 cf       	rjmp	.-82     	; 0x1794 <malloc+0x1e>
    17e6:	21 15       	cp	r18, r1
    17e8:	31 05       	cpc	r19, r1
    17ea:	f9 f0       	breq	.+62     	; 0x182a <malloc+0xb4>
    17ec:	28 1b       	sub	r18, r24
    17ee:	39 0b       	sbc	r19, r25
    17f0:	24 30       	cpi	r18, 0x04	; 4
    17f2:	31 05       	cpc	r19, r1
    17f4:	80 f4       	brcc	.+32     	; 0x1816 <malloc+0xa0>
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	9b 81       	ldd	r25, Y+3	; 0x03
    17fa:	61 15       	cp	r22, r1
    17fc:	71 05       	cpc	r23, r1
    17fe:	21 f0       	breq	.+8      	; 0x1808 <malloc+0x92>
    1800:	fb 01       	movw	r30, r22
    1802:	93 83       	std	Z+3, r25	; 0x03
    1804:	82 83       	std	Z+2, r24	; 0x02
    1806:	04 c0       	rjmp	.+8      	; 0x1810 <malloc+0x9a>
    1808:	90 93 43 03 	sts	0x0343, r25
    180c:	80 93 42 03 	sts	0x0342, r24
    1810:	fe 01       	movw	r30, r28
    1812:	32 96       	adiw	r30, 0x02	; 2
    1814:	44 c0       	rjmp	.+136    	; 0x189e <malloc+0x128>
    1816:	fe 01       	movw	r30, r28
    1818:	e2 0f       	add	r30, r18
    181a:	f3 1f       	adc	r31, r19
    181c:	81 93       	st	Z+, r24
    181e:	91 93       	st	Z+, r25
    1820:	22 50       	subi	r18, 0x02	; 2
    1822:	31 09       	sbc	r19, r1
    1824:	39 83       	std	Y+1, r19	; 0x01
    1826:	28 83       	st	Y, r18
    1828:	3a c0       	rjmp	.+116    	; 0x189e <malloc+0x128>
    182a:	20 91 40 03 	lds	r18, 0x0340
    182e:	30 91 41 03 	lds	r19, 0x0341
    1832:	23 2b       	or	r18, r19
    1834:	41 f4       	brne	.+16     	; 0x1846 <malloc+0xd0>
    1836:	20 91 02 01 	lds	r18, 0x0102
    183a:	30 91 03 01 	lds	r19, 0x0103
    183e:	30 93 41 03 	sts	0x0341, r19
    1842:	20 93 40 03 	sts	0x0340, r18
    1846:	20 91 00 01 	lds	r18, 0x0100
    184a:	30 91 01 01 	lds	r19, 0x0101
    184e:	21 15       	cp	r18, r1
    1850:	31 05       	cpc	r19, r1
    1852:	41 f4       	brne	.+16     	; 0x1864 <malloc+0xee>
    1854:	2d b7       	in	r18, 0x3d	; 61
    1856:	3e b7       	in	r19, 0x3e	; 62
    1858:	40 91 04 01 	lds	r20, 0x0104
    185c:	50 91 05 01 	lds	r21, 0x0105
    1860:	24 1b       	sub	r18, r20
    1862:	35 0b       	sbc	r19, r21
    1864:	e0 91 40 03 	lds	r30, 0x0340
    1868:	f0 91 41 03 	lds	r31, 0x0341
    186c:	e2 17       	cp	r30, r18
    186e:	f3 07       	cpc	r31, r19
    1870:	a0 f4       	brcc	.+40     	; 0x189a <malloc+0x124>
    1872:	2e 1b       	sub	r18, r30
    1874:	3f 0b       	sbc	r19, r31
    1876:	28 17       	cp	r18, r24
    1878:	39 07       	cpc	r19, r25
    187a:	78 f0       	brcs	.+30     	; 0x189a <malloc+0x124>
    187c:	ac 01       	movw	r20, r24
    187e:	4e 5f       	subi	r20, 0xFE	; 254
    1880:	5f 4f       	sbci	r21, 0xFF	; 255
    1882:	24 17       	cp	r18, r20
    1884:	35 07       	cpc	r19, r21
    1886:	48 f0       	brcs	.+18     	; 0x189a <malloc+0x124>
    1888:	4e 0f       	add	r20, r30
    188a:	5f 1f       	adc	r21, r31
    188c:	50 93 41 03 	sts	0x0341, r21
    1890:	40 93 40 03 	sts	0x0340, r20
    1894:	81 93       	st	Z+, r24
    1896:	91 93       	st	Z+, r25
    1898:	02 c0       	rjmp	.+4      	; 0x189e <malloc+0x128>
    189a:	e0 e0       	ldi	r30, 0x00	; 0
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	cf 01       	movw	r24, r30
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	08 95       	ret

000018a6 <free>:
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <free+0xa>
    18ae:	87 c0       	rjmp	.+270    	; 0x19be <free+0x118>
    18b0:	fc 01       	movw	r30, r24
    18b2:	32 97       	sbiw	r30, 0x02	; 2
    18b4:	13 82       	std	Z+3, r1	; 0x03
    18b6:	12 82       	std	Z+2, r1	; 0x02
    18b8:	c0 91 42 03 	lds	r28, 0x0342
    18bc:	d0 91 43 03 	lds	r29, 0x0343
    18c0:	20 97       	sbiw	r28, 0x00	; 0
    18c2:	81 f4       	brne	.+32     	; 0x18e4 <free+0x3e>
    18c4:	20 81       	ld	r18, Z
    18c6:	31 81       	ldd	r19, Z+1	; 0x01
    18c8:	28 0f       	add	r18, r24
    18ca:	39 1f       	adc	r19, r25
    18cc:	80 91 40 03 	lds	r24, 0x0340
    18d0:	90 91 41 03 	lds	r25, 0x0341
    18d4:	82 17       	cp	r24, r18
    18d6:	93 07       	cpc	r25, r19
    18d8:	79 f5       	brne	.+94     	; 0x1938 <free+0x92>
    18da:	f0 93 41 03 	sts	0x0341, r31
    18de:	e0 93 40 03 	sts	0x0340, r30
    18e2:	6d c0       	rjmp	.+218    	; 0x19be <free+0x118>
    18e4:	de 01       	movw	r26, r28
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	ae 17       	cp	r26, r30
    18ec:	bf 07       	cpc	r27, r31
    18ee:	50 f4       	brcc	.+20     	; 0x1904 <free+0x5e>
    18f0:	12 96       	adiw	r26, 0x02	; 2
    18f2:	4d 91       	ld	r20, X+
    18f4:	5c 91       	ld	r21, X
    18f6:	13 97       	sbiw	r26, 0x03	; 3
    18f8:	9d 01       	movw	r18, r26
    18fa:	41 15       	cp	r20, r1
    18fc:	51 05       	cpc	r21, r1
    18fe:	09 f1       	breq	.+66     	; 0x1942 <free+0x9c>
    1900:	da 01       	movw	r26, r20
    1902:	f3 cf       	rjmp	.-26     	; 0x18ea <free+0x44>
    1904:	b3 83       	std	Z+3, r27	; 0x03
    1906:	a2 83       	std	Z+2, r26	; 0x02
    1908:	40 81       	ld	r20, Z
    190a:	51 81       	ldd	r21, Z+1	; 0x01
    190c:	84 0f       	add	r24, r20
    190e:	95 1f       	adc	r25, r21
    1910:	8a 17       	cp	r24, r26
    1912:	9b 07       	cpc	r25, r27
    1914:	71 f4       	brne	.+28     	; 0x1932 <free+0x8c>
    1916:	8d 91       	ld	r24, X+
    1918:	9c 91       	ld	r25, X
    191a:	11 97       	sbiw	r26, 0x01	; 1
    191c:	84 0f       	add	r24, r20
    191e:	95 1f       	adc	r25, r21
    1920:	02 96       	adiw	r24, 0x02	; 2
    1922:	91 83       	std	Z+1, r25	; 0x01
    1924:	80 83       	st	Z, r24
    1926:	12 96       	adiw	r26, 0x02	; 2
    1928:	8d 91       	ld	r24, X+
    192a:	9c 91       	ld	r25, X
    192c:	13 97       	sbiw	r26, 0x03	; 3
    192e:	93 83       	std	Z+3, r25	; 0x03
    1930:	82 83       	std	Z+2, r24	; 0x02
    1932:	21 15       	cp	r18, r1
    1934:	31 05       	cpc	r19, r1
    1936:	29 f4       	brne	.+10     	; 0x1942 <free+0x9c>
    1938:	f0 93 43 03 	sts	0x0343, r31
    193c:	e0 93 42 03 	sts	0x0342, r30
    1940:	3e c0       	rjmp	.+124    	; 0x19be <free+0x118>
    1942:	d9 01       	movw	r26, r18
    1944:	13 96       	adiw	r26, 0x03	; 3
    1946:	fc 93       	st	X, r31
    1948:	ee 93       	st	-X, r30
    194a:	12 97       	sbiw	r26, 0x02	; 2
    194c:	4d 91       	ld	r20, X+
    194e:	5d 91       	ld	r21, X+
    1950:	a4 0f       	add	r26, r20
    1952:	b5 1f       	adc	r27, r21
    1954:	ea 17       	cp	r30, r26
    1956:	fb 07       	cpc	r31, r27
    1958:	79 f4       	brne	.+30     	; 0x1978 <free+0xd2>
    195a:	80 81       	ld	r24, Z
    195c:	91 81       	ldd	r25, Z+1	; 0x01
    195e:	84 0f       	add	r24, r20
    1960:	95 1f       	adc	r25, r21
    1962:	02 96       	adiw	r24, 0x02	; 2
    1964:	d9 01       	movw	r26, r18
    1966:	11 96       	adiw	r26, 0x01	; 1
    1968:	9c 93       	st	X, r25
    196a:	8e 93       	st	-X, r24
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	93 81       	ldd	r25, Z+3	; 0x03
    1970:	13 96       	adiw	r26, 0x03	; 3
    1972:	9c 93       	st	X, r25
    1974:	8e 93       	st	-X, r24
    1976:	12 97       	sbiw	r26, 0x02	; 2
    1978:	e0 e0       	ldi	r30, 0x00	; 0
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	9b 81       	ldd	r25, Y+3	; 0x03
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	19 f0       	breq	.+6      	; 0x198a <free+0xe4>
    1984:	fe 01       	movw	r30, r28
    1986:	ec 01       	movw	r28, r24
    1988:	f9 cf       	rjmp	.-14     	; 0x197c <free+0xd6>
    198a:	ce 01       	movw	r24, r28
    198c:	02 96       	adiw	r24, 0x02	; 2
    198e:	28 81       	ld	r18, Y
    1990:	39 81       	ldd	r19, Y+1	; 0x01
    1992:	82 0f       	add	r24, r18
    1994:	93 1f       	adc	r25, r19
    1996:	20 91 40 03 	lds	r18, 0x0340
    199a:	30 91 41 03 	lds	r19, 0x0341
    199e:	28 17       	cp	r18, r24
    19a0:	39 07       	cpc	r19, r25
    19a2:	69 f4       	brne	.+26     	; 0x19be <free+0x118>
    19a4:	30 97       	sbiw	r30, 0x00	; 0
    19a6:	29 f4       	brne	.+10     	; 0x19b2 <free+0x10c>
    19a8:	10 92 43 03 	sts	0x0343, r1
    19ac:	10 92 42 03 	sts	0x0342, r1
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <free+0x110>
    19b2:	13 82       	std	Z+3, r1	; 0x03
    19b4:	12 82       	std	Z+2, r1	; 0x02
    19b6:	d0 93 41 03 	sts	0x0341, r29
    19ba:	c0 93 40 03 	sts	0x0340, r28
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	08 95       	ret

000019c4 <do_rand>:
    19c4:	8f 92       	push	r8
    19c6:	9f 92       	push	r9
    19c8:	af 92       	push	r10
    19ca:	bf 92       	push	r11
    19cc:	cf 92       	push	r12
    19ce:	df 92       	push	r13
    19d0:	ef 92       	push	r14
    19d2:	ff 92       	push	r15
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	ec 01       	movw	r28, r24
    19da:	68 81       	ld	r22, Y
    19dc:	79 81       	ldd	r23, Y+1	; 0x01
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	9b 81       	ldd	r25, Y+3	; 0x03
    19e2:	61 15       	cp	r22, r1
    19e4:	71 05       	cpc	r23, r1
    19e6:	81 05       	cpc	r24, r1
    19e8:	91 05       	cpc	r25, r1
    19ea:	21 f4       	brne	.+8      	; 0x19f4 <do_rand+0x30>
    19ec:	64 e2       	ldi	r22, 0x24	; 36
    19ee:	79 ed       	ldi	r23, 0xD9	; 217
    19f0:	8b e5       	ldi	r24, 0x5B	; 91
    19f2:	97 e0       	ldi	r25, 0x07	; 7
    19f4:	2d e1       	ldi	r18, 0x1D	; 29
    19f6:	33 ef       	ldi	r19, 0xF3	; 243
    19f8:	41 e0       	ldi	r20, 0x01	; 1
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	0e 94 8c 10 	call	0x2118	; 0x2118 <__divmodsi4>
    1a00:	49 01       	movw	r8, r18
    1a02:	5a 01       	movw	r10, r20
    1a04:	9b 01       	movw	r18, r22
    1a06:	ac 01       	movw	r20, r24
    1a08:	a7 ea       	ldi	r26, 0xA7	; 167
    1a0a:	b1 e4       	ldi	r27, 0x41	; 65
    1a0c:	0e 94 ab 10 	call	0x2156	; 0x2156 <__muluhisi3>
    1a10:	6b 01       	movw	r12, r22
    1a12:	7c 01       	movw	r14, r24
    1a14:	ac ee       	ldi	r26, 0xEC	; 236
    1a16:	b4 ef       	ldi	r27, 0xF4	; 244
    1a18:	a5 01       	movw	r20, r10
    1a1a:	94 01       	movw	r18, r8
    1a1c:	0e 94 b9 10 	call	0x2172	; 0x2172 <__mulohisi3>
    1a20:	c6 0e       	add	r12, r22
    1a22:	d7 1e       	adc	r13, r23
    1a24:	e8 1e       	adc	r14, r24
    1a26:	f9 1e       	adc	r15, r25
    1a28:	f7 fe       	sbrs	r15, 7
    1a2a:	06 c0       	rjmp	.+12     	; 0x1a38 <do_rand+0x74>
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	c8 1a       	sub	r12, r24
    1a30:	d1 08       	sbc	r13, r1
    1a32:	e1 08       	sbc	r14, r1
    1a34:	80 e8       	ldi	r24, 0x80	; 128
    1a36:	f8 0a       	sbc	r15, r24
    1a38:	c8 82       	st	Y, r12
    1a3a:	d9 82       	std	Y+1, r13	; 0x01
    1a3c:	ea 82       	std	Y+2, r14	; 0x02
    1a3e:	fb 82       	std	Y+3, r15	; 0x03
    1a40:	c6 01       	movw	r24, r12
    1a42:	9f 77       	andi	r25, 0x7F	; 127
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	ff 90       	pop	r15
    1a4a:	ef 90       	pop	r14
    1a4c:	df 90       	pop	r13
    1a4e:	cf 90       	pop	r12
    1a50:	bf 90       	pop	r11
    1a52:	af 90       	pop	r10
    1a54:	9f 90       	pop	r9
    1a56:	8f 90       	pop	r8
    1a58:	08 95       	ret

00001a5a <rand_r>:
    1a5a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <do_rand>
    1a5e:	08 95       	ret

00001a60 <rand>:
    1a60:	86 e0       	ldi	r24, 0x06	; 6
    1a62:	91 e0       	ldi	r25, 0x01	; 1
    1a64:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <do_rand>
    1a68:	08 95       	ret

00001a6a <srand>:
    1a6a:	a0 e0       	ldi	r26, 0x00	; 0
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	80 93 06 01 	sts	0x0106, r24
    1a72:	90 93 07 01 	sts	0x0107, r25
    1a76:	a0 93 08 01 	sts	0x0108, r26
    1a7a:	b0 93 09 01 	sts	0x0109, r27
    1a7e:	08 95       	ret

00001a80 <strcmp>:
    1a80:	fb 01       	movw	r30, r22
    1a82:	dc 01       	movw	r26, r24
    1a84:	8d 91       	ld	r24, X+
    1a86:	01 90       	ld	r0, Z+
    1a88:	80 19       	sub	r24, r0
    1a8a:	01 10       	cpse	r0, r1
    1a8c:	d9 f3       	breq	.-10     	; 0x1a84 <strcmp+0x4>
    1a8e:	99 0b       	sbc	r25, r25
    1a90:	08 95       	ret

00001a92 <fdevopen>:
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	ec 01       	movw	r28, r24
    1a9c:	8b 01       	movw	r16, r22
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	31 f4       	brne	.+12     	; 0x1aae <fdevopen+0x1c>
    1aa2:	61 15       	cp	r22, r1
    1aa4:	71 05       	cpc	r23, r1
    1aa6:	19 f4       	brne	.+6      	; 0x1aae <fdevopen+0x1c>
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	38 c0       	rjmp	.+112    	; 0x1b1e <fdevopen+0x8c>
    1aae:	6e e0       	ldi	r22, 0x0E	; 14
    1ab0:	70 e0       	ldi	r23, 0x00	; 0
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <calloc>
    1aba:	fc 01       	movw	r30, r24
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	a1 f3       	breq	.-24     	; 0x1aa8 <fdevopen+0x16>
    1ac0:	80 e8       	ldi	r24, 0x80	; 128
    1ac2:	83 83       	std	Z+3, r24	; 0x03
    1ac4:	01 15       	cp	r16, r1
    1ac6:	11 05       	cpc	r17, r1
    1ac8:	71 f0       	breq	.+28     	; 0x1ae6 <fdevopen+0x54>
    1aca:	13 87       	std	Z+11, r17	; 0x0b
    1acc:	02 87       	std	Z+10, r16	; 0x0a
    1ace:	81 e8       	ldi	r24, 0x81	; 129
    1ad0:	83 83       	std	Z+3, r24	; 0x03
    1ad2:	80 91 44 03 	lds	r24, 0x0344
    1ad6:	90 91 45 03 	lds	r25, 0x0345
    1ada:	89 2b       	or	r24, r25
    1adc:	21 f4       	brne	.+8      	; 0x1ae6 <fdevopen+0x54>
    1ade:	f0 93 45 03 	sts	0x0345, r31
    1ae2:	e0 93 44 03 	sts	0x0344, r30
    1ae6:	20 97       	sbiw	r28, 0x00	; 0
    1ae8:	c9 f0       	breq	.+50     	; 0x1b1c <fdevopen+0x8a>
    1aea:	d1 87       	std	Z+9, r29	; 0x09
    1aec:	c0 87       	std	Z+8, r28	; 0x08
    1aee:	83 81       	ldd	r24, Z+3	; 0x03
    1af0:	82 60       	ori	r24, 0x02	; 2
    1af2:	83 83       	std	Z+3, r24	; 0x03
    1af4:	80 91 46 03 	lds	r24, 0x0346
    1af8:	90 91 47 03 	lds	r25, 0x0347
    1afc:	89 2b       	or	r24, r25
    1afe:	71 f4       	brne	.+28     	; 0x1b1c <fdevopen+0x8a>
    1b00:	f0 93 47 03 	sts	0x0347, r31
    1b04:	e0 93 46 03 	sts	0x0346, r30
    1b08:	80 91 48 03 	lds	r24, 0x0348
    1b0c:	90 91 49 03 	lds	r25, 0x0349
    1b10:	89 2b       	or	r24, r25
    1b12:	21 f4       	brne	.+8      	; 0x1b1c <fdevopen+0x8a>
    1b14:	f0 93 49 03 	sts	0x0349, r31
    1b18:	e0 93 48 03 	sts	0x0348, r30
    1b1c:	cf 01       	movw	r24, r30
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	1f 91       	pop	r17
    1b24:	0f 91       	pop	r16
    1b26:	08 95       	ret

00001b28 <printf>:
    1b28:	a0 e0       	ldi	r26, 0x00	; 0
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	ea e9       	ldi	r30, 0x9A	; 154
    1b2e:	fd e0       	ldi	r31, 0x0D	; 13
    1b30:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__prologue_saves__+0x20>
    1b34:	fe 01       	movw	r30, r28
    1b36:	35 96       	adiw	r30, 0x05	; 5
    1b38:	61 91       	ld	r22, Z+
    1b3a:	71 91       	ld	r23, Z+
    1b3c:	af 01       	movw	r20, r30
    1b3e:	80 91 46 03 	lds	r24, 0x0346
    1b42:	90 91 47 03 	lds	r25, 0x0347
    1b46:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <vfprintf>
    1b4a:	e2 e0       	ldi	r30, 0x02	; 2
    1b4c:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__epilogue_restores__+0x20>

00001b50 <puts>:
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	e0 91 46 03 	lds	r30, 0x0346
    1b5c:	f0 91 47 03 	lds	r31, 0x0347
    1b60:	23 81       	ldd	r18, Z+3	; 0x03
    1b62:	21 ff       	sbrs	r18, 1
    1b64:	1b c0       	rjmp	.+54     	; 0x1b9c <puts+0x4c>
    1b66:	ec 01       	movw	r28, r24
    1b68:	00 e0       	ldi	r16, 0x00	; 0
    1b6a:	10 e0       	ldi	r17, 0x00	; 0
    1b6c:	89 91       	ld	r24, Y+
    1b6e:	60 91 46 03 	lds	r22, 0x0346
    1b72:	70 91 47 03 	lds	r23, 0x0347
    1b76:	db 01       	movw	r26, r22
    1b78:	18 96       	adiw	r26, 0x08	; 8
    1b7a:	ed 91       	ld	r30, X+
    1b7c:	fc 91       	ld	r31, X
    1b7e:	19 97       	sbiw	r26, 0x09	; 9
    1b80:	88 23       	and	r24, r24
    1b82:	31 f0       	breq	.+12     	; 0x1b90 <puts+0x40>
    1b84:	09 95       	icall
    1b86:	89 2b       	or	r24, r25
    1b88:	89 f3       	breq	.-30     	; 0x1b6c <puts+0x1c>
    1b8a:	0f ef       	ldi	r16, 0xFF	; 255
    1b8c:	1f ef       	ldi	r17, 0xFF	; 255
    1b8e:	ee cf       	rjmp	.-36     	; 0x1b6c <puts+0x1c>
    1b90:	8a e0       	ldi	r24, 0x0A	; 10
    1b92:	09 95       	icall
    1b94:	89 2b       	or	r24, r25
    1b96:	11 f4       	brne	.+4      	; 0x1b9c <puts+0x4c>
    1b98:	c8 01       	movw	r24, r16
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <puts+0x50>
    1b9c:	8f ef       	ldi	r24, 0xFF	; 255
    1b9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	08 95       	ret

00001baa <vsprintf>:
    1baa:	ae e0       	ldi	r26, 0x0E	; 14
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	eb ed       	ldi	r30, 0xDB	; 219
    1bb0:	fd e0       	ldi	r31, 0x0D	; 13
    1bb2:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__prologue_saves__+0x1c>
    1bb6:	8c 01       	movw	r16, r24
    1bb8:	86 e0       	ldi	r24, 0x06	; 6
    1bba:	8c 83       	std	Y+4, r24	; 0x04
    1bbc:	1a 83       	std	Y+2, r17	; 0x02
    1bbe:	09 83       	std	Y+1, r16	; 0x01
    1bc0:	8f ef       	ldi	r24, 0xFF	; 255
    1bc2:	9f e7       	ldi	r25, 0x7F	; 127
    1bc4:	9e 83       	std	Y+6, r25	; 0x06
    1bc6:	8d 83       	std	Y+5, r24	; 0x05
    1bc8:	ce 01       	movw	r24, r28
    1bca:	01 96       	adiw	r24, 0x01	; 1
    1bcc:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <vfprintf>
    1bd0:	ef 81       	ldd	r30, Y+7	; 0x07
    1bd2:	f8 85       	ldd	r31, Y+8	; 0x08
    1bd4:	e0 0f       	add	r30, r16
    1bd6:	f1 1f       	adc	r31, r17
    1bd8:	10 82       	st	Z, r1
    1bda:	2e 96       	adiw	r28, 0x0e	; 14
    1bdc:	e4 e0       	ldi	r30, 0x04	; 4
    1bde:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__epilogue_restores__+0x1c>

00001be2 <vfprintf>:
    1be2:	ac e0       	ldi	r26, 0x0C	; 12
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e7 ef       	ldi	r30, 0xF7	; 247
    1be8:	fd e0       	ldi	r31, 0x0D	; 13
    1bea:	0c 94 be 10 	jmp	0x217c	; 0x217c <__prologue_saves__>
    1bee:	7c 01       	movw	r14, r24
    1bf0:	6b 01       	movw	r12, r22
    1bf2:	8a 01       	movw	r16, r20
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	17 82       	std	Z+7, r1	; 0x07
    1bf8:	16 82       	std	Z+6, r1	; 0x06
    1bfa:	83 81       	ldd	r24, Z+3	; 0x03
    1bfc:	81 ff       	sbrs	r24, 1
    1bfe:	bd c1       	rjmp	.+890    	; 0x1f7a <vfprintf+0x398>
    1c00:	ce 01       	movw	r24, r28
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	4c 01       	movw	r8, r24
    1c06:	f7 01       	movw	r30, r14
    1c08:	93 81       	ldd	r25, Z+3	; 0x03
    1c0a:	f6 01       	movw	r30, r12
    1c0c:	93 fd       	sbrc	r25, 3
    1c0e:	85 91       	lpm	r24, Z+
    1c10:	93 ff       	sbrs	r25, 3
    1c12:	81 91       	ld	r24, Z+
    1c14:	6f 01       	movw	r12, r30
    1c16:	88 23       	and	r24, r24
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <vfprintf+0x3a>
    1c1a:	ab c1       	rjmp	.+854    	; 0x1f72 <vfprintf+0x390>
    1c1c:	85 32       	cpi	r24, 0x25	; 37
    1c1e:	39 f4       	brne	.+14     	; 0x1c2e <vfprintf+0x4c>
    1c20:	93 fd       	sbrc	r25, 3
    1c22:	85 91       	lpm	r24, Z+
    1c24:	93 ff       	sbrs	r25, 3
    1c26:	81 91       	ld	r24, Z+
    1c28:	6f 01       	movw	r12, r30
    1c2a:	85 32       	cpi	r24, 0x25	; 37
    1c2c:	29 f4       	brne	.+10     	; 0x1c38 <vfprintf+0x56>
    1c2e:	b7 01       	movw	r22, r14
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <fputc>
    1c36:	e7 cf       	rjmp	.-50     	; 0x1c06 <vfprintf+0x24>
    1c38:	51 2c       	mov	r5, r1
    1c3a:	31 2c       	mov	r3, r1
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	20 32       	cpi	r18, 0x20	; 32
    1c40:	a0 f4       	brcc	.+40     	; 0x1c6a <vfprintf+0x88>
    1c42:	8b 32       	cpi	r24, 0x2B	; 43
    1c44:	69 f0       	breq	.+26     	; 0x1c60 <vfprintf+0x7e>
    1c46:	30 f4       	brcc	.+12     	; 0x1c54 <vfprintf+0x72>
    1c48:	80 32       	cpi	r24, 0x20	; 32
    1c4a:	59 f0       	breq	.+22     	; 0x1c62 <vfprintf+0x80>
    1c4c:	83 32       	cpi	r24, 0x23	; 35
    1c4e:	69 f4       	brne	.+26     	; 0x1c6a <vfprintf+0x88>
    1c50:	20 61       	ori	r18, 0x10	; 16
    1c52:	2c c0       	rjmp	.+88     	; 0x1cac <vfprintf+0xca>
    1c54:	8d 32       	cpi	r24, 0x2D	; 45
    1c56:	39 f0       	breq	.+14     	; 0x1c66 <vfprintf+0x84>
    1c58:	80 33       	cpi	r24, 0x30	; 48
    1c5a:	39 f4       	brne	.+14     	; 0x1c6a <vfprintf+0x88>
    1c5c:	21 60       	ori	r18, 0x01	; 1
    1c5e:	26 c0       	rjmp	.+76     	; 0x1cac <vfprintf+0xca>
    1c60:	22 60       	ori	r18, 0x02	; 2
    1c62:	24 60       	ori	r18, 0x04	; 4
    1c64:	23 c0       	rjmp	.+70     	; 0x1cac <vfprintf+0xca>
    1c66:	28 60       	ori	r18, 0x08	; 8
    1c68:	21 c0       	rjmp	.+66     	; 0x1cac <vfprintf+0xca>
    1c6a:	27 fd       	sbrc	r18, 7
    1c6c:	27 c0       	rjmp	.+78     	; 0x1cbc <vfprintf+0xda>
    1c6e:	30 ed       	ldi	r19, 0xD0	; 208
    1c70:	38 0f       	add	r19, r24
    1c72:	3a 30       	cpi	r19, 0x0A	; 10
    1c74:	78 f4       	brcc	.+30     	; 0x1c94 <vfprintf+0xb2>
    1c76:	26 ff       	sbrs	r18, 6
    1c78:	06 c0       	rjmp	.+12     	; 0x1c86 <vfprintf+0xa4>
    1c7a:	fa e0       	ldi	r31, 0x0A	; 10
    1c7c:	5f 9e       	mul	r5, r31
    1c7e:	30 0d       	add	r19, r0
    1c80:	11 24       	eor	r1, r1
    1c82:	53 2e       	mov	r5, r19
    1c84:	13 c0       	rjmp	.+38     	; 0x1cac <vfprintf+0xca>
    1c86:	8a e0       	ldi	r24, 0x0A	; 10
    1c88:	38 9e       	mul	r3, r24
    1c8a:	30 0d       	add	r19, r0
    1c8c:	11 24       	eor	r1, r1
    1c8e:	33 2e       	mov	r3, r19
    1c90:	20 62       	ori	r18, 0x20	; 32
    1c92:	0c c0       	rjmp	.+24     	; 0x1cac <vfprintf+0xca>
    1c94:	8e 32       	cpi	r24, 0x2E	; 46
    1c96:	21 f4       	brne	.+8      	; 0x1ca0 <vfprintf+0xbe>
    1c98:	26 fd       	sbrc	r18, 6
    1c9a:	6b c1       	rjmp	.+726    	; 0x1f72 <vfprintf+0x390>
    1c9c:	20 64       	ori	r18, 0x40	; 64
    1c9e:	06 c0       	rjmp	.+12     	; 0x1cac <vfprintf+0xca>
    1ca0:	8c 36       	cpi	r24, 0x6C	; 108
    1ca2:	11 f4       	brne	.+4      	; 0x1ca8 <vfprintf+0xc6>
    1ca4:	20 68       	ori	r18, 0x80	; 128
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <vfprintf+0xca>
    1ca8:	88 36       	cpi	r24, 0x68	; 104
    1caa:	41 f4       	brne	.+16     	; 0x1cbc <vfprintf+0xda>
    1cac:	f6 01       	movw	r30, r12
    1cae:	93 fd       	sbrc	r25, 3
    1cb0:	85 91       	lpm	r24, Z+
    1cb2:	93 ff       	sbrs	r25, 3
    1cb4:	81 91       	ld	r24, Z+
    1cb6:	6f 01       	movw	r12, r30
    1cb8:	81 11       	cpse	r24, r1
    1cba:	c1 cf       	rjmp	.-126    	; 0x1c3e <vfprintf+0x5c>
    1cbc:	98 2f       	mov	r25, r24
    1cbe:	9f 7d       	andi	r25, 0xDF	; 223
    1cc0:	95 54       	subi	r25, 0x45	; 69
    1cc2:	93 30       	cpi	r25, 0x03	; 3
    1cc4:	28 f4       	brcc	.+10     	; 0x1cd0 <vfprintf+0xee>
    1cc6:	0c 5f       	subi	r16, 0xFC	; 252
    1cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cca:	ff e3       	ldi	r31, 0x3F	; 63
    1ccc:	f9 83       	std	Y+1, r31	; 0x01
    1cce:	0d c0       	rjmp	.+26     	; 0x1cea <vfprintf+0x108>
    1cd0:	83 36       	cpi	r24, 0x63	; 99
    1cd2:	31 f0       	breq	.+12     	; 0x1ce0 <vfprintf+0xfe>
    1cd4:	83 37       	cpi	r24, 0x73	; 115
    1cd6:	71 f0       	breq	.+28     	; 0x1cf4 <vfprintf+0x112>
    1cd8:	83 35       	cpi	r24, 0x53	; 83
    1cda:	09 f0       	breq	.+2      	; 0x1cde <vfprintf+0xfc>
    1cdc:	5b c0       	rjmp	.+182    	; 0x1d94 <vfprintf+0x1b2>
    1cde:	22 c0       	rjmp	.+68     	; 0x1d24 <vfprintf+0x142>
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	80 81       	ld	r24, Z
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	0e 5f       	subi	r16, 0xFE	; 254
    1ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cea:	44 24       	eor	r4, r4
    1cec:	43 94       	inc	r4
    1cee:	51 2c       	mov	r5, r1
    1cf0:	54 01       	movw	r10, r8
    1cf2:	15 c0       	rjmp	.+42     	; 0x1d1e <vfprintf+0x13c>
    1cf4:	38 01       	movw	r6, r16
    1cf6:	f2 e0       	ldi	r31, 0x02	; 2
    1cf8:	6f 0e       	add	r6, r31
    1cfa:	71 1c       	adc	r7, r1
    1cfc:	f8 01       	movw	r30, r16
    1cfe:	a0 80       	ld	r10, Z
    1d00:	b1 80       	ldd	r11, Z+1	; 0x01
    1d02:	26 ff       	sbrs	r18, 6
    1d04:	03 c0       	rjmp	.+6      	; 0x1d0c <vfprintf+0x12a>
    1d06:	65 2d       	mov	r22, r5
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <vfprintf+0x12e>
    1d0c:	6f ef       	ldi	r22, 0xFF	; 255
    1d0e:	7f ef       	ldi	r23, 0xFF	; 255
    1d10:	c5 01       	movw	r24, r10
    1d12:	2c 87       	std	Y+12, r18	; 0x0c
    1d14:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <strnlen>
    1d18:	2c 01       	movw	r4, r24
    1d1a:	83 01       	movw	r16, r6
    1d1c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d1e:	2f 77       	andi	r18, 0x7F	; 127
    1d20:	22 2e       	mov	r2, r18
    1d22:	17 c0       	rjmp	.+46     	; 0x1d52 <vfprintf+0x170>
    1d24:	38 01       	movw	r6, r16
    1d26:	f2 e0       	ldi	r31, 0x02	; 2
    1d28:	6f 0e       	add	r6, r31
    1d2a:	71 1c       	adc	r7, r1
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	a0 80       	ld	r10, Z
    1d30:	b1 80       	ldd	r11, Z+1	; 0x01
    1d32:	26 ff       	sbrs	r18, 6
    1d34:	03 c0       	rjmp	.+6      	; 0x1d3c <vfprintf+0x15a>
    1d36:	65 2d       	mov	r22, r5
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <vfprintf+0x15e>
    1d3c:	6f ef       	ldi	r22, 0xFF	; 255
    1d3e:	7f ef       	ldi	r23, 0xFF	; 255
    1d40:	c5 01       	movw	r24, r10
    1d42:	2c 87       	std	Y+12, r18	; 0x0c
    1d44:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <strnlen_P>
    1d48:	2c 01       	movw	r4, r24
    1d4a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d4c:	20 68       	ori	r18, 0x80	; 128
    1d4e:	22 2e       	mov	r2, r18
    1d50:	83 01       	movw	r16, r6
    1d52:	23 fc       	sbrc	r2, 3
    1d54:	1b c0       	rjmp	.+54     	; 0x1d8c <vfprintf+0x1aa>
    1d56:	83 2d       	mov	r24, r3
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	48 16       	cp	r4, r24
    1d5c:	59 06       	cpc	r5, r25
    1d5e:	b0 f4       	brcc	.+44     	; 0x1d8c <vfprintf+0x1aa>
    1d60:	b7 01       	movw	r22, r14
    1d62:	80 e2       	ldi	r24, 0x20	; 32
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <fputc>
    1d6a:	3a 94       	dec	r3
    1d6c:	f4 cf       	rjmp	.-24     	; 0x1d56 <vfprintf+0x174>
    1d6e:	f5 01       	movw	r30, r10
    1d70:	27 fc       	sbrc	r2, 7
    1d72:	85 91       	lpm	r24, Z+
    1d74:	27 fe       	sbrs	r2, 7
    1d76:	81 91       	ld	r24, Z+
    1d78:	5f 01       	movw	r10, r30
    1d7a:	b7 01       	movw	r22, r14
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <fputc>
    1d82:	31 10       	cpse	r3, r1
    1d84:	3a 94       	dec	r3
    1d86:	f1 e0       	ldi	r31, 0x01	; 1
    1d88:	4f 1a       	sub	r4, r31
    1d8a:	51 08       	sbc	r5, r1
    1d8c:	41 14       	cp	r4, r1
    1d8e:	51 04       	cpc	r5, r1
    1d90:	71 f7       	brne	.-36     	; 0x1d6e <vfprintf+0x18c>
    1d92:	e5 c0       	rjmp	.+458    	; 0x1f5e <vfprintf+0x37c>
    1d94:	84 36       	cpi	r24, 0x64	; 100
    1d96:	11 f0       	breq	.+4      	; 0x1d9c <vfprintf+0x1ba>
    1d98:	89 36       	cpi	r24, 0x69	; 105
    1d9a:	39 f5       	brne	.+78     	; 0x1dea <vfprintf+0x208>
    1d9c:	f8 01       	movw	r30, r16
    1d9e:	27 ff       	sbrs	r18, 7
    1da0:	07 c0       	rjmp	.+14     	; 0x1db0 <vfprintf+0x1ce>
    1da2:	60 81       	ld	r22, Z
    1da4:	71 81       	ldd	r23, Z+1	; 0x01
    1da6:	82 81       	ldd	r24, Z+2	; 0x02
    1da8:	93 81       	ldd	r25, Z+3	; 0x03
    1daa:	0c 5f       	subi	r16, 0xFC	; 252
    1dac:	1f 4f       	sbci	r17, 0xFF	; 255
    1dae:	08 c0       	rjmp	.+16     	; 0x1dc0 <vfprintf+0x1de>
    1db0:	60 81       	ld	r22, Z
    1db2:	71 81       	ldd	r23, Z+1	; 0x01
    1db4:	88 27       	eor	r24, r24
    1db6:	77 fd       	sbrc	r23, 7
    1db8:	80 95       	com	r24
    1dba:	98 2f       	mov	r25, r24
    1dbc:	0e 5f       	subi	r16, 0xFE	; 254
    1dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc0:	2f 76       	andi	r18, 0x6F	; 111
    1dc2:	b2 2e       	mov	r11, r18
    1dc4:	97 ff       	sbrs	r25, 7
    1dc6:	09 c0       	rjmp	.+18     	; 0x1dda <vfprintf+0x1f8>
    1dc8:	90 95       	com	r25
    1dca:	80 95       	com	r24
    1dcc:	70 95       	com	r23
    1dce:	61 95       	neg	r22
    1dd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd2:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd6:	20 68       	ori	r18, 0x80	; 128
    1dd8:	b2 2e       	mov	r11, r18
    1dda:	2a e0       	ldi	r18, 0x0A	; 10
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	a4 01       	movw	r20, r8
    1de0:	0e 94 2e 10 	call	0x205c	; 0x205c <__ultoa_invert>
    1de4:	a8 2e       	mov	r10, r24
    1de6:	a8 18       	sub	r10, r8
    1de8:	44 c0       	rjmp	.+136    	; 0x1e72 <vfprintf+0x290>
    1dea:	85 37       	cpi	r24, 0x75	; 117
    1dec:	29 f4       	brne	.+10     	; 0x1df8 <vfprintf+0x216>
    1dee:	2f 7e       	andi	r18, 0xEF	; 239
    1df0:	b2 2e       	mov	r11, r18
    1df2:	2a e0       	ldi	r18, 0x0A	; 10
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	25 c0       	rjmp	.+74     	; 0x1e42 <vfprintf+0x260>
    1df8:	f2 2f       	mov	r31, r18
    1dfa:	f9 7f       	andi	r31, 0xF9	; 249
    1dfc:	bf 2e       	mov	r11, r31
    1dfe:	8f 36       	cpi	r24, 0x6F	; 111
    1e00:	c1 f0       	breq	.+48     	; 0x1e32 <vfprintf+0x250>
    1e02:	18 f4       	brcc	.+6      	; 0x1e0a <vfprintf+0x228>
    1e04:	88 35       	cpi	r24, 0x58	; 88
    1e06:	79 f0       	breq	.+30     	; 0x1e26 <vfprintf+0x244>
    1e08:	b4 c0       	rjmp	.+360    	; 0x1f72 <vfprintf+0x390>
    1e0a:	80 37       	cpi	r24, 0x70	; 112
    1e0c:	19 f0       	breq	.+6      	; 0x1e14 <vfprintf+0x232>
    1e0e:	88 37       	cpi	r24, 0x78	; 120
    1e10:	21 f0       	breq	.+8      	; 0x1e1a <vfprintf+0x238>
    1e12:	af c0       	rjmp	.+350    	; 0x1f72 <vfprintf+0x390>
    1e14:	2f 2f       	mov	r18, r31
    1e16:	20 61       	ori	r18, 0x10	; 16
    1e18:	b2 2e       	mov	r11, r18
    1e1a:	b4 fe       	sbrs	r11, 4
    1e1c:	0d c0       	rjmp	.+26     	; 0x1e38 <vfprintf+0x256>
    1e1e:	8b 2d       	mov	r24, r11
    1e20:	84 60       	ori	r24, 0x04	; 4
    1e22:	b8 2e       	mov	r11, r24
    1e24:	09 c0       	rjmp	.+18     	; 0x1e38 <vfprintf+0x256>
    1e26:	24 ff       	sbrs	r18, 4
    1e28:	0a c0       	rjmp	.+20     	; 0x1e3e <vfprintf+0x25c>
    1e2a:	9f 2f       	mov	r25, r31
    1e2c:	96 60       	ori	r25, 0x06	; 6
    1e2e:	b9 2e       	mov	r11, r25
    1e30:	06 c0       	rjmp	.+12     	; 0x1e3e <vfprintf+0x25c>
    1e32:	28 e0       	ldi	r18, 0x08	; 8
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	05 c0       	rjmp	.+10     	; 0x1e42 <vfprintf+0x260>
    1e38:	20 e1       	ldi	r18, 0x10	; 16
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <vfprintf+0x260>
    1e3e:	20 e1       	ldi	r18, 0x10	; 16
    1e40:	32 e0       	ldi	r19, 0x02	; 2
    1e42:	f8 01       	movw	r30, r16
    1e44:	b7 fe       	sbrs	r11, 7
    1e46:	07 c0       	rjmp	.+14     	; 0x1e56 <vfprintf+0x274>
    1e48:	60 81       	ld	r22, Z
    1e4a:	71 81       	ldd	r23, Z+1	; 0x01
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	0c 5f       	subi	r16, 0xFC	; 252
    1e52:	1f 4f       	sbci	r17, 0xFF	; 255
    1e54:	06 c0       	rjmp	.+12     	; 0x1e62 <vfprintf+0x280>
    1e56:	60 81       	ld	r22, Z
    1e58:	71 81       	ldd	r23, Z+1	; 0x01
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	0e 5f       	subi	r16, 0xFE	; 254
    1e60:	1f 4f       	sbci	r17, 0xFF	; 255
    1e62:	a4 01       	movw	r20, r8
    1e64:	0e 94 2e 10 	call	0x205c	; 0x205c <__ultoa_invert>
    1e68:	a8 2e       	mov	r10, r24
    1e6a:	a8 18       	sub	r10, r8
    1e6c:	fb 2d       	mov	r31, r11
    1e6e:	ff 77       	andi	r31, 0x7F	; 127
    1e70:	bf 2e       	mov	r11, r31
    1e72:	b6 fe       	sbrs	r11, 6
    1e74:	0b c0       	rjmp	.+22     	; 0x1e8c <vfprintf+0x2aa>
    1e76:	2b 2d       	mov	r18, r11
    1e78:	2e 7f       	andi	r18, 0xFE	; 254
    1e7a:	a5 14       	cp	r10, r5
    1e7c:	50 f4       	brcc	.+20     	; 0x1e92 <vfprintf+0x2b0>
    1e7e:	b4 fe       	sbrs	r11, 4
    1e80:	0a c0       	rjmp	.+20     	; 0x1e96 <vfprintf+0x2b4>
    1e82:	b2 fc       	sbrc	r11, 2
    1e84:	08 c0       	rjmp	.+16     	; 0x1e96 <vfprintf+0x2b4>
    1e86:	2b 2d       	mov	r18, r11
    1e88:	2e 7e       	andi	r18, 0xEE	; 238
    1e8a:	05 c0       	rjmp	.+10     	; 0x1e96 <vfprintf+0x2b4>
    1e8c:	7a 2c       	mov	r7, r10
    1e8e:	2b 2d       	mov	r18, r11
    1e90:	03 c0       	rjmp	.+6      	; 0x1e98 <vfprintf+0x2b6>
    1e92:	7a 2c       	mov	r7, r10
    1e94:	01 c0       	rjmp	.+2      	; 0x1e98 <vfprintf+0x2b6>
    1e96:	75 2c       	mov	r7, r5
    1e98:	24 ff       	sbrs	r18, 4
    1e9a:	0d c0       	rjmp	.+26     	; 0x1eb6 <vfprintf+0x2d4>
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	ea 0d       	add	r30, r10
    1ea0:	f1 1d       	adc	r31, r1
    1ea2:	80 81       	ld	r24, Z
    1ea4:	80 33       	cpi	r24, 0x30	; 48
    1ea6:	11 f4       	brne	.+4      	; 0x1eac <vfprintf+0x2ca>
    1ea8:	29 7e       	andi	r18, 0xE9	; 233
    1eaa:	09 c0       	rjmp	.+18     	; 0x1ebe <vfprintf+0x2dc>
    1eac:	22 ff       	sbrs	r18, 2
    1eae:	06 c0       	rjmp	.+12     	; 0x1ebc <vfprintf+0x2da>
    1eb0:	73 94       	inc	r7
    1eb2:	73 94       	inc	r7
    1eb4:	04 c0       	rjmp	.+8      	; 0x1ebe <vfprintf+0x2dc>
    1eb6:	82 2f       	mov	r24, r18
    1eb8:	86 78       	andi	r24, 0x86	; 134
    1eba:	09 f0       	breq	.+2      	; 0x1ebe <vfprintf+0x2dc>
    1ebc:	73 94       	inc	r7
    1ebe:	23 fd       	sbrc	r18, 3
    1ec0:	13 c0       	rjmp	.+38     	; 0x1ee8 <vfprintf+0x306>
    1ec2:	20 ff       	sbrs	r18, 0
    1ec4:	06 c0       	rjmp	.+12     	; 0x1ed2 <vfprintf+0x2f0>
    1ec6:	5a 2c       	mov	r5, r10
    1ec8:	73 14       	cp	r7, r3
    1eca:	18 f4       	brcc	.+6      	; 0x1ed2 <vfprintf+0x2f0>
    1ecc:	53 0c       	add	r5, r3
    1ece:	57 18       	sub	r5, r7
    1ed0:	73 2c       	mov	r7, r3
    1ed2:	73 14       	cp	r7, r3
    1ed4:	68 f4       	brcc	.+26     	; 0x1ef0 <vfprintf+0x30e>
    1ed6:	b7 01       	movw	r22, r14
    1ed8:	80 e2       	ldi	r24, 0x20	; 32
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	2c 87       	std	Y+12, r18	; 0x0c
    1ede:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <fputc>
    1ee2:	73 94       	inc	r7
    1ee4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ee6:	f5 cf       	rjmp	.-22     	; 0x1ed2 <vfprintf+0x2f0>
    1ee8:	73 14       	cp	r7, r3
    1eea:	10 f4       	brcc	.+4      	; 0x1ef0 <vfprintf+0x30e>
    1eec:	37 18       	sub	r3, r7
    1eee:	01 c0       	rjmp	.+2      	; 0x1ef2 <vfprintf+0x310>
    1ef0:	31 2c       	mov	r3, r1
    1ef2:	24 ff       	sbrs	r18, 4
    1ef4:	12 c0       	rjmp	.+36     	; 0x1f1a <vfprintf+0x338>
    1ef6:	b7 01       	movw	r22, r14
    1ef8:	80 e3       	ldi	r24, 0x30	; 48
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	2c 87       	std	Y+12, r18	; 0x0c
    1efe:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <fputc>
    1f02:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f04:	22 ff       	sbrs	r18, 2
    1f06:	17 c0       	rjmp	.+46     	; 0x1f36 <vfprintf+0x354>
    1f08:	21 ff       	sbrs	r18, 1
    1f0a:	03 c0       	rjmp	.+6      	; 0x1f12 <vfprintf+0x330>
    1f0c:	88 e5       	ldi	r24, 0x58	; 88
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <vfprintf+0x334>
    1f12:	88 e7       	ldi	r24, 0x78	; 120
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	b7 01       	movw	r22, r14
    1f18:	0c c0       	rjmp	.+24     	; 0x1f32 <vfprintf+0x350>
    1f1a:	82 2f       	mov	r24, r18
    1f1c:	86 78       	andi	r24, 0x86	; 134
    1f1e:	59 f0       	breq	.+22     	; 0x1f36 <vfprintf+0x354>
    1f20:	21 fd       	sbrc	r18, 1
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <vfprintf+0x346>
    1f24:	80 e2       	ldi	r24, 0x20	; 32
    1f26:	01 c0       	rjmp	.+2      	; 0x1f2a <vfprintf+0x348>
    1f28:	8b e2       	ldi	r24, 0x2B	; 43
    1f2a:	27 fd       	sbrc	r18, 7
    1f2c:	8d e2       	ldi	r24, 0x2D	; 45
    1f2e:	b7 01       	movw	r22, r14
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <fputc>
    1f36:	a5 14       	cp	r10, r5
    1f38:	38 f4       	brcc	.+14     	; 0x1f48 <vfprintf+0x366>
    1f3a:	b7 01       	movw	r22, r14
    1f3c:	80 e3       	ldi	r24, 0x30	; 48
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <fputc>
    1f44:	5a 94       	dec	r5
    1f46:	f7 cf       	rjmp	.-18     	; 0x1f36 <vfprintf+0x354>
    1f48:	aa 94       	dec	r10
    1f4a:	f4 01       	movw	r30, r8
    1f4c:	ea 0d       	add	r30, r10
    1f4e:	f1 1d       	adc	r31, r1
    1f50:	80 81       	ld	r24, Z
    1f52:	b7 01       	movw	r22, r14
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <fputc>
    1f5a:	a1 10       	cpse	r10, r1
    1f5c:	f5 cf       	rjmp	.-22     	; 0x1f48 <vfprintf+0x366>
    1f5e:	33 20       	and	r3, r3
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <vfprintf+0x382>
    1f62:	51 ce       	rjmp	.-862    	; 0x1c06 <vfprintf+0x24>
    1f64:	b7 01       	movw	r22, r14
    1f66:	80 e2       	ldi	r24, 0x20	; 32
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <fputc>
    1f6e:	3a 94       	dec	r3
    1f70:	f6 cf       	rjmp	.-20     	; 0x1f5e <vfprintf+0x37c>
    1f72:	f7 01       	movw	r30, r14
    1f74:	86 81       	ldd	r24, Z+6	; 0x06
    1f76:	97 81       	ldd	r25, Z+7	; 0x07
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <vfprintf+0x39c>
    1f7a:	8f ef       	ldi	r24, 0xFF	; 255
    1f7c:	9f ef       	ldi	r25, 0xFF	; 255
    1f7e:	2c 96       	adiw	r28, 0x0c	; 12
    1f80:	e2 e1       	ldi	r30, 0x12	; 18
    1f82:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__epilogue_restores__>

00001f86 <calloc>:
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	86 9f       	mul	r24, r22
    1f90:	80 01       	movw	r16, r0
    1f92:	87 9f       	mul	r24, r23
    1f94:	10 0d       	add	r17, r0
    1f96:	96 9f       	mul	r25, r22
    1f98:	10 0d       	add	r17, r0
    1f9a:	11 24       	eor	r1, r1
    1f9c:	c8 01       	movw	r24, r16
    1f9e:	0e 94 bb 0b 	call	0x1776	; 0x1776 <malloc>
    1fa2:	ec 01       	movw	r28, r24
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	29 f0       	breq	.+10     	; 0x1fb2 <calloc+0x2c>
    1fa8:	a8 01       	movw	r20, r16
    1faa:	60 e0       	ldi	r22, 0x00	; 0
    1fac:	70 e0       	ldi	r23, 0x00	; 0
    1fae:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <memset>
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	08 95       	ret

00001fbe <strnlen_P>:
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	05 90       	lpm	r0, Z+
    1fc2:	61 50       	subi	r22, 0x01	; 1
    1fc4:	70 40       	sbci	r23, 0x00	; 0
    1fc6:	01 10       	cpse	r0, r1
    1fc8:	d8 f7       	brcc	.-10     	; 0x1fc0 <strnlen_P+0x2>
    1fca:	80 95       	com	r24
    1fcc:	90 95       	com	r25
    1fce:	8e 0f       	add	r24, r30
    1fd0:	9f 1f       	adc	r25, r31
    1fd2:	08 95       	ret

00001fd4 <memset>:
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	01 c0       	rjmp	.+2      	; 0x1fda <memset+0x6>
    1fd8:	6d 93       	st	X+, r22
    1fda:	41 50       	subi	r20, 0x01	; 1
    1fdc:	50 40       	sbci	r21, 0x00	; 0
    1fde:	e0 f7       	brcc	.-8      	; 0x1fd8 <memset+0x4>
    1fe0:	08 95       	ret

00001fe2 <strnlen>:
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	61 50       	subi	r22, 0x01	; 1
    1fe6:	70 40       	sbci	r23, 0x00	; 0
    1fe8:	01 90       	ld	r0, Z+
    1fea:	01 10       	cpse	r0, r1
    1fec:	d8 f7       	brcc	.-10     	; 0x1fe4 <strnlen+0x2>
    1fee:	80 95       	com	r24
    1ff0:	90 95       	com	r25
    1ff2:	8e 0f       	add	r24, r30
    1ff4:	9f 1f       	adc	r25, r31
    1ff6:	08 95       	ret

00001ff8 <fputc>:
    1ff8:	0f 93       	push	r16
    1ffa:	1f 93       	push	r17
    1ffc:	cf 93       	push	r28
    1ffe:	df 93       	push	r29
    2000:	18 2f       	mov	r17, r24
    2002:	09 2f       	mov	r16, r25
    2004:	eb 01       	movw	r28, r22
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	81 fd       	sbrc	r24, 1
    200a:	03 c0       	rjmp	.+6      	; 0x2012 <fputc+0x1a>
    200c:	8f ef       	ldi	r24, 0xFF	; 255
    200e:	9f ef       	ldi	r25, 0xFF	; 255
    2010:	20 c0       	rjmp	.+64     	; 0x2052 <fputc+0x5a>
    2012:	82 ff       	sbrs	r24, 2
    2014:	10 c0       	rjmp	.+32     	; 0x2036 <fputc+0x3e>
    2016:	4e 81       	ldd	r20, Y+6	; 0x06
    2018:	5f 81       	ldd	r21, Y+7	; 0x07
    201a:	2c 81       	ldd	r18, Y+4	; 0x04
    201c:	3d 81       	ldd	r19, Y+5	; 0x05
    201e:	42 17       	cp	r20, r18
    2020:	53 07       	cpc	r21, r19
    2022:	7c f4       	brge	.+30     	; 0x2042 <fputc+0x4a>
    2024:	e8 81       	ld	r30, Y
    2026:	f9 81       	ldd	r31, Y+1	; 0x01
    2028:	9f 01       	movw	r18, r30
    202a:	2f 5f       	subi	r18, 0xFF	; 255
    202c:	3f 4f       	sbci	r19, 0xFF	; 255
    202e:	39 83       	std	Y+1, r19	; 0x01
    2030:	28 83       	st	Y, r18
    2032:	10 83       	st	Z, r17
    2034:	06 c0       	rjmp	.+12     	; 0x2042 <fputc+0x4a>
    2036:	e8 85       	ldd	r30, Y+8	; 0x08
    2038:	f9 85       	ldd	r31, Y+9	; 0x09
    203a:	81 2f       	mov	r24, r17
    203c:	09 95       	icall
    203e:	89 2b       	or	r24, r25
    2040:	29 f7       	brne	.-54     	; 0x200c <fputc+0x14>
    2042:	2e 81       	ldd	r18, Y+6	; 0x06
    2044:	3f 81       	ldd	r19, Y+7	; 0x07
    2046:	2f 5f       	subi	r18, 0xFF	; 255
    2048:	3f 4f       	sbci	r19, 0xFF	; 255
    204a:	3f 83       	std	Y+7, r19	; 0x07
    204c:	2e 83       	std	Y+6, r18	; 0x06
    204e:	81 2f       	mov	r24, r17
    2050:	90 2f       	mov	r25, r16
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	1f 91       	pop	r17
    2058:	0f 91       	pop	r16
    205a:	08 95       	ret

0000205c <__ultoa_invert>:
    205c:	fa 01       	movw	r30, r20
    205e:	aa 27       	eor	r26, r26
    2060:	28 30       	cpi	r18, 0x08	; 8
    2062:	51 f1       	breq	.+84     	; 0x20b8 <__ultoa_invert+0x5c>
    2064:	20 31       	cpi	r18, 0x10	; 16
    2066:	81 f1       	breq	.+96     	; 0x20c8 <__ultoa_invert+0x6c>
    2068:	e8 94       	clt
    206a:	6f 93       	push	r22
    206c:	6e 7f       	andi	r22, 0xFE	; 254
    206e:	6e 5f       	subi	r22, 0xFE	; 254
    2070:	7f 4f       	sbci	r23, 0xFF	; 255
    2072:	8f 4f       	sbci	r24, 0xFF	; 255
    2074:	9f 4f       	sbci	r25, 0xFF	; 255
    2076:	af 4f       	sbci	r26, 0xFF	; 255
    2078:	b1 e0       	ldi	r27, 0x01	; 1
    207a:	3e d0       	rcall	.+124    	; 0x20f8 <__ultoa_invert+0x9c>
    207c:	b4 e0       	ldi	r27, 0x04	; 4
    207e:	3c d0       	rcall	.+120    	; 0x20f8 <__ultoa_invert+0x9c>
    2080:	67 0f       	add	r22, r23
    2082:	78 1f       	adc	r23, r24
    2084:	89 1f       	adc	r24, r25
    2086:	9a 1f       	adc	r25, r26
    2088:	a1 1d       	adc	r26, r1
    208a:	68 0f       	add	r22, r24
    208c:	79 1f       	adc	r23, r25
    208e:	8a 1f       	adc	r24, r26
    2090:	91 1d       	adc	r25, r1
    2092:	a1 1d       	adc	r26, r1
    2094:	6a 0f       	add	r22, r26
    2096:	71 1d       	adc	r23, r1
    2098:	81 1d       	adc	r24, r1
    209a:	91 1d       	adc	r25, r1
    209c:	a1 1d       	adc	r26, r1
    209e:	20 d0       	rcall	.+64     	; 0x20e0 <__ultoa_invert+0x84>
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <__ultoa_invert+0x48>
    20a2:	68 94       	set
    20a4:	3f 91       	pop	r19
    20a6:	2a e0       	ldi	r18, 0x0A	; 10
    20a8:	26 9f       	mul	r18, r22
    20aa:	11 24       	eor	r1, r1
    20ac:	30 19       	sub	r19, r0
    20ae:	30 5d       	subi	r19, 0xD0	; 208
    20b0:	31 93       	st	Z+, r19
    20b2:	de f6       	brtc	.-74     	; 0x206a <__ultoa_invert+0xe>
    20b4:	cf 01       	movw	r24, r30
    20b6:	08 95       	ret
    20b8:	46 2f       	mov	r20, r22
    20ba:	47 70       	andi	r20, 0x07	; 7
    20bc:	40 5d       	subi	r20, 0xD0	; 208
    20be:	41 93       	st	Z+, r20
    20c0:	b3 e0       	ldi	r27, 0x03	; 3
    20c2:	0f d0       	rcall	.+30     	; 0x20e2 <__ultoa_invert+0x86>
    20c4:	c9 f7       	brne	.-14     	; 0x20b8 <__ultoa_invert+0x5c>
    20c6:	f6 cf       	rjmp	.-20     	; 0x20b4 <__ultoa_invert+0x58>
    20c8:	46 2f       	mov	r20, r22
    20ca:	4f 70       	andi	r20, 0x0F	; 15
    20cc:	40 5d       	subi	r20, 0xD0	; 208
    20ce:	4a 33       	cpi	r20, 0x3A	; 58
    20d0:	18 f0       	brcs	.+6      	; 0x20d8 <__ultoa_invert+0x7c>
    20d2:	49 5d       	subi	r20, 0xD9	; 217
    20d4:	31 fd       	sbrc	r19, 1
    20d6:	40 52       	subi	r20, 0x20	; 32
    20d8:	41 93       	st	Z+, r20
    20da:	02 d0       	rcall	.+4      	; 0x20e0 <__ultoa_invert+0x84>
    20dc:	a9 f7       	brne	.-22     	; 0x20c8 <__ultoa_invert+0x6c>
    20de:	ea cf       	rjmp	.-44     	; 0x20b4 <__ultoa_invert+0x58>
    20e0:	b4 e0       	ldi	r27, 0x04	; 4
    20e2:	a6 95       	lsr	r26
    20e4:	97 95       	ror	r25
    20e6:	87 95       	ror	r24
    20e8:	77 95       	ror	r23
    20ea:	67 95       	ror	r22
    20ec:	ba 95       	dec	r27
    20ee:	c9 f7       	brne	.-14     	; 0x20e2 <__ultoa_invert+0x86>
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	61 05       	cpc	r22, r1
    20f4:	71 05       	cpc	r23, r1
    20f6:	08 95       	ret
    20f8:	9b 01       	movw	r18, r22
    20fa:	ac 01       	movw	r20, r24
    20fc:	0a 2e       	mov	r0, r26
    20fe:	06 94       	lsr	r0
    2100:	57 95       	ror	r21
    2102:	47 95       	ror	r20
    2104:	37 95       	ror	r19
    2106:	27 95       	ror	r18
    2108:	ba 95       	dec	r27
    210a:	c9 f7       	brne	.-14     	; 0x20fe <__ultoa_invert+0xa2>
    210c:	62 0f       	add	r22, r18
    210e:	73 1f       	adc	r23, r19
    2110:	84 1f       	adc	r24, r20
    2112:	95 1f       	adc	r25, r21
    2114:	a0 1d       	adc	r26, r0
    2116:	08 95       	ret

00002118 <__divmodsi4>:
    2118:	05 2e       	mov	r0, r21
    211a:	97 fb       	bst	r25, 7
    211c:	1e f4       	brtc	.+6      	; 0x2124 <__divmodsi4+0xc>
    211e:	00 94       	com	r0
    2120:	0e 94 a3 10 	call	0x2146	; 0x2146 <__negsi2>
    2124:	57 fd       	sbrc	r21, 7
    2126:	07 d0       	rcall	.+14     	; 0x2136 <__divmodsi4_neg2>
    2128:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__udivmodsi4>
    212c:	07 fc       	sbrc	r0, 7
    212e:	03 d0       	rcall	.+6      	; 0x2136 <__divmodsi4_neg2>
    2130:	4e f4       	brtc	.+18     	; 0x2144 <__divmodsi4_exit>
    2132:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <__negsi2>

00002136 <__divmodsi4_neg2>:
    2136:	50 95       	com	r21
    2138:	40 95       	com	r20
    213a:	30 95       	com	r19
    213c:	21 95       	neg	r18
    213e:	3f 4f       	sbci	r19, 0xFF	; 255
    2140:	4f 4f       	sbci	r20, 0xFF	; 255
    2142:	5f 4f       	sbci	r21, 0xFF	; 255

00002144 <__divmodsi4_exit>:
    2144:	08 95       	ret

00002146 <__negsi2>:
    2146:	90 95       	com	r25
    2148:	80 95       	com	r24
    214a:	70 95       	com	r23
    214c:	61 95       	neg	r22
    214e:	7f 4f       	sbci	r23, 0xFF	; 255
    2150:	8f 4f       	sbci	r24, 0xFF	; 255
    2152:	9f 4f       	sbci	r25, 0xFF	; 255
    2154:	08 95       	ret

00002156 <__muluhisi3>:
    2156:	0e 94 17 11 	call	0x222e	; 0x222e <__umulhisi3>
    215a:	a5 9f       	mul	r26, r21
    215c:	90 0d       	add	r25, r0
    215e:	b4 9f       	mul	r27, r20
    2160:	90 0d       	add	r25, r0
    2162:	a4 9f       	mul	r26, r20
    2164:	80 0d       	add	r24, r0
    2166:	91 1d       	adc	r25, r1
    2168:	11 24       	eor	r1, r1
    216a:	08 95       	ret

0000216c <__mulshisi3>:
    216c:	b7 ff       	sbrs	r27, 7
    216e:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__muluhisi3>

00002172 <__mulohisi3>:
    2172:	0e 94 ab 10 	call	0x2156	; 0x2156 <__muluhisi3>
    2176:	82 1b       	sub	r24, r18
    2178:	93 0b       	sbc	r25, r19
    217a:	08 95       	ret

0000217c <__prologue_saves__>:
    217c:	2f 92       	push	r2
    217e:	3f 92       	push	r3
    2180:	4f 92       	push	r4
    2182:	5f 92       	push	r5
    2184:	6f 92       	push	r6
    2186:	7f 92       	push	r7
    2188:	8f 92       	push	r8
    218a:	9f 92       	push	r9
    218c:	af 92       	push	r10
    218e:	bf 92       	push	r11
    2190:	cf 92       	push	r12
    2192:	df 92       	push	r13
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	ca 1b       	sub	r28, r26
    21a6:	db 0b       	sbc	r29, r27
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	09 94       	ijmp

000021b4 <__epilogue_restores__>:
    21b4:	2a 88       	ldd	r2, Y+18	; 0x12
    21b6:	39 88       	ldd	r3, Y+17	; 0x11
    21b8:	48 88       	ldd	r4, Y+16	; 0x10
    21ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    21bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    21be:	7d 84       	ldd	r7, Y+13	; 0x0d
    21c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    21c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    21c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    21c6:	b9 84       	ldd	r11, Y+9	; 0x09
    21c8:	c8 84       	ldd	r12, Y+8	; 0x08
    21ca:	df 80       	ldd	r13, Y+7	; 0x07
    21cc:	ee 80       	ldd	r14, Y+6	; 0x06
    21ce:	fd 80       	ldd	r15, Y+5	; 0x05
    21d0:	0c 81       	ldd	r16, Y+4	; 0x04
    21d2:	1b 81       	ldd	r17, Y+3	; 0x03
    21d4:	aa 81       	ldd	r26, Y+2	; 0x02
    21d6:	b9 81       	ldd	r27, Y+1	; 0x01
    21d8:	ce 0f       	add	r28, r30
    21da:	d1 1d       	adc	r29, r1
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	ed 01       	movw	r28, r26
    21e8:	08 95       	ret

000021ea <__udivmodsi4>:
    21ea:	a1 e2       	ldi	r26, 0x21	; 33
    21ec:	1a 2e       	mov	r1, r26
    21ee:	aa 1b       	sub	r26, r26
    21f0:	bb 1b       	sub	r27, r27
    21f2:	fd 01       	movw	r30, r26
    21f4:	0d c0       	rjmp	.+26     	; 0x2210 <__udivmodsi4_ep>

000021f6 <__udivmodsi4_loop>:
    21f6:	aa 1f       	adc	r26, r26
    21f8:	bb 1f       	adc	r27, r27
    21fa:	ee 1f       	adc	r30, r30
    21fc:	ff 1f       	adc	r31, r31
    21fe:	a2 17       	cp	r26, r18
    2200:	b3 07       	cpc	r27, r19
    2202:	e4 07       	cpc	r30, r20
    2204:	f5 07       	cpc	r31, r21
    2206:	20 f0       	brcs	.+8      	; 0x2210 <__udivmodsi4_ep>
    2208:	a2 1b       	sub	r26, r18
    220a:	b3 0b       	sbc	r27, r19
    220c:	e4 0b       	sbc	r30, r20
    220e:	f5 0b       	sbc	r31, r21

00002210 <__udivmodsi4_ep>:
    2210:	66 1f       	adc	r22, r22
    2212:	77 1f       	adc	r23, r23
    2214:	88 1f       	adc	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	1a 94       	dec	r1
    221a:	69 f7       	brne	.-38     	; 0x21f6 <__udivmodsi4_loop>
    221c:	60 95       	com	r22
    221e:	70 95       	com	r23
    2220:	80 95       	com	r24
    2222:	90 95       	com	r25
    2224:	9b 01       	movw	r18, r22
    2226:	ac 01       	movw	r20, r24
    2228:	bd 01       	movw	r22, r26
    222a:	cf 01       	movw	r24, r30
    222c:	08 95       	ret

0000222e <__umulhisi3>:
    222e:	a2 9f       	mul	r26, r18
    2230:	b0 01       	movw	r22, r0
    2232:	b3 9f       	mul	r27, r19
    2234:	c0 01       	movw	r24, r0
    2236:	a3 9f       	mul	r26, r19
    2238:	70 0d       	add	r23, r0
    223a:	81 1d       	adc	r24, r1
    223c:	11 24       	eor	r1, r1
    223e:	91 1d       	adc	r25, r1
    2240:	b2 9f       	mul	r27, r18
    2242:	70 0d       	add	r23, r0
    2244:	81 1d       	adc	r24, r1
    2246:	11 24       	eor	r1, r1
    2248:	91 1d       	adc	r25, r1
    224a:	08 95       	ret

0000224c <_exit>:
    224c:	f8 94       	cli

0000224e <__stop_program>:
    224e:	ff cf       	rjmp	.-2      	; 0x224e <__stop_program>
