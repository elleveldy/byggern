
ByggernGruppe48H2015.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000116  00800100  00001676  0000170a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001676  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800216  00800216  00001820  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000388  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000035e4  00000000  00000000  00001c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011c6  00000000  00000000  000051e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000119b  00000000  00000000  000063ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000091c  00000000  00000000  0000754c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000923  00000000  00000000  00007e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ca9  00000000  00000000  0000878b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002f0  00000000  00000000  0000a434  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

}

//uses menu_selector and changes it according to joystick movement

void gui_navigate(){
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
	
	//
	if(strcmp(menu_selector->name, "Main") == 0){
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
		menu_selector = menu_submenu(menu_selector);
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
	}

	int threshold = 70;
	
	if(joystick_x_value() > threshold){
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
		oled_printf("x");
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
		menu_selector = menu_submenu(menu_selector);
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
		_delay_ms(200);
	}
	else if(joystick_x_value() < - threshold){
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
		oled_printf("-x");
		menu_selector = menu_parent(menu_selector);
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
		_delay_ms(200);
		
		
	}
	else if(joystick_y_value() > threshold){
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
		oled_printf("y");
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
		menu_selector = menu_prev(menu_selector);
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
		_delay_ms(200);

		
	}
	else if(joystick_y_value() < - threshold){
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
		oled_printf("-y");
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
		//if there is a next item:
		if(menu_next(menu_selector) != NULL){
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
			menu_selector = menu_next(menu_selector);
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
			_delay_ms(200);
		}
	}
	else if(joystick_button_read()){
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
		oled_printf("button");
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
		if(menu_selector->fn != NULL ){	//if the function pointer points to a function, call it
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
			menu_selector->fn();
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
			
		}
	}
	
	
}
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <SRAM_test+0x1c>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e6 e7       	ldi	r30, 0x76	; 118
     37c:	f6 e1       	ldi	r31, 0x16	; 22
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a6 31       	cpi	r26, 0x16	; 22
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a6 e1       	ldi	r26, 0x16	; 22
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a8 32       	cpi	r26, 0x28	; 40
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <main>
     39e:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_init>:
#include <string.h>
#include <util/delay.h>



void can_init(int mode){
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	ec 01       	movw	r28, r24

	mcp2515_init();
     3ac:	0e 94 5e 03 	call	0x6bc	; 0x6bc <mcp2515_init>
	mcp2515_bit_modify(MCP_RXB0CTRL, MCP_MASK_FILTER, 0xff);
     3b0:	4f ef       	ldi	r20, 0xFF	; 255
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	60 e6       	ldi	r22, 0x60	; 96
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	80 e6       	ldi	r24, 0x60	; 96
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 40 03 	call	0x680	; 0x680 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXB1CTRL, MCP_MASK_FILTER, 0xff);
     3c0:	4f ef       	ldi	r20, 0xFF	; 255
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	60 e6       	ldi	r22, 0x60	; 96
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 e7       	ldi	r24, 0x70	; 112
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 40 03 	call	0x680	; 0x680 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, mode);
     3d0:	ae 01       	movw	r20, r28
     3d2:	60 ee       	ldi	r22, 0xE0	; 224
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	8f e0       	ldi	r24, 0x0F	; 15
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 40 03 	call	0x680	; 0x680 <mcp2515_bit_modify>
	DDRE &= ~(1 << PE0);
     3de:	30 98       	cbi	0x06, 0	; 6
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <can_transmit>:

void can_transmit(can_message* msg, int buffer_select){
     3e6:	8f 92       	push	r8
     3e8:	9f 92       	push	r9
     3ea:	af 92       	push	r10
     3ec:	bf 92       	push	r11
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	00 d0       	rcall	.+0      	; 0x400 <can_transmit+0x1a>
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
     404:	5c 01       	movw	r10, r24
     406:	7b 01       	movw	r14, r22
	
	mcp2515_bit_modify(buffer_select, 0x08, 0xff);
     408:	4f ef       	ldi	r20, 0xFF	; 255
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	68 e0       	ldi	r22, 0x08	; 8
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	c7 01       	movw	r24, r14
     412:	0e 94 40 03 	call	0x680	; 0x680 <mcp2515_bit_modify>
	
	while(mcp2515_read(buffer_select) & (1 << MCP_TXREQ));
     416:	c7 01       	movw	r24, r14
     418:	0e 94 1a 03 	call	0x634	; 0x634 <mcp2515_read>
     41c:	83 fd       	sbrc	r24, 3
     41e:	fb cf       	rjmp	.-10     	; 0x416 <can_transmit+0x30>
	
	volatile uint8_t idl = MCP2515_MASK_IDL & (msg->id << 5);
     420:	f5 01       	movw	r30, r10
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	28 2f       	mov	r18, r24
     428:	22 95       	swap	r18
     42a:	22 0f       	add	r18, r18
     42c:	20 7e       	andi	r18, 0xE0	; 224
     42e:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t idh = MCP2515_MASK_IDH & (msg->id >> 3);
     430:	96 95       	lsr	r25
     432:	87 95       	ror	r24
     434:	96 95       	lsr	r25
     436:	87 95       	ror	r24
     438:	96 95       	lsr	r25
     43a:	87 95       	ror	r24
     43c:	8a 83       	std	Y+2, r24	; 0x02
	
	mcp2515_write(buffer_select + MCP2515_IDL_OFFSET, idl); //3 LSB
     43e:	69 81       	ldd	r22, Y+1	; 0x01
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	c7 01       	movw	r24, r14
     444:	02 96       	adiw	r24, 0x02	; 2
     446:	0e 94 29 03 	call	0x652	; 0x652 <mcp2515_write>
	mcp2515_write(buffer_select + MCP2515_IDH_OFFSET, idh); //8 MSB
     44a:	6a 81       	ldd	r22, Y+2	; 0x02
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	c7 01       	movw	r24, r14
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	0e 94 29 03 	call	0x652	; 0x652 <mcp2515_write>
	
	mcp2515_write(buffer_select + MCP2515_DLC_OFFSET, MCP2515_MASK_DLC & (msg->length));
     456:	f5 01       	movw	r30, r10
     458:	62 81       	ldd	r22, Z+2	; 0x02
     45a:	6f 70       	andi	r22, 0x0F	; 15
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	c7 01       	movw	r24, r14
     460:	05 96       	adiw	r24, 0x05	; 5
     462:	0e 94 29 03 	call	0x652	; 0x652 <mcp2515_write>
	
	
	for(int i = 0; i < msg->length; i++){
     466:	f5 01       	movw	r30, r10
     468:	82 81       	ldd	r24, Z+2	; 0x02
     46a:	88 23       	and	r24, r24
     46c:	d9 f0       	breq	.+54     	; 0x4a4 <can_transmit+0xbe>
     46e:	65 01       	movw	r12, r10
     470:	f3 e0       	ldi	r31, 0x03	; 3
     472:	cf 0e       	add	r12, r31
     474:	d1 1c       	adc	r13, r1
     476:	00 e0       	ldi	r16, 0x00	; 0
     478:	10 e0       	ldi	r17, 0x00	; 0
     47a:	47 01       	movw	r8, r14
     47c:	86 e0       	ldi	r24, 0x06	; 6
     47e:	88 0e       	add	r8, r24
     480:	91 1c       	adc	r9, r1
		mcp2515_write(buffer_select + MCP2515_TXB_OFFSET + i, msg->data[i]);
     482:	f6 01       	movw	r30, r12
     484:	61 91       	ld	r22, Z+
     486:	6f 01       	movw	r12, r30
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	c4 01       	movw	r24, r8
     48c:	80 0f       	add	r24, r16
     48e:	91 1f       	adc	r25, r17
     490:	0e 94 29 03 	call	0x652	; 0x652 <mcp2515_write>
	mcp2515_write(buffer_select + MCP2515_IDH_OFFSET, idh); //8 MSB
	
	mcp2515_write(buffer_select + MCP2515_DLC_OFFSET, MCP2515_MASK_DLC & (msg->length));
	
	
	for(int i = 0; i < msg->length; i++){
     494:	0f 5f       	subi	r16, 0xFF	; 255
     496:	1f 4f       	sbci	r17, 0xFF	; 255
     498:	f5 01       	movw	r30, r10
     49a:	82 81       	ldd	r24, Z+2	; 0x02
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	08 17       	cp	r16, r24
     4a0:	19 07       	cpc	r17, r25
     4a2:	7c f3       	brlt	.-34     	; 0x482 <can_transmit+0x9c>
		
	}
	
	int buffer_control;
	
	if (buffer_select == MCP_TXB0CTRL){
     4a4:	f0 e3       	ldi	r31, 0x30	; 48
     4a6:	ef 16       	cp	r14, r31
     4a8:	f1 04       	cpc	r15, r1
     4aa:	59 f0       	breq	.+22     	; 0x4c2 <can_transmit+0xdc>
		buffer_control = MCP_RTS_TX0;
	}
	else if (buffer_select == MCP_TXB1CTRL){
     4ac:	80 e4       	ldi	r24, 0x40	; 64
     4ae:	e8 16       	cp	r14, r24
     4b0:	f1 04       	cpc	r15, r1
     4b2:	51 f0       	breq	.+20     	; 0x4c8 <can_transmit+0xe2>
		buffer_control = MCP_RTS_TX1;
	}
	else if (buffer_select == MCP_TXB2CTRL){
     4b4:	e0 e5       	ldi	r30, 0x50	; 80
     4b6:	ee 16       	cp	r14, r30
     4b8:	f1 04       	cpc	r15, r1
     4ba:	51 f4       	brne	.+20     	; 0x4d0 <can_transmit+0xea>
		buffer_control=MCP_RTS_TX2;
     4bc:	84 e8       	ldi	r24, 0x84	; 132
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	05 c0       	rjmp	.+10     	; 0x4cc <can_transmit+0xe6>
	}
	
	int buffer_control;
	
	if (buffer_select == MCP_TXB0CTRL){
		buffer_control = MCP_RTS_TX0;
     4c2:	81 e8       	ldi	r24, 0x81	; 129
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <can_transmit+0xe6>
	}
	else if (buffer_select == MCP_TXB1CTRL){
		buffer_control = MCP_RTS_TX1;
     4c8:	82 e8       	ldi	r24, 0x82	; 130
     4ca:	90 e0       	ldi	r25, 0x00	; 0
		return; 
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
     4cc:	0e 94 3b 03 	call	0x676	; 0x676 <mcp2515_request_to_send>
}
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	9f 90       	pop	r9
     4ea:	8f 90       	pop	r8
     4ec:	08 95       	ret

000004ee <canjoy_transmit>:


uint16_t CANJOY_ID = 7;

void canjoy_transmit()
{
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	2b 97       	sbiw	r28, 0x0b	; 11
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	de bf       	out	0x3e, r29	; 62
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	cd bf       	out	0x3d, r28	; 61
	can_message joy;
	joy.id = CANJOY_ID;
     502:	80 91 0a 01 	lds	r24, 0x010A
     506:	90 91 0b 01 	lds	r25, 0x010B
     50a:	9a 83       	std	Y+2, r25	; 0x02
     50c:	89 83       	std	Y+1, r24	; 0x01
	joy.length = 7;
     50e:	87 e0       	ldi	r24, 0x07	; 7
     510:	8b 83       	std	Y+3, r24	; 0x03
	//printf("ID set to 7\n");
	
	joy.data[0] = joystick_read_x();
     512:	0e 94 ad 02 	call	0x55a	; 0x55a <joystick_read_x>
     516:	8c 83       	std	Y+4, r24	; 0x04
	joy.data[1] = joystick_read_y();
     518:	0e 94 b8 02 	call	0x570	; 0x570 <joystick_read_y>
     51c:	8d 83       	std	Y+5, r24	; 0x05
	joy.data[2] = joystick_button_read();
     51e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <joystick_button_read>
     522:	8e 83       	std	Y+6, r24	; 0x06
	joy.data[3] = slider_left_read();
     524:	0e 94 c3 02 	call	0x586	; 0x586 <slider_left_read>
     528:	8f 83       	std	Y+7, r24	; 0x07
	joy.data[4] = slider_right_read();
     52a:	0e 94 cd 02 	call	0x59a	; 0x59a <slider_right_read>
     52e:	88 87       	std	Y+8, r24	; 0x08
	joy.data[5] = button_left_read();
     530:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <button_left_read>
     534:	89 87       	std	Y+9, r24	; 0x09
	joy.data[6] = button_right_read();
     536:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <button_right_read>
     53a:	8a 87       	std	Y+10, r24	; 0x0a
	
	can_transmit(&joy, MCP_TXB0CTRL);
     53c:	60 e3       	ldi	r22, 0x30	; 48
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	ce 01       	movw	r24, r28
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <can_transmit>
	
}
     548:	2b 96       	adiw	r28, 0x0b	; 11
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	de bf       	out	0x3e, r29	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	cd bf       	out	0x3d, r28	; 61
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <joystick_read_x>:
//}

unsigned int joystick_read_x(){
	
	volatile char *ext_joy = (char *) 0x1400;
	ext_joy[0] = 0x04;
     55a:	84 e0       	ldi	r24, 0x04	; 4
     55c:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     560:	81 e4       	ldi	r24, 0x41	; 65
     562:	8a 95       	dec	r24
     564:	f1 f7       	brne	.-4      	; 0x562 <joystick_read_x+0x8>
     566:	00 c0       	rjmp	.+0      	; 0x568 <joystick_read_x+0xe>
	_delay_us(40);
	return (uint8_t)ext_joy[0];
     568:	80 91 00 14 	lds	r24, 0x1400
	
}
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	08 95       	ret

00000570 <joystick_read_y>:


unsigned int joystick_read_y(){
	
	volatile char *ext_joy = (char *) 0x1400;
	ext_joy[0] = 0x05;
     570:	85 e0       	ldi	r24, 0x05	; 5
     572:	80 93 00 14 	sts	0x1400, r24
     576:	81 e4       	ldi	r24, 0x41	; 65
     578:	8a 95       	dec	r24
     57a:	f1 f7       	brne	.-4      	; 0x578 <joystick_read_y+0x8>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <joystick_read_y+0xe>
	_delay_us(40);
	return (uint8_t)ext_joy[0];
     57e:	80 91 00 14 	lds	r24, 0x1400
	
}
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	08 95       	ret

00000586 <slider_left_read>:



uint8_t slider_left_read(){
	volatile char *ext_slide = (char *) 0x1400;
	ext_slide[0] = 0x06;
     586:	86 e0       	ldi	r24, 0x06	; 6
     588:	80 93 00 14 	sts	0x1400, r24
     58c:	81 e4       	ldi	r24, 0x41	; 65
     58e:	8a 95       	dec	r24
     590:	f1 f7       	brne	.-4      	; 0x58e <slider_left_read+0x8>
     592:	00 c0       	rjmp	.+0      	; 0x594 <slider_left_read+0xe>
	_delay_us(40);
	return (uint8_t)ext_slide[0];
     594:	80 91 00 14 	lds	r24, 0x1400
}
     598:	08 95       	ret

0000059a <slider_right_read>:

uint8_t slider_right_read(){
	volatile char *ext_slide = (char *) 0x1400;
	ext_slide[0] = 0x07;
     59a:	87 e0       	ldi	r24, 0x07	; 7
     59c:	80 93 00 14 	sts	0x1400, r24
     5a0:	81 e4       	ldi	r24, 0x41	; 65
     5a2:	8a 95       	dec	r24
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <slider_right_read+0x8>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <slider_right_read+0xe>
	_delay_us(40);
	return (uint8_t)ext_slide[0];
     5a8:	80 91 00 14 	lds	r24, 0x1400
}
     5ac:	08 95       	ret

000005ae <buttons_init>:
signed int slider_right_value(){
	return (slider_right_read() - 127);	
}

void buttons_init(){
	DDRB &= ~(1 << DDB1);	// ????
     5ae:	b9 98       	cbi	0x17, 1	; 23
	
	//left & right
	DDRB &= (1<< PINB0); //right
     5b0:	87 b3       	in	r24, 0x17	; 23
     5b2:	81 70       	andi	r24, 0x01	; 1
     5b4:	87 bb       	out	0x17, r24	; 23
	DDRB &= (1<< PINB1); //left
     5b6:	87 b3       	in	r24, 0x17	; 23
     5b8:	82 70       	andi	r24, 0x02	; 2
     5ba:	87 bb       	out	0x17, r24	; 23

	//joystick button activate
	DDRB &= (1 << PINB2);
     5bc:	87 b3       	in	r24, 0x17	; 23
     5be:	84 70       	andi	r24, 0x04	; 4
     5c0:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << PINB2);
     5c2:	c2 9a       	sbi	0x18, 2	; 24
     5c4:	08 95       	ret

000005c6 <joystick_button_read>:
}

int joystick_button_read(){
	int button = (PINB & (1 << PINB3));
	if (button > 0){
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	b3 9b       	sbis	0x16, 3	; 22
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <joystick_button_read+0xc>
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
	else{
		return 1;
	}
	
	
}
     5d2:	08 95       	ret

000005d4 <button_left_read>:

int button_left_read(){
	int button = (PINB & (1 << PINB1));
	if (button > 0){
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	b1 99       	sbic	0x16, 1	; 22
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <button_left_read+0xc>
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
}
     5e0:	08 95       	ret

000005e2 <button_right_read>:

int button_right_read(){
	int button = (PINB & (1 << PINB0));
	if (button > 0){
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	b0 99       	sbic	0x16, 0	; 22
     5e8:	02 c0       	rjmp	.+4      	; 0x5ee <button_right_read+0xc>
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	90 e0       	ldi	r25, 0x00	; 0
	}
	else{
		return 0;
	}
	
}
     5ee:	08 95       	ret

000005f0 <main>:
*/



int main(void){
	fdevopen(uart_Transmit, uart_Receive);
     5f0:	62 ee       	ldi	r22, 0xE2	; 226
     5f2:	75 e0       	ldi	r23, 0x05	; 5
     5f4:	8e ed       	ldi	r24, 0xDE	; 222
     5f6:	95 e0       	ldi	r25, 0x05	; 5
     5f8:	0e 94 78 07 	call	0xef0	; 0xef0 <fdevopen>
	
	MCUCR |= (1 << SRE);
     5fc:	85 b7       	in	r24, 0x35	; 53
     5fe:	80 68       	ori	r24, 0x80	; 128
     600:	85 bf       	out	0x35, r24	; 53
	
	uart_Init(MYUBRR);
     602:	8f e1       	ldi	r24, 0x1F	; 31
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 e6 05 	call	0xbcc	; 0xbcc <uart_Init>
	
	
	buttons_init(); // useless thus far
     60a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <buttons_init>
	/*oled_init();	
	oled_clear_screen();	
	oled_home();*/
	
	
	Menuitem* menu = create_menu();
     60e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <create_menu>
	menu_selector = menu;
     612:	90 93 1b 02 	sts	0x021B, r25
     616:	80 93 1a 02 	sts	0x021A, r24
	menu_line_nr = 0; 
     61a:	10 92 19 02 	sts	0x0219, r1
     61e:	10 92 18 02 	sts	0x0218, r1
	
	can_init(MODE_NORMAL);
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
		printf("X: %d\n", joystick_read_x());
		canjoy_transmit();
		
	}*/
	
	oled_alt_init();
     62a:	0e 94 90 04 	call	0x920	; 0x920 <oled_alt_init>

		//gui_alt_run();
		
		//oled_write_screen();
			
		canjoy_transmit();
     62e:	0e 94 77 02 	call	0x4ee	; 0x4ee <canjoy_transmit>
     632:	fd cf       	rjmp	.-6      	; 0x62e <main+0x3e>

00000634 <mcp2515_read>:
	}
	return 0;
}


int mcp2515_read(int address){
     634:	cf 93       	push	r28
     636:	c8 2f       	mov	r28, r24
	
	int result;
	
	PORTB &= ~(1 << MCP2515_CS);
     638:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_READ);
     63a:	83 e0       	ldi	r24, 0x03	; 3
     63c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <spi_write>
	spi_write(address);
     640:	8c 2f       	mov	r24, r28
     642:	0e 94 8d 05 	call	0xb1a	; 0xb1a <spi_write>
	
	result = spi_write(0x00);
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	0e 94 8d 05 	call	0xb1a	; 0xb1a <spi_write>
	
	PORTB |= (1 << MCP2515_CS);
     64c:	c4 9a       	sbi	0x18, 4	; 24
	return result;
}
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <mcp2515_write>:

void mcp2515_write(int address, int data){
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	d8 2f       	mov	r29, r24
     658:	c6 2f       	mov	r28, r22
	
	PORTB &= ~(1 << MCP2515_CS);
     65a:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_WRITE);
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <spi_write>
	spi_write(address);
     662:	8d 2f       	mov	r24, r29
     664:	0e 94 8d 05 	call	0xb1a	; 0xb1a <spi_write>
	spi_write(data);
     668:	8c 2f       	mov	r24, r28
     66a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <spi_write>
	
	PORTB |= (1 << MCP2515_CS);	
     66e:	c4 9a       	sbi	0x18, 4	; 24
}
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	08 95       	ret

00000676 <mcp2515_request_to_send>:

void mcp2515_request_to_send(int buffer_select){
	PORTB &= ~(1 << MCP2515_CS);
     676:	c4 98       	cbi	0x18, 4	; 24
	spi_write(buffer_select);
     678:	0e 94 8d 05 	call	0xb1a	; 0xb1a <spi_write>
	PORTB |= (1 << MCP2515_CS);
     67c:	c4 9a       	sbi	0x18, 4	; 24
     67e:	08 95       	ret

00000680 <mcp2515_bit_modify>:
}

void mcp2515_bit_modify(int address, int mask, int data){
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	18 2f       	mov	r17, r24
     688:	d6 2f       	mov	r29, r22
     68a:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS);
     68c:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_BITMOD);
     68e:	85 e0       	ldi	r24, 0x05	; 5
     690:	0e 94 8d 05 	call	0xb1a	; 0xb1a <spi_write>
	spi_write(address);
     694:	81 2f       	mov	r24, r17
     696:	0e 94 8d 05 	call	0xb1a	; 0xb1a <spi_write>
	spi_write(mask);
     69a:	8d 2f       	mov	r24, r29
     69c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <spi_write>
	spi_write(data);
     6a0:	8c 2f       	mov	r24, r28
     6a2:	0e 94 8d 05 	call	0xb1a	; 0xb1a <spi_write>

	PORTB |= (1 << MCP2515_CS);
     6a6:	c4 9a       	sbi	0x18, 4	; 24
	
}
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	08 95       	ret

000006b0 <mcp2515_reset>:

void mcp2515_reset(){
	PORTB &= ~(1 << MCP2515_CS);
     6b0:	c4 98       	cbi	0x18, 4	; 24
	spi_write(MCP_RESET);
     6b2:	80 ec       	ldi	r24, 0xC0	; 192
     6b4:	0e 94 8d 05 	call	0xb1a	; 0xb1a <spi_write>
	PORTB |= (1 << MCP2515_CS);
     6b8:	c4 9a       	sbi	0x18, 4	; 24
     6ba:	08 95       	ret

000006bc <mcp2515_init>:
#include "SPI.h"
#include "mcp2515_define.h"


int mcp2515_init(){
	spi_init();
     6bc:	0e 94 86 05 	call	0xb0c	; 0xb0c <spi_init>
	mcp2515_reset();
     6c0:	0e 94 58 03 	call	0x6b0	; 0x6b0 <mcp2515_reset>
	
	uint8_t value = mcp2515_read(MCP_CANSTAT);
     6c4:	8e e0       	ldi	r24, 0x0E	; 14
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 1a 03 	call	0x634	; 0x634 <mcp2515_read>
	if((value & MODE_MASK) != MODE_CONFIG){
     6cc:	80 7e       	andi	r24, 0xE0	; 224
     6ce:	99 27       	eor	r25, r25
     6d0:	80 38       	cpi	r24, 0x80	; 128
     6d2:	91 05       	cpc	r25, r1
     6d4:	39 f0       	breq	.+14     	; 0x6e4 <mcp2515_init+0x28>
		printf("ERROR: MCP2515 is NOT in config mode after reset!\n");
     6d6:	8c e0       	ldi	r24, 0x0C	; 12
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 d7 07 	call	0xfae	; 0xfae <puts>
		return 1;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	08 95       	ret
	}
	return 0;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
}
     6e8:	08 95       	ret

000006ea <menu_snake_fn>:
	
/*		
		printf("X: %d\n", joystick_read_x());
		canjoy_transmit();
*/		
		oled_alt_clear_screen();
     6ea:	0e 94 5f 05 	call	0xabe	; 0xabe <oled_alt_clear_screen>
		oled_store_string("no snake yet", 1*8, 3);
     6ee:	43 e0       	ldi	r20, 0x03	; 3
     6f0:	50 e0       	ldi	r21, 0x00	; 0
     6f2:	68 e0       	ldi	r22, 0x08	; 8
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	8e e3       	ldi	r24, 0x3E	; 62
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	0e 94 09 05 	call	0xa12	; 0xa12 <oled_store_string>
		oled_store_string("return", 0, 7);
     6fe:	47 e0       	ldi	r20, 0x07	; 7
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	8b e4       	ldi	r24, 0x4B	; 75
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	0e 94 09 05 	call	0xa12	; 0xa12 <oled_store_string>
		oled_write_screen();
     70e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <oled_write_screen>
		
		if(button_left_read()){
     712:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <button_left_read>
     716:	89 2b       	or	r24, r25
     718:	41 f3       	breq	.-48     	; 0x6ea <menu_snake_fn>
			return;
		}
	}
	
}
     71a:	08 95       	ret

0000071c <new_Menuitem>:

Menuitem* new_Menuitem(
char* name,
void (*fn)(void),
uint8_t num_submenus
){
     71c:	df 92       	push	r13
     71e:	ef 92       	push	r14
     720:	ff 92       	push	r15
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	7c 01       	movw	r14, r24
     72c:	8b 01       	movw	r16, r22
     72e:	d4 2e       	mov	r13, r20
	Menuitem* this = malloc(sizeof(Menuitem));
     730:	89 e0       	ldi	r24, 0x09	; 9
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <malloc>
     738:	ec 01       	movw	r28, r24
	this->name = name;
     73a:	fe 82       	std	Y+6, r15	; 0x06
     73c:	ed 82       	std	Y+5, r14	; 0x05
	this->fn = fn;
     73e:	18 87       	std	Y+8, r17	; 0x08
     740:	0f 83       	std	Y+7, r16	; 0x07
	
	this->num_submenus = num_submenus;
     742:	d8 82       	st	Y, r13
	this->submenus = malloc(sizeof(Menuitem) * num_submenus);
     744:	4d 2d       	mov	r20, r13
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	ca 01       	movw	r24, r20
     74a:	88 0f       	add	r24, r24
     74c:	99 1f       	adc	r25, r25
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	84 0f       	add	r24, r20
     758:	95 1f       	adc	r25, r21
     75a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <malloc>
     75e:	9a 83       	std	Y+2, r25	; 0x02
     760:	89 83       	std	Y+1, r24	; 0x01
	
	return this;
}
     762:	ce 01       	movw	r24, r28
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	ff 90       	pop	r15
     76e:	ef 90       	pop	r14
     770:	df 90       	pop	r13
     772:	08 95       	ret

00000774 <assign_parents>:


void assign_parents(Menuitem* menu){
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	ec 01       	movw	r28, r24
	for(uint8_t n = 0; n < menu->num_submenus; n++){
     77c:	88 81       	ld	r24, Y
     77e:	88 23       	and	r24, r24
     780:	01 f1       	breq	.+64     	; 0x7c2 <assign_parents+0x4e>
     782:	10 e0       	ldi	r17, 0x00	; 0
		menu->submenus[n]->parent = menu;
     784:	81 2f       	mov	r24, r17
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	88 0f       	add	r24, r24
     78a:	99 1f       	adc	r25, r25
     78c:	e9 81       	ldd	r30, Y+1	; 0x01
     78e:	fa 81       	ldd	r31, Y+2	; 0x02
     790:	e8 0f       	add	r30, r24
     792:	f9 1f       	adc	r31, r25
     794:	01 90       	ld	r0, Z+
     796:	f0 81       	ld	r31, Z
     798:	e0 2d       	mov	r30, r0
     79a:	d4 83       	std	Z+4, r29	; 0x04
     79c:	c3 83       	std	Z+3, r28	; 0x03
		if(menu->submenus[n]->num_submenus > 0){
     79e:	29 81       	ldd	r18, Y+1	; 0x01
     7a0:	3a 81       	ldd	r19, Y+2	; 0x02
     7a2:	f9 01       	movw	r30, r18
     7a4:	e8 0f       	add	r30, r24
     7a6:	f9 1f       	adc	r31, r25
     7a8:	01 90       	ld	r0, Z+
     7aa:	f0 81       	ld	r31, Z
     7ac:	e0 2d       	mov	r30, r0
     7ae:	80 81       	ld	r24, Z
     7b0:	88 23       	and	r24, r24
     7b2:	19 f0       	breq	.+6      	; 0x7ba <assign_parents+0x46>
			assign_parents(menu->submenus[n]);
     7b4:	cf 01       	movw	r24, r30
     7b6:	0e 94 ba 03 	call	0x774	; 0x774 <assign_parents>
	return this;
}


void assign_parents(Menuitem* menu){
	for(uint8_t n = 0; n < menu->num_submenus; n++){
     7ba:	1f 5f       	subi	r17, 0xFF	; 255
     7bc:	88 81       	ld	r24, Y
     7be:	18 17       	cp	r17, r24
     7c0:	08 f3       	brcs	.-62     	; 0x784 <assign_parents+0x10>
		menu->submenus[n]->parent = menu;
		if(menu->submenus[n]->num_submenus > 0){
			assign_parents(menu->submenus[n]);
		}
	}
}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	08 95       	ret

000007ca <create_menu>:


Menuitem* create_menu(){
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
	
	//Store these strings in progmem maybe
	
	
	//for some reason, MENU/GUI instantly goes into first submenu in main, but this pattern doesn't repeat in sub menus, so wtf
	Menuitem* base = new_Menuitem("Main", NULL, 3);
     7d2:	43 e0       	ldi	r20, 0x03	; 3
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	82 e5       	ldi	r24, 0x52	; 82
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 8e 03 	call	0x71c	; 0x71c <new_Menuitem>
     7e0:	ec 01       	movw	r28, r24
	base->submenus[0] = new_Menuitem("Snake", menu_snake_fn, 0);
     7e2:	09 81       	ldd	r16, Y+1	; 0x01
     7e4:	1a 81       	ldd	r17, Y+2	; 0x02
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	65 e7       	ldi	r22, 0x75	; 117
     7ea:	73 e0       	ldi	r23, 0x03	; 3
     7ec:	87 e5       	ldi	r24, 0x57	; 87
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 8e 03 	call	0x71c	; 0x71c <new_Menuitem>
     7f4:	f8 01       	movw	r30, r16
     7f6:	91 83       	std	Z+1, r25	; 0x01
     7f8:	80 83       	st	Z, r24
	
	base->submenus[1] = new_Menuitem("Settings", NULL, 2);
     7fa:	09 81       	ldd	r16, Y+1	; 0x01
     7fc:	1a 81       	ldd	r17, Y+2	; 0x02
     7fe:	42 e0       	ldi	r20, 0x02	; 2
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	8d e5       	ldi	r24, 0x5D	; 93
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	0e 94 8e 03 	call	0x71c	; 0x71c <new_Menuitem>
     80c:	f8 01       	movw	r30, r16
     80e:	93 83       	std	Z+3, r25	; 0x03
     810:	82 83       	std	Z+2, r24	; 0x02
		base->submenus[1]->submenus[0] = new_Menuitem("Contrast", oled_alt_change_contrast, 0);
     812:	e9 81       	ldd	r30, Y+1	; 0x01
     814:	fa 81       	ldd	r31, Y+2	; 0x02
     816:	02 80       	ldd	r0, Z+2	; 0x02
     818:	f3 81       	ldd	r31, Z+3	; 0x03
     81a:	e0 2d       	mov	r30, r0
     81c:	01 81       	ldd	r16, Z+1	; 0x01
     81e:	12 81       	ldd	r17, Z+2	; 0x02
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	65 e8       	ldi	r22, 0x85	; 133
     824:	75 e0       	ldi	r23, 0x05	; 5
     826:	86 e6       	ldi	r24, 0x66	; 102
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	0e 94 8e 03 	call	0x71c	; 0x71c <new_Menuitem>
     82e:	f8 01       	movw	r30, r16
     830:	91 83       	std	Z+1, r25	; 0x01
     832:	80 83       	st	Z, r24
		base->submenus[1]->submenus[1] = new_Menuitem("Toggle negative", oled_alt_toggle_negative, 0);
     834:	e9 81       	ldd	r30, Y+1	; 0x01
     836:	fa 81       	ldd	r31, Y+2	; 0x02
     838:	02 80       	ldd	r0, Z+2	; 0x02
     83a:	f3 81       	ldd	r31, Z+3	; 0x03
     83c:	e0 2d       	mov	r30, r0
     83e:	01 81       	ldd	r16, Z+1	; 0x01
     840:	12 81       	ldd	r17, Z+2	; 0x02
     842:	40 e0       	ldi	r20, 0x00	; 0
     844:	6d e6       	ldi	r22, 0x6D	; 109
     846:	75 e0       	ldi	r23, 0x05	; 5
     848:	8f e6       	ldi	r24, 0x6F	; 111
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 8e 03 	call	0x71c	; 0x71c <new_Menuitem>
     850:	f8 01       	movw	r30, r16
     852:	93 83       	std	Z+3, r25	; 0x03
     854:	82 83       	std	Z+2, r24	; 0x02
		
	base->submenus[2] = new_Menuitem("Tests", NULL, 2);
     856:	09 81       	ldd	r16, Y+1	; 0x01
     858:	1a 81       	ldd	r17, Y+2	; 0x02
     85a:	42 e0       	ldi	r20, 0x02	; 2
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	8f e7       	ldi	r24, 0x7F	; 127
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 8e 03 	call	0x71c	; 0x71c <new_Menuitem>
     868:	f8 01       	movw	r30, r16
     86a:	95 83       	std	Z+5, r25	; 0x05
     86c:	84 83       	std	Z+4, r24	; 0x04
		base->submenus[2]->submenus[0] = new_Menuitem("Can", NULL, 2);
     86e:	e9 81       	ldd	r30, Y+1	; 0x01
     870:	fa 81       	ldd	r31, Y+2	; 0x02
     872:	04 80       	ldd	r0, Z+4	; 0x04
     874:	f5 81       	ldd	r31, Z+5	; 0x05
     876:	e0 2d       	mov	r30, r0
     878:	01 81       	ldd	r16, Z+1	; 0x01
     87a:	12 81       	ldd	r17, Z+2	; 0x02
     87c:	42 e0       	ldi	r20, 0x02	; 2
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	85 e8       	ldi	r24, 0x85	; 133
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	0e 94 8e 03 	call	0x71c	; 0x71c <new_Menuitem>
     88a:	f8 01       	movw	r30, r16
     88c:	91 83       	std	Z+1, r25	; 0x01
     88e:	80 83       	st	Z, r24
			base->submenus[2]->submenus[0]->submenus[0] = new_Menuitem("Loopback", NULL, 0);
     890:	e9 81       	ldd	r30, Y+1	; 0x01
     892:	fa 81       	ldd	r31, Y+2	; 0x02
     894:	04 80       	ldd	r0, Z+4	; 0x04
     896:	f5 81       	ldd	r31, Z+5	; 0x05
     898:	e0 2d       	mov	r30, r0
     89a:	01 80       	ldd	r0, Z+1	; 0x01
     89c:	f2 81       	ldd	r31, Z+2	; 0x02
     89e:	e0 2d       	mov	r30, r0
     8a0:	01 90       	ld	r0, Z+
     8a2:	f0 81       	ld	r31, Z
     8a4:	e0 2d       	mov	r30, r0
     8a6:	01 81       	ldd	r16, Z+1	; 0x01
     8a8:	12 81       	ldd	r17, Z+2	; 0x02
     8aa:	40 e0       	ldi	r20, 0x00	; 0
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	89 e8       	ldi	r24, 0x89	; 137
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	0e 94 8e 03 	call	0x71c	; 0x71c <new_Menuitem>
     8b8:	f8 01       	movw	r30, r16
     8ba:	91 83       	std	Z+1, r25	; 0x01
     8bc:	80 83       	st	Z, r24
			base->submenus[2]->submenus[0]->submenus[1] = new_Menuitem("Node1 to Node2", NULL, 0);
     8be:	e9 81       	ldd	r30, Y+1	; 0x01
     8c0:	fa 81       	ldd	r31, Y+2	; 0x02
     8c2:	04 80       	ldd	r0, Z+4	; 0x04
     8c4:	f5 81       	ldd	r31, Z+5	; 0x05
     8c6:	e0 2d       	mov	r30, r0
     8c8:	01 80       	ldd	r0, Z+1	; 0x01
     8ca:	f2 81       	ldd	r31, Z+2	; 0x02
     8cc:	e0 2d       	mov	r30, r0
     8ce:	01 90       	ld	r0, Z+
     8d0:	f0 81       	ld	r31, Z
     8d2:	e0 2d       	mov	r30, r0
     8d4:	01 81       	ldd	r16, Z+1	; 0x01
     8d6:	12 81       	ldd	r17, Z+2	; 0x02
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	82 e9       	ldi	r24, 0x92	; 146
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	0e 94 8e 03 	call	0x71c	; 0x71c <new_Menuitem>
     8e6:	f8 01       	movw	r30, r16
     8e8:	93 83       	std	Z+3, r25	; 0x03
     8ea:	82 83       	std	Z+2, r24	; 0x02
		base->submenus[2]->submenus[1] = new_Menuitem("SRAM", SRAM_test, 0);
     8ec:	e9 81       	ldd	r30, Y+1	; 0x01
     8ee:	fa 81       	ldd	r31, Y+2	; 0x02
     8f0:	04 80       	ldd	r0, Z+4	; 0x04
     8f2:	f5 81       	ldd	r31, Z+5	; 0x05
     8f4:	e0 2d       	mov	r30, r0
     8f6:	01 81       	ldd	r16, Z+1	; 0x01
     8f8:	12 81       	ldd	r17, Z+2	; 0x02
     8fa:	40 e0       	ldi	r20, 0x00	; 0
     8fc:	63 e9       	ldi	r22, 0x93	; 147
     8fe:	75 e0       	ldi	r23, 0x05	; 5
     900:	81 ea       	ldi	r24, 0xA1	; 161
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	0e 94 8e 03 	call	0x71c	; 0x71c <new_Menuitem>
     908:	f8 01       	movw	r30, r16
     90a:	93 83       	std	Z+3, r25	; 0x03
     90c:	82 83       	std	Z+2, r24	; 0x02
		
			
			
		
	
	assign_parents(base);
     90e:	ce 01       	movw	r24, r28
     910:	0e 94 ba 03 	call	0x774	; 0x774 <assign_parents>
	
	return base;
}
     914:	ce 01       	movw	r24, r28
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	08 95       	ret

00000920 <oled_alt_init>:
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
     920:	e0 e0       	ldi	r30, 0x00	; 0
     922:	f0 e1       	ldi	r31, 0x10	; 16
     924:	8e ea       	ldi	r24, 0xAE	; 174
     926:	80 83       	st	Z, r24
     928:	81 ea       	ldi	r24, 0xA1	; 161
     92a:	80 83       	st	Z, r24
     92c:	8a ed       	ldi	r24, 0xDA	; 218
     92e:	80 83       	st	Z, r24
     930:	82 e1       	ldi	r24, 0x12	; 18
     932:	80 83       	st	Z, r24
     934:	88 ec       	ldi	r24, 0xC8	; 200
     936:	80 83       	st	Z, r24
     938:	88 ea       	ldi	r24, 0xA8	; 168
     93a:	80 83       	st	Z, r24
     93c:	8f e3       	ldi	r24, 0x3F	; 63
     93e:	80 83       	st	Z, r24
     940:	85 ed       	ldi	r24, 0xD5	; 213
     942:	80 83       	st	Z, r24
     944:	80 e8       	ldi	r24, 0x80	; 128
     946:	80 83       	st	Z, r24
     948:	81 e8       	ldi	r24, 0x81	; 129
     94a:	80 83       	st	Z, r24
     94c:	80 e5       	ldi	r24, 0x50	; 80
     94e:	80 83       	st	Z, r24
     950:	89 ed       	ldi	r24, 0xD9	; 217
     952:	80 83       	st	Z, r24
     954:	81 e2       	ldi	r24, 0x21	; 33
     956:	80 83       	st	Z, r24
     958:	90 e2       	ldi	r25, 0x20	; 32
     95a:	90 83       	st	Z, r25
     95c:	10 82       	st	Z, r1
     95e:	9b ed       	ldi	r25, 0xDB	; 219
     960:	90 83       	st	Z, r25
     962:	90 e3       	ldi	r25, 0x30	; 48
     964:	90 83       	st	Z, r25
     966:	9d ea       	ldi	r25, 0xAD	; 173
     968:	90 83       	st	Z, r25
     96a:	10 82       	st	Z, r1
     96c:	94 ea       	ldi	r25, 0xA4	; 164
     96e:	90 83       	st	Z, r25
     970:	96 ea       	ldi	r25, 0xA6	; 166
     972:	90 83       	st	Z, r25
     974:	9f ea       	ldi	r25, 0xAF	; 175
     976:	90 83       	st	Z, r25
     978:	80 83       	st	Z, r24
     97a:	10 82       	st	Z, r1
     97c:	8f e7       	ldi	r24, 0x7F	; 127
     97e:	80 83       	st	Z, r24
     980:	92 e2       	ldi	r25, 0x22	; 34
     982:	90 83       	st	Z, r25
     984:	10 82       	st	Z, r1
     986:	80 83       	st	Z, r24
     988:	08 95       	ret

0000098a <oled_store>:
	
	//oled_clear_screen();
	//oled_home();
}

void oled_store(char* string, int* position){
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
	//calculate position offset
	int start_position = position[0]*128 + position[1];
     992:	fb 01       	movw	r30, r22
     994:	40 81       	ld	r20, Z
     996:	51 81       	ldd	r21, Z+1	; 0x01
     998:	56 95       	lsr	r21
     99a:	54 2f       	mov	r21, r20
     99c:	44 27       	eor	r20, r20
     99e:	57 95       	ror	r21
     9a0:	47 95       	ror	r20
     9a2:	22 81       	ldd	r18, Z+2	; 0x02
     9a4:	33 81       	ldd	r19, Z+3	; 0x03
     9a6:	42 0f       	add	r20, r18
     9a8:	53 1f       	adc	r21, r19
	for(int i = 0; string[i] != '\0'; ++i){
     9aa:	fc 01       	movw	r30, r24
     9ac:	20 81       	ld	r18, Z
     9ae:	22 23       	and	r18, r18
     9b0:	59 f1       	breq	.+86     	; 0xa08 <oled_store+0x7e>
     9b2:	bc 01       	movw	r22, r24
     9b4:	6f 5f       	subi	r22, 0xFF	; 255
     9b6:	7f 4f       	sbci	r23, 0xFF	; 255
     9b8:	ec 01       	movw	r28, r24
	
	//oled_clear_screen();
	//oled_home();
}

void oled_store(char* string, int* position){
     9ba:	00 e0       	ldi	r16, 0x00	; 0
     9bc:	10 e0       	ldi	r17, 0x00	; 0
     9be:	1f c0       	rjmp	.+62     	; 0x9fe <oled_store+0x74>
     9c0:	dc 01       	movw	r26, r24
     9c2:	a2 0f       	add	r26, r18
     9c4:	b3 1f       	adc	r27, r19
	int start_position = position[0]*128 + position[1];
	for(int i = 0; string[i] != '\0'; ++i){
		//j goes through each col	n of the char in font
		for(int j = 0; j < FONT_SIZE; ++j){
			//font[char index in font][column of char]
			*(SRAM_ADRESS + start_position + i * FONT_SIZE + j) = pgm_read_byte(&font[(int)string[i] - 32][j]);
     9c6:	e8 81       	ld	r30, Y
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	b0 97       	sbiw	r30, 0x20	; 32
     9cc:	ee 0f       	add	r30, r30
     9ce:	ff 1f       	adc	r31, r31
     9d0:	ee 0f       	add	r30, r30
     9d2:	ff 1f       	adc	r31, r31
     9d4:	ee 0f       	add	r30, r30
     9d6:	ff 1f       	adc	r31, r31
     9d8:	e2 0f       	add	r30, r18
     9da:	f3 1f       	adc	r31, r19
     9dc:	e0 59       	subi	r30, 0x90	; 144
     9de:	ff 4f       	sbci	r31, 0xFF	; 255
     9e0:	e4 91       	lpm	r30, Z
     9e2:	ec 93       	st	X, r30
void oled_store(char* string, int* position){
	//calculate position offset
	int start_position = position[0]*128 + position[1];
	for(int i = 0; string[i] != '\0'; ++i){
		//j goes through each col	n of the char in font
		for(int j = 0; j < FONT_SIZE; ++j){
     9e4:	2f 5f       	subi	r18, 0xFF	; 255
     9e6:	3f 4f       	sbci	r19, 0xFF	; 255
     9e8:	28 30       	cpi	r18, 0x08	; 8
     9ea:	31 05       	cpc	r19, r1
     9ec:	49 f7       	brne	.-46     	; 0x9c0 <oled_store+0x36>
}

void oled_store(char* string, int* position){
	//calculate position offset
	int start_position = position[0]*128 + position[1];
	for(int i = 0; string[i] != '\0'; ++i){
     9ee:	eb 01       	movw	r28, r22
     9f0:	6f 5f       	subi	r22, 0xFF	; 255
     9f2:	7f 4f       	sbci	r23, 0xFF	; 255
     9f4:	48 5f       	subi	r20, 0xF8	; 248
     9f6:	5f 4f       	sbci	r21, 0xFF	; 255
     9f8:	88 81       	ld	r24, Y
     9fa:	88 23       	and	r24, r24
     9fc:	29 f0       	breq	.+10     	; 0xa08 <oled_store+0x7e>
	
	//oled_clear_screen();
	//oled_home();
}

void oled_store(char* string, int* position){
     9fe:	20 2f       	mov	r18, r16
     a00:	31 2f       	mov	r19, r17
     a02:	ca 01       	movw	r24, r20
     a04:	98 5e       	subi	r25, 0xE8	; 232
     a06:	dc cf       	rjmp	.-72     	; 0x9c0 <oled_store+0x36>
		for(int j = 0; j < FONT_SIZE; ++j){
			//font[char index in font][column of char]
			*(SRAM_ADRESS + start_position + i * FONT_SIZE + j) = pgm_read_byte(&font[(int)string[i] - 32][j]);
		}
	}
}
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	08 95       	ret

00000a12 <oled_store_string>:



void oled_store_string(char* string, int col, int line){
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	00 d0       	rcall	.+0      	; 0xa18 <oled_store_string+0x6>
     a18:	00 d0       	rcall	.+0      	; 0xa1a <oled_store_string+0x8>
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
//	oled_store_string((char[5]){}, (int[2]){line, col})
	
	//int length = strlen(string) + 1;
	
	oled_store(string, (int[2]){line, col});
     a1e:	5a 83       	std	Y+2, r21	; 0x02
     a20:	49 83       	std	Y+1, r20	; 0x01
     a22:	7c 83       	std	Y+4, r23	; 0x04
     a24:	6b 83       	std	Y+3, r22	; 0x03
     a26:	be 01       	movw	r22, r28
     a28:	6f 5f       	subi	r22, 0xFF	; 255
     a2a:	7f 4f       	sbci	r23, 0xFF	; 255
     a2c:	0e 94 c5 04 	call	0x98a	; 0x98a <oled_store>
	
}
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <oled_write_screen>:





void oled_write_screen(){
     a3e:	e0 e0       	ldi	r30, 0x00	; 0
     a40:	f8 e1       	ldi	r31, 0x18	; 24
	for(int i = 0; i < 1024; ++i){
		*OLED_DATA_ADRESS = *(SRAM_ADRESS + i);
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b2 e1       	ldi	r27, 0x12	; 18
     a46:	81 91       	ld	r24, Z+
     a48:	8c 93       	st	X, r24




void oled_write_screen(){
	for(int i = 0; i < 1024; ++i){
     a4a:	e1 15       	cp	r30, r1
     a4c:	8c e1       	ldi	r24, 0x1C	; 28
     a4e:	f8 07       	cpc	r31, r24
     a50:	d1 f7       	brne	.-12     	; 0xa46 <oled_write_screen+0x8>
		*OLED_DATA_ADRESS = *(SRAM_ADRESS + i);
	}
}
     a52:	08 95       	ret

00000a54 <oled_alt_clear_line>:


void oled_alt_clear_line(int line){
     a54:	cf 92       	push	r12
     a56:	df 92       	push	r13
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	00 d0       	rcall	.+0      	; 0xa66 <oled_alt_clear_line+0x12>
     a66:	00 d0       	rcall	.+0      	; 0xa68 <oled_alt_clear_line+0x14>
     a68:	00 d0       	rcall	.+0      	; 0xa6a <oled_alt_clear_line+0x16>
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
     a6e:	6c 01       	movw	r12, r24
	
	for(int col = 0; col < NR_COL; col += 8){
     a70:	00 e0       	ldi	r16, 0x00	; 0
     a72:	10 e0       	ldi	r17, 0x00	; 0
		oled_store((char[2]){" "}, (int[2]){line, col});
     a74:	68 94       	set
     a76:	ee 24       	eor	r14, r14
     a78:	e5 f8       	bld	r14, 5
     a7a:	f1 2c       	mov	r15, r1
     a7c:	dc 82       	std	Y+4, r13	; 0x04
     a7e:	cb 82       	std	Y+3, r12	; 0x03
     a80:	1e 83       	std	Y+6, r17	; 0x06
     a82:	0d 83       	std	Y+5, r16	; 0x05
     a84:	fa 82       	std	Y+2, r15	; 0x02
     a86:	e9 82       	std	Y+1, r14	; 0x01
     a88:	be 01       	movw	r22, r28
     a8a:	6d 5f       	subi	r22, 0xFD	; 253
     a8c:	7f 4f       	sbci	r23, 0xFF	; 255
     a8e:	ce 01       	movw	r24, r28
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	0e 94 c5 04 	call	0x98a	; 0x98a <oled_store>
}


void oled_alt_clear_line(int line){
	
	for(int col = 0; col < NR_COL; col += 8){
     a96:	08 5f       	subi	r16, 0xF8	; 248
     a98:	1f 4f       	sbci	r17, 0xFF	; 255
     a9a:	00 38       	cpi	r16, 0x80	; 128
     a9c:	11 05       	cpc	r17, r1
     a9e:	71 f7       	brne	.-36     	; 0xa7c <oled_alt_clear_line+0x28>
		oled_store((char[2]){" "}, (int[2]){line, col});
	}
	
}
     aa0:	26 96       	adiw	r28, 0x06	; 6
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	ff 90       	pop	r15
     ab6:	ef 90       	pop	r14
     ab8:	df 90       	pop	r13
     aba:	cf 90       	pop	r12
     abc:	08 95       	ret

00000abe <oled_alt_clear_screen>:
	
}



void oled_alt_clear_screen(){
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
	for(int line = 0; line < NR_LINES; ++line){
     ac2:	c0 e0       	ldi	r28, 0x00	; 0
     ac4:	d0 e0       	ldi	r29, 0x00	; 0
		oled_alt_clear_line(line);
     ac6:	ce 01       	movw	r24, r28
     ac8:	0e 94 2a 05 	call	0xa54	; 0xa54 <oled_alt_clear_line>
}



void oled_alt_clear_screen(){
	for(int line = 0; line < NR_LINES; ++line){
     acc:	21 96       	adiw	r28, 0x01	; 1
     ace:	c8 30       	cpi	r28, 0x08	; 8
     ad0:	d1 05       	cpc	r29, r1
     ad2:	c9 f7       	brne	.-14     	; 0xac6 <oled_alt_clear_screen+0x8>
		oled_alt_clear_line(line);
	}
}
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	08 95       	ret

00000ada <oled_alt_toggle_negative>:



int screen_negative = 0;
void oled_alt_toggle_negative(){
	if(screen_negative){
     ada:	80 91 16 02 	lds	r24, 0x0216
     ade:	90 91 17 02 	lds	r25, 0x0217
     ae2:	89 2b       	or	r24, r25
     ae4:	41 f0       	breq	.+16     	; 0xaf6 <oled_alt_toggle_negative+0x1c>
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
     ae6:	86 ea       	ldi	r24, 0xA6	; 166
     ae8:	80 93 00 10 	sts	0x1000, r24

int screen_negative = 0;
void oled_alt_toggle_negative(){
	if(screen_negative){
		oled_alt_mode_normal();
		screen_negative = 0;
     aec:	10 92 17 02 	sts	0x0217, r1
     af0:	10 92 16 02 	sts	0x0216, r1
     af4:	08 95       	ret
#define NR_COL 128 //1-indexed



static inline void oled_command_write(char command){
	*OLED_COMMAND_ADRESS = command;
     af6:	87 ea       	ldi	r24, 0xA7	; 167
     af8:	80 93 00 10 	sts	0x1000, r24
		oled_alt_mode_normal();
		screen_negative = 0;
	}
	else{
		oled_alt_mode_negative();
		screen_negative = 1;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	90 93 17 02 	sts	0x0217, r25
     b04:	80 93 16 02 	sts	0x0216, r24
     b08:	08 95       	ret

00000b0a <oled_alt_change_contrast>:
	}
}

void oled_alt_change_contrast(){
     b0a:	08 95       	ret

00000b0c <spi_init>:
#include "SPI.h"
#include <avr/io.h>

void spi_init(){
			//SI out		SS out		SCK out
	DDRB |= ( 1 << PB5) | (1 << PB4) | (1 << PB7);
     b0c:	87 b3       	in	r24, 0x17	; 23
     b0e:	80 6b       	ori	r24, 0xB0	; 176
     b10:	87 bb       	out	0x17, r24	; 23
			//SO in
	DDRB &= ~(1 << PB6);
     b12:	be 98       	cbi	0x17, 6	; 23
	
	//								 frequency / 16
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     b14:	81 e5       	ldi	r24, 0x51	; 81
     b16:	8d b9       	out	0x0d, r24	; 13
     b18:	08 95       	ret

00000b1a <spi_write>:

//both read and write
int spi_write(char data){
	//SPDR = data;
	//while(!(SPSR & (1<<SPIF)));
	SPDR = data;
     b1a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     b1c:	77 9b       	sbis	0x0e, 7	; 14
     b1e:	fe cf       	rjmp	.-4      	; 0xb1c <spi_write+0x2>
	return SPDR;
     b20:	8f b1       	in	r24, 0x0f	; 15
}
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	08 95       	ret

00000b26 <SRAM_test>:
#include <avr/io.h>


void SRAM_test(void)
{
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;

	printf("Starting SRAM test...\n");
     b32:	86 ea       	ldi	r24, 0xA6	; 166
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	0e 94 d7 07 	call	0xfae	; 0xfae <puts>

	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     b3a:	0e 94 68 07 	call	0xed0	; 0xed0 <rand>
     b3e:	7c 01       	movw	r14, r24

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     b40:	0e 94 6d 07 	call	0xeda	; 0xeda <srand>
     b44:	c0 e0       	ldi	r28, 0x00	; 0
     b46:	d8 e1       	ldi	r29, 0x18	; 24

void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
     b48:	00 e0       	ldi	r16, 0x00	; 0
     b4a:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     b4c:	0e 94 68 07 	call	0xed0	; 0xed0 <rand>
		ext_ram[i] = some_value;
     b50:	88 83       	st	Y, r24
		uint8_t retreived_value = ext_ram[i];
     b52:	98 81       	ld	r25, Y
		if (retreived_value != some_value) {
     b54:	98 17       	cp	r25, r24
     b56:	11 f0       	breq	.+4      	; 0xb5c <SRAM_test+0x36>
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
     b58:	0f 5f       	subi	r16, 0xFF	; 255
     b5a:	1f 4f       	sbci	r17, 0xFF	; 255
     b5c:	21 96       	adiw	r28, 0x01	; 1
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     b5e:	c1 15       	cp	r28, r1
     b60:	80 e2       	ldi	r24, 0x20	; 32
     b62:	d8 07       	cpc	r29, r24
     b64:	99 f7       	brne	.-26     	; 0xb4c <SRAM_test+0x26>
			write_errors++;
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
     b66:	c7 01       	movw	r24, r14
     b68:	0e 94 6d 07 	call	0xeda	; 0xeda <srand>
     b6c:	c0 e0       	ldi	r28, 0x00	; 0
     b6e:	d8 e1       	ldi	r29, 0x18	; 24
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;
     b70:	e1 2c       	mov	r14, r1
     b72:	f1 2c       	mov	r15, r1
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     b74:	0e 94 68 07 	call	0xed0	; 0xed0 <rand>
		uint8_t retreived_value = ext_ram[i];
     b78:	98 81       	ld	r25, Y
		if (retreived_value != some_value) {
     b7a:	98 17       	cp	r25, r24
     b7c:	19 f0       	breq	.+6      	; 0xb84 <SRAM_test+0x5e>
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 1a       	sub	r14, r24
     b82:	f8 0a       	sbc	r15, r24
     b84:	21 96       	adiw	r28, 0x01	; 1
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     b86:	c1 15       	cp	r28, r1
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	d8 07       	cpc	r29, r24
     b8c:	99 f7       	brne	.-26     	; 0xb74 <SRAM_test+0x4e>
		if (retreived_value != some_value) {
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     b8e:	ff 92       	push	r15
     b90:	ef 92       	push	r14
     b92:	1f 93       	push	r17
     b94:	0f 93       	push	r16
     b96:	8c eb       	ldi	r24, 0xBC	; 188
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	9f 93       	push	r25
     b9c:	8f 93       	push	r24
     b9e:	0e 94 c3 07 	call	0xf86	; 0xf86 <printf>
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
}
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	ff 90       	pop	r15
     bb8:	ef 90       	pop	r14
     bba:	08 95       	ret

00000bbc <uart_Transmit>:
}

void uart_Transmit( unsigned char data ){
	
	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     bbc:	5d 9b       	sbis	0x0b, 5	; 11
     bbe:	fe cf       	rjmp	.-4      	; 0xbbc <uart_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;
     bc0:	8c b9       	out	0x0c, r24	; 12
     bc2:	08 95       	ret

00000bc4 <uart_Receive>:

unsigned char uart_Receive(void){
	
	//Wait for data to be received
	
	while( !(UCSR0A & (1<<RXC0)) );
     bc4:	5f 9b       	sbis	0x0b, 7	; 11
     bc6:	fe cf       	rjmp	.-4      	; 0xbc4 <uart_Receive>
	
	//Get and return received data from buffer
	
	return UDR0;
     bc8:	8c b1       	in	r24, 0x0c	; 12
}
     bca:	08 95       	ret

00000bcc <uart_Init>:
#include "uart.h"

void uart_Init(unsigned int ubrr){
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     bcc:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     bce:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN1)|(1<<TXEN1);
     bd0:	88 e1       	ldi	r24, 0x18	; 24
     bd2:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8data, 1stop bit
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
     bd4:	86 e8       	ldi	r24, 0x86	; 134
     bd6:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uart_Transmit, uart_Receive);
     bd8:	62 ee       	ldi	r22, 0xE2	; 226
     bda:	75 e0       	ldi	r23, 0x05	; 5
     bdc:	8e ed       	ldi	r24, 0xDE	; 222
     bde:	95 e0       	ldi	r25, 0x05	; 5
     be0:	0e 94 78 07 	call	0xef0	; 0xef0 <fdevopen>
     be4:	08 95       	ret

00000be6 <malloc>:
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	82 30       	cpi	r24, 0x02	; 2
     bec:	91 05       	cpc	r25, r1
     bee:	10 f4       	brcc	.+4      	; 0xbf4 <malloc+0xe>
     bf0:	82 e0       	ldi	r24, 0x02	; 2
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	e0 91 20 02 	lds	r30, 0x0220
     bf8:	f0 91 21 02 	lds	r31, 0x0221
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	a0 e0       	ldi	r26, 0x00	; 0
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	30 97       	sbiw	r30, 0x00	; 0
     c06:	39 f1       	breq	.+78     	; 0xc56 <malloc+0x70>
     c08:	40 81       	ld	r20, Z
     c0a:	51 81       	ldd	r21, Z+1	; 0x01
     c0c:	48 17       	cp	r20, r24
     c0e:	59 07       	cpc	r21, r25
     c10:	b8 f0       	brcs	.+46     	; 0xc40 <malloc+0x5a>
     c12:	48 17       	cp	r20, r24
     c14:	59 07       	cpc	r21, r25
     c16:	71 f4       	brne	.+28     	; 0xc34 <malloc+0x4e>
     c18:	82 81       	ldd	r24, Z+2	; 0x02
     c1a:	93 81       	ldd	r25, Z+3	; 0x03
     c1c:	10 97       	sbiw	r26, 0x00	; 0
     c1e:	29 f0       	breq	.+10     	; 0xc2a <malloc+0x44>
     c20:	13 96       	adiw	r26, 0x03	; 3
     c22:	9c 93       	st	X, r25
     c24:	8e 93       	st	-X, r24
     c26:	12 97       	sbiw	r26, 0x02	; 2
     c28:	2c c0       	rjmp	.+88     	; 0xc82 <malloc+0x9c>
     c2a:	90 93 21 02 	sts	0x0221, r25
     c2e:	80 93 20 02 	sts	0x0220, r24
     c32:	27 c0       	rjmp	.+78     	; 0xc82 <malloc+0x9c>
     c34:	21 15       	cp	r18, r1
     c36:	31 05       	cpc	r19, r1
     c38:	31 f0       	breq	.+12     	; 0xc46 <malloc+0x60>
     c3a:	42 17       	cp	r20, r18
     c3c:	53 07       	cpc	r21, r19
     c3e:	18 f0       	brcs	.+6      	; 0xc46 <malloc+0x60>
     c40:	a9 01       	movw	r20, r18
     c42:	db 01       	movw	r26, r22
     c44:	01 c0       	rjmp	.+2      	; 0xc48 <malloc+0x62>
     c46:	ef 01       	movw	r28, r30
     c48:	9a 01       	movw	r18, r20
     c4a:	bd 01       	movw	r22, r26
     c4c:	df 01       	movw	r26, r30
     c4e:	02 80       	ldd	r0, Z+2	; 0x02
     c50:	f3 81       	ldd	r31, Z+3	; 0x03
     c52:	e0 2d       	mov	r30, r0
     c54:	d7 cf       	rjmp	.-82     	; 0xc04 <malloc+0x1e>
     c56:	21 15       	cp	r18, r1
     c58:	31 05       	cpc	r19, r1
     c5a:	f9 f0       	breq	.+62     	; 0xc9a <malloc+0xb4>
     c5c:	28 1b       	sub	r18, r24
     c5e:	39 0b       	sbc	r19, r25
     c60:	24 30       	cpi	r18, 0x04	; 4
     c62:	31 05       	cpc	r19, r1
     c64:	80 f4       	brcc	.+32     	; 0xc86 <malloc+0xa0>
     c66:	8a 81       	ldd	r24, Y+2	; 0x02
     c68:	9b 81       	ldd	r25, Y+3	; 0x03
     c6a:	61 15       	cp	r22, r1
     c6c:	71 05       	cpc	r23, r1
     c6e:	21 f0       	breq	.+8      	; 0xc78 <malloc+0x92>
     c70:	fb 01       	movw	r30, r22
     c72:	93 83       	std	Z+3, r25	; 0x03
     c74:	82 83       	std	Z+2, r24	; 0x02
     c76:	04 c0       	rjmp	.+8      	; 0xc80 <malloc+0x9a>
     c78:	90 93 21 02 	sts	0x0221, r25
     c7c:	80 93 20 02 	sts	0x0220, r24
     c80:	fe 01       	movw	r30, r28
     c82:	32 96       	adiw	r30, 0x02	; 2
     c84:	44 c0       	rjmp	.+136    	; 0xd0e <malloc+0x128>
     c86:	fe 01       	movw	r30, r28
     c88:	e2 0f       	add	r30, r18
     c8a:	f3 1f       	adc	r31, r19
     c8c:	81 93       	st	Z+, r24
     c8e:	91 93       	st	Z+, r25
     c90:	22 50       	subi	r18, 0x02	; 2
     c92:	31 09       	sbc	r19, r1
     c94:	39 83       	std	Y+1, r19	; 0x01
     c96:	28 83       	st	Y, r18
     c98:	3a c0       	rjmp	.+116    	; 0xd0e <malloc+0x128>
     c9a:	20 91 1e 02 	lds	r18, 0x021E
     c9e:	30 91 1f 02 	lds	r19, 0x021F
     ca2:	23 2b       	or	r18, r19
     ca4:	41 f4       	brne	.+16     	; 0xcb6 <malloc+0xd0>
     ca6:	20 91 02 01 	lds	r18, 0x0102
     caa:	30 91 03 01 	lds	r19, 0x0103
     cae:	30 93 1f 02 	sts	0x021F, r19
     cb2:	20 93 1e 02 	sts	0x021E, r18
     cb6:	20 91 00 01 	lds	r18, 0x0100
     cba:	30 91 01 01 	lds	r19, 0x0101
     cbe:	21 15       	cp	r18, r1
     cc0:	31 05       	cpc	r19, r1
     cc2:	41 f4       	brne	.+16     	; 0xcd4 <malloc+0xee>
     cc4:	2d b7       	in	r18, 0x3d	; 61
     cc6:	3e b7       	in	r19, 0x3e	; 62
     cc8:	40 91 04 01 	lds	r20, 0x0104
     ccc:	50 91 05 01 	lds	r21, 0x0105
     cd0:	24 1b       	sub	r18, r20
     cd2:	35 0b       	sbc	r19, r21
     cd4:	e0 91 1e 02 	lds	r30, 0x021E
     cd8:	f0 91 1f 02 	lds	r31, 0x021F
     cdc:	e2 17       	cp	r30, r18
     cde:	f3 07       	cpc	r31, r19
     ce0:	a0 f4       	brcc	.+40     	; 0xd0a <malloc+0x124>
     ce2:	2e 1b       	sub	r18, r30
     ce4:	3f 0b       	sbc	r19, r31
     ce6:	28 17       	cp	r18, r24
     ce8:	39 07       	cpc	r19, r25
     cea:	78 f0       	brcs	.+30     	; 0xd0a <malloc+0x124>
     cec:	ac 01       	movw	r20, r24
     cee:	4e 5f       	subi	r20, 0xFE	; 254
     cf0:	5f 4f       	sbci	r21, 0xFF	; 255
     cf2:	24 17       	cp	r18, r20
     cf4:	35 07       	cpc	r19, r21
     cf6:	48 f0       	brcs	.+18     	; 0xd0a <malloc+0x124>
     cf8:	4e 0f       	add	r20, r30
     cfa:	5f 1f       	adc	r21, r31
     cfc:	50 93 1f 02 	sts	0x021F, r21
     d00:	40 93 1e 02 	sts	0x021E, r20
     d04:	81 93       	st	Z+, r24
     d06:	91 93       	st	Z+, r25
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <malloc+0x128>
     d0a:	e0 e0       	ldi	r30, 0x00	; 0
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	cf 01       	movw	r24, r30
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	08 95       	ret

00000d16 <free>:
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	09 f4       	brne	.+2      	; 0xd20 <free+0xa>
     d1e:	87 c0       	rjmp	.+270    	; 0xe2e <free+0x118>
     d20:	fc 01       	movw	r30, r24
     d22:	32 97       	sbiw	r30, 0x02	; 2
     d24:	13 82       	std	Z+3, r1	; 0x03
     d26:	12 82       	std	Z+2, r1	; 0x02
     d28:	c0 91 20 02 	lds	r28, 0x0220
     d2c:	d0 91 21 02 	lds	r29, 0x0221
     d30:	20 97       	sbiw	r28, 0x00	; 0
     d32:	81 f4       	brne	.+32     	; 0xd54 <free+0x3e>
     d34:	20 81       	ld	r18, Z
     d36:	31 81       	ldd	r19, Z+1	; 0x01
     d38:	28 0f       	add	r18, r24
     d3a:	39 1f       	adc	r19, r25
     d3c:	80 91 1e 02 	lds	r24, 0x021E
     d40:	90 91 1f 02 	lds	r25, 0x021F
     d44:	82 17       	cp	r24, r18
     d46:	93 07       	cpc	r25, r19
     d48:	79 f5       	brne	.+94     	; 0xda8 <free+0x92>
     d4a:	f0 93 1f 02 	sts	0x021F, r31
     d4e:	e0 93 1e 02 	sts	0x021E, r30
     d52:	6d c0       	rjmp	.+218    	; 0xe2e <free+0x118>
     d54:	de 01       	movw	r26, r28
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	ae 17       	cp	r26, r30
     d5c:	bf 07       	cpc	r27, r31
     d5e:	50 f4       	brcc	.+20     	; 0xd74 <free+0x5e>
     d60:	12 96       	adiw	r26, 0x02	; 2
     d62:	4d 91       	ld	r20, X+
     d64:	5c 91       	ld	r21, X
     d66:	13 97       	sbiw	r26, 0x03	; 3
     d68:	9d 01       	movw	r18, r26
     d6a:	41 15       	cp	r20, r1
     d6c:	51 05       	cpc	r21, r1
     d6e:	09 f1       	breq	.+66     	; 0xdb2 <free+0x9c>
     d70:	da 01       	movw	r26, r20
     d72:	f3 cf       	rjmp	.-26     	; 0xd5a <free+0x44>
     d74:	b3 83       	std	Z+3, r27	; 0x03
     d76:	a2 83       	std	Z+2, r26	; 0x02
     d78:	40 81       	ld	r20, Z
     d7a:	51 81       	ldd	r21, Z+1	; 0x01
     d7c:	84 0f       	add	r24, r20
     d7e:	95 1f       	adc	r25, r21
     d80:	8a 17       	cp	r24, r26
     d82:	9b 07       	cpc	r25, r27
     d84:	71 f4       	brne	.+28     	; 0xda2 <free+0x8c>
     d86:	8d 91       	ld	r24, X+
     d88:	9c 91       	ld	r25, X
     d8a:	11 97       	sbiw	r26, 0x01	; 1
     d8c:	84 0f       	add	r24, r20
     d8e:	95 1f       	adc	r25, r21
     d90:	02 96       	adiw	r24, 0x02	; 2
     d92:	91 83       	std	Z+1, r25	; 0x01
     d94:	80 83       	st	Z, r24
     d96:	12 96       	adiw	r26, 0x02	; 2
     d98:	8d 91       	ld	r24, X+
     d9a:	9c 91       	ld	r25, X
     d9c:	13 97       	sbiw	r26, 0x03	; 3
     d9e:	93 83       	std	Z+3, r25	; 0x03
     da0:	82 83       	std	Z+2, r24	; 0x02
     da2:	21 15       	cp	r18, r1
     da4:	31 05       	cpc	r19, r1
     da6:	29 f4       	brne	.+10     	; 0xdb2 <free+0x9c>
     da8:	f0 93 21 02 	sts	0x0221, r31
     dac:	e0 93 20 02 	sts	0x0220, r30
     db0:	3e c0       	rjmp	.+124    	; 0xe2e <free+0x118>
     db2:	d9 01       	movw	r26, r18
     db4:	13 96       	adiw	r26, 0x03	; 3
     db6:	fc 93       	st	X, r31
     db8:	ee 93       	st	-X, r30
     dba:	12 97       	sbiw	r26, 0x02	; 2
     dbc:	4d 91       	ld	r20, X+
     dbe:	5d 91       	ld	r21, X+
     dc0:	a4 0f       	add	r26, r20
     dc2:	b5 1f       	adc	r27, r21
     dc4:	ea 17       	cp	r30, r26
     dc6:	fb 07       	cpc	r31, r27
     dc8:	79 f4       	brne	.+30     	; 0xde8 <free+0xd2>
     dca:	80 81       	ld	r24, Z
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	84 0f       	add	r24, r20
     dd0:	95 1f       	adc	r25, r21
     dd2:	02 96       	adiw	r24, 0x02	; 2
     dd4:	d9 01       	movw	r26, r18
     dd6:	11 96       	adiw	r26, 0x01	; 1
     dd8:	9c 93       	st	X, r25
     dda:	8e 93       	st	-X, r24
     ddc:	82 81       	ldd	r24, Z+2	; 0x02
     dde:	93 81       	ldd	r25, Z+3	; 0x03
     de0:	13 96       	adiw	r26, 0x03	; 3
     de2:	9c 93       	st	X, r25
     de4:	8e 93       	st	-X, r24
     de6:	12 97       	sbiw	r26, 0x02	; 2
     de8:	e0 e0       	ldi	r30, 0x00	; 0
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	9b 81       	ldd	r25, Y+3	; 0x03
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	19 f0       	breq	.+6      	; 0xdfa <free+0xe4>
     df4:	fe 01       	movw	r30, r28
     df6:	ec 01       	movw	r28, r24
     df8:	f9 cf       	rjmp	.-14     	; 0xdec <free+0xd6>
     dfa:	ce 01       	movw	r24, r28
     dfc:	02 96       	adiw	r24, 0x02	; 2
     dfe:	28 81       	ld	r18, Y
     e00:	39 81       	ldd	r19, Y+1	; 0x01
     e02:	82 0f       	add	r24, r18
     e04:	93 1f       	adc	r25, r19
     e06:	20 91 1e 02 	lds	r18, 0x021E
     e0a:	30 91 1f 02 	lds	r19, 0x021F
     e0e:	28 17       	cp	r18, r24
     e10:	39 07       	cpc	r19, r25
     e12:	69 f4       	brne	.+26     	; 0xe2e <free+0x118>
     e14:	30 97       	sbiw	r30, 0x00	; 0
     e16:	29 f4       	brne	.+10     	; 0xe22 <free+0x10c>
     e18:	10 92 21 02 	sts	0x0221, r1
     e1c:	10 92 20 02 	sts	0x0220, r1
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <free+0x110>
     e22:	13 82       	std	Z+3, r1	; 0x03
     e24:	12 82       	std	Z+2, r1	; 0x02
     e26:	d0 93 1f 02 	sts	0x021F, r29
     e2a:	c0 93 1e 02 	sts	0x021E, r28
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	08 95       	ret

00000e34 <do_rand>:
     e34:	8f 92       	push	r8
     e36:	9f 92       	push	r9
     e38:	af 92       	push	r10
     e3a:	bf 92       	push	r11
     e3c:	cf 92       	push	r12
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	ec 01       	movw	r28, r24
     e4a:	68 81       	ld	r22, Y
     e4c:	79 81       	ldd	r23, Y+1	; 0x01
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	9b 81       	ldd	r25, Y+3	; 0x03
     e52:	61 15       	cp	r22, r1
     e54:	71 05       	cpc	r23, r1
     e56:	81 05       	cpc	r24, r1
     e58:	91 05       	cpc	r25, r1
     e5a:	21 f4       	brne	.+8      	; 0xe64 <do_rand+0x30>
     e5c:	64 e2       	ldi	r22, 0x24	; 36
     e5e:	79 ed       	ldi	r23, 0xD9	; 217
     e60:	8b e5       	ldi	r24, 0x5B	; 91
     e62:	97 e0       	ldi	r25, 0x07	; 7
     e64:	2d e1       	ldi	r18, 0x1D	; 29
     e66:	33 ef       	ldi	r19, 0xF3	; 243
     e68:	41 e0       	ldi	r20, 0x01	; 1
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	0e 94 9f 0a 	call	0x153e	; 0x153e <__divmodsi4>
     e70:	49 01       	movw	r8, r18
     e72:	5a 01       	movw	r10, r20
     e74:	9b 01       	movw	r18, r22
     e76:	ac 01       	movw	r20, r24
     e78:	a7 ea       	ldi	r26, 0xA7	; 167
     e7a:	b1 e4       	ldi	r27, 0x41	; 65
     e7c:	0e 94 be 0a 	call	0x157c	; 0x157c <__muluhisi3>
     e80:	6b 01       	movw	r12, r22
     e82:	7c 01       	movw	r14, r24
     e84:	ac ee       	ldi	r26, 0xEC	; 236
     e86:	b4 ef       	ldi	r27, 0xF4	; 244
     e88:	a5 01       	movw	r20, r10
     e8a:	94 01       	movw	r18, r8
     e8c:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__mulohisi3>
     e90:	c6 0e       	add	r12, r22
     e92:	d7 1e       	adc	r13, r23
     e94:	e8 1e       	adc	r14, r24
     e96:	f9 1e       	adc	r15, r25
     e98:	f7 fe       	sbrs	r15, 7
     e9a:	06 c0       	rjmp	.+12     	; 0xea8 <do_rand+0x74>
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	c8 1a       	sub	r12, r24
     ea0:	d1 08       	sbc	r13, r1
     ea2:	e1 08       	sbc	r14, r1
     ea4:	80 e8       	ldi	r24, 0x80	; 128
     ea6:	f8 0a       	sbc	r15, r24
     ea8:	c8 82       	st	Y, r12
     eaa:	d9 82       	std	Y+1, r13	; 0x01
     eac:	ea 82       	std	Y+2, r14	; 0x02
     eae:	fb 82       	std	Y+3, r15	; 0x03
     eb0:	c6 01       	movw	r24, r12
     eb2:	9f 77       	andi	r25, 0x7F	; 127
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	df 90       	pop	r13
     ebe:	cf 90       	pop	r12
     ec0:	bf 90       	pop	r11
     ec2:	af 90       	pop	r10
     ec4:	9f 90       	pop	r9
     ec6:	8f 90       	pop	r8
     ec8:	08 95       	ret

00000eca <rand_r>:
     eca:	0e 94 1a 07 	call	0xe34	; 0xe34 <do_rand>
     ece:	08 95       	ret

00000ed0 <rand>:
     ed0:	86 e0       	ldi	r24, 0x06	; 6
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	0e 94 1a 07 	call	0xe34	; 0xe34 <do_rand>
     ed8:	08 95       	ret

00000eda <srand>:
     eda:	a0 e0       	ldi	r26, 0x00	; 0
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	80 93 06 01 	sts	0x0106, r24
     ee2:	90 93 07 01 	sts	0x0107, r25
     ee6:	a0 93 08 01 	sts	0x0108, r26
     eea:	b0 93 09 01 	sts	0x0109, r27
     eee:	08 95       	ret

00000ef0 <fdevopen>:
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	ec 01       	movw	r28, r24
     efa:	8b 01       	movw	r16, r22
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	31 f4       	brne	.+12     	; 0xf0c <fdevopen+0x1c>
     f00:	61 15       	cp	r22, r1
     f02:	71 05       	cpc	r23, r1
     f04:	19 f4       	brne	.+6      	; 0xf0c <fdevopen+0x1c>
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	38 c0       	rjmp	.+112    	; 0xf7c <fdevopen+0x8c>
     f0c:	6e e0       	ldi	r22, 0x0E	; 14
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 d6 09 	call	0x13ac	; 0x13ac <calloc>
     f18:	fc 01       	movw	r30, r24
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	a1 f3       	breq	.-24     	; 0xf06 <fdevopen+0x16>
     f1e:	80 e8       	ldi	r24, 0x80	; 128
     f20:	83 83       	std	Z+3, r24	; 0x03
     f22:	01 15       	cp	r16, r1
     f24:	11 05       	cpc	r17, r1
     f26:	71 f0       	breq	.+28     	; 0xf44 <fdevopen+0x54>
     f28:	13 87       	std	Z+11, r17	; 0x0b
     f2a:	02 87       	std	Z+10, r16	; 0x0a
     f2c:	81 e8       	ldi	r24, 0x81	; 129
     f2e:	83 83       	std	Z+3, r24	; 0x03
     f30:	80 91 22 02 	lds	r24, 0x0222
     f34:	90 91 23 02 	lds	r25, 0x0223
     f38:	89 2b       	or	r24, r25
     f3a:	21 f4       	brne	.+8      	; 0xf44 <fdevopen+0x54>
     f3c:	f0 93 23 02 	sts	0x0223, r31
     f40:	e0 93 22 02 	sts	0x0222, r30
     f44:	20 97       	sbiw	r28, 0x00	; 0
     f46:	c9 f0       	breq	.+50     	; 0xf7a <fdevopen+0x8a>
     f48:	d1 87       	std	Z+9, r29	; 0x09
     f4a:	c0 87       	std	Z+8, r28	; 0x08
     f4c:	83 81       	ldd	r24, Z+3	; 0x03
     f4e:	82 60       	ori	r24, 0x02	; 2
     f50:	83 83       	std	Z+3, r24	; 0x03
     f52:	80 91 24 02 	lds	r24, 0x0224
     f56:	90 91 25 02 	lds	r25, 0x0225
     f5a:	89 2b       	or	r24, r25
     f5c:	71 f4       	brne	.+28     	; 0xf7a <fdevopen+0x8a>
     f5e:	f0 93 25 02 	sts	0x0225, r31
     f62:	e0 93 24 02 	sts	0x0224, r30
     f66:	80 91 26 02 	lds	r24, 0x0226
     f6a:	90 91 27 02 	lds	r25, 0x0227
     f6e:	89 2b       	or	r24, r25
     f70:	21 f4       	brne	.+8      	; 0xf7a <fdevopen+0x8a>
     f72:	f0 93 27 02 	sts	0x0227, r31
     f76:	e0 93 26 02 	sts	0x0226, r30
     f7a:	cf 01       	movw	r24, r30
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	08 95       	ret

00000f86 <printf>:
     f86:	a0 e0       	ldi	r26, 0x00	; 0
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e9 ec       	ldi	r30, 0xC9	; 201
     f8c:	f7 e0       	ldi	r31, 0x07	; 7
     f8e:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__prologue_saves__+0x20>
     f92:	fe 01       	movw	r30, r28
     f94:	35 96       	adiw	r30, 0x05	; 5
     f96:	61 91       	ld	r22, Z+
     f98:	71 91       	ld	r23, Z+
     f9a:	af 01       	movw	r20, r30
     f9c:	80 91 24 02 	lds	r24, 0x0224
     fa0:	90 91 25 02 	lds	r25, 0x0225
     fa4:	0e 94 04 08 	call	0x1008	; 0x1008 <vfprintf>
     fa8:	e2 e0       	ldi	r30, 0x02	; 2
     faa:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__epilogue_restores__+0x20>

00000fae <puts>:
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	e0 91 24 02 	lds	r30, 0x0224
     fba:	f0 91 25 02 	lds	r31, 0x0225
     fbe:	23 81       	ldd	r18, Z+3	; 0x03
     fc0:	21 ff       	sbrs	r18, 1
     fc2:	1b c0       	rjmp	.+54     	; 0xffa <puts+0x4c>
     fc4:	ec 01       	movw	r28, r24
     fc6:	00 e0       	ldi	r16, 0x00	; 0
     fc8:	10 e0       	ldi	r17, 0x00	; 0
     fca:	89 91       	ld	r24, Y+
     fcc:	60 91 24 02 	lds	r22, 0x0224
     fd0:	70 91 25 02 	lds	r23, 0x0225
     fd4:	db 01       	movw	r26, r22
     fd6:	18 96       	adiw	r26, 0x08	; 8
     fd8:	ed 91       	ld	r30, X+
     fda:	fc 91       	ld	r31, X
     fdc:	19 97       	sbiw	r26, 0x09	; 9
     fde:	88 23       	and	r24, r24
     fe0:	31 f0       	breq	.+12     	; 0xfee <puts+0x40>
     fe2:	09 95       	icall
     fe4:	89 2b       	or	r24, r25
     fe6:	89 f3       	breq	.-30     	; 0xfca <puts+0x1c>
     fe8:	0f ef       	ldi	r16, 0xFF	; 255
     fea:	1f ef       	ldi	r17, 0xFF	; 255
     fec:	ee cf       	rjmp	.-36     	; 0xfca <puts+0x1c>
     fee:	8a e0       	ldi	r24, 0x0A	; 10
     ff0:	09 95       	icall
     ff2:	89 2b       	or	r24, r25
     ff4:	11 f4       	brne	.+4      	; 0xffa <puts+0x4c>
     ff6:	c8 01       	movw	r24, r16
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <puts+0x50>
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	9f ef       	ldi	r25, 0xFF	; 255
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	08 95       	ret

00001008 <vfprintf>:
    1008:	ac e0       	ldi	r26, 0x0C	; 12
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	ea e0       	ldi	r30, 0x0A	; 10
    100e:	f8 e0       	ldi	r31, 0x08	; 8
    1010:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__prologue_saves__>
    1014:	7c 01       	movw	r14, r24
    1016:	6b 01       	movw	r12, r22
    1018:	8a 01       	movw	r16, r20
    101a:	fc 01       	movw	r30, r24
    101c:	17 82       	std	Z+7, r1	; 0x07
    101e:	16 82       	std	Z+6, r1	; 0x06
    1020:	83 81       	ldd	r24, Z+3	; 0x03
    1022:	81 ff       	sbrs	r24, 1
    1024:	bd c1       	rjmp	.+890    	; 0x13a0 <vfprintf+0x398>
    1026:	ce 01       	movw	r24, r28
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	4c 01       	movw	r8, r24
    102c:	f7 01       	movw	r30, r14
    102e:	93 81       	ldd	r25, Z+3	; 0x03
    1030:	f6 01       	movw	r30, r12
    1032:	93 fd       	sbrc	r25, 3
    1034:	85 91       	lpm	r24, Z+
    1036:	93 ff       	sbrs	r25, 3
    1038:	81 91       	ld	r24, Z+
    103a:	6f 01       	movw	r12, r30
    103c:	88 23       	and	r24, r24
    103e:	09 f4       	brne	.+2      	; 0x1042 <vfprintf+0x3a>
    1040:	ab c1       	rjmp	.+854    	; 0x1398 <vfprintf+0x390>
    1042:	85 32       	cpi	r24, 0x25	; 37
    1044:	39 f4       	brne	.+14     	; 0x1054 <vfprintf+0x4c>
    1046:	93 fd       	sbrc	r25, 3
    1048:	85 91       	lpm	r24, Z+
    104a:	93 ff       	sbrs	r25, 3
    104c:	81 91       	ld	r24, Z+
    104e:	6f 01       	movw	r12, r30
    1050:	85 32       	cpi	r24, 0x25	; 37
    1052:	29 f4       	brne	.+10     	; 0x105e <vfprintf+0x56>
    1054:	b7 01       	movw	r22, r14
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 0f 0a 	call	0x141e	; 0x141e <fputc>
    105c:	e7 cf       	rjmp	.-50     	; 0x102c <vfprintf+0x24>
    105e:	51 2c       	mov	r5, r1
    1060:	31 2c       	mov	r3, r1
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	20 32       	cpi	r18, 0x20	; 32
    1066:	a0 f4       	brcc	.+40     	; 0x1090 <vfprintf+0x88>
    1068:	8b 32       	cpi	r24, 0x2B	; 43
    106a:	69 f0       	breq	.+26     	; 0x1086 <vfprintf+0x7e>
    106c:	30 f4       	brcc	.+12     	; 0x107a <vfprintf+0x72>
    106e:	80 32       	cpi	r24, 0x20	; 32
    1070:	59 f0       	breq	.+22     	; 0x1088 <vfprintf+0x80>
    1072:	83 32       	cpi	r24, 0x23	; 35
    1074:	69 f4       	brne	.+26     	; 0x1090 <vfprintf+0x88>
    1076:	20 61       	ori	r18, 0x10	; 16
    1078:	2c c0       	rjmp	.+88     	; 0x10d2 <vfprintf+0xca>
    107a:	8d 32       	cpi	r24, 0x2D	; 45
    107c:	39 f0       	breq	.+14     	; 0x108c <vfprintf+0x84>
    107e:	80 33       	cpi	r24, 0x30	; 48
    1080:	39 f4       	brne	.+14     	; 0x1090 <vfprintf+0x88>
    1082:	21 60       	ori	r18, 0x01	; 1
    1084:	26 c0       	rjmp	.+76     	; 0x10d2 <vfprintf+0xca>
    1086:	22 60       	ori	r18, 0x02	; 2
    1088:	24 60       	ori	r18, 0x04	; 4
    108a:	23 c0       	rjmp	.+70     	; 0x10d2 <vfprintf+0xca>
    108c:	28 60       	ori	r18, 0x08	; 8
    108e:	21 c0       	rjmp	.+66     	; 0x10d2 <vfprintf+0xca>
    1090:	27 fd       	sbrc	r18, 7
    1092:	27 c0       	rjmp	.+78     	; 0x10e2 <vfprintf+0xda>
    1094:	30 ed       	ldi	r19, 0xD0	; 208
    1096:	38 0f       	add	r19, r24
    1098:	3a 30       	cpi	r19, 0x0A	; 10
    109a:	78 f4       	brcc	.+30     	; 0x10ba <vfprintf+0xb2>
    109c:	26 ff       	sbrs	r18, 6
    109e:	06 c0       	rjmp	.+12     	; 0x10ac <vfprintf+0xa4>
    10a0:	fa e0       	ldi	r31, 0x0A	; 10
    10a2:	5f 9e       	mul	r5, r31
    10a4:	30 0d       	add	r19, r0
    10a6:	11 24       	eor	r1, r1
    10a8:	53 2e       	mov	r5, r19
    10aa:	13 c0       	rjmp	.+38     	; 0x10d2 <vfprintf+0xca>
    10ac:	8a e0       	ldi	r24, 0x0A	; 10
    10ae:	38 9e       	mul	r3, r24
    10b0:	30 0d       	add	r19, r0
    10b2:	11 24       	eor	r1, r1
    10b4:	33 2e       	mov	r3, r19
    10b6:	20 62       	ori	r18, 0x20	; 32
    10b8:	0c c0       	rjmp	.+24     	; 0x10d2 <vfprintf+0xca>
    10ba:	8e 32       	cpi	r24, 0x2E	; 46
    10bc:	21 f4       	brne	.+8      	; 0x10c6 <vfprintf+0xbe>
    10be:	26 fd       	sbrc	r18, 6
    10c0:	6b c1       	rjmp	.+726    	; 0x1398 <vfprintf+0x390>
    10c2:	20 64       	ori	r18, 0x40	; 64
    10c4:	06 c0       	rjmp	.+12     	; 0x10d2 <vfprintf+0xca>
    10c6:	8c 36       	cpi	r24, 0x6C	; 108
    10c8:	11 f4       	brne	.+4      	; 0x10ce <vfprintf+0xc6>
    10ca:	20 68       	ori	r18, 0x80	; 128
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <vfprintf+0xca>
    10ce:	88 36       	cpi	r24, 0x68	; 104
    10d0:	41 f4       	brne	.+16     	; 0x10e2 <vfprintf+0xda>
    10d2:	f6 01       	movw	r30, r12
    10d4:	93 fd       	sbrc	r25, 3
    10d6:	85 91       	lpm	r24, Z+
    10d8:	93 ff       	sbrs	r25, 3
    10da:	81 91       	ld	r24, Z+
    10dc:	6f 01       	movw	r12, r30
    10de:	81 11       	cpse	r24, r1
    10e0:	c1 cf       	rjmp	.-126    	; 0x1064 <vfprintf+0x5c>
    10e2:	98 2f       	mov	r25, r24
    10e4:	9f 7d       	andi	r25, 0xDF	; 223
    10e6:	95 54       	subi	r25, 0x45	; 69
    10e8:	93 30       	cpi	r25, 0x03	; 3
    10ea:	28 f4       	brcc	.+10     	; 0x10f6 <vfprintf+0xee>
    10ec:	0c 5f       	subi	r16, 0xFC	; 252
    10ee:	1f 4f       	sbci	r17, 0xFF	; 255
    10f0:	ff e3       	ldi	r31, 0x3F	; 63
    10f2:	f9 83       	std	Y+1, r31	; 0x01
    10f4:	0d c0       	rjmp	.+26     	; 0x1110 <vfprintf+0x108>
    10f6:	83 36       	cpi	r24, 0x63	; 99
    10f8:	31 f0       	breq	.+12     	; 0x1106 <vfprintf+0xfe>
    10fa:	83 37       	cpi	r24, 0x73	; 115
    10fc:	71 f0       	breq	.+28     	; 0x111a <vfprintf+0x112>
    10fe:	83 35       	cpi	r24, 0x53	; 83
    1100:	09 f0       	breq	.+2      	; 0x1104 <vfprintf+0xfc>
    1102:	5b c0       	rjmp	.+182    	; 0x11ba <vfprintf+0x1b2>
    1104:	22 c0       	rjmp	.+68     	; 0x114a <vfprintf+0x142>
    1106:	f8 01       	movw	r30, r16
    1108:	80 81       	ld	r24, Z
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	0e 5f       	subi	r16, 0xFE	; 254
    110e:	1f 4f       	sbci	r17, 0xFF	; 255
    1110:	44 24       	eor	r4, r4
    1112:	43 94       	inc	r4
    1114:	51 2c       	mov	r5, r1
    1116:	54 01       	movw	r10, r8
    1118:	15 c0       	rjmp	.+42     	; 0x1144 <vfprintf+0x13c>
    111a:	38 01       	movw	r6, r16
    111c:	f2 e0       	ldi	r31, 0x02	; 2
    111e:	6f 0e       	add	r6, r31
    1120:	71 1c       	adc	r7, r1
    1122:	f8 01       	movw	r30, r16
    1124:	a0 80       	ld	r10, Z
    1126:	b1 80       	ldd	r11, Z+1	; 0x01
    1128:	26 ff       	sbrs	r18, 6
    112a:	03 c0       	rjmp	.+6      	; 0x1132 <vfprintf+0x12a>
    112c:	65 2d       	mov	r22, r5
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <vfprintf+0x12e>
    1132:	6f ef       	ldi	r22, 0xFF	; 255
    1134:	7f ef       	ldi	r23, 0xFF	; 255
    1136:	c5 01       	movw	r24, r10
    1138:	2c 87       	std	Y+12, r18	; 0x0c
    113a:	0e 94 04 0a 	call	0x1408	; 0x1408 <strnlen>
    113e:	2c 01       	movw	r4, r24
    1140:	83 01       	movw	r16, r6
    1142:	2c 85       	ldd	r18, Y+12	; 0x0c
    1144:	2f 77       	andi	r18, 0x7F	; 127
    1146:	22 2e       	mov	r2, r18
    1148:	17 c0       	rjmp	.+46     	; 0x1178 <vfprintf+0x170>
    114a:	38 01       	movw	r6, r16
    114c:	f2 e0       	ldi	r31, 0x02	; 2
    114e:	6f 0e       	add	r6, r31
    1150:	71 1c       	adc	r7, r1
    1152:	f8 01       	movw	r30, r16
    1154:	a0 80       	ld	r10, Z
    1156:	b1 80       	ldd	r11, Z+1	; 0x01
    1158:	26 ff       	sbrs	r18, 6
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <vfprintf+0x15a>
    115c:	65 2d       	mov	r22, r5
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <vfprintf+0x15e>
    1162:	6f ef       	ldi	r22, 0xFF	; 255
    1164:	7f ef       	ldi	r23, 0xFF	; 255
    1166:	c5 01       	movw	r24, r10
    1168:	2c 87       	std	Y+12, r18	; 0x0c
    116a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <strnlen_P>
    116e:	2c 01       	movw	r4, r24
    1170:	2c 85       	ldd	r18, Y+12	; 0x0c
    1172:	20 68       	ori	r18, 0x80	; 128
    1174:	22 2e       	mov	r2, r18
    1176:	83 01       	movw	r16, r6
    1178:	23 fc       	sbrc	r2, 3
    117a:	1b c0       	rjmp	.+54     	; 0x11b2 <vfprintf+0x1aa>
    117c:	83 2d       	mov	r24, r3
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	48 16       	cp	r4, r24
    1182:	59 06       	cpc	r5, r25
    1184:	b0 f4       	brcc	.+44     	; 0x11b2 <vfprintf+0x1aa>
    1186:	b7 01       	movw	r22, r14
    1188:	80 e2       	ldi	r24, 0x20	; 32
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 0f 0a 	call	0x141e	; 0x141e <fputc>
    1190:	3a 94       	dec	r3
    1192:	f4 cf       	rjmp	.-24     	; 0x117c <vfprintf+0x174>
    1194:	f5 01       	movw	r30, r10
    1196:	27 fc       	sbrc	r2, 7
    1198:	85 91       	lpm	r24, Z+
    119a:	27 fe       	sbrs	r2, 7
    119c:	81 91       	ld	r24, Z+
    119e:	5f 01       	movw	r10, r30
    11a0:	b7 01       	movw	r22, r14
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 0f 0a 	call	0x141e	; 0x141e <fputc>
    11a8:	31 10       	cpse	r3, r1
    11aa:	3a 94       	dec	r3
    11ac:	f1 e0       	ldi	r31, 0x01	; 1
    11ae:	4f 1a       	sub	r4, r31
    11b0:	51 08       	sbc	r5, r1
    11b2:	41 14       	cp	r4, r1
    11b4:	51 04       	cpc	r5, r1
    11b6:	71 f7       	brne	.-36     	; 0x1194 <vfprintf+0x18c>
    11b8:	e5 c0       	rjmp	.+458    	; 0x1384 <vfprintf+0x37c>
    11ba:	84 36       	cpi	r24, 0x64	; 100
    11bc:	11 f0       	breq	.+4      	; 0x11c2 <vfprintf+0x1ba>
    11be:	89 36       	cpi	r24, 0x69	; 105
    11c0:	39 f5       	brne	.+78     	; 0x1210 <vfprintf+0x208>
    11c2:	f8 01       	movw	r30, r16
    11c4:	27 ff       	sbrs	r18, 7
    11c6:	07 c0       	rjmp	.+14     	; 0x11d6 <vfprintf+0x1ce>
    11c8:	60 81       	ld	r22, Z
    11ca:	71 81       	ldd	r23, Z+1	; 0x01
    11cc:	82 81       	ldd	r24, Z+2	; 0x02
    11ce:	93 81       	ldd	r25, Z+3	; 0x03
    11d0:	0c 5f       	subi	r16, 0xFC	; 252
    11d2:	1f 4f       	sbci	r17, 0xFF	; 255
    11d4:	08 c0       	rjmp	.+16     	; 0x11e6 <vfprintf+0x1de>
    11d6:	60 81       	ld	r22, Z
    11d8:	71 81       	ldd	r23, Z+1	; 0x01
    11da:	88 27       	eor	r24, r24
    11dc:	77 fd       	sbrc	r23, 7
    11de:	80 95       	com	r24
    11e0:	98 2f       	mov	r25, r24
    11e2:	0e 5f       	subi	r16, 0xFE	; 254
    11e4:	1f 4f       	sbci	r17, 0xFF	; 255
    11e6:	2f 76       	andi	r18, 0x6F	; 111
    11e8:	b2 2e       	mov	r11, r18
    11ea:	97 ff       	sbrs	r25, 7
    11ec:	09 c0       	rjmp	.+18     	; 0x1200 <vfprintf+0x1f8>
    11ee:	90 95       	com	r25
    11f0:	80 95       	com	r24
    11f2:	70 95       	com	r23
    11f4:	61 95       	neg	r22
    11f6:	7f 4f       	sbci	r23, 0xFF	; 255
    11f8:	8f 4f       	sbci	r24, 0xFF	; 255
    11fa:	9f 4f       	sbci	r25, 0xFF	; 255
    11fc:	20 68       	ori	r18, 0x80	; 128
    11fe:	b2 2e       	mov	r11, r18
    1200:	2a e0       	ldi	r18, 0x0A	; 10
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	a4 01       	movw	r20, r8
    1206:	0e 94 41 0a 	call	0x1482	; 0x1482 <__ultoa_invert>
    120a:	a8 2e       	mov	r10, r24
    120c:	a8 18       	sub	r10, r8
    120e:	44 c0       	rjmp	.+136    	; 0x1298 <vfprintf+0x290>
    1210:	85 37       	cpi	r24, 0x75	; 117
    1212:	29 f4       	brne	.+10     	; 0x121e <vfprintf+0x216>
    1214:	2f 7e       	andi	r18, 0xEF	; 239
    1216:	b2 2e       	mov	r11, r18
    1218:	2a e0       	ldi	r18, 0x0A	; 10
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	25 c0       	rjmp	.+74     	; 0x1268 <vfprintf+0x260>
    121e:	f2 2f       	mov	r31, r18
    1220:	f9 7f       	andi	r31, 0xF9	; 249
    1222:	bf 2e       	mov	r11, r31
    1224:	8f 36       	cpi	r24, 0x6F	; 111
    1226:	c1 f0       	breq	.+48     	; 0x1258 <vfprintf+0x250>
    1228:	18 f4       	brcc	.+6      	; 0x1230 <vfprintf+0x228>
    122a:	88 35       	cpi	r24, 0x58	; 88
    122c:	79 f0       	breq	.+30     	; 0x124c <vfprintf+0x244>
    122e:	b4 c0       	rjmp	.+360    	; 0x1398 <vfprintf+0x390>
    1230:	80 37       	cpi	r24, 0x70	; 112
    1232:	19 f0       	breq	.+6      	; 0x123a <vfprintf+0x232>
    1234:	88 37       	cpi	r24, 0x78	; 120
    1236:	21 f0       	breq	.+8      	; 0x1240 <vfprintf+0x238>
    1238:	af c0       	rjmp	.+350    	; 0x1398 <vfprintf+0x390>
    123a:	2f 2f       	mov	r18, r31
    123c:	20 61       	ori	r18, 0x10	; 16
    123e:	b2 2e       	mov	r11, r18
    1240:	b4 fe       	sbrs	r11, 4
    1242:	0d c0       	rjmp	.+26     	; 0x125e <vfprintf+0x256>
    1244:	8b 2d       	mov	r24, r11
    1246:	84 60       	ori	r24, 0x04	; 4
    1248:	b8 2e       	mov	r11, r24
    124a:	09 c0       	rjmp	.+18     	; 0x125e <vfprintf+0x256>
    124c:	24 ff       	sbrs	r18, 4
    124e:	0a c0       	rjmp	.+20     	; 0x1264 <vfprintf+0x25c>
    1250:	9f 2f       	mov	r25, r31
    1252:	96 60       	ori	r25, 0x06	; 6
    1254:	b9 2e       	mov	r11, r25
    1256:	06 c0       	rjmp	.+12     	; 0x1264 <vfprintf+0x25c>
    1258:	28 e0       	ldi	r18, 0x08	; 8
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	05 c0       	rjmp	.+10     	; 0x1268 <vfprintf+0x260>
    125e:	20 e1       	ldi	r18, 0x10	; 16
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <vfprintf+0x260>
    1264:	20 e1       	ldi	r18, 0x10	; 16
    1266:	32 e0       	ldi	r19, 0x02	; 2
    1268:	f8 01       	movw	r30, r16
    126a:	b7 fe       	sbrs	r11, 7
    126c:	07 c0       	rjmp	.+14     	; 0x127c <vfprintf+0x274>
    126e:	60 81       	ld	r22, Z
    1270:	71 81       	ldd	r23, Z+1	; 0x01
    1272:	82 81       	ldd	r24, Z+2	; 0x02
    1274:	93 81       	ldd	r25, Z+3	; 0x03
    1276:	0c 5f       	subi	r16, 0xFC	; 252
    1278:	1f 4f       	sbci	r17, 0xFF	; 255
    127a:	06 c0       	rjmp	.+12     	; 0x1288 <vfprintf+0x280>
    127c:	60 81       	ld	r22, Z
    127e:	71 81       	ldd	r23, Z+1	; 0x01
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	0e 5f       	subi	r16, 0xFE	; 254
    1286:	1f 4f       	sbci	r17, 0xFF	; 255
    1288:	a4 01       	movw	r20, r8
    128a:	0e 94 41 0a 	call	0x1482	; 0x1482 <__ultoa_invert>
    128e:	a8 2e       	mov	r10, r24
    1290:	a8 18       	sub	r10, r8
    1292:	fb 2d       	mov	r31, r11
    1294:	ff 77       	andi	r31, 0x7F	; 127
    1296:	bf 2e       	mov	r11, r31
    1298:	b6 fe       	sbrs	r11, 6
    129a:	0b c0       	rjmp	.+22     	; 0x12b2 <vfprintf+0x2aa>
    129c:	2b 2d       	mov	r18, r11
    129e:	2e 7f       	andi	r18, 0xFE	; 254
    12a0:	a5 14       	cp	r10, r5
    12a2:	50 f4       	brcc	.+20     	; 0x12b8 <vfprintf+0x2b0>
    12a4:	b4 fe       	sbrs	r11, 4
    12a6:	0a c0       	rjmp	.+20     	; 0x12bc <vfprintf+0x2b4>
    12a8:	b2 fc       	sbrc	r11, 2
    12aa:	08 c0       	rjmp	.+16     	; 0x12bc <vfprintf+0x2b4>
    12ac:	2b 2d       	mov	r18, r11
    12ae:	2e 7e       	andi	r18, 0xEE	; 238
    12b0:	05 c0       	rjmp	.+10     	; 0x12bc <vfprintf+0x2b4>
    12b2:	7a 2c       	mov	r7, r10
    12b4:	2b 2d       	mov	r18, r11
    12b6:	03 c0       	rjmp	.+6      	; 0x12be <vfprintf+0x2b6>
    12b8:	7a 2c       	mov	r7, r10
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <vfprintf+0x2b6>
    12bc:	75 2c       	mov	r7, r5
    12be:	24 ff       	sbrs	r18, 4
    12c0:	0d c0       	rjmp	.+26     	; 0x12dc <vfprintf+0x2d4>
    12c2:	fe 01       	movw	r30, r28
    12c4:	ea 0d       	add	r30, r10
    12c6:	f1 1d       	adc	r31, r1
    12c8:	80 81       	ld	r24, Z
    12ca:	80 33       	cpi	r24, 0x30	; 48
    12cc:	11 f4       	brne	.+4      	; 0x12d2 <vfprintf+0x2ca>
    12ce:	29 7e       	andi	r18, 0xE9	; 233
    12d0:	09 c0       	rjmp	.+18     	; 0x12e4 <vfprintf+0x2dc>
    12d2:	22 ff       	sbrs	r18, 2
    12d4:	06 c0       	rjmp	.+12     	; 0x12e2 <vfprintf+0x2da>
    12d6:	73 94       	inc	r7
    12d8:	73 94       	inc	r7
    12da:	04 c0       	rjmp	.+8      	; 0x12e4 <vfprintf+0x2dc>
    12dc:	82 2f       	mov	r24, r18
    12de:	86 78       	andi	r24, 0x86	; 134
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <vfprintf+0x2dc>
    12e2:	73 94       	inc	r7
    12e4:	23 fd       	sbrc	r18, 3
    12e6:	13 c0       	rjmp	.+38     	; 0x130e <vfprintf+0x306>
    12e8:	20 ff       	sbrs	r18, 0
    12ea:	06 c0       	rjmp	.+12     	; 0x12f8 <vfprintf+0x2f0>
    12ec:	5a 2c       	mov	r5, r10
    12ee:	73 14       	cp	r7, r3
    12f0:	18 f4       	brcc	.+6      	; 0x12f8 <vfprintf+0x2f0>
    12f2:	53 0c       	add	r5, r3
    12f4:	57 18       	sub	r5, r7
    12f6:	73 2c       	mov	r7, r3
    12f8:	73 14       	cp	r7, r3
    12fa:	68 f4       	brcc	.+26     	; 0x1316 <vfprintf+0x30e>
    12fc:	b7 01       	movw	r22, r14
    12fe:	80 e2       	ldi	r24, 0x20	; 32
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	2c 87       	std	Y+12, r18	; 0x0c
    1304:	0e 94 0f 0a 	call	0x141e	; 0x141e <fputc>
    1308:	73 94       	inc	r7
    130a:	2c 85       	ldd	r18, Y+12	; 0x0c
    130c:	f5 cf       	rjmp	.-22     	; 0x12f8 <vfprintf+0x2f0>
    130e:	73 14       	cp	r7, r3
    1310:	10 f4       	brcc	.+4      	; 0x1316 <vfprintf+0x30e>
    1312:	37 18       	sub	r3, r7
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <vfprintf+0x310>
    1316:	31 2c       	mov	r3, r1
    1318:	24 ff       	sbrs	r18, 4
    131a:	12 c0       	rjmp	.+36     	; 0x1340 <vfprintf+0x338>
    131c:	b7 01       	movw	r22, r14
    131e:	80 e3       	ldi	r24, 0x30	; 48
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	2c 87       	std	Y+12, r18	; 0x0c
    1324:	0e 94 0f 0a 	call	0x141e	; 0x141e <fputc>
    1328:	2c 85       	ldd	r18, Y+12	; 0x0c
    132a:	22 ff       	sbrs	r18, 2
    132c:	17 c0       	rjmp	.+46     	; 0x135c <vfprintf+0x354>
    132e:	21 ff       	sbrs	r18, 1
    1330:	03 c0       	rjmp	.+6      	; 0x1338 <vfprintf+0x330>
    1332:	88 e5       	ldi	r24, 0x58	; 88
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 c0       	rjmp	.+4      	; 0x133c <vfprintf+0x334>
    1338:	88 e7       	ldi	r24, 0x78	; 120
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	b7 01       	movw	r22, r14
    133e:	0c c0       	rjmp	.+24     	; 0x1358 <vfprintf+0x350>
    1340:	82 2f       	mov	r24, r18
    1342:	86 78       	andi	r24, 0x86	; 134
    1344:	59 f0       	breq	.+22     	; 0x135c <vfprintf+0x354>
    1346:	21 fd       	sbrc	r18, 1
    1348:	02 c0       	rjmp	.+4      	; 0x134e <vfprintf+0x346>
    134a:	80 e2       	ldi	r24, 0x20	; 32
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <vfprintf+0x348>
    134e:	8b e2       	ldi	r24, 0x2B	; 43
    1350:	27 fd       	sbrc	r18, 7
    1352:	8d e2       	ldi	r24, 0x2D	; 45
    1354:	b7 01       	movw	r22, r14
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 0f 0a 	call	0x141e	; 0x141e <fputc>
    135c:	a5 14       	cp	r10, r5
    135e:	38 f4       	brcc	.+14     	; 0x136e <vfprintf+0x366>
    1360:	b7 01       	movw	r22, r14
    1362:	80 e3       	ldi	r24, 0x30	; 48
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 0f 0a 	call	0x141e	; 0x141e <fputc>
    136a:	5a 94       	dec	r5
    136c:	f7 cf       	rjmp	.-18     	; 0x135c <vfprintf+0x354>
    136e:	aa 94       	dec	r10
    1370:	f4 01       	movw	r30, r8
    1372:	ea 0d       	add	r30, r10
    1374:	f1 1d       	adc	r31, r1
    1376:	80 81       	ld	r24, Z
    1378:	b7 01       	movw	r22, r14
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 0f 0a 	call	0x141e	; 0x141e <fputc>
    1380:	a1 10       	cpse	r10, r1
    1382:	f5 cf       	rjmp	.-22     	; 0x136e <vfprintf+0x366>
    1384:	33 20       	and	r3, r3
    1386:	09 f4       	brne	.+2      	; 0x138a <vfprintf+0x382>
    1388:	51 ce       	rjmp	.-862    	; 0x102c <vfprintf+0x24>
    138a:	b7 01       	movw	r22, r14
    138c:	80 e2       	ldi	r24, 0x20	; 32
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 0f 0a 	call	0x141e	; 0x141e <fputc>
    1394:	3a 94       	dec	r3
    1396:	f6 cf       	rjmp	.-20     	; 0x1384 <vfprintf+0x37c>
    1398:	f7 01       	movw	r30, r14
    139a:	86 81       	ldd	r24, Z+6	; 0x06
    139c:	97 81       	ldd	r25, Z+7	; 0x07
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <vfprintf+0x39c>
    13a0:	8f ef       	ldi	r24, 0xFF	; 255
    13a2:	9f ef       	ldi	r25, 0xFF	; 255
    13a4:	2c 96       	adiw	r28, 0x0c	; 12
    13a6:	e2 e1       	ldi	r30, 0x12	; 18
    13a8:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__epilogue_restores__>

000013ac <calloc>:
    13ac:	0f 93       	push	r16
    13ae:	1f 93       	push	r17
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	86 9f       	mul	r24, r22
    13b6:	80 01       	movw	r16, r0
    13b8:	87 9f       	mul	r24, r23
    13ba:	10 0d       	add	r17, r0
    13bc:	96 9f       	mul	r25, r22
    13be:	10 0d       	add	r17, r0
    13c0:	11 24       	eor	r1, r1
    13c2:	c8 01       	movw	r24, r16
    13c4:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <malloc>
    13c8:	ec 01       	movw	r28, r24
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	29 f0       	breq	.+10     	; 0x13d8 <calloc+0x2c>
    13ce:	a8 01       	movw	r20, r16
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <memset>
    13d8:	ce 01       	movw	r24, r28
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	1f 91       	pop	r17
    13e0:	0f 91       	pop	r16
    13e2:	08 95       	ret

000013e4 <strnlen_P>:
    13e4:	fc 01       	movw	r30, r24
    13e6:	05 90       	lpm	r0, Z+
    13e8:	61 50       	subi	r22, 0x01	; 1
    13ea:	70 40       	sbci	r23, 0x00	; 0
    13ec:	01 10       	cpse	r0, r1
    13ee:	d8 f7       	brcc	.-10     	; 0x13e6 <strnlen_P+0x2>
    13f0:	80 95       	com	r24
    13f2:	90 95       	com	r25
    13f4:	8e 0f       	add	r24, r30
    13f6:	9f 1f       	adc	r25, r31
    13f8:	08 95       	ret

000013fa <memset>:
    13fa:	dc 01       	movw	r26, r24
    13fc:	01 c0       	rjmp	.+2      	; 0x1400 <memset+0x6>
    13fe:	6d 93       	st	X+, r22
    1400:	41 50       	subi	r20, 0x01	; 1
    1402:	50 40       	sbci	r21, 0x00	; 0
    1404:	e0 f7       	brcc	.-8      	; 0x13fe <memset+0x4>
    1406:	08 95       	ret

00001408 <strnlen>:
    1408:	fc 01       	movw	r30, r24
    140a:	61 50       	subi	r22, 0x01	; 1
    140c:	70 40       	sbci	r23, 0x00	; 0
    140e:	01 90       	ld	r0, Z+
    1410:	01 10       	cpse	r0, r1
    1412:	d8 f7       	brcc	.-10     	; 0x140a <strnlen+0x2>
    1414:	80 95       	com	r24
    1416:	90 95       	com	r25
    1418:	8e 0f       	add	r24, r30
    141a:	9f 1f       	adc	r25, r31
    141c:	08 95       	ret

0000141e <fputc>:
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	18 2f       	mov	r17, r24
    1428:	09 2f       	mov	r16, r25
    142a:	eb 01       	movw	r28, r22
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	81 fd       	sbrc	r24, 1
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <fputc+0x1a>
    1432:	8f ef       	ldi	r24, 0xFF	; 255
    1434:	9f ef       	ldi	r25, 0xFF	; 255
    1436:	20 c0       	rjmp	.+64     	; 0x1478 <fputc+0x5a>
    1438:	82 ff       	sbrs	r24, 2
    143a:	10 c0       	rjmp	.+32     	; 0x145c <fputc+0x3e>
    143c:	4e 81       	ldd	r20, Y+6	; 0x06
    143e:	5f 81       	ldd	r21, Y+7	; 0x07
    1440:	2c 81       	ldd	r18, Y+4	; 0x04
    1442:	3d 81       	ldd	r19, Y+5	; 0x05
    1444:	42 17       	cp	r20, r18
    1446:	53 07       	cpc	r21, r19
    1448:	7c f4       	brge	.+30     	; 0x1468 <fputc+0x4a>
    144a:	e8 81       	ld	r30, Y
    144c:	f9 81       	ldd	r31, Y+1	; 0x01
    144e:	9f 01       	movw	r18, r30
    1450:	2f 5f       	subi	r18, 0xFF	; 255
    1452:	3f 4f       	sbci	r19, 0xFF	; 255
    1454:	39 83       	std	Y+1, r19	; 0x01
    1456:	28 83       	st	Y, r18
    1458:	10 83       	st	Z, r17
    145a:	06 c0       	rjmp	.+12     	; 0x1468 <fputc+0x4a>
    145c:	e8 85       	ldd	r30, Y+8	; 0x08
    145e:	f9 85       	ldd	r31, Y+9	; 0x09
    1460:	81 2f       	mov	r24, r17
    1462:	09 95       	icall
    1464:	89 2b       	or	r24, r25
    1466:	29 f7       	brne	.-54     	; 0x1432 <fputc+0x14>
    1468:	2e 81       	ldd	r18, Y+6	; 0x06
    146a:	3f 81       	ldd	r19, Y+7	; 0x07
    146c:	2f 5f       	subi	r18, 0xFF	; 255
    146e:	3f 4f       	sbci	r19, 0xFF	; 255
    1470:	3f 83       	std	Y+7, r19	; 0x07
    1472:	2e 83       	std	Y+6, r18	; 0x06
    1474:	81 2f       	mov	r24, r17
    1476:	90 2f       	mov	r25, r16
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	08 95       	ret

00001482 <__ultoa_invert>:
    1482:	fa 01       	movw	r30, r20
    1484:	aa 27       	eor	r26, r26
    1486:	28 30       	cpi	r18, 0x08	; 8
    1488:	51 f1       	breq	.+84     	; 0x14de <__ultoa_invert+0x5c>
    148a:	20 31       	cpi	r18, 0x10	; 16
    148c:	81 f1       	breq	.+96     	; 0x14ee <__ultoa_invert+0x6c>
    148e:	e8 94       	clt
    1490:	6f 93       	push	r22
    1492:	6e 7f       	andi	r22, 0xFE	; 254
    1494:	6e 5f       	subi	r22, 0xFE	; 254
    1496:	7f 4f       	sbci	r23, 0xFF	; 255
    1498:	8f 4f       	sbci	r24, 0xFF	; 255
    149a:	9f 4f       	sbci	r25, 0xFF	; 255
    149c:	af 4f       	sbci	r26, 0xFF	; 255
    149e:	b1 e0       	ldi	r27, 0x01	; 1
    14a0:	3e d0       	rcall	.+124    	; 0x151e <__ultoa_invert+0x9c>
    14a2:	b4 e0       	ldi	r27, 0x04	; 4
    14a4:	3c d0       	rcall	.+120    	; 0x151e <__ultoa_invert+0x9c>
    14a6:	67 0f       	add	r22, r23
    14a8:	78 1f       	adc	r23, r24
    14aa:	89 1f       	adc	r24, r25
    14ac:	9a 1f       	adc	r25, r26
    14ae:	a1 1d       	adc	r26, r1
    14b0:	68 0f       	add	r22, r24
    14b2:	79 1f       	adc	r23, r25
    14b4:	8a 1f       	adc	r24, r26
    14b6:	91 1d       	adc	r25, r1
    14b8:	a1 1d       	adc	r26, r1
    14ba:	6a 0f       	add	r22, r26
    14bc:	71 1d       	adc	r23, r1
    14be:	81 1d       	adc	r24, r1
    14c0:	91 1d       	adc	r25, r1
    14c2:	a1 1d       	adc	r26, r1
    14c4:	20 d0       	rcall	.+64     	; 0x1506 <__ultoa_invert+0x84>
    14c6:	09 f4       	brne	.+2      	; 0x14ca <__ultoa_invert+0x48>
    14c8:	68 94       	set
    14ca:	3f 91       	pop	r19
    14cc:	2a e0       	ldi	r18, 0x0A	; 10
    14ce:	26 9f       	mul	r18, r22
    14d0:	11 24       	eor	r1, r1
    14d2:	30 19       	sub	r19, r0
    14d4:	30 5d       	subi	r19, 0xD0	; 208
    14d6:	31 93       	st	Z+, r19
    14d8:	de f6       	brtc	.-74     	; 0x1490 <__ultoa_invert+0xe>
    14da:	cf 01       	movw	r24, r30
    14dc:	08 95       	ret
    14de:	46 2f       	mov	r20, r22
    14e0:	47 70       	andi	r20, 0x07	; 7
    14e2:	40 5d       	subi	r20, 0xD0	; 208
    14e4:	41 93       	st	Z+, r20
    14e6:	b3 e0       	ldi	r27, 0x03	; 3
    14e8:	0f d0       	rcall	.+30     	; 0x1508 <__ultoa_invert+0x86>
    14ea:	c9 f7       	brne	.-14     	; 0x14de <__ultoa_invert+0x5c>
    14ec:	f6 cf       	rjmp	.-20     	; 0x14da <__ultoa_invert+0x58>
    14ee:	46 2f       	mov	r20, r22
    14f0:	4f 70       	andi	r20, 0x0F	; 15
    14f2:	40 5d       	subi	r20, 0xD0	; 208
    14f4:	4a 33       	cpi	r20, 0x3A	; 58
    14f6:	18 f0       	brcs	.+6      	; 0x14fe <__ultoa_invert+0x7c>
    14f8:	49 5d       	subi	r20, 0xD9	; 217
    14fa:	31 fd       	sbrc	r19, 1
    14fc:	40 52       	subi	r20, 0x20	; 32
    14fe:	41 93       	st	Z+, r20
    1500:	02 d0       	rcall	.+4      	; 0x1506 <__ultoa_invert+0x84>
    1502:	a9 f7       	brne	.-22     	; 0x14ee <__ultoa_invert+0x6c>
    1504:	ea cf       	rjmp	.-44     	; 0x14da <__ultoa_invert+0x58>
    1506:	b4 e0       	ldi	r27, 0x04	; 4
    1508:	a6 95       	lsr	r26
    150a:	97 95       	ror	r25
    150c:	87 95       	ror	r24
    150e:	77 95       	ror	r23
    1510:	67 95       	ror	r22
    1512:	ba 95       	dec	r27
    1514:	c9 f7       	brne	.-14     	; 0x1508 <__ultoa_invert+0x86>
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	61 05       	cpc	r22, r1
    151a:	71 05       	cpc	r23, r1
    151c:	08 95       	ret
    151e:	9b 01       	movw	r18, r22
    1520:	ac 01       	movw	r20, r24
    1522:	0a 2e       	mov	r0, r26
    1524:	06 94       	lsr	r0
    1526:	57 95       	ror	r21
    1528:	47 95       	ror	r20
    152a:	37 95       	ror	r19
    152c:	27 95       	ror	r18
    152e:	ba 95       	dec	r27
    1530:	c9 f7       	brne	.-14     	; 0x1524 <__ultoa_invert+0xa2>
    1532:	62 0f       	add	r22, r18
    1534:	73 1f       	adc	r23, r19
    1536:	84 1f       	adc	r24, r20
    1538:	95 1f       	adc	r25, r21
    153a:	a0 1d       	adc	r26, r0
    153c:	08 95       	ret

0000153e <__divmodsi4>:
    153e:	05 2e       	mov	r0, r21
    1540:	97 fb       	bst	r25, 7
    1542:	1e f4       	brtc	.+6      	; 0x154a <__divmodsi4+0xc>
    1544:	00 94       	com	r0
    1546:	0e 94 b6 0a 	call	0x156c	; 0x156c <__negsi2>
    154a:	57 fd       	sbrc	r21, 7
    154c:	07 d0       	rcall	.+14     	; 0x155c <__divmodsi4_neg2>
    154e:	0e 94 08 0b 	call	0x1610	; 0x1610 <__udivmodsi4>
    1552:	07 fc       	sbrc	r0, 7
    1554:	03 d0       	rcall	.+6      	; 0x155c <__divmodsi4_neg2>
    1556:	4e f4       	brtc	.+18     	; 0x156a <__divmodsi4_exit>
    1558:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__negsi2>

0000155c <__divmodsi4_neg2>:
    155c:	50 95       	com	r21
    155e:	40 95       	com	r20
    1560:	30 95       	com	r19
    1562:	21 95       	neg	r18
    1564:	3f 4f       	sbci	r19, 0xFF	; 255
    1566:	4f 4f       	sbci	r20, 0xFF	; 255
    1568:	5f 4f       	sbci	r21, 0xFF	; 255

0000156a <__divmodsi4_exit>:
    156a:	08 95       	ret

0000156c <__negsi2>:
    156c:	90 95       	com	r25
    156e:	80 95       	com	r24
    1570:	70 95       	com	r23
    1572:	61 95       	neg	r22
    1574:	7f 4f       	sbci	r23, 0xFF	; 255
    1576:	8f 4f       	sbci	r24, 0xFF	; 255
    1578:	9f 4f       	sbci	r25, 0xFF	; 255
    157a:	08 95       	ret

0000157c <__muluhisi3>:
    157c:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__umulhisi3>
    1580:	a5 9f       	mul	r26, r21
    1582:	90 0d       	add	r25, r0
    1584:	b4 9f       	mul	r27, r20
    1586:	90 0d       	add	r25, r0
    1588:	a4 9f       	mul	r26, r20
    158a:	80 0d       	add	r24, r0
    158c:	91 1d       	adc	r25, r1
    158e:	11 24       	eor	r1, r1
    1590:	08 95       	ret

00001592 <__mulshisi3>:
    1592:	b7 ff       	sbrs	r27, 7
    1594:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__muluhisi3>

00001598 <__mulohisi3>:
    1598:	0e 94 be 0a 	call	0x157c	; 0x157c <__muluhisi3>
    159c:	82 1b       	sub	r24, r18
    159e:	93 0b       	sbc	r25, r19
    15a0:	08 95       	ret

000015a2 <__prologue_saves__>:
    15a2:	2f 92       	push	r2
    15a4:	3f 92       	push	r3
    15a6:	4f 92       	push	r4
    15a8:	5f 92       	push	r5
    15aa:	6f 92       	push	r6
    15ac:	7f 92       	push	r7
    15ae:	8f 92       	push	r8
    15b0:	9f 92       	push	r9
    15b2:	af 92       	push	r10
    15b4:	bf 92       	push	r11
    15b6:	cf 92       	push	r12
    15b8:	df 92       	push	r13
    15ba:	ef 92       	push	r14
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	ca 1b       	sub	r28, r26
    15cc:	db 0b       	sbc	r29, r27
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	09 94       	ijmp

000015da <__epilogue_restores__>:
    15da:	2a 88       	ldd	r2, Y+18	; 0x12
    15dc:	39 88       	ldd	r3, Y+17	; 0x11
    15de:	48 88       	ldd	r4, Y+16	; 0x10
    15e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    15e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    15e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    15e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    15e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    15ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    15ec:	b9 84       	ldd	r11, Y+9	; 0x09
    15ee:	c8 84       	ldd	r12, Y+8	; 0x08
    15f0:	df 80       	ldd	r13, Y+7	; 0x07
    15f2:	ee 80       	ldd	r14, Y+6	; 0x06
    15f4:	fd 80       	ldd	r15, Y+5	; 0x05
    15f6:	0c 81       	ldd	r16, Y+4	; 0x04
    15f8:	1b 81       	ldd	r17, Y+3	; 0x03
    15fa:	aa 81       	ldd	r26, Y+2	; 0x02
    15fc:	b9 81       	ldd	r27, Y+1	; 0x01
    15fe:	ce 0f       	add	r28, r30
    1600:	d1 1d       	adc	r29, r1
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	ed 01       	movw	r28, r26
    160e:	08 95       	ret

00001610 <__udivmodsi4>:
    1610:	a1 e2       	ldi	r26, 0x21	; 33
    1612:	1a 2e       	mov	r1, r26
    1614:	aa 1b       	sub	r26, r26
    1616:	bb 1b       	sub	r27, r27
    1618:	fd 01       	movw	r30, r26
    161a:	0d c0       	rjmp	.+26     	; 0x1636 <__udivmodsi4_ep>

0000161c <__udivmodsi4_loop>:
    161c:	aa 1f       	adc	r26, r26
    161e:	bb 1f       	adc	r27, r27
    1620:	ee 1f       	adc	r30, r30
    1622:	ff 1f       	adc	r31, r31
    1624:	a2 17       	cp	r26, r18
    1626:	b3 07       	cpc	r27, r19
    1628:	e4 07       	cpc	r30, r20
    162a:	f5 07       	cpc	r31, r21
    162c:	20 f0       	brcs	.+8      	; 0x1636 <__udivmodsi4_ep>
    162e:	a2 1b       	sub	r26, r18
    1630:	b3 0b       	sbc	r27, r19
    1632:	e4 0b       	sbc	r30, r20
    1634:	f5 0b       	sbc	r31, r21

00001636 <__udivmodsi4_ep>:
    1636:	66 1f       	adc	r22, r22
    1638:	77 1f       	adc	r23, r23
    163a:	88 1f       	adc	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	1a 94       	dec	r1
    1640:	69 f7       	brne	.-38     	; 0x161c <__udivmodsi4_loop>
    1642:	60 95       	com	r22
    1644:	70 95       	com	r23
    1646:	80 95       	com	r24
    1648:	90 95       	com	r25
    164a:	9b 01       	movw	r18, r22
    164c:	ac 01       	movw	r20, r24
    164e:	bd 01       	movw	r22, r26
    1650:	cf 01       	movw	r24, r30
    1652:	08 95       	ret

00001654 <__umulhisi3>:
    1654:	a2 9f       	mul	r26, r18
    1656:	b0 01       	movw	r22, r0
    1658:	b3 9f       	mul	r27, r19
    165a:	c0 01       	movw	r24, r0
    165c:	a3 9f       	mul	r26, r19
    165e:	70 0d       	add	r23, r0
    1660:	81 1d       	adc	r24, r1
    1662:	11 24       	eor	r1, r1
    1664:	91 1d       	adc	r25, r1
    1666:	b2 9f       	mul	r27, r18
    1668:	70 0d       	add	r23, r0
    166a:	81 1d       	adc	r24, r1
    166c:	11 24       	eor	r1, r1
    166e:	91 1d       	adc	r25, r1
    1670:	08 95       	ret

00001672 <_exit>:
    1672:	f8 94       	cli

00001674 <__stop_program>:
    1674:	ff cf       	rjmp	.-2      	; 0x1674 <__stop_program>
