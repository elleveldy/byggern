
ByggernGruppe48H2015.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800100  000014d0  00001564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800218  00800218  0000167c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000390  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000360e  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011f5  00000000  00000000  00005076  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001204  00000000  00000000  0000626b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009d4  00000000  00000000  00007470  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000941  00000000  00000000  00007e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001fb9  00000000  00000000  00008785  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000308  00000000  00000000  0000a73e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

}

//uses menu_selector and changes it according to joystick movement

void gui_navigate(){
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
	
	//
	if(strcmp(menu_selector->name, "Main") == 0){
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
		menu_selector = menu_submenu(menu_selector);
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
	}

	int threshold = 70;
	
	if(joystick_x_value() > threshold){
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
		oled_printf("x");
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
		menu_selector = menu_submenu(menu_selector);
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
		_delay_ms(200);
	}
	else if(joystick_x_value() < - threshold){
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
		oled_printf("-x");
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
		menu_selector = menu_parent(menu_selector);
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
		_delay_ms(200);
		
		
	}
	else if(joystick_y_value() > threshold){
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
		oled_printf("y");
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
		menu_selector = menu_prev(menu_selector);
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
		_delay_ms(200);

		
	}
	else if(joystick_y_value() < - threshold){
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
		oled_printf("-y");
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
		//if there is a next item:
		if(menu_next(menu_selector) != NULL){
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
			menu_selector = menu_next(menu_selector);
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
			_delay_ms(200);
		}
	}
	else if(joystick_button_read()){
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
		oled_printf("button");
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
		if(menu_selector->fn != NULL ){	//if the function pointer points to a function, call it
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
			menu_selector->fn();
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
			
		}
	}
	
	
}
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <oled_change_contrast+0x60>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e0 ed       	ldi	r30, 0xD0	; 208
     37c:	f4 e1       	ldi	r31, 0x14	; 20
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 31       	cpi	r26, 0x18	; 24
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a8 e1       	ldi	r26, 0x18	; 24
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	aa 32       	cpi	r26, 0x2A	; 42
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <main>
     39e:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_init>:
#include <string.h>
#include <util/delay.h>



void can_init(int mode){
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	ec 01       	movw	r28, r24

	mcp2515_init();
     3ac:	0e 94 70 03 	call	0x6e0	; 0x6e0 <mcp2515_init>
	mcp2515_bit_modify(MCP_RXB0CTRL, MCP_MASK_FILTER, 0xff);
     3b0:	4f ef       	ldi	r20, 0xFF	; 255
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	60 e6       	ldi	r22, 0x60	; 96
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	80 e6       	ldi	r24, 0x60	; 96
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXB1CTRL, MCP_MASK_FILTER, 0xff);
     3c0:	4f ef       	ldi	r20, 0xFF	; 255
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	60 e6       	ldi	r22, 0x60	; 96
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 e7       	ldi	r24, 0x70	; 112
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, mode);
     3d0:	ae 01       	movw	r20, r28
     3d2:	60 ee       	ldi	r22, 0xE0	; 224
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	8f e0       	ldi	r24, 0x0F	; 15
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 52 03 	call	0x6a4	; 0x6a4 <mcp2515_bit_modify>
	DDRE &= ~(1 << PE0);
     3de:	30 98       	cbi	0x06, 0	; 6
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <can_transmit>:

void can_transmit(can_message* msg, int buffer_select){
     3e6:	8f 92       	push	r8
     3e8:	9f 92       	push	r9
     3ea:	af 92       	push	r10
     3ec:	bf 92       	push	r11
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	00 d0       	rcall	.+0      	; 0x400 <can_transmit+0x1a>
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
     404:	5c 01       	movw	r10, r24
     406:	7b 01       	movw	r14, r22
	
	mcp2515_bit_modify(buffer_select, 0x08, 0xff);
     408:	4f ef       	ldi	r20, 0xFF	; 255
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	68 e0       	ldi	r22, 0x08	; 8
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	c7 01       	movw	r24, r14
     412:	0e 94 52 03 	call	0x6a4	; 0x6a4 <mcp2515_bit_modify>
	
	while(mcp2515_read(buffer_select) & (1 << MCP_TXREQ));
     416:	c7 01       	movw	r24, r14
     418:	0e 94 2c 03 	call	0x658	; 0x658 <mcp2515_read>
     41c:	83 fd       	sbrc	r24, 3
     41e:	fb cf       	rjmp	.-10     	; 0x416 <can_transmit+0x30>
	
	volatile uint8_t idl = MCP2515_MASK_IDL & (msg->id << 5);
     420:	f5 01       	movw	r30, r10
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	28 2f       	mov	r18, r24
     428:	22 95       	swap	r18
     42a:	22 0f       	add	r18, r18
     42c:	20 7e       	andi	r18, 0xE0	; 224
     42e:	29 83       	std	Y+1, r18	; 0x01
	volatile uint8_t idh = MCP2515_MASK_IDH & (msg->id >> 3);
     430:	96 95       	lsr	r25
     432:	87 95       	ror	r24
     434:	96 95       	lsr	r25
     436:	87 95       	ror	r24
     438:	96 95       	lsr	r25
     43a:	87 95       	ror	r24
     43c:	8a 83       	std	Y+2, r24	; 0x02
	
	mcp2515_write(buffer_select + MCP2515_IDL_OFFSET, idl); //3 LSB
     43e:	69 81       	ldd	r22, Y+1	; 0x01
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	c7 01       	movw	r24, r14
     444:	02 96       	adiw	r24, 0x02	; 2
     446:	0e 94 3b 03 	call	0x676	; 0x676 <mcp2515_write>
	mcp2515_write(buffer_select + MCP2515_IDH_OFFSET, idh); //8 MSB
     44a:	6a 81       	ldd	r22, Y+2	; 0x02
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	c7 01       	movw	r24, r14
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	0e 94 3b 03 	call	0x676	; 0x676 <mcp2515_write>
	
	mcp2515_write(buffer_select + MCP2515_DLC_OFFSET, MCP2515_MASK_DLC & (msg->length));
     456:	f5 01       	movw	r30, r10
     458:	62 81       	ldd	r22, Z+2	; 0x02
     45a:	6f 70       	andi	r22, 0x0F	; 15
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	c7 01       	movw	r24, r14
     460:	05 96       	adiw	r24, 0x05	; 5
     462:	0e 94 3b 03 	call	0x676	; 0x676 <mcp2515_write>
	
	
	for(int i = 0; i < msg->length; i++){
     466:	f5 01       	movw	r30, r10
     468:	82 81       	ldd	r24, Z+2	; 0x02
     46a:	88 23       	and	r24, r24
     46c:	d9 f0       	breq	.+54     	; 0x4a4 <can_transmit+0xbe>
     46e:	65 01       	movw	r12, r10
     470:	f3 e0       	ldi	r31, 0x03	; 3
     472:	cf 0e       	add	r12, r31
     474:	d1 1c       	adc	r13, r1
     476:	00 e0       	ldi	r16, 0x00	; 0
     478:	10 e0       	ldi	r17, 0x00	; 0
     47a:	47 01       	movw	r8, r14
     47c:	86 e0       	ldi	r24, 0x06	; 6
     47e:	88 0e       	add	r8, r24
     480:	91 1c       	adc	r9, r1
		mcp2515_write(buffer_select + MCP2515_TXB_OFFSET + i, msg->data[i]);
     482:	f6 01       	movw	r30, r12
     484:	61 91       	ld	r22, Z+
     486:	6f 01       	movw	r12, r30
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	c4 01       	movw	r24, r8
     48c:	80 0f       	add	r24, r16
     48e:	91 1f       	adc	r25, r17
     490:	0e 94 3b 03 	call	0x676	; 0x676 <mcp2515_write>
	mcp2515_write(buffer_select + MCP2515_IDH_OFFSET, idh); //8 MSB
	
	mcp2515_write(buffer_select + MCP2515_DLC_OFFSET, MCP2515_MASK_DLC & (msg->length));
	
	
	for(int i = 0; i < msg->length; i++){
     494:	0f 5f       	subi	r16, 0xFF	; 255
     496:	1f 4f       	sbci	r17, 0xFF	; 255
     498:	f5 01       	movw	r30, r10
     49a:	82 81       	ldd	r24, Z+2	; 0x02
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	08 17       	cp	r16, r24
     4a0:	19 07       	cpc	r17, r25
     4a2:	7c f3       	brlt	.-34     	; 0x482 <can_transmit+0x9c>
		
	}
	
	int buffer_control;
	
	if (buffer_select == MCP_TXB0CTRL){
     4a4:	f0 e3       	ldi	r31, 0x30	; 48
     4a6:	ef 16       	cp	r14, r31
     4a8:	f1 04       	cpc	r15, r1
     4aa:	59 f0       	breq	.+22     	; 0x4c2 <can_transmit+0xdc>
		buffer_control = MCP_RTS_TX0;
	}
	else if (buffer_select == MCP_TXB1CTRL){
     4ac:	80 e4       	ldi	r24, 0x40	; 64
     4ae:	e8 16       	cp	r14, r24
     4b0:	f1 04       	cpc	r15, r1
     4b2:	51 f0       	breq	.+20     	; 0x4c8 <can_transmit+0xe2>
		buffer_control = MCP_RTS_TX1;
	}
	else if (buffer_select == MCP_TXB2CTRL){
     4b4:	e0 e5       	ldi	r30, 0x50	; 80
     4b6:	ee 16       	cp	r14, r30
     4b8:	f1 04       	cpc	r15, r1
     4ba:	51 f4       	brne	.+20     	; 0x4d0 <can_transmit+0xea>
		buffer_control=MCP_RTS_TX2;
     4bc:	84 e8       	ldi	r24, 0x84	; 132
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	05 c0       	rjmp	.+10     	; 0x4cc <can_transmit+0xe6>
	}
	
	int buffer_control;
	
	if (buffer_select == MCP_TXB0CTRL){
		buffer_control = MCP_RTS_TX0;
     4c2:	81 e8       	ldi	r24, 0x81	; 129
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <can_transmit+0xe6>
	}
	else if (buffer_select == MCP_TXB1CTRL){
		buffer_control = MCP_RTS_TX1;
     4c8:	82 e8       	ldi	r24, 0x82	; 130
     4ca:	90 e0       	ldi	r25, 0x00	; 0
		return; 
	}
	
	//printf("Buffer =\n\tID = %02x\n\tDLC = %02x\n\tD0 = %02x\n", mcp2515_read(buffer_select + MCP2515_IDH_OFFSET) | (mcp2515_read(buffer_select + MCP2515_IDL_OFFSET) >> 5), mcp2515_read(buffer_select + MCP2515_DLC_OFFSET),  mcp2515_read((buffer_select + MCP2515_TXB_OFFSET)));
	
	mcp2515_request_to_send(buffer_control);
     4cc:	0e 94 4d 03 	call	0x69a	; 0x69a <mcp2515_request_to_send>
}
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	9f 90       	pop	r9
     4ea:	8f 90       	pop	r8
     4ec:	08 95       	ret

000004ee <canjoy_transmit>:


uint16_t CANJOY_ID = 7;

void canjoy_transmit()
{
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	2b 97       	sbiw	r28, 0x0b	; 11
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	de bf       	out	0x3e, r29	; 62
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	cd bf       	out	0x3d, r28	; 61
	can_message joy;
	joy.id = CANJOY_ID;
     502:	80 91 06 01 	lds	r24, 0x0106
     506:	90 91 07 01 	lds	r25, 0x0107
     50a:	9a 83       	std	Y+2, r25	; 0x02
     50c:	89 83       	std	Y+1, r24	; 0x01
	joy.length = 7;
     50e:	87 e0       	ldi	r24, 0x07	; 7
     510:	8b 83       	std	Y+3, r24	; 0x03
	//printf("ID set to 7\n");
	
	joy.data[0] = joystick_read_x();
     512:	0e 94 ad 02 	call	0x55a	; 0x55a <joystick_read_x>
     516:	8c 83       	std	Y+4, r24	; 0x04
	joy.data[1] = joystick_read_y();
     518:	0e 94 b8 02 	call	0x570	; 0x570 <joystick_read_y>
     51c:	8d 83       	std	Y+5, r24	; 0x05
	joy.data[2] = joystick_button_read();
     51e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <joystick_button_read>
     522:	8e 83       	std	Y+6, r24	; 0x06
	joy.data[3] = slider_left_read();
     524:	0e 94 c3 02 	call	0x586	; 0x586 <slider_left_read>
     528:	8f 83       	std	Y+7, r24	; 0x07
	joy.data[4] = slider_right_read();
     52a:	0e 94 cd 02 	call	0x59a	; 0x59a <slider_right_read>
     52e:	88 87       	std	Y+8, r24	; 0x08
	joy.data[5] = button_left_read();
     530:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <button_left_read>
     534:	89 87       	std	Y+9, r24	; 0x09
	joy.data[6] = button_right_read();
     536:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <button_right_read>
     53a:	8a 87       	std	Y+10, r24	; 0x0a
	
	can_transmit(&joy, MCP_TXB0CTRL);
     53c:	60 e3       	ldi	r22, 0x30	; 48
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	ce 01       	movw	r24, r28
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <can_transmit>
	
}
     548:	2b 96       	adiw	r28, 0x0b	; 11
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	de bf       	out	0x3e, r29	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	cd bf       	out	0x3d, r28	; 61
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <joystick_read_x>:
//}

unsigned int joystick_read_x(){
	
	volatile char *ext_joy = (char *) 0x1400;
	ext_joy[0] = 0x04;
     55a:	84 e0       	ldi	r24, 0x04	; 4
     55c:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     560:	81 e4       	ldi	r24, 0x41	; 65
     562:	8a 95       	dec	r24
     564:	f1 f7       	brne	.-4      	; 0x562 <joystick_read_x+0x8>
     566:	00 c0       	rjmp	.+0      	; 0x568 <joystick_read_x+0xe>
	_delay_us(40);
	return (uint8_t)ext_joy[0];
     568:	80 91 00 14 	lds	r24, 0x1400
	
}
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	08 95       	ret

00000570 <joystick_read_y>:


unsigned int joystick_read_y(){
	
	volatile char *ext_joy = (char *) 0x1400;
	ext_joy[0] = 0x05;
     570:	85 e0       	ldi	r24, 0x05	; 5
     572:	80 93 00 14 	sts	0x1400, r24
     576:	81 e4       	ldi	r24, 0x41	; 65
     578:	8a 95       	dec	r24
     57a:	f1 f7       	brne	.-4      	; 0x578 <joystick_read_y+0x8>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <joystick_read_y+0xe>
	_delay_us(40);
	return (uint8_t)ext_joy[0];
     57e:	80 91 00 14 	lds	r24, 0x1400
	
}
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	08 95       	ret

00000586 <slider_left_read>:



uint8_t slider_left_read(){
	volatile char *ext_slide = (char *) 0x1400;
	ext_slide[0] = 0x06;
     586:	86 e0       	ldi	r24, 0x06	; 6
     588:	80 93 00 14 	sts	0x1400, r24
     58c:	81 e4       	ldi	r24, 0x41	; 65
     58e:	8a 95       	dec	r24
     590:	f1 f7       	brne	.-4      	; 0x58e <slider_left_read+0x8>
     592:	00 c0       	rjmp	.+0      	; 0x594 <slider_left_read+0xe>
	_delay_us(40);
	return (uint8_t)ext_slide[0];
     594:	80 91 00 14 	lds	r24, 0x1400
}
     598:	08 95       	ret

0000059a <slider_right_read>:

uint8_t slider_right_read(){
	volatile char *ext_slide = (char *) 0x1400;
	ext_slide[0] = 0x07;
     59a:	87 e0       	ldi	r24, 0x07	; 7
     59c:	80 93 00 14 	sts	0x1400, r24
     5a0:	81 e4       	ldi	r24, 0x41	; 65
     5a2:	8a 95       	dec	r24
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <slider_right_read+0x8>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <slider_right_read+0xe>
	_delay_us(40);
	return (uint8_t)ext_slide[0];
     5a8:	80 91 00 14 	lds	r24, 0x1400
}
     5ac:	08 95       	ret

000005ae <buttons_init>:
signed int slider_right_value(){
	return (slider_right_read() - 127);	
}

void buttons_init(){
	DDRB &= ~(1 << DDB1);	// ????
     5ae:	b9 98       	cbi	0x17, 1	; 23
	
	//left & right
	DDRB &= (1<< PINB0); //right
     5b0:	87 b3       	in	r24, 0x17	; 23
     5b2:	81 70       	andi	r24, 0x01	; 1
     5b4:	87 bb       	out	0x17, r24	; 23
	DDRB &= (1<< PINB1); //left
     5b6:	87 b3       	in	r24, 0x17	; 23
     5b8:	82 70       	andi	r24, 0x02	; 2
     5ba:	87 bb       	out	0x17, r24	; 23

	//joystick button activate
	DDRB &= (1 << PINB2);
     5bc:	87 b3       	in	r24, 0x17	; 23
     5be:	84 70       	andi	r24, 0x04	; 4
     5c0:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << PINB2);
     5c2:	c2 9a       	sbi	0x18, 2	; 24
     5c4:	08 95       	ret

000005c6 <joystick_button_read>:
}

int joystick_button_read(){
	int button = (PINB & (1 << PINB3));
	if (button > 0){
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	b3 9b       	sbis	0x16, 3	; 22
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <joystick_button_read+0xc>
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
	else{
		return 1;
	}
	
	
}
     5d2:	08 95       	ret

000005d4 <button_left_read>:

int button_left_read(){
	int button = (PINB & (1 << PINB1));
	if (button > 0){
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	b1 99       	sbic	0x16, 1	; 22
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <button_left_read+0xc>
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
}
     5e0:	08 95       	ret

000005e2 <button_right_read>:

int button_right_read(){
	int button = (PINB & (1 << PINB0));
	if (button > 0){
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	b0 99       	sbic	0x16, 0	; 22
     5e8:	02 c0       	rjmp	.+4      	; 0x5ee <button_right_read+0xc>
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	90 e0       	ldi	r25, 0x00	; 0
	}
	else{
		return 0;
	}
	
}
     5ee:	08 95       	ret

000005f0 <main>:
void SRAM_test(void);



int main(void){
	fdevopen(uart_Transmit, uart_Receive);
     5f0:	60 ed       	ldi	r22, 0xD0	; 208
     5f2:	75 e0       	ldi	r23, 0x05	; 5
     5f4:	8c ec       	ldi	r24, 0xCC	; 204
     5f6:	95 e0       	ldi	r25, 0x05	; 5
     5f8:	0e 94 08 07 	call	0xe10	; 0xe10 <fdevopen>
	
	MCUCR |= (1 << SRE);
     5fc:	85 b7       	in	r24, 0x35	; 53
     5fe:	80 68       	ori	r24, 0x80	; 128
     600:	85 bf       	out	0x35, r24	; 53
	
	uart_Init(MYUBRR);
     602:	8f e1       	ldi	r24, 0x1F	; 31
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 d4 05 	call	0xba8	; 0xba8 <uart_Init>
	
	
	buttons_init(); // useless thus far
     60a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <buttons_init>
	oled_init();	
     60e:	0e 94 9c 04 	call	0x938	; 0x938 <oled_init>
	oled_clear_screen();	
     612:	0e 94 2f 05 	call	0xa5e	; 0xa5e <oled_clear_screen>
	oled_home();
     616:	0e 94 95 04 	call	0x92a	; 0x92a <oled_home>
	
	
	Menuitem* menu = create_menu();
     61a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <create_menu>
	menu_selector = menu;
     61e:	90 93 1d 02 	sts	0x021D, r25
     622:	80 93 1c 02 	sts	0x021C, r24
	menu_line_nr = 0; 
     626:	10 92 1b 02 	sts	0x021B, r1
     62a:	10 92 1a 02 	sts	0x021A, r1
	
	can_init(MODE_NORMAL);
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
	while(1){
		
		/*can_test_transmit();
		printf("\nin main while\n");*/
		
		printf("X: %d\n", joystick_read_x());
     636:	ca e1       	ldi	r28, 0x1A	; 26
     638:	d1 e0       	ldi	r29, 0x01	; 1
     63a:	0e 94 ad 02 	call	0x55a	; 0x55a <joystick_read_x>
     63e:	9f 93       	push	r25
     640:	8f 93       	push	r24
     642:	df 93       	push	r29
     644:	cf 93       	push	r28
     646:	0e 94 53 07 	call	0xea6	; 0xea6 <printf>
		canjoy_transmit();
     64a:	0e 94 77 02 	call	0x4ee	; 0x4ee <canjoy_transmit>
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	f1 cf       	rjmp	.-30     	; 0x63a <main+0x4a>

00000658 <mcp2515_read>:
	}
	return 0;
}


int mcp2515_read(int address){
     658:	cf 93       	push	r28
     65a:	c8 2f       	mov	r28, r24
	
	int result;
	
	PORTB &= ~(1 << MCP2515_CS);
     65c:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_READ);
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	0e 94 c6 05 	call	0xb8c	; 0xb8c <spi_write>
	spi_write(address);
     664:	8c 2f       	mov	r24, r28
     666:	0e 94 c6 05 	call	0xb8c	; 0xb8c <spi_write>
	
	result = spi_write(0x00);
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <spi_write>
	
	PORTB |= (1 << MCP2515_CS);
     670:	c4 9a       	sbi	0x18, 4	; 24
	return result;
}
     672:	cf 91       	pop	r28
     674:	08 95       	ret

00000676 <mcp2515_write>:

void mcp2515_write(int address, int data){
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	d8 2f       	mov	r29, r24
     67c:	c6 2f       	mov	r28, r22
	
	PORTB &= ~(1 << MCP2515_CS);
     67e:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_WRITE);
     680:	82 e0       	ldi	r24, 0x02	; 2
     682:	0e 94 c6 05 	call	0xb8c	; 0xb8c <spi_write>
	spi_write(address);
     686:	8d 2f       	mov	r24, r29
     688:	0e 94 c6 05 	call	0xb8c	; 0xb8c <spi_write>
	spi_write(data);
     68c:	8c 2f       	mov	r24, r28
     68e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <spi_write>
	
	PORTB |= (1 << MCP2515_CS);	
     692:	c4 9a       	sbi	0x18, 4	; 24
}
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	08 95       	ret

0000069a <mcp2515_request_to_send>:

void mcp2515_request_to_send(int buffer_select){
	PORTB &= ~(1 << MCP2515_CS);
     69a:	c4 98       	cbi	0x18, 4	; 24
	spi_write(buffer_select);
     69c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <spi_write>
	PORTB |= (1 << MCP2515_CS);
     6a0:	c4 9a       	sbi	0x18, 4	; 24
     6a2:	08 95       	ret

000006a4 <mcp2515_bit_modify>:
}

void mcp2515_bit_modify(int address, int mask, int data){
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	18 2f       	mov	r17, r24
     6ac:	d6 2f       	mov	r29, r22
     6ae:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS);
     6b0:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_BITMOD);
     6b2:	85 e0       	ldi	r24, 0x05	; 5
     6b4:	0e 94 c6 05 	call	0xb8c	; 0xb8c <spi_write>
	spi_write(address);
     6b8:	81 2f       	mov	r24, r17
     6ba:	0e 94 c6 05 	call	0xb8c	; 0xb8c <spi_write>
	spi_write(mask);
     6be:	8d 2f       	mov	r24, r29
     6c0:	0e 94 c6 05 	call	0xb8c	; 0xb8c <spi_write>
	spi_write(data);
     6c4:	8c 2f       	mov	r24, r28
     6c6:	0e 94 c6 05 	call	0xb8c	; 0xb8c <spi_write>

	PORTB |= (1 << MCP2515_CS);
     6ca:	c4 9a       	sbi	0x18, 4	; 24
	
}
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	08 95       	ret

000006d4 <mcp2515_reset>:

void mcp2515_reset(){
	PORTB &= ~(1 << MCP2515_CS);
     6d4:	c4 98       	cbi	0x18, 4	; 24
	spi_write(MCP_RESET);
     6d6:	80 ec       	ldi	r24, 0xC0	; 192
     6d8:	0e 94 c6 05 	call	0xb8c	; 0xb8c <spi_write>
	PORTB |= (1 << MCP2515_CS);
     6dc:	c4 9a       	sbi	0x18, 4	; 24
     6de:	08 95       	ret

000006e0 <mcp2515_init>:
#include "SPI.h"
#include "mcp2515_define.h"


int mcp2515_init(){
	spi_init();
     6e0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <spi_init>
	mcp2515_reset();
     6e4:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <mcp2515_reset>
	
	uint8_t value = mcp2515_read(MCP_CANSTAT);
     6e8:	8e e0       	ldi	r24, 0x0E	; 14
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	0e 94 2c 03 	call	0x658	; 0x658 <mcp2515_read>
	if((value & MODE_MASK) != MODE_CONFIG){
     6f0:	80 7e       	andi	r24, 0xE0	; 224
     6f2:	99 27       	eor	r25, r25
     6f4:	80 38       	cpi	r24, 0x80	; 128
     6f6:	91 05       	cpc	r25, r1
     6f8:	39 f0       	breq	.+14     	; 0x708 <mcp2515_init+0x28>
		printf("ERROR: MCP2515 is NOT in config mode after reset!\n");
     6fa:	80 e9       	ldi	r24, 0x90	; 144
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	0e 94 67 07 	call	0xece	; 0xece <puts>
		return 1;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	08 95       	ret
	}
	return 0;
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
}
     70c:	08 95       	ret

0000070e <menu_toggle_negative>:
}

volatile char *oled_data = (char *) 0x1200; //dirty fix


void menu_toggle_negative(){
     70e:	08 95       	ret

00000710 <menu_snake_fn>:
char* menu_name(Menuitem* m){
	return m->name;
}


void menu_snake_fn(){
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
	oled_clear_screen();
     714:	0e 94 2f 05 	call	0xa5e	; 0xa5e <oled_clear_screen>
	while(1){
		oled_home();
		oled_printf("snake funk");
     718:	c2 ec       	ldi	r28, 0xC2	; 194
     71a:	d1 e0       	ldi	r29, 0x01	; 1


void menu_snake_fn(){
	oled_clear_screen();
	while(1){
		oled_home();
     71c:	0e 94 95 04 	call	0x92a	; 0x92a <oled_home>
		oled_printf("snake funk");
     720:	df 93       	push	r29
     722:	cf 93       	push	r28
     724:	0e 94 3d 05 	call	0xa7a	; 0xa7a <oled_printf>
		if(button_left_read()){
     728:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <button_left_read>
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	89 2b       	or	r24, r25
     732:	a1 f3       	breq	.-24     	; 0x71c <menu_snake_fn+0xc>
			return;
		}
	}
	
}
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	08 95       	ret

0000073a <new_Menuitem>:

Menuitem* new_Menuitem(
char* name,
void (*fn)(void),
uint8_t num_submenus
){
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	7c 01       	movw	r14, r24
     74a:	8b 01       	movw	r16, r22
     74c:	d4 2e       	mov	r13, r20
	Menuitem* this = malloc(sizeof(Menuitem));
     74e:	89 e0       	ldi	r24, 0x09	; 9
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <malloc>
     756:	ec 01       	movw	r28, r24
	this->name = name;
     758:	fe 82       	std	Y+6, r15	; 0x06
     75a:	ed 82       	std	Y+5, r14	; 0x05
	this->fn = fn;
     75c:	18 87       	std	Y+8, r17	; 0x08
     75e:	0f 83       	std	Y+7, r16	; 0x07
	
	this->num_submenus = num_submenus;
     760:	d8 82       	st	Y, r13
	this->submenus = malloc(sizeof(Menuitem) * num_submenus);
     762:	4d 2d       	mov	r20, r13
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	ca 01       	movw	r24, r20
     768:	88 0f       	add	r24, r24
     76a:	99 1f       	adc	r25, r25
     76c:	88 0f       	add	r24, r24
     76e:	99 1f       	adc	r25, r25
     770:	88 0f       	add	r24, r24
     772:	99 1f       	adc	r25, r25
     774:	84 0f       	add	r24, r20
     776:	95 1f       	adc	r25, r21
     778:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <malloc>
     77c:	9a 83       	std	Y+2, r25	; 0x02
     77e:	89 83       	std	Y+1, r24	; 0x01
	
	return this;
}
     780:	ce 01       	movw	r24, r28
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	ff 90       	pop	r15
     78c:	ef 90       	pop	r14
     78e:	df 90       	pop	r13
     790:	08 95       	ret

00000792 <assign_parents>:


void assign_parents(Menuitem* menu){
     792:	1f 93       	push	r17
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	ec 01       	movw	r28, r24
	for(uint8_t n = 0; n < menu->num_submenus; n++){
     79a:	88 81       	ld	r24, Y
     79c:	88 23       	and	r24, r24
     79e:	01 f1       	breq	.+64     	; 0x7e0 <assign_parents+0x4e>
     7a0:	10 e0       	ldi	r17, 0x00	; 0
		menu->submenus[n]->parent = menu;
     7a2:	81 2f       	mov	r24, r17
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	e9 81       	ldd	r30, Y+1	; 0x01
     7ac:	fa 81       	ldd	r31, Y+2	; 0x02
     7ae:	e8 0f       	add	r30, r24
     7b0:	f9 1f       	adc	r31, r25
     7b2:	01 90       	ld	r0, Z+
     7b4:	f0 81       	ld	r31, Z
     7b6:	e0 2d       	mov	r30, r0
     7b8:	d4 83       	std	Z+4, r29	; 0x04
     7ba:	c3 83       	std	Z+3, r28	; 0x03
		if(menu->submenus[n]->num_submenus > 0){
     7bc:	29 81       	ldd	r18, Y+1	; 0x01
     7be:	3a 81       	ldd	r19, Y+2	; 0x02
     7c0:	f9 01       	movw	r30, r18
     7c2:	e8 0f       	add	r30, r24
     7c4:	f9 1f       	adc	r31, r25
     7c6:	01 90       	ld	r0, Z+
     7c8:	f0 81       	ld	r31, Z
     7ca:	e0 2d       	mov	r30, r0
     7cc:	80 81       	ld	r24, Z
     7ce:	88 23       	and	r24, r24
     7d0:	19 f0       	breq	.+6      	; 0x7d8 <assign_parents+0x46>
			assign_parents(menu->submenus[n]);
     7d2:	cf 01       	movw	r24, r30
     7d4:	0e 94 c9 03 	call	0x792	; 0x792 <assign_parents>
	return this;
}


void assign_parents(Menuitem* menu){
	for(uint8_t n = 0; n < menu->num_submenus; n++){
     7d8:	1f 5f       	subi	r17, 0xFF	; 255
     7da:	88 81       	ld	r24, Y
     7dc:	18 17       	cp	r17, r24
     7de:	08 f3       	brcs	.-62     	; 0x7a2 <assign_parents+0x10>
		menu->submenus[n]->parent = menu;
		if(menu->submenus[n]->num_submenus > 0){
			assign_parents(menu->submenus[n]);
		}
	}
}
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	08 95       	ret

000007e8 <create_menu>:


Menuitem* create_menu(){
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
	
	//Store these strings in progmem
	
	Menuitem* base = new_Menuitem("Main", NULL, 3);
     7f0:	43 e0       	ldi	r20, 0x03	; 3
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	8d ec       	ldi	r24, 0xCD	; 205
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	0e 94 9d 03 	call	0x73a	; 0x73a <new_Menuitem>
     7fe:	ec 01       	movw	r28, r24
	base->submenus[0] = new_Menuitem("Snake", menu_snake_fn, 0);
     800:	09 81       	ldd	r16, Y+1	; 0x01
     802:	1a 81       	ldd	r17, Y+2	; 0x02
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	68 e8       	ldi	r22, 0x88	; 136
     808:	73 e0       	ldi	r23, 0x03	; 3
     80a:	82 ed       	ldi	r24, 0xD2	; 210
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 9d 03 	call	0x73a	; 0x73a <new_Menuitem>
     812:	f8 01       	movw	r30, r16
     814:	91 83       	std	Z+1, r25	; 0x01
     816:	80 83       	st	Z, r24
	base->submenus[1] = new_Menuitem("Settings", NULL, 2);
     818:	09 81       	ldd	r16, Y+1	; 0x01
     81a:	1a 81       	ldd	r17, Y+2	; 0x02
     81c:	42 e0       	ldi	r20, 0x02	; 2
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	88 ed       	ldi	r24, 0xD8	; 216
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	0e 94 9d 03 	call	0x73a	; 0x73a <new_Menuitem>
     82a:	f8 01       	movw	r30, r16
     82c:	93 83       	std	Z+3, r25	; 0x03
     82e:	82 83       	std	Z+2, r24	; 0x02
	base->submenus[1]->submenus[0] = new_Menuitem("Contrast", oled_change_contrast, 0);
     830:	e9 81       	ldd	r30, Y+1	; 0x01
     832:	fa 81       	ldd	r31, Y+2	; 0x02
     834:	02 80       	ldd	r0, Z+2	; 0x02
     836:	f3 81       	ldd	r31, Z+3	; 0x03
     838:	e0 2d       	mov	r30, r0
     83a:	01 81       	ldd	r16, Z+1	; 0x01
     83c:	12 81       	ldd	r17, Z+2	; 0x02
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	61 e7       	ldi	r22, 0x71	; 113
     842:	75 e0       	ldi	r23, 0x05	; 5
     844:	81 ee       	ldi	r24, 0xE1	; 225
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	0e 94 9d 03 	call	0x73a	; 0x73a <new_Menuitem>
     84c:	f8 01       	movw	r30, r16
     84e:	91 83       	std	Z+1, r25	; 0x01
     850:	80 83       	st	Z, r24
	base->submenus[1]->submenus[1] = new_Menuitem("Toggle negative", oled_toggle_negative, 0);
     852:	e9 81       	ldd	r30, Y+1	; 0x01
     854:	fa 81       	ldd	r31, Y+2	; 0x02
     856:	02 80       	ldd	r0, Z+2	; 0x02
     858:	f3 81       	ldd	r31, Z+3	; 0x03
     85a:	e0 2d       	mov	r30, r0
     85c:	01 81       	ldd	r16, Z+1	; 0x01
     85e:	12 81       	ldd	r17, Z+2	; 0x02
     860:	40 e0       	ldi	r20, 0x00	; 0
     862:	6b e5       	ldi	r22, 0x5B	; 91
     864:	75 e0       	ldi	r23, 0x05	; 5
     866:	8a ee       	ldi	r24, 0xEA	; 234
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	0e 94 9d 03 	call	0x73a	; 0x73a <new_Menuitem>
     86e:	f8 01       	movw	r30, r16
     870:	93 83       	std	Z+3, r25	; 0x03
     872:	82 83       	std	Z+2, r24	; 0x02
	//base->submenus[1]->submenus[1]->submenus[0] = new_Menuitem("Negative", oled_mode_negative, 0);
	//base->submenus[1]->submenus[1]->submenus[1] = new_Menuitem("Normal", oled_mode_normal, 0);
	base->submenus[2] = new_Menuitem("Ping Pong", menu_toggle_negative, 0);
     874:	09 81       	ldd	r16, Y+1	; 0x01
     876:	1a 81       	ldd	r17, Y+2	; 0x02
     878:	40 e0       	ldi	r20, 0x00	; 0
     87a:	67 e8       	ldi	r22, 0x87	; 135
     87c:	73 e0       	ldi	r23, 0x03	; 3
     87e:	8a ef       	ldi	r24, 0xFA	; 250
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	0e 94 9d 03 	call	0x73a	; 0x73a <new_Menuitem>
     886:	f8 01       	movw	r30, r16
     888:	95 83       	std	Z+5, r25	; 0x05
     88a:	84 83       	std	Z+4, r24	; 0x04
	
	assign_parents(base);
     88c:	ce 01       	movw	r24, r28
     88e:	0e 94 c9 03 	call	0x792	; 0x792 <assign_parents>
	
	return base;
}
     892:	ce 01       	movw	r24, r28
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	08 95       	ret

0000089e <oled_print_char>:
		oled_clear_page(page);
	}
}


void oled_print_char(char character){
     89e:	28 e0       	ldi	r18, 0x08	; 8
     8a0:	82 9f       	mul	r24, r18
     8a2:	c0 01       	movw	r24, r0
     8a4:	11 24       	eor	r1, r1
     8a6:	fc 01       	movw	r30, r24
     8a8:	e0 59       	subi	r30, 0x90	; 144
     8aa:	f0 40       	sbci	r31, 0x00	; 0
	for(int col = 0; col < font_width; col++){
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
		oled_data_write(pgm_read_byte(&font[character - FONT_OFFSET][col]));
     8b0:	84 91       	lpm	r24, Z
	*oled_command_adr = command;	
}


static inline void oled_data_write(char data){
	*oled_data_adr = data;
     8b2:	a0 91 0a 01 	lds	r26, 0x010A
     8b6:	b0 91 0b 01 	lds	r27, 0x010B
     8ba:	8c 93       	st	X, r24
	}
}


void oled_print_char(char character){
	for(int col = 0; col < font_width; col++){
     8bc:	2f 5f       	subi	r18, 0xFF	; 255
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
     8c0:	31 96       	adiw	r30, 0x01	; 1
     8c2:	28 30       	cpi	r18, 0x08	; 8
     8c4:	31 05       	cpc	r19, r1
     8c6:	a1 f7       	brne	.-24     	; 0x8b0 <oled_print_char+0x12>
		oled_data_write(pgm_read_byte(&font[character - FONT_OFFSET][col]));
	}
}
     8c8:	08 95       	ret

000008ca <oled_goto_col>:
	//oled_command_write(0x0f + col);
	//
//}

void oled_goto_col(int column){
	oled_command_write(column & 0x0f);
     8ca:	28 2f       	mov	r18, r24
     8cc:	2f 70       	andi	r18, 0x0F	; 15
volatile char *oled_command_adr = (char *) 0x1000;



static inline void oled_command_write(char command){
	*oled_command_adr = command; 
     8ce:	e0 91 08 01 	lds	r30, 0x0108
     8d2:	f0 91 09 01 	lds	r31, 0x0109
     8d6:	20 83       	st	Z, r18
	//
//}

void oled_goto_col(int column){
	oled_command_write(column & 0x0f);
	oled_command_write(((column & 0xf0) >> 4) | (0x10));
     8d8:	80 7f       	andi	r24, 0xF0	; 240
     8da:	99 27       	eor	r25, r25
     8dc:	95 95       	asr	r25
     8de:	87 95       	ror	r24
     8e0:	95 95       	asr	r25
     8e2:	87 95       	ror	r24
     8e4:	95 95       	asr	r25
     8e6:	87 95       	ror	r24
     8e8:	95 95       	asr	r25
     8ea:	87 95       	ror	r24
     8ec:	80 61       	ori	r24, 0x10	; 16
volatile char *oled_command_adr = (char *) 0x1000;



static inline void oled_command_write(char command){
	*oled_command_adr = command; 
     8ee:	e0 91 08 01 	lds	r30, 0x0108
     8f2:	f0 91 09 01 	lds	r31, 0x0109
     8f6:	80 83       	st	Z, r24
     8f8:	08 95       	ret

000008fa <oled_goto_page>:
	oled_command_write(column & 0x0f);
	oled_command_write(((column & 0xf0) >> 4) | (0x10));
}

void oled_goto_page(int page){
	oled_command_write(0xB0 + page);
     8fa:	80 55       	subi	r24, 0x50	; 80
volatile char *oled_command_adr = (char *) 0x1000;



static inline void oled_command_write(char command){
	*oled_command_adr = command; 
     8fc:	e0 91 08 01 	lds	r30, 0x0108
     900:	f0 91 09 01 	lds	r31, 0x0109
     904:	80 83       	st	Z, r24
     906:	e0 91 08 01 	lds	r30, 0x0108
     90a:	f0 91 09 01 	lds	r31, 0x0109
     90e:	10 82       	st	Z, r1
     910:	08 95       	ret

00000912 <oled_goto_pos>:
void oled_goto_page(int page){
	oled_command_write(0xB0 + page);
	oled_command_write(0x00);
}

void oled_goto_pos(int col, int page){
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	ec 01       	movw	r28, r24
     918:	cb 01       	movw	r24, r22
	oled_goto_page(page);
     91a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <oled_goto_page>
	oled_goto_col(col);
     91e:	ce 01       	movw	r24, r28
     920:	0e 94 65 04 	call	0x8ca	; 0x8ca <oled_goto_col>
}
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <oled_home>:

void oled_home(){
	oled_goto_pos(0,0);
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 89 04 	call	0x912	; 0x912 <oled_goto_pos>
     936:	08 95       	ret

00000938 <oled_init>:
volatile char *oled_command_adr = (char *) 0x1000;



static inline void oled_command_write(char command){
	*oled_command_adr = command; 
     938:	e0 91 08 01 	lds	r30, 0x0108
     93c:	f0 91 09 01 	lds	r31, 0x0109
     940:	8e ea       	ldi	r24, 0xAE	; 174
     942:	80 83       	st	Z, r24
     944:	e0 91 08 01 	lds	r30, 0x0108
     948:	f0 91 09 01 	lds	r31, 0x0109
     94c:	81 ea       	ldi	r24, 0xA1	; 161
     94e:	80 83       	st	Z, r24
     950:	e0 91 08 01 	lds	r30, 0x0108
     954:	f0 91 09 01 	lds	r31, 0x0109
     958:	8a ed       	ldi	r24, 0xDA	; 218
     95a:	80 83       	st	Z, r24
     95c:	e0 91 08 01 	lds	r30, 0x0108
     960:	f0 91 09 01 	lds	r31, 0x0109
     964:	82 e1       	ldi	r24, 0x12	; 18
     966:	80 83       	st	Z, r24
     968:	e0 91 08 01 	lds	r30, 0x0108
     96c:	f0 91 09 01 	lds	r31, 0x0109
     970:	88 ec       	ldi	r24, 0xC8	; 200
     972:	80 83       	st	Z, r24
     974:	e0 91 08 01 	lds	r30, 0x0108
     978:	f0 91 09 01 	lds	r31, 0x0109
     97c:	88 ea       	ldi	r24, 0xA8	; 168
     97e:	80 83       	st	Z, r24
     980:	e0 91 08 01 	lds	r30, 0x0108
     984:	f0 91 09 01 	lds	r31, 0x0109
     988:	8f e3       	ldi	r24, 0x3F	; 63
     98a:	80 83       	st	Z, r24
     98c:	e0 91 08 01 	lds	r30, 0x0108
     990:	f0 91 09 01 	lds	r31, 0x0109
     994:	85 ed       	ldi	r24, 0xD5	; 213
     996:	80 83       	st	Z, r24
     998:	e0 91 08 01 	lds	r30, 0x0108
     99c:	f0 91 09 01 	lds	r31, 0x0109
     9a0:	80 e8       	ldi	r24, 0x80	; 128
     9a2:	80 83       	st	Z, r24
     9a4:	e0 91 08 01 	lds	r30, 0x0108
     9a8:	f0 91 09 01 	lds	r31, 0x0109
     9ac:	81 e8       	ldi	r24, 0x81	; 129
     9ae:	80 83       	st	Z, r24
     9b0:	e0 91 08 01 	lds	r30, 0x0108
     9b4:	f0 91 09 01 	lds	r31, 0x0109
     9b8:	80 e5       	ldi	r24, 0x50	; 80
     9ba:	80 83       	st	Z, r24
     9bc:	e0 91 08 01 	lds	r30, 0x0108
     9c0:	f0 91 09 01 	lds	r31, 0x0109
     9c4:	89 ed       	ldi	r24, 0xD9	; 217
     9c6:	80 83       	st	Z, r24
     9c8:	e0 91 08 01 	lds	r30, 0x0108
     9cc:	f0 91 09 01 	lds	r31, 0x0109
     9d0:	81 e2       	ldi	r24, 0x21	; 33
     9d2:	80 83       	st	Z, r24
     9d4:	e0 91 08 01 	lds	r30, 0x0108
     9d8:	f0 91 09 01 	lds	r31, 0x0109
     9dc:	80 e2       	ldi	r24, 0x20	; 32
     9de:	80 83       	st	Z, r24
     9e0:	e0 91 08 01 	lds	r30, 0x0108
     9e4:	f0 91 09 01 	lds	r31, 0x0109
     9e8:	82 e0       	ldi	r24, 0x02	; 2
     9ea:	80 83       	st	Z, r24
     9ec:	e0 91 08 01 	lds	r30, 0x0108
     9f0:	f0 91 09 01 	lds	r31, 0x0109
     9f4:	8b ed       	ldi	r24, 0xDB	; 219
     9f6:	80 83       	st	Z, r24
     9f8:	e0 91 08 01 	lds	r30, 0x0108
     9fc:	f0 91 09 01 	lds	r31, 0x0109
     a00:	80 e3       	ldi	r24, 0x30	; 48
     a02:	80 83       	st	Z, r24
     a04:	e0 91 08 01 	lds	r30, 0x0108
     a08:	f0 91 09 01 	lds	r31, 0x0109
     a0c:	8d ea       	ldi	r24, 0xAD	; 173
     a0e:	80 83       	st	Z, r24
     a10:	e0 91 08 01 	lds	r30, 0x0108
     a14:	f0 91 09 01 	lds	r31, 0x0109
     a18:	10 82       	st	Z, r1
     a1a:	e0 91 08 01 	lds	r30, 0x0108
     a1e:	f0 91 09 01 	lds	r31, 0x0109
     a22:	84 ea       	ldi	r24, 0xA4	; 164
     a24:	80 83       	st	Z, r24
     a26:	e0 91 08 01 	lds	r30, 0x0108
     a2a:	f0 91 09 01 	lds	r31, 0x0109
     a2e:	86 ea       	ldi	r24, 0xA6	; 166
     a30:	80 83       	st	Z, r24
     a32:	e0 91 08 01 	lds	r30, 0x0108
     a36:	f0 91 09 01 	lds	r31, 0x0109
     a3a:	8f ea       	ldi	r24, 0xAF	; 175
     a3c:	80 83       	st	Z, r24
	oled_command_write(0xa6);    //set normal display
	oled_command_write(0xaf);    // display on
	//oled_command_write(0xa4);    //Entire display on
	
	//oled_clear_screen();
	oled_home();
     a3e:	0e 94 95 04 	call	0x92a	; 0x92a <oled_home>
     a42:	08 95       	ret

00000a44 <oled_clear_page>:
	oled_goto_pos(0,0);
}


void oled_clear_page(int page){
	oled_goto_page(page);
     a44:	0e 94 7d 04 	call	0x8fa	; 0x8fa <oled_goto_page>
     a48:	80 e8       	ldi	r24, 0x80	; 128
     a4a:	90 e0       	ldi	r25, 0x00	; 0
	*oled_command_adr = command;	
}


static inline void oled_data_write(char data){
	*oled_data_adr = data;
     a4c:	e0 91 0a 01 	lds	r30, 0x010A
     a50:	f0 91 0b 01 	lds	r31, 0x010B
     a54:	10 82       	st	Z, r1
     a56:	01 97       	sbiw	r24, 0x01	; 1
}


void oled_clear_page(int page){
	oled_goto_page(page);
	for(int col = 0; col < 128; col++){
     a58:	00 97       	sbiw	r24, 0x00	; 0
     a5a:	c1 f7       	brne	.-16     	; 0xa4c <oled_clear_page+0x8>
		oled_data_write(0x00);
	}
}
     a5c:	08 95       	ret

00000a5e <oled_clear_screen>:
		oled_goto_pos(col_nr, page);
		oled_print_char(' ');
	}
}

void oled_clear_screen(){
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
	for(int page = 0;page < 8; page++){
     a62:	c0 e0       	ldi	r28, 0x00	; 0
     a64:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_page(page);
     a66:	ce 01       	movw	r24, r28
     a68:	0e 94 22 05 	call	0xa44	; 0xa44 <oled_clear_page>
		oled_print_char(' ');
	}
}

void oled_clear_screen(){
	for(int page = 0;page < 8; page++){
     a6c:	21 96       	adiw	r28, 0x01	; 1
     a6e:	c8 30       	cpi	r28, 0x08	; 8
     a70:	d1 05       	cpc	r29, r1
     a72:	c9 f7       	brne	.-14     	; 0xa66 <oled_clear_screen+0x8>
		oled_clear_page(page);
	}
}
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	08 95       	ret

00000a7a <oled_printf>:
		oled_data_write(pgm_read_byte(&font[character - FONT_OFFSET][col]));
	}
}


void oled_printf(char* fmt, ...){
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	fe 01       	movw	r30, r28
     a84:	35 96       	adiw	r30, 0x05	; 5
     a86:	61 91       	ld	r22, Z+
     a88:	71 91       	ld	r23, Z+
	va_list v;
	va_start(v, fmt);
	vfprintf(&oled_stdout, fmt, v);
     a8a:	af 01       	movw	r20, r30
     a8c:	8c e0       	ldi	r24, 0x0C	; 12
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	0e 94 94 07 	call	0xf28	; 0xf28 <vfprintf>
	va_end(v);
}
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	08 95       	ret

00000a9a <oled_mode_negative>:
volatile char *oled_command_adr = (char *) 0x1000;



static inline void oled_command_write(char command){
	*oled_command_adr = command; 
     a9a:	e0 91 08 01 	lds	r30, 0x0108
     a9e:	f0 91 09 01 	lds	r31, 0x0109
     aa2:	87 ea       	ldi	r24, 0xA7	; 167
     aa4:	80 83       	st	Z, r24
     aa6:	08 95       	ret

00000aa8 <oled_mode_normal>:
     aa8:	e0 91 08 01 	lds	r30, 0x0108
     aac:	f0 91 09 01 	lds	r31, 0x0109
     ab0:	86 ea       	ldi	r24, 0xA6	; 166
     ab2:	80 83       	st	Z, r24
     ab4:	08 95       	ret

00000ab6 <oled_toggle_negative>:
}

int screen_negative = 0;

void oled_toggle_negative(){
	if(screen_negative){
     ab6:	80 91 18 02 	lds	r24, 0x0218
     aba:	90 91 19 02 	lds	r25, 0x0219
     abe:	89 2b       	or	r24, r25
     ac0:	39 f0       	breq	.+14     	; 0xad0 <oled_toggle_negative+0x1a>
		oled_mode_normal();
     ac2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <oled_mode_normal>
		screen_negative = 0;
     ac6:	10 92 19 02 	sts	0x0219, r1
     aca:	10 92 18 02 	sts	0x0218, r1
     ace:	08 95       	ret
	}
	else{
		oled_mode_negative();
     ad0:	0e 94 4d 05 	call	0xa9a	; 0xa9a <oled_mode_negative>
		screen_negative = 1;
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	90 93 19 02 	sts	0x0219, r25
     adc:	80 93 18 02 	sts	0x0218, r24
     ae0:	08 95       	ret

00000ae2 <oled_change_contrast>:
	}
}


//badly modularised
void oled_change_contrast(){
     ae2:	cf 93       	push	r28

	int contrast;
	oled_clear_screen();
     ae4:	0e 94 2f 05 	call	0xa5e	; 0xa5e <oled_clear_screen>
	oled_home();
     ae8:	0e 94 95 04 	call	0x92a	; 0x92a <oled_home>
	oled_printf("Contrast");
     aec:	81 ee       	ldi	r24, 0xE1	; 225
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	9f 93       	push	r25
     af2:	8f 93       	push	r24
     af4:	0e 94 3d 05 	call	0xa7a	; 0xa7a <oled_printf>
	oled_goto_pos(0, 3);
     af8:	63 e0       	ldi	r22, 0x03	; 3
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 89 04 	call	0x912	; 0x912 <oled_goto_pos>
	oled_printf("left slider");
     b04:	84 e0       	ldi	r24, 0x04	; 4
     b06:	92 e0       	ldi	r25, 0x02	; 2
     b08:	9f 93       	push	r25
     b0a:	8f 93       	push	r24
     b0c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <oled_printf>
	oled_goto_pos(3,7);
     b10:	67 e0       	ldi	r22, 0x07	; 7
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	83 e0       	ldi	r24, 0x03	; 3
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	0e 94 89 04 	call	0x912	; 0x912 <oled_goto_pos>
	oled_printf("Default");
     b1c:	80 e1       	ldi	r24, 0x10	; 16
     b1e:	92 e0       	ldi	r25, 0x02	; 2
     b20:	9f 93       	push	r25
     b22:	8f 93       	push	r24
     b24:	0e 94 3d 05 	call	0xa7a	; 0xa7a <oled_printf>
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	0f 90       	pop	r0
volatile char *oled_command_adr = (char *) 0x1000;



static inline void oled_command_write(char command){
	*oled_command_adr = command; 
     b34:	c1 e8       	ldi	r28, 0x81	; 129


	while(1){
	
		
		if(button_left_read()){
     b36:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <button_left_read>
     b3a:	89 2b       	or	r24, r25
     b3c:	f1 f4       	brne	.+60     	; 0xb7a <oled_change_contrast+0x98>
			return;
		}
		else if(button_right_read()){
     b3e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <button_right_read>
     b42:	89 2b       	or	r24, r25
     b44:	69 f0       	breq	.+26     	; 0xb60 <oled_change_contrast+0x7e>
volatile char *oled_command_adr = (char *) 0x1000;



static inline void oled_command_write(char command){
	*oled_command_adr = command; 
     b46:	e0 91 08 01 	lds	r30, 0x0108
     b4a:	f0 91 09 01 	lds	r31, 0x0109
     b4e:	81 e8       	ldi	r24, 0x81	; 129
     b50:	80 83       	st	Z, r24
	*oled_command_adr = command;	
}


static inline void oled_data_write(char data){
	*oled_data_adr = data;
     b52:	e0 91 0a 01 	lds	r30, 0x010A
     b56:	f0 91 0b 01 	lds	r31, 0x010B
     b5a:	80 e5       	ldi	r24, 0x50	; 80
     b5c:	80 83       	st	Z, r24
     b5e:	0d c0       	rjmp	.+26     	; 0xb7a <oled_change_contrast+0x98>
			oled_command_write(0x81);    
			oled_data_write(0x50);
			return;
		}

		contrast = slider_left_read();
     b60:	0e 94 c3 02 	call	0x586	; 0x586 <slider_left_read>
volatile char *oled_command_adr = (char *) 0x1000;



static inline void oled_command_write(char command){
	*oled_command_adr = command; 
     b64:	e0 91 08 01 	lds	r30, 0x0108
     b68:	f0 91 09 01 	lds	r31, 0x0109
     b6c:	c0 83       	st	Z, r28
	*oled_command_adr = command;	
}


static inline void oled_data_write(char data){
	*oled_data_adr = data;
     b6e:	e0 91 0a 01 	lds	r30, 0x010A
     b72:	f0 91 0b 01 	lds	r31, 0x010B
     b76:	80 83       	st	Z, r24
     b78:	de cf       	rjmp	.-68     	; 0xb36 <oled_change_contrast+0x54>

		oled_command_write(0x81);    
		oled_data_write(contrast);

	}
}
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <spi_init>:
#include "SPI.h"
#include <avr/io.h>

void spi_init(){
			//SI out		SS out		SCK out
	DDRB |= ( 1 << PB5) | (1 << PB4) | (1 << PB7);
     b7e:	87 b3       	in	r24, 0x17	; 23
     b80:	80 6b       	ori	r24, 0xB0	; 176
     b82:	87 bb       	out	0x17, r24	; 23
			//SO in
	DDRB &= ~(1 << PB6);
     b84:	be 98       	cbi	0x17, 6	; 23
	
	//								 frequency / 16
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     b86:	81 e5       	ldi	r24, 0x51	; 81
     b88:	8d b9       	out	0x0d, r24	; 13
     b8a:	08 95       	ret

00000b8c <spi_write>:

//both read and write
int spi_write(char data){
	//SPDR = data;
	//while(!(SPSR & (1<<SPIF)));
	SPDR = data;
     b8c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     b8e:	77 9b       	sbis	0x0e, 7	; 14
     b90:	fe cf       	rjmp	.-4      	; 0xb8e <spi_write+0x2>
	return SPDR;
     b92:	8f b1       	in	r24, 0x0f	; 15
}
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	08 95       	ret

00000b98 <uart_Transmit>:
}

void uart_Transmit( unsigned char data ){
	
	//Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     b98:	5d 9b       	sbis	0x0b, 5	; 11
     b9a:	fe cf       	rjmp	.-4      	; 0xb98 <uart_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;
     b9c:	8c b9       	out	0x0c, r24	; 12
     b9e:	08 95       	ret

00000ba0 <uart_Receive>:

unsigned char uart_Receive(void){
	
	//Wait for data to be received
	
	while( !(UCSR0A & (1<<RXC0)) );
     ba0:	5f 9b       	sbis	0x0b, 7	; 11
     ba2:	fe cf       	rjmp	.-4      	; 0xba0 <uart_Receive>
	
	//Get and return received data from buffer
	
	return UDR0;
     ba4:	8c b1       	in	r24, 0x0c	; 12
}
     ba6:	08 95       	ret

00000ba8 <uart_Init>:
#include "uart.h"

void uart_Init(unsigned int ubrr){
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     ba8:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     baa:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN1)|(1<<TXEN1);
     bac:	88 e1       	ldi	r24, 0x18	; 24
     bae:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8data, 1stop bit
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
     bb0:	86 e8       	ldi	r24, 0x86	; 134
     bb2:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uart_Transmit, uart_Receive);
     bb4:	60 ed       	ldi	r22, 0xD0	; 208
     bb6:	75 e0       	ldi	r23, 0x05	; 5
     bb8:	8c ec       	ldi	r24, 0xCC	; 204
     bba:	95 e0       	ldi	r25, 0x05	; 5
     bbc:	0e 94 08 07 	call	0xe10	; 0xe10 <fdevopen>
     bc0:	08 95       	ret

00000bc2 <malloc>:
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	91 05       	cpc	r25, r1
     bca:	10 f4       	brcc	.+4      	; 0xbd0 <malloc+0xe>
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	e0 91 22 02 	lds	r30, 0x0222
     bd4:	f0 91 23 02 	lds	r31, 0x0223
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	a0 e0       	ldi	r26, 0x00	; 0
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	30 97       	sbiw	r30, 0x00	; 0
     be2:	39 f1       	breq	.+78     	; 0xc32 <malloc+0x70>
     be4:	40 81       	ld	r20, Z
     be6:	51 81       	ldd	r21, Z+1	; 0x01
     be8:	48 17       	cp	r20, r24
     bea:	59 07       	cpc	r21, r25
     bec:	b8 f0       	brcs	.+46     	; 0xc1c <malloc+0x5a>
     bee:	48 17       	cp	r20, r24
     bf0:	59 07       	cpc	r21, r25
     bf2:	71 f4       	brne	.+28     	; 0xc10 <malloc+0x4e>
     bf4:	82 81       	ldd	r24, Z+2	; 0x02
     bf6:	93 81       	ldd	r25, Z+3	; 0x03
     bf8:	10 97       	sbiw	r26, 0x00	; 0
     bfa:	29 f0       	breq	.+10     	; 0xc06 <malloc+0x44>
     bfc:	13 96       	adiw	r26, 0x03	; 3
     bfe:	9c 93       	st	X, r25
     c00:	8e 93       	st	-X, r24
     c02:	12 97       	sbiw	r26, 0x02	; 2
     c04:	2c c0       	rjmp	.+88     	; 0xc5e <malloc+0x9c>
     c06:	90 93 23 02 	sts	0x0223, r25
     c0a:	80 93 22 02 	sts	0x0222, r24
     c0e:	27 c0       	rjmp	.+78     	; 0xc5e <malloc+0x9c>
     c10:	21 15       	cp	r18, r1
     c12:	31 05       	cpc	r19, r1
     c14:	31 f0       	breq	.+12     	; 0xc22 <malloc+0x60>
     c16:	42 17       	cp	r20, r18
     c18:	53 07       	cpc	r21, r19
     c1a:	18 f0       	brcs	.+6      	; 0xc22 <malloc+0x60>
     c1c:	a9 01       	movw	r20, r18
     c1e:	db 01       	movw	r26, r22
     c20:	01 c0       	rjmp	.+2      	; 0xc24 <malloc+0x62>
     c22:	ef 01       	movw	r28, r30
     c24:	9a 01       	movw	r18, r20
     c26:	bd 01       	movw	r22, r26
     c28:	df 01       	movw	r26, r30
     c2a:	02 80       	ldd	r0, Z+2	; 0x02
     c2c:	f3 81       	ldd	r31, Z+3	; 0x03
     c2e:	e0 2d       	mov	r30, r0
     c30:	d7 cf       	rjmp	.-82     	; 0xbe0 <malloc+0x1e>
     c32:	21 15       	cp	r18, r1
     c34:	31 05       	cpc	r19, r1
     c36:	f9 f0       	breq	.+62     	; 0xc76 <malloc+0xb4>
     c38:	28 1b       	sub	r18, r24
     c3a:	39 0b       	sbc	r19, r25
     c3c:	24 30       	cpi	r18, 0x04	; 4
     c3e:	31 05       	cpc	r19, r1
     c40:	80 f4       	brcc	.+32     	; 0xc62 <malloc+0xa0>
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	9b 81       	ldd	r25, Y+3	; 0x03
     c46:	61 15       	cp	r22, r1
     c48:	71 05       	cpc	r23, r1
     c4a:	21 f0       	breq	.+8      	; 0xc54 <malloc+0x92>
     c4c:	fb 01       	movw	r30, r22
     c4e:	93 83       	std	Z+3, r25	; 0x03
     c50:	82 83       	std	Z+2, r24	; 0x02
     c52:	04 c0       	rjmp	.+8      	; 0xc5c <malloc+0x9a>
     c54:	90 93 23 02 	sts	0x0223, r25
     c58:	80 93 22 02 	sts	0x0222, r24
     c5c:	fe 01       	movw	r30, r28
     c5e:	32 96       	adiw	r30, 0x02	; 2
     c60:	44 c0       	rjmp	.+136    	; 0xcea <malloc+0x128>
     c62:	fe 01       	movw	r30, r28
     c64:	e2 0f       	add	r30, r18
     c66:	f3 1f       	adc	r31, r19
     c68:	81 93       	st	Z+, r24
     c6a:	91 93       	st	Z+, r25
     c6c:	22 50       	subi	r18, 0x02	; 2
     c6e:	31 09       	sbc	r19, r1
     c70:	39 83       	std	Y+1, r19	; 0x01
     c72:	28 83       	st	Y, r18
     c74:	3a c0       	rjmp	.+116    	; 0xcea <malloc+0x128>
     c76:	20 91 20 02 	lds	r18, 0x0220
     c7a:	30 91 21 02 	lds	r19, 0x0221
     c7e:	23 2b       	or	r18, r19
     c80:	41 f4       	brne	.+16     	; 0xc92 <malloc+0xd0>
     c82:	20 91 02 01 	lds	r18, 0x0102
     c86:	30 91 03 01 	lds	r19, 0x0103
     c8a:	30 93 21 02 	sts	0x0221, r19
     c8e:	20 93 20 02 	sts	0x0220, r18
     c92:	20 91 00 01 	lds	r18, 0x0100
     c96:	30 91 01 01 	lds	r19, 0x0101
     c9a:	21 15       	cp	r18, r1
     c9c:	31 05       	cpc	r19, r1
     c9e:	41 f4       	brne	.+16     	; 0xcb0 <malloc+0xee>
     ca0:	2d b7       	in	r18, 0x3d	; 61
     ca2:	3e b7       	in	r19, 0x3e	; 62
     ca4:	40 91 04 01 	lds	r20, 0x0104
     ca8:	50 91 05 01 	lds	r21, 0x0105
     cac:	24 1b       	sub	r18, r20
     cae:	35 0b       	sbc	r19, r21
     cb0:	e0 91 20 02 	lds	r30, 0x0220
     cb4:	f0 91 21 02 	lds	r31, 0x0221
     cb8:	e2 17       	cp	r30, r18
     cba:	f3 07       	cpc	r31, r19
     cbc:	a0 f4       	brcc	.+40     	; 0xce6 <malloc+0x124>
     cbe:	2e 1b       	sub	r18, r30
     cc0:	3f 0b       	sbc	r19, r31
     cc2:	28 17       	cp	r18, r24
     cc4:	39 07       	cpc	r19, r25
     cc6:	78 f0       	brcs	.+30     	; 0xce6 <malloc+0x124>
     cc8:	ac 01       	movw	r20, r24
     cca:	4e 5f       	subi	r20, 0xFE	; 254
     ccc:	5f 4f       	sbci	r21, 0xFF	; 255
     cce:	24 17       	cp	r18, r20
     cd0:	35 07       	cpc	r19, r21
     cd2:	48 f0       	brcs	.+18     	; 0xce6 <malloc+0x124>
     cd4:	4e 0f       	add	r20, r30
     cd6:	5f 1f       	adc	r21, r31
     cd8:	50 93 21 02 	sts	0x0221, r21
     cdc:	40 93 20 02 	sts	0x0220, r20
     ce0:	81 93       	st	Z+, r24
     ce2:	91 93       	st	Z+, r25
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <malloc+0x128>
     ce6:	e0 e0       	ldi	r30, 0x00	; 0
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	cf 01       	movw	r24, r30
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	08 95       	ret

00000cf2 <free>:
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	09 f4       	brne	.+2      	; 0xcfc <free+0xa>
     cfa:	87 c0       	rjmp	.+270    	; 0xe0a <free+0x118>
     cfc:	fc 01       	movw	r30, r24
     cfe:	32 97       	sbiw	r30, 0x02	; 2
     d00:	13 82       	std	Z+3, r1	; 0x03
     d02:	12 82       	std	Z+2, r1	; 0x02
     d04:	c0 91 22 02 	lds	r28, 0x0222
     d08:	d0 91 23 02 	lds	r29, 0x0223
     d0c:	20 97       	sbiw	r28, 0x00	; 0
     d0e:	81 f4       	brne	.+32     	; 0xd30 <free+0x3e>
     d10:	20 81       	ld	r18, Z
     d12:	31 81       	ldd	r19, Z+1	; 0x01
     d14:	28 0f       	add	r18, r24
     d16:	39 1f       	adc	r19, r25
     d18:	80 91 20 02 	lds	r24, 0x0220
     d1c:	90 91 21 02 	lds	r25, 0x0221
     d20:	82 17       	cp	r24, r18
     d22:	93 07       	cpc	r25, r19
     d24:	79 f5       	brne	.+94     	; 0xd84 <free+0x92>
     d26:	f0 93 21 02 	sts	0x0221, r31
     d2a:	e0 93 20 02 	sts	0x0220, r30
     d2e:	6d c0       	rjmp	.+218    	; 0xe0a <free+0x118>
     d30:	de 01       	movw	r26, r28
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	ae 17       	cp	r26, r30
     d38:	bf 07       	cpc	r27, r31
     d3a:	50 f4       	brcc	.+20     	; 0xd50 <free+0x5e>
     d3c:	12 96       	adiw	r26, 0x02	; 2
     d3e:	4d 91       	ld	r20, X+
     d40:	5c 91       	ld	r21, X
     d42:	13 97       	sbiw	r26, 0x03	; 3
     d44:	9d 01       	movw	r18, r26
     d46:	41 15       	cp	r20, r1
     d48:	51 05       	cpc	r21, r1
     d4a:	09 f1       	breq	.+66     	; 0xd8e <free+0x9c>
     d4c:	da 01       	movw	r26, r20
     d4e:	f3 cf       	rjmp	.-26     	; 0xd36 <free+0x44>
     d50:	b3 83       	std	Z+3, r27	; 0x03
     d52:	a2 83       	std	Z+2, r26	; 0x02
     d54:	40 81       	ld	r20, Z
     d56:	51 81       	ldd	r21, Z+1	; 0x01
     d58:	84 0f       	add	r24, r20
     d5a:	95 1f       	adc	r25, r21
     d5c:	8a 17       	cp	r24, r26
     d5e:	9b 07       	cpc	r25, r27
     d60:	71 f4       	brne	.+28     	; 0xd7e <free+0x8c>
     d62:	8d 91       	ld	r24, X+
     d64:	9c 91       	ld	r25, X
     d66:	11 97       	sbiw	r26, 0x01	; 1
     d68:	84 0f       	add	r24, r20
     d6a:	95 1f       	adc	r25, r21
     d6c:	02 96       	adiw	r24, 0x02	; 2
     d6e:	91 83       	std	Z+1, r25	; 0x01
     d70:	80 83       	st	Z, r24
     d72:	12 96       	adiw	r26, 0x02	; 2
     d74:	8d 91       	ld	r24, X+
     d76:	9c 91       	ld	r25, X
     d78:	13 97       	sbiw	r26, 0x03	; 3
     d7a:	93 83       	std	Z+3, r25	; 0x03
     d7c:	82 83       	std	Z+2, r24	; 0x02
     d7e:	21 15       	cp	r18, r1
     d80:	31 05       	cpc	r19, r1
     d82:	29 f4       	brne	.+10     	; 0xd8e <free+0x9c>
     d84:	f0 93 23 02 	sts	0x0223, r31
     d88:	e0 93 22 02 	sts	0x0222, r30
     d8c:	3e c0       	rjmp	.+124    	; 0xe0a <free+0x118>
     d8e:	d9 01       	movw	r26, r18
     d90:	13 96       	adiw	r26, 0x03	; 3
     d92:	fc 93       	st	X, r31
     d94:	ee 93       	st	-X, r30
     d96:	12 97       	sbiw	r26, 0x02	; 2
     d98:	4d 91       	ld	r20, X+
     d9a:	5d 91       	ld	r21, X+
     d9c:	a4 0f       	add	r26, r20
     d9e:	b5 1f       	adc	r27, r21
     da0:	ea 17       	cp	r30, r26
     da2:	fb 07       	cpc	r31, r27
     da4:	79 f4       	brne	.+30     	; 0xdc4 <free+0xd2>
     da6:	80 81       	ld	r24, Z
     da8:	91 81       	ldd	r25, Z+1	; 0x01
     daa:	84 0f       	add	r24, r20
     dac:	95 1f       	adc	r25, r21
     dae:	02 96       	adiw	r24, 0x02	; 2
     db0:	d9 01       	movw	r26, r18
     db2:	11 96       	adiw	r26, 0x01	; 1
     db4:	9c 93       	st	X, r25
     db6:	8e 93       	st	-X, r24
     db8:	82 81       	ldd	r24, Z+2	; 0x02
     dba:	93 81       	ldd	r25, Z+3	; 0x03
     dbc:	13 96       	adiw	r26, 0x03	; 3
     dbe:	9c 93       	st	X, r25
     dc0:	8e 93       	st	-X, r24
     dc2:	12 97       	sbiw	r26, 0x02	; 2
     dc4:	e0 e0       	ldi	r30, 0x00	; 0
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	9b 81       	ldd	r25, Y+3	; 0x03
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	19 f0       	breq	.+6      	; 0xdd6 <free+0xe4>
     dd0:	fe 01       	movw	r30, r28
     dd2:	ec 01       	movw	r28, r24
     dd4:	f9 cf       	rjmp	.-14     	; 0xdc8 <free+0xd6>
     dd6:	ce 01       	movw	r24, r28
     dd8:	02 96       	adiw	r24, 0x02	; 2
     dda:	28 81       	ld	r18, Y
     ddc:	39 81       	ldd	r19, Y+1	; 0x01
     dde:	82 0f       	add	r24, r18
     de0:	93 1f       	adc	r25, r19
     de2:	20 91 20 02 	lds	r18, 0x0220
     de6:	30 91 21 02 	lds	r19, 0x0221
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	69 f4       	brne	.+26     	; 0xe0a <free+0x118>
     df0:	30 97       	sbiw	r30, 0x00	; 0
     df2:	29 f4       	brne	.+10     	; 0xdfe <free+0x10c>
     df4:	10 92 23 02 	sts	0x0223, r1
     df8:	10 92 22 02 	sts	0x0222, r1
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <free+0x110>
     dfe:	13 82       	std	Z+3, r1	; 0x03
     e00:	12 82       	std	Z+2, r1	; 0x02
     e02:	d0 93 21 02 	sts	0x0221, r29
     e06:	c0 93 20 02 	sts	0x0220, r28
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	08 95       	ret

00000e10 <fdevopen>:
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	ec 01       	movw	r28, r24
     e1a:	8b 01       	movw	r16, r22
     e1c:	00 97       	sbiw	r24, 0x00	; 0
     e1e:	31 f4       	brne	.+12     	; 0xe2c <fdevopen+0x1c>
     e20:	61 15       	cp	r22, r1
     e22:	71 05       	cpc	r23, r1
     e24:	19 f4       	brne	.+6      	; 0xe2c <fdevopen+0x1c>
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	38 c0       	rjmp	.+112    	; 0xe9c <fdevopen+0x8c>
     e2c:	6e e0       	ldi	r22, 0x0E	; 14
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 66 09 	call	0x12cc	; 0x12cc <calloc>
     e38:	fc 01       	movw	r30, r24
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	a1 f3       	breq	.-24     	; 0xe26 <fdevopen+0x16>
     e3e:	80 e8       	ldi	r24, 0x80	; 128
     e40:	83 83       	std	Z+3, r24	; 0x03
     e42:	01 15       	cp	r16, r1
     e44:	11 05       	cpc	r17, r1
     e46:	71 f0       	breq	.+28     	; 0xe64 <fdevopen+0x54>
     e48:	13 87       	std	Z+11, r17	; 0x0b
     e4a:	02 87       	std	Z+10, r16	; 0x0a
     e4c:	81 e8       	ldi	r24, 0x81	; 129
     e4e:	83 83       	std	Z+3, r24	; 0x03
     e50:	80 91 24 02 	lds	r24, 0x0224
     e54:	90 91 25 02 	lds	r25, 0x0225
     e58:	89 2b       	or	r24, r25
     e5a:	21 f4       	brne	.+8      	; 0xe64 <fdevopen+0x54>
     e5c:	f0 93 25 02 	sts	0x0225, r31
     e60:	e0 93 24 02 	sts	0x0224, r30
     e64:	20 97       	sbiw	r28, 0x00	; 0
     e66:	c9 f0       	breq	.+50     	; 0xe9a <fdevopen+0x8a>
     e68:	d1 87       	std	Z+9, r29	; 0x09
     e6a:	c0 87       	std	Z+8, r28	; 0x08
     e6c:	83 81       	ldd	r24, Z+3	; 0x03
     e6e:	82 60       	ori	r24, 0x02	; 2
     e70:	83 83       	std	Z+3, r24	; 0x03
     e72:	80 91 26 02 	lds	r24, 0x0226
     e76:	90 91 27 02 	lds	r25, 0x0227
     e7a:	89 2b       	or	r24, r25
     e7c:	71 f4       	brne	.+28     	; 0xe9a <fdevopen+0x8a>
     e7e:	f0 93 27 02 	sts	0x0227, r31
     e82:	e0 93 26 02 	sts	0x0226, r30
     e86:	80 91 28 02 	lds	r24, 0x0228
     e8a:	90 91 29 02 	lds	r25, 0x0229
     e8e:	89 2b       	or	r24, r25
     e90:	21 f4       	brne	.+8      	; 0xe9a <fdevopen+0x8a>
     e92:	f0 93 29 02 	sts	0x0229, r31
     e96:	e0 93 28 02 	sts	0x0228, r30
     e9a:	cf 01       	movw	r24, r30
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	08 95       	ret

00000ea6 <printf>:
     ea6:	a0 e0       	ldi	r26, 0x00	; 0
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e9 e5       	ldi	r30, 0x59	; 89
     eac:	f7 e0       	ldi	r31, 0x07	; 7
     eae:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__prologue_saves__+0x20>
     eb2:	fe 01       	movw	r30, r28
     eb4:	35 96       	adiw	r30, 0x05	; 5
     eb6:	61 91       	ld	r22, Z+
     eb8:	71 91       	ld	r23, Z+
     eba:	af 01       	movw	r20, r30
     ebc:	80 91 26 02 	lds	r24, 0x0226
     ec0:	90 91 27 02 	lds	r25, 0x0227
     ec4:	0e 94 94 07 	call	0xf28	; 0xf28 <vfprintf>
     ec8:	e2 e0       	ldi	r30, 0x02	; 2
     eca:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__epilogue_restores__+0x20>

00000ece <puts>:
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	e0 91 26 02 	lds	r30, 0x0226
     eda:	f0 91 27 02 	lds	r31, 0x0227
     ede:	23 81       	ldd	r18, Z+3	; 0x03
     ee0:	21 ff       	sbrs	r18, 1
     ee2:	1b c0       	rjmp	.+54     	; 0xf1a <puts+0x4c>
     ee4:	ec 01       	movw	r28, r24
     ee6:	00 e0       	ldi	r16, 0x00	; 0
     ee8:	10 e0       	ldi	r17, 0x00	; 0
     eea:	89 91       	ld	r24, Y+
     eec:	60 91 26 02 	lds	r22, 0x0226
     ef0:	70 91 27 02 	lds	r23, 0x0227
     ef4:	db 01       	movw	r26, r22
     ef6:	18 96       	adiw	r26, 0x08	; 8
     ef8:	ed 91       	ld	r30, X+
     efa:	fc 91       	ld	r31, X
     efc:	19 97       	sbiw	r26, 0x09	; 9
     efe:	88 23       	and	r24, r24
     f00:	31 f0       	breq	.+12     	; 0xf0e <puts+0x40>
     f02:	09 95       	icall
     f04:	89 2b       	or	r24, r25
     f06:	89 f3       	breq	.-30     	; 0xeea <puts+0x1c>
     f08:	0f ef       	ldi	r16, 0xFF	; 255
     f0a:	1f ef       	ldi	r17, 0xFF	; 255
     f0c:	ee cf       	rjmp	.-36     	; 0xeea <puts+0x1c>
     f0e:	8a e0       	ldi	r24, 0x0A	; 10
     f10:	09 95       	icall
     f12:	89 2b       	or	r24, r25
     f14:	11 f4       	brne	.+4      	; 0xf1a <puts+0x4c>
     f16:	c8 01       	movw	r24, r16
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <puts+0x50>
     f1a:	8f ef       	ldi	r24, 0xFF	; 255
     f1c:	9f ef       	ldi	r25, 0xFF	; 255
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	08 95       	ret

00000f28 <vfprintf>:
     f28:	ac e0       	ldi	r26, 0x0C	; 12
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	ea e9       	ldi	r30, 0x9A	; 154
     f2e:	f7 e0       	ldi	r31, 0x07	; 7
     f30:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__prologue_saves__>
     f34:	7c 01       	movw	r14, r24
     f36:	6b 01       	movw	r12, r22
     f38:	8a 01       	movw	r16, r20
     f3a:	fc 01       	movw	r30, r24
     f3c:	17 82       	std	Z+7, r1	; 0x07
     f3e:	16 82       	std	Z+6, r1	; 0x06
     f40:	83 81       	ldd	r24, Z+3	; 0x03
     f42:	81 ff       	sbrs	r24, 1
     f44:	bd c1       	rjmp	.+890    	; 0x12c0 <vfprintf+0x398>
     f46:	ce 01       	movw	r24, r28
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	4c 01       	movw	r8, r24
     f4c:	f7 01       	movw	r30, r14
     f4e:	93 81       	ldd	r25, Z+3	; 0x03
     f50:	f6 01       	movw	r30, r12
     f52:	93 fd       	sbrc	r25, 3
     f54:	85 91       	lpm	r24, Z+
     f56:	93 ff       	sbrs	r25, 3
     f58:	81 91       	ld	r24, Z+
     f5a:	6f 01       	movw	r12, r30
     f5c:	88 23       	and	r24, r24
     f5e:	09 f4       	brne	.+2      	; 0xf62 <vfprintf+0x3a>
     f60:	ab c1       	rjmp	.+854    	; 0x12b8 <vfprintf+0x390>
     f62:	85 32       	cpi	r24, 0x25	; 37
     f64:	39 f4       	brne	.+14     	; 0xf74 <vfprintf+0x4c>
     f66:	93 fd       	sbrc	r25, 3
     f68:	85 91       	lpm	r24, Z+
     f6a:	93 ff       	sbrs	r25, 3
     f6c:	81 91       	ld	r24, Z+
     f6e:	6f 01       	movw	r12, r30
     f70:	85 32       	cpi	r24, 0x25	; 37
     f72:	29 f4       	brne	.+10     	; 0xf7e <vfprintf+0x56>
     f74:	b7 01       	movw	r22, r14
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 9f 09 	call	0x133e	; 0x133e <fputc>
     f7c:	e7 cf       	rjmp	.-50     	; 0xf4c <vfprintf+0x24>
     f7e:	51 2c       	mov	r5, r1
     f80:	31 2c       	mov	r3, r1
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	20 32       	cpi	r18, 0x20	; 32
     f86:	a0 f4       	brcc	.+40     	; 0xfb0 <vfprintf+0x88>
     f88:	8b 32       	cpi	r24, 0x2B	; 43
     f8a:	69 f0       	breq	.+26     	; 0xfa6 <vfprintf+0x7e>
     f8c:	30 f4       	brcc	.+12     	; 0xf9a <vfprintf+0x72>
     f8e:	80 32       	cpi	r24, 0x20	; 32
     f90:	59 f0       	breq	.+22     	; 0xfa8 <vfprintf+0x80>
     f92:	83 32       	cpi	r24, 0x23	; 35
     f94:	69 f4       	brne	.+26     	; 0xfb0 <vfprintf+0x88>
     f96:	20 61       	ori	r18, 0x10	; 16
     f98:	2c c0       	rjmp	.+88     	; 0xff2 <vfprintf+0xca>
     f9a:	8d 32       	cpi	r24, 0x2D	; 45
     f9c:	39 f0       	breq	.+14     	; 0xfac <vfprintf+0x84>
     f9e:	80 33       	cpi	r24, 0x30	; 48
     fa0:	39 f4       	brne	.+14     	; 0xfb0 <vfprintf+0x88>
     fa2:	21 60       	ori	r18, 0x01	; 1
     fa4:	26 c0       	rjmp	.+76     	; 0xff2 <vfprintf+0xca>
     fa6:	22 60       	ori	r18, 0x02	; 2
     fa8:	24 60       	ori	r18, 0x04	; 4
     faa:	23 c0       	rjmp	.+70     	; 0xff2 <vfprintf+0xca>
     fac:	28 60       	ori	r18, 0x08	; 8
     fae:	21 c0       	rjmp	.+66     	; 0xff2 <vfprintf+0xca>
     fb0:	27 fd       	sbrc	r18, 7
     fb2:	27 c0       	rjmp	.+78     	; 0x1002 <vfprintf+0xda>
     fb4:	30 ed       	ldi	r19, 0xD0	; 208
     fb6:	38 0f       	add	r19, r24
     fb8:	3a 30       	cpi	r19, 0x0A	; 10
     fba:	78 f4       	brcc	.+30     	; 0xfda <vfprintf+0xb2>
     fbc:	26 ff       	sbrs	r18, 6
     fbe:	06 c0       	rjmp	.+12     	; 0xfcc <vfprintf+0xa4>
     fc0:	fa e0       	ldi	r31, 0x0A	; 10
     fc2:	5f 9e       	mul	r5, r31
     fc4:	30 0d       	add	r19, r0
     fc6:	11 24       	eor	r1, r1
     fc8:	53 2e       	mov	r5, r19
     fca:	13 c0       	rjmp	.+38     	; 0xff2 <vfprintf+0xca>
     fcc:	8a e0       	ldi	r24, 0x0A	; 10
     fce:	38 9e       	mul	r3, r24
     fd0:	30 0d       	add	r19, r0
     fd2:	11 24       	eor	r1, r1
     fd4:	33 2e       	mov	r3, r19
     fd6:	20 62       	ori	r18, 0x20	; 32
     fd8:	0c c0       	rjmp	.+24     	; 0xff2 <vfprintf+0xca>
     fda:	8e 32       	cpi	r24, 0x2E	; 46
     fdc:	21 f4       	brne	.+8      	; 0xfe6 <vfprintf+0xbe>
     fde:	26 fd       	sbrc	r18, 6
     fe0:	6b c1       	rjmp	.+726    	; 0x12b8 <vfprintf+0x390>
     fe2:	20 64       	ori	r18, 0x40	; 64
     fe4:	06 c0       	rjmp	.+12     	; 0xff2 <vfprintf+0xca>
     fe6:	8c 36       	cpi	r24, 0x6C	; 108
     fe8:	11 f4       	brne	.+4      	; 0xfee <vfprintf+0xc6>
     fea:	20 68       	ori	r18, 0x80	; 128
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <vfprintf+0xca>
     fee:	88 36       	cpi	r24, 0x68	; 104
     ff0:	41 f4       	brne	.+16     	; 0x1002 <vfprintf+0xda>
     ff2:	f6 01       	movw	r30, r12
     ff4:	93 fd       	sbrc	r25, 3
     ff6:	85 91       	lpm	r24, Z+
     ff8:	93 ff       	sbrs	r25, 3
     ffa:	81 91       	ld	r24, Z+
     ffc:	6f 01       	movw	r12, r30
     ffe:	81 11       	cpse	r24, r1
    1000:	c1 cf       	rjmp	.-126    	; 0xf84 <vfprintf+0x5c>
    1002:	98 2f       	mov	r25, r24
    1004:	9f 7d       	andi	r25, 0xDF	; 223
    1006:	95 54       	subi	r25, 0x45	; 69
    1008:	93 30       	cpi	r25, 0x03	; 3
    100a:	28 f4       	brcc	.+10     	; 0x1016 <vfprintf+0xee>
    100c:	0c 5f       	subi	r16, 0xFC	; 252
    100e:	1f 4f       	sbci	r17, 0xFF	; 255
    1010:	ff e3       	ldi	r31, 0x3F	; 63
    1012:	f9 83       	std	Y+1, r31	; 0x01
    1014:	0d c0       	rjmp	.+26     	; 0x1030 <vfprintf+0x108>
    1016:	83 36       	cpi	r24, 0x63	; 99
    1018:	31 f0       	breq	.+12     	; 0x1026 <vfprintf+0xfe>
    101a:	83 37       	cpi	r24, 0x73	; 115
    101c:	71 f0       	breq	.+28     	; 0x103a <vfprintf+0x112>
    101e:	83 35       	cpi	r24, 0x53	; 83
    1020:	09 f0       	breq	.+2      	; 0x1024 <vfprintf+0xfc>
    1022:	5b c0       	rjmp	.+182    	; 0x10da <vfprintf+0x1b2>
    1024:	22 c0       	rjmp	.+68     	; 0x106a <vfprintf+0x142>
    1026:	f8 01       	movw	r30, r16
    1028:	80 81       	ld	r24, Z
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	0e 5f       	subi	r16, 0xFE	; 254
    102e:	1f 4f       	sbci	r17, 0xFF	; 255
    1030:	44 24       	eor	r4, r4
    1032:	43 94       	inc	r4
    1034:	51 2c       	mov	r5, r1
    1036:	54 01       	movw	r10, r8
    1038:	15 c0       	rjmp	.+42     	; 0x1064 <vfprintf+0x13c>
    103a:	38 01       	movw	r6, r16
    103c:	f2 e0       	ldi	r31, 0x02	; 2
    103e:	6f 0e       	add	r6, r31
    1040:	71 1c       	adc	r7, r1
    1042:	f8 01       	movw	r30, r16
    1044:	a0 80       	ld	r10, Z
    1046:	b1 80       	ldd	r11, Z+1	; 0x01
    1048:	26 ff       	sbrs	r18, 6
    104a:	03 c0       	rjmp	.+6      	; 0x1052 <vfprintf+0x12a>
    104c:	65 2d       	mov	r22, r5
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <vfprintf+0x12e>
    1052:	6f ef       	ldi	r22, 0xFF	; 255
    1054:	7f ef       	ldi	r23, 0xFF	; 255
    1056:	c5 01       	movw	r24, r10
    1058:	2c 87       	std	Y+12, r18	; 0x0c
    105a:	0e 94 94 09 	call	0x1328	; 0x1328 <strnlen>
    105e:	2c 01       	movw	r4, r24
    1060:	83 01       	movw	r16, r6
    1062:	2c 85       	ldd	r18, Y+12	; 0x0c
    1064:	2f 77       	andi	r18, 0x7F	; 127
    1066:	22 2e       	mov	r2, r18
    1068:	17 c0       	rjmp	.+46     	; 0x1098 <vfprintf+0x170>
    106a:	38 01       	movw	r6, r16
    106c:	f2 e0       	ldi	r31, 0x02	; 2
    106e:	6f 0e       	add	r6, r31
    1070:	71 1c       	adc	r7, r1
    1072:	f8 01       	movw	r30, r16
    1074:	a0 80       	ld	r10, Z
    1076:	b1 80       	ldd	r11, Z+1	; 0x01
    1078:	26 ff       	sbrs	r18, 6
    107a:	03 c0       	rjmp	.+6      	; 0x1082 <vfprintf+0x15a>
    107c:	65 2d       	mov	r22, r5
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <vfprintf+0x15e>
    1082:	6f ef       	ldi	r22, 0xFF	; 255
    1084:	7f ef       	ldi	r23, 0xFF	; 255
    1086:	c5 01       	movw	r24, r10
    1088:	2c 87       	std	Y+12, r18	; 0x0c
    108a:	0e 94 82 09 	call	0x1304	; 0x1304 <strnlen_P>
    108e:	2c 01       	movw	r4, r24
    1090:	2c 85       	ldd	r18, Y+12	; 0x0c
    1092:	20 68       	ori	r18, 0x80	; 128
    1094:	22 2e       	mov	r2, r18
    1096:	83 01       	movw	r16, r6
    1098:	23 fc       	sbrc	r2, 3
    109a:	1b c0       	rjmp	.+54     	; 0x10d2 <vfprintf+0x1aa>
    109c:	83 2d       	mov	r24, r3
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	48 16       	cp	r4, r24
    10a2:	59 06       	cpc	r5, r25
    10a4:	b0 f4       	brcc	.+44     	; 0x10d2 <vfprintf+0x1aa>
    10a6:	b7 01       	movw	r22, r14
    10a8:	80 e2       	ldi	r24, 0x20	; 32
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 9f 09 	call	0x133e	; 0x133e <fputc>
    10b0:	3a 94       	dec	r3
    10b2:	f4 cf       	rjmp	.-24     	; 0x109c <vfprintf+0x174>
    10b4:	f5 01       	movw	r30, r10
    10b6:	27 fc       	sbrc	r2, 7
    10b8:	85 91       	lpm	r24, Z+
    10ba:	27 fe       	sbrs	r2, 7
    10bc:	81 91       	ld	r24, Z+
    10be:	5f 01       	movw	r10, r30
    10c0:	b7 01       	movw	r22, r14
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 9f 09 	call	0x133e	; 0x133e <fputc>
    10c8:	31 10       	cpse	r3, r1
    10ca:	3a 94       	dec	r3
    10cc:	f1 e0       	ldi	r31, 0x01	; 1
    10ce:	4f 1a       	sub	r4, r31
    10d0:	51 08       	sbc	r5, r1
    10d2:	41 14       	cp	r4, r1
    10d4:	51 04       	cpc	r5, r1
    10d6:	71 f7       	brne	.-36     	; 0x10b4 <vfprintf+0x18c>
    10d8:	e5 c0       	rjmp	.+458    	; 0x12a4 <vfprintf+0x37c>
    10da:	84 36       	cpi	r24, 0x64	; 100
    10dc:	11 f0       	breq	.+4      	; 0x10e2 <vfprintf+0x1ba>
    10de:	89 36       	cpi	r24, 0x69	; 105
    10e0:	39 f5       	brne	.+78     	; 0x1130 <vfprintf+0x208>
    10e2:	f8 01       	movw	r30, r16
    10e4:	27 ff       	sbrs	r18, 7
    10e6:	07 c0       	rjmp	.+14     	; 0x10f6 <vfprintf+0x1ce>
    10e8:	60 81       	ld	r22, Z
    10ea:	71 81       	ldd	r23, Z+1	; 0x01
    10ec:	82 81       	ldd	r24, Z+2	; 0x02
    10ee:	93 81       	ldd	r25, Z+3	; 0x03
    10f0:	0c 5f       	subi	r16, 0xFC	; 252
    10f2:	1f 4f       	sbci	r17, 0xFF	; 255
    10f4:	08 c0       	rjmp	.+16     	; 0x1106 <vfprintf+0x1de>
    10f6:	60 81       	ld	r22, Z
    10f8:	71 81       	ldd	r23, Z+1	; 0x01
    10fa:	88 27       	eor	r24, r24
    10fc:	77 fd       	sbrc	r23, 7
    10fe:	80 95       	com	r24
    1100:	98 2f       	mov	r25, r24
    1102:	0e 5f       	subi	r16, 0xFE	; 254
    1104:	1f 4f       	sbci	r17, 0xFF	; 255
    1106:	2f 76       	andi	r18, 0x6F	; 111
    1108:	b2 2e       	mov	r11, r18
    110a:	97 ff       	sbrs	r25, 7
    110c:	09 c0       	rjmp	.+18     	; 0x1120 <vfprintf+0x1f8>
    110e:	90 95       	com	r25
    1110:	80 95       	com	r24
    1112:	70 95       	com	r23
    1114:	61 95       	neg	r22
    1116:	7f 4f       	sbci	r23, 0xFF	; 255
    1118:	8f 4f       	sbci	r24, 0xFF	; 255
    111a:	9f 4f       	sbci	r25, 0xFF	; 255
    111c:	20 68       	ori	r18, 0x80	; 128
    111e:	b2 2e       	mov	r11, r18
    1120:	2a e0       	ldi	r18, 0x0A	; 10
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	a4 01       	movw	r20, r8
    1126:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__ultoa_invert>
    112a:	a8 2e       	mov	r10, r24
    112c:	a8 18       	sub	r10, r8
    112e:	44 c0       	rjmp	.+136    	; 0x11b8 <vfprintf+0x290>
    1130:	85 37       	cpi	r24, 0x75	; 117
    1132:	29 f4       	brne	.+10     	; 0x113e <vfprintf+0x216>
    1134:	2f 7e       	andi	r18, 0xEF	; 239
    1136:	b2 2e       	mov	r11, r18
    1138:	2a e0       	ldi	r18, 0x0A	; 10
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	25 c0       	rjmp	.+74     	; 0x1188 <vfprintf+0x260>
    113e:	f2 2f       	mov	r31, r18
    1140:	f9 7f       	andi	r31, 0xF9	; 249
    1142:	bf 2e       	mov	r11, r31
    1144:	8f 36       	cpi	r24, 0x6F	; 111
    1146:	c1 f0       	breq	.+48     	; 0x1178 <vfprintf+0x250>
    1148:	18 f4       	brcc	.+6      	; 0x1150 <vfprintf+0x228>
    114a:	88 35       	cpi	r24, 0x58	; 88
    114c:	79 f0       	breq	.+30     	; 0x116c <vfprintf+0x244>
    114e:	b4 c0       	rjmp	.+360    	; 0x12b8 <vfprintf+0x390>
    1150:	80 37       	cpi	r24, 0x70	; 112
    1152:	19 f0       	breq	.+6      	; 0x115a <vfprintf+0x232>
    1154:	88 37       	cpi	r24, 0x78	; 120
    1156:	21 f0       	breq	.+8      	; 0x1160 <vfprintf+0x238>
    1158:	af c0       	rjmp	.+350    	; 0x12b8 <vfprintf+0x390>
    115a:	2f 2f       	mov	r18, r31
    115c:	20 61       	ori	r18, 0x10	; 16
    115e:	b2 2e       	mov	r11, r18
    1160:	b4 fe       	sbrs	r11, 4
    1162:	0d c0       	rjmp	.+26     	; 0x117e <vfprintf+0x256>
    1164:	8b 2d       	mov	r24, r11
    1166:	84 60       	ori	r24, 0x04	; 4
    1168:	b8 2e       	mov	r11, r24
    116a:	09 c0       	rjmp	.+18     	; 0x117e <vfprintf+0x256>
    116c:	24 ff       	sbrs	r18, 4
    116e:	0a c0       	rjmp	.+20     	; 0x1184 <vfprintf+0x25c>
    1170:	9f 2f       	mov	r25, r31
    1172:	96 60       	ori	r25, 0x06	; 6
    1174:	b9 2e       	mov	r11, r25
    1176:	06 c0       	rjmp	.+12     	; 0x1184 <vfprintf+0x25c>
    1178:	28 e0       	ldi	r18, 0x08	; 8
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	05 c0       	rjmp	.+10     	; 0x1188 <vfprintf+0x260>
    117e:	20 e1       	ldi	r18, 0x10	; 16
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <vfprintf+0x260>
    1184:	20 e1       	ldi	r18, 0x10	; 16
    1186:	32 e0       	ldi	r19, 0x02	; 2
    1188:	f8 01       	movw	r30, r16
    118a:	b7 fe       	sbrs	r11, 7
    118c:	07 c0       	rjmp	.+14     	; 0x119c <vfprintf+0x274>
    118e:	60 81       	ld	r22, Z
    1190:	71 81       	ldd	r23, Z+1	; 0x01
    1192:	82 81       	ldd	r24, Z+2	; 0x02
    1194:	93 81       	ldd	r25, Z+3	; 0x03
    1196:	0c 5f       	subi	r16, 0xFC	; 252
    1198:	1f 4f       	sbci	r17, 0xFF	; 255
    119a:	06 c0       	rjmp	.+12     	; 0x11a8 <vfprintf+0x280>
    119c:	60 81       	ld	r22, Z
    119e:	71 81       	ldd	r23, Z+1	; 0x01
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 5f       	subi	r16, 0xFE	; 254
    11a6:	1f 4f       	sbci	r17, 0xFF	; 255
    11a8:	a4 01       	movw	r20, r8
    11aa:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__ultoa_invert>
    11ae:	a8 2e       	mov	r10, r24
    11b0:	a8 18       	sub	r10, r8
    11b2:	fb 2d       	mov	r31, r11
    11b4:	ff 77       	andi	r31, 0x7F	; 127
    11b6:	bf 2e       	mov	r11, r31
    11b8:	b6 fe       	sbrs	r11, 6
    11ba:	0b c0       	rjmp	.+22     	; 0x11d2 <vfprintf+0x2aa>
    11bc:	2b 2d       	mov	r18, r11
    11be:	2e 7f       	andi	r18, 0xFE	; 254
    11c0:	a5 14       	cp	r10, r5
    11c2:	50 f4       	brcc	.+20     	; 0x11d8 <vfprintf+0x2b0>
    11c4:	b4 fe       	sbrs	r11, 4
    11c6:	0a c0       	rjmp	.+20     	; 0x11dc <vfprintf+0x2b4>
    11c8:	b2 fc       	sbrc	r11, 2
    11ca:	08 c0       	rjmp	.+16     	; 0x11dc <vfprintf+0x2b4>
    11cc:	2b 2d       	mov	r18, r11
    11ce:	2e 7e       	andi	r18, 0xEE	; 238
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <vfprintf+0x2b4>
    11d2:	7a 2c       	mov	r7, r10
    11d4:	2b 2d       	mov	r18, r11
    11d6:	03 c0       	rjmp	.+6      	; 0x11de <vfprintf+0x2b6>
    11d8:	7a 2c       	mov	r7, r10
    11da:	01 c0       	rjmp	.+2      	; 0x11de <vfprintf+0x2b6>
    11dc:	75 2c       	mov	r7, r5
    11de:	24 ff       	sbrs	r18, 4
    11e0:	0d c0       	rjmp	.+26     	; 0x11fc <vfprintf+0x2d4>
    11e2:	fe 01       	movw	r30, r28
    11e4:	ea 0d       	add	r30, r10
    11e6:	f1 1d       	adc	r31, r1
    11e8:	80 81       	ld	r24, Z
    11ea:	80 33       	cpi	r24, 0x30	; 48
    11ec:	11 f4       	brne	.+4      	; 0x11f2 <vfprintf+0x2ca>
    11ee:	29 7e       	andi	r18, 0xE9	; 233
    11f0:	09 c0       	rjmp	.+18     	; 0x1204 <vfprintf+0x2dc>
    11f2:	22 ff       	sbrs	r18, 2
    11f4:	06 c0       	rjmp	.+12     	; 0x1202 <vfprintf+0x2da>
    11f6:	73 94       	inc	r7
    11f8:	73 94       	inc	r7
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <vfprintf+0x2dc>
    11fc:	82 2f       	mov	r24, r18
    11fe:	86 78       	andi	r24, 0x86	; 134
    1200:	09 f0       	breq	.+2      	; 0x1204 <vfprintf+0x2dc>
    1202:	73 94       	inc	r7
    1204:	23 fd       	sbrc	r18, 3
    1206:	13 c0       	rjmp	.+38     	; 0x122e <vfprintf+0x306>
    1208:	20 ff       	sbrs	r18, 0
    120a:	06 c0       	rjmp	.+12     	; 0x1218 <vfprintf+0x2f0>
    120c:	5a 2c       	mov	r5, r10
    120e:	73 14       	cp	r7, r3
    1210:	18 f4       	brcc	.+6      	; 0x1218 <vfprintf+0x2f0>
    1212:	53 0c       	add	r5, r3
    1214:	57 18       	sub	r5, r7
    1216:	73 2c       	mov	r7, r3
    1218:	73 14       	cp	r7, r3
    121a:	68 f4       	brcc	.+26     	; 0x1236 <vfprintf+0x30e>
    121c:	b7 01       	movw	r22, r14
    121e:	80 e2       	ldi	r24, 0x20	; 32
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	2c 87       	std	Y+12, r18	; 0x0c
    1224:	0e 94 9f 09 	call	0x133e	; 0x133e <fputc>
    1228:	73 94       	inc	r7
    122a:	2c 85       	ldd	r18, Y+12	; 0x0c
    122c:	f5 cf       	rjmp	.-22     	; 0x1218 <vfprintf+0x2f0>
    122e:	73 14       	cp	r7, r3
    1230:	10 f4       	brcc	.+4      	; 0x1236 <vfprintf+0x30e>
    1232:	37 18       	sub	r3, r7
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <vfprintf+0x310>
    1236:	31 2c       	mov	r3, r1
    1238:	24 ff       	sbrs	r18, 4
    123a:	12 c0       	rjmp	.+36     	; 0x1260 <vfprintf+0x338>
    123c:	b7 01       	movw	r22, r14
    123e:	80 e3       	ldi	r24, 0x30	; 48
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	2c 87       	std	Y+12, r18	; 0x0c
    1244:	0e 94 9f 09 	call	0x133e	; 0x133e <fputc>
    1248:	2c 85       	ldd	r18, Y+12	; 0x0c
    124a:	22 ff       	sbrs	r18, 2
    124c:	17 c0       	rjmp	.+46     	; 0x127c <vfprintf+0x354>
    124e:	21 ff       	sbrs	r18, 1
    1250:	03 c0       	rjmp	.+6      	; 0x1258 <vfprintf+0x330>
    1252:	88 e5       	ldi	r24, 0x58	; 88
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 c0       	rjmp	.+4      	; 0x125c <vfprintf+0x334>
    1258:	88 e7       	ldi	r24, 0x78	; 120
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	b7 01       	movw	r22, r14
    125e:	0c c0       	rjmp	.+24     	; 0x1278 <vfprintf+0x350>
    1260:	82 2f       	mov	r24, r18
    1262:	86 78       	andi	r24, 0x86	; 134
    1264:	59 f0       	breq	.+22     	; 0x127c <vfprintf+0x354>
    1266:	21 fd       	sbrc	r18, 1
    1268:	02 c0       	rjmp	.+4      	; 0x126e <vfprintf+0x346>
    126a:	80 e2       	ldi	r24, 0x20	; 32
    126c:	01 c0       	rjmp	.+2      	; 0x1270 <vfprintf+0x348>
    126e:	8b e2       	ldi	r24, 0x2B	; 43
    1270:	27 fd       	sbrc	r18, 7
    1272:	8d e2       	ldi	r24, 0x2D	; 45
    1274:	b7 01       	movw	r22, r14
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 9f 09 	call	0x133e	; 0x133e <fputc>
    127c:	a5 14       	cp	r10, r5
    127e:	38 f4       	brcc	.+14     	; 0x128e <vfprintf+0x366>
    1280:	b7 01       	movw	r22, r14
    1282:	80 e3       	ldi	r24, 0x30	; 48
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 9f 09 	call	0x133e	; 0x133e <fputc>
    128a:	5a 94       	dec	r5
    128c:	f7 cf       	rjmp	.-18     	; 0x127c <vfprintf+0x354>
    128e:	aa 94       	dec	r10
    1290:	f4 01       	movw	r30, r8
    1292:	ea 0d       	add	r30, r10
    1294:	f1 1d       	adc	r31, r1
    1296:	80 81       	ld	r24, Z
    1298:	b7 01       	movw	r22, r14
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0e 94 9f 09 	call	0x133e	; 0x133e <fputc>
    12a0:	a1 10       	cpse	r10, r1
    12a2:	f5 cf       	rjmp	.-22     	; 0x128e <vfprintf+0x366>
    12a4:	33 20       	and	r3, r3
    12a6:	09 f4       	brne	.+2      	; 0x12aa <vfprintf+0x382>
    12a8:	51 ce       	rjmp	.-862    	; 0xf4c <vfprintf+0x24>
    12aa:	b7 01       	movw	r22, r14
    12ac:	80 e2       	ldi	r24, 0x20	; 32
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 9f 09 	call	0x133e	; 0x133e <fputc>
    12b4:	3a 94       	dec	r3
    12b6:	f6 cf       	rjmp	.-20     	; 0x12a4 <vfprintf+0x37c>
    12b8:	f7 01       	movw	r30, r14
    12ba:	86 81       	ldd	r24, Z+6	; 0x06
    12bc:	97 81       	ldd	r25, Z+7	; 0x07
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <vfprintf+0x39c>
    12c0:	8f ef       	ldi	r24, 0xFF	; 255
    12c2:	9f ef       	ldi	r25, 0xFF	; 255
    12c4:	2c 96       	adiw	r28, 0x0c	; 12
    12c6:	e2 e1       	ldi	r30, 0x12	; 18
    12c8:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <__epilogue_restores__>

000012cc <calloc>:
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	86 9f       	mul	r24, r22
    12d6:	80 01       	movw	r16, r0
    12d8:	87 9f       	mul	r24, r23
    12da:	10 0d       	add	r17, r0
    12dc:	96 9f       	mul	r25, r22
    12de:	10 0d       	add	r17, r0
    12e0:	11 24       	eor	r1, r1
    12e2:	c8 01       	movw	r24, r16
    12e4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <malloc>
    12e8:	ec 01       	movw	r28, r24
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	29 f0       	breq	.+10     	; 0x12f8 <calloc+0x2c>
    12ee:	a8 01       	movw	r20, r16
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	0e 94 8d 09 	call	0x131a	; 0x131a <memset>
    12f8:	ce 01       	movw	r24, r28
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	08 95       	ret

00001304 <strnlen_P>:
    1304:	fc 01       	movw	r30, r24
    1306:	05 90       	lpm	r0, Z+
    1308:	61 50       	subi	r22, 0x01	; 1
    130a:	70 40       	sbci	r23, 0x00	; 0
    130c:	01 10       	cpse	r0, r1
    130e:	d8 f7       	brcc	.-10     	; 0x1306 <strnlen_P+0x2>
    1310:	80 95       	com	r24
    1312:	90 95       	com	r25
    1314:	8e 0f       	add	r24, r30
    1316:	9f 1f       	adc	r25, r31
    1318:	08 95       	ret

0000131a <memset>:
    131a:	dc 01       	movw	r26, r24
    131c:	01 c0       	rjmp	.+2      	; 0x1320 <memset+0x6>
    131e:	6d 93       	st	X+, r22
    1320:	41 50       	subi	r20, 0x01	; 1
    1322:	50 40       	sbci	r21, 0x00	; 0
    1324:	e0 f7       	brcc	.-8      	; 0x131e <memset+0x4>
    1326:	08 95       	ret

00001328 <strnlen>:
    1328:	fc 01       	movw	r30, r24
    132a:	61 50       	subi	r22, 0x01	; 1
    132c:	70 40       	sbci	r23, 0x00	; 0
    132e:	01 90       	ld	r0, Z+
    1330:	01 10       	cpse	r0, r1
    1332:	d8 f7       	brcc	.-10     	; 0x132a <strnlen+0x2>
    1334:	80 95       	com	r24
    1336:	90 95       	com	r25
    1338:	8e 0f       	add	r24, r30
    133a:	9f 1f       	adc	r25, r31
    133c:	08 95       	ret

0000133e <fputc>:
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	18 2f       	mov	r17, r24
    1348:	09 2f       	mov	r16, r25
    134a:	eb 01       	movw	r28, r22
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	81 fd       	sbrc	r24, 1
    1350:	03 c0       	rjmp	.+6      	; 0x1358 <fputc+0x1a>
    1352:	8f ef       	ldi	r24, 0xFF	; 255
    1354:	9f ef       	ldi	r25, 0xFF	; 255
    1356:	20 c0       	rjmp	.+64     	; 0x1398 <fputc+0x5a>
    1358:	82 ff       	sbrs	r24, 2
    135a:	10 c0       	rjmp	.+32     	; 0x137c <fputc+0x3e>
    135c:	4e 81       	ldd	r20, Y+6	; 0x06
    135e:	5f 81       	ldd	r21, Y+7	; 0x07
    1360:	2c 81       	ldd	r18, Y+4	; 0x04
    1362:	3d 81       	ldd	r19, Y+5	; 0x05
    1364:	42 17       	cp	r20, r18
    1366:	53 07       	cpc	r21, r19
    1368:	7c f4       	brge	.+30     	; 0x1388 <fputc+0x4a>
    136a:	e8 81       	ld	r30, Y
    136c:	f9 81       	ldd	r31, Y+1	; 0x01
    136e:	9f 01       	movw	r18, r30
    1370:	2f 5f       	subi	r18, 0xFF	; 255
    1372:	3f 4f       	sbci	r19, 0xFF	; 255
    1374:	39 83       	std	Y+1, r19	; 0x01
    1376:	28 83       	st	Y, r18
    1378:	10 83       	st	Z, r17
    137a:	06 c0       	rjmp	.+12     	; 0x1388 <fputc+0x4a>
    137c:	e8 85       	ldd	r30, Y+8	; 0x08
    137e:	f9 85       	ldd	r31, Y+9	; 0x09
    1380:	81 2f       	mov	r24, r17
    1382:	09 95       	icall
    1384:	89 2b       	or	r24, r25
    1386:	29 f7       	brne	.-54     	; 0x1352 <fputc+0x14>
    1388:	2e 81       	ldd	r18, Y+6	; 0x06
    138a:	3f 81       	ldd	r19, Y+7	; 0x07
    138c:	2f 5f       	subi	r18, 0xFF	; 255
    138e:	3f 4f       	sbci	r19, 0xFF	; 255
    1390:	3f 83       	std	Y+7, r19	; 0x07
    1392:	2e 83       	std	Y+6, r18	; 0x06
    1394:	81 2f       	mov	r24, r17
    1396:	90 2f       	mov	r25, r16
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	08 95       	ret

000013a2 <__ultoa_invert>:
    13a2:	fa 01       	movw	r30, r20
    13a4:	aa 27       	eor	r26, r26
    13a6:	28 30       	cpi	r18, 0x08	; 8
    13a8:	51 f1       	breq	.+84     	; 0x13fe <__ultoa_invert+0x5c>
    13aa:	20 31       	cpi	r18, 0x10	; 16
    13ac:	81 f1       	breq	.+96     	; 0x140e <__ultoa_invert+0x6c>
    13ae:	e8 94       	clt
    13b0:	6f 93       	push	r22
    13b2:	6e 7f       	andi	r22, 0xFE	; 254
    13b4:	6e 5f       	subi	r22, 0xFE	; 254
    13b6:	7f 4f       	sbci	r23, 0xFF	; 255
    13b8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ba:	9f 4f       	sbci	r25, 0xFF	; 255
    13bc:	af 4f       	sbci	r26, 0xFF	; 255
    13be:	b1 e0       	ldi	r27, 0x01	; 1
    13c0:	3e d0       	rcall	.+124    	; 0x143e <__ultoa_invert+0x9c>
    13c2:	b4 e0       	ldi	r27, 0x04	; 4
    13c4:	3c d0       	rcall	.+120    	; 0x143e <__ultoa_invert+0x9c>
    13c6:	67 0f       	add	r22, r23
    13c8:	78 1f       	adc	r23, r24
    13ca:	89 1f       	adc	r24, r25
    13cc:	9a 1f       	adc	r25, r26
    13ce:	a1 1d       	adc	r26, r1
    13d0:	68 0f       	add	r22, r24
    13d2:	79 1f       	adc	r23, r25
    13d4:	8a 1f       	adc	r24, r26
    13d6:	91 1d       	adc	r25, r1
    13d8:	a1 1d       	adc	r26, r1
    13da:	6a 0f       	add	r22, r26
    13dc:	71 1d       	adc	r23, r1
    13de:	81 1d       	adc	r24, r1
    13e0:	91 1d       	adc	r25, r1
    13e2:	a1 1d       	adc	r26, r1
    13e4:	20 d0       	rcall	.+64     	; 0x1426 <__ultoa_invert+0x84>
    13e6:	09 f4       	brne	.+2      	; 0x13ea <__ultoa_invert+0x48>
    13e8:	68 94       	set
    13ea:	3f 91       	pop	r19
    13ec:	2a e0       	ldi	r18, 0x0A	; 10
    13ee:	26 9f       	mul	r18, r22
    13f0:	11 24       	eor	r1, r1
    13f2:	30 19       	sub	r19, r0
    13f4:	30 5d       	subi	r19, 0xD0	; 208
    13f6:	31 93       	st	Z+, r19
    13f8:	de f6       	brtc	.-74     	; 0x13b0 <__ultoa_invert+0xe>
    13fa:	cf 01       	movw	r24, r30
    13fc:	08 95       	ret
    13fe:	46 2f       	mov	r20, r22
    1400:	47 70       	andi	r20, 0x07	; 7
    1402:	40 5d       	subi	r20, 0xD0	; 208
    1404:	41 93       	st	Z+, r20
    1406:	b3 e0       	ldi	r27, 0x03	; 3
    1408:	0f d0       	rcall	.+30     	; 0x1428 <__ultoa_invert+0x86>
    140a:	c9 f7       	brne	.-14     	; 0x13fe <__ultoa_invert+0x5c>
    140c:	f6 cf       	rjmp	.-20     	; 0x13fa <__ultoa_invert+0x58>
    140e:	46 2f       	mov	r20, r22
    1410:	4f 70       	andi	r20, 0x0F	; 15
    1412:	40 5d       	subi	r20, 0xD0	; 208
    1414:	4a 33       	cpi	r20, 0x3A	; 58
    1416:	18 f0       	brcs	.+6      	; 0x141e <__ultoa_invert+0x7c>
    1418:	49 5d       	subi	r20, 0xD9	; 217
    141a:	31 fd       	sbrc	r19, 1
    141c:	40 52       	subi	r20, 0x20	; 32
    141e:	41 93       	st	Z+, r20
    1420:	02 d0       	rcall	.+4      	; 0x1426 <__ultoa_invert+0x84>
    1422:	a9 f7       	brne	.-22     	; 0x140e <__ultoa_invert+0x6c>
    1424:	ea cf       	rjmp	.-44     	; 0x13fa <__ultoa_invert+0x58>
    1426:	b4 e0       	ldi	r27, 0x04	; 4
    1428:	a6 95       	lsr	r26
    142a:	97 95       	ror	r25
    142c:	87 95       	ror	r24
    142e:	77 95       	ror	r23
    1430:	67 95       	ror	r22
    1432:	ba 95       	dec	r27
    1434:	c9 f7       	brne	.-14     	; 0x1428 <__ultoa_invert+0x86>
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	61 05       	cpc	r22, r1
    143a:	71 05       	cpc	r23, r1
    143c:	08 95       	ret
    143e:	9b 01       	movw	r18, r22
    1440:	ac 01       	movw	r20, r24
    1442:	0a 2e       	mov	r0, r26
    1444:	06 94       	lsr	r0
    1446:	57 95       	ror	r21
    1448:	47 95       	ror	r20
    144a:	37 95       	ror	r19
    144c:	27 95       	ror	r18
    144e:	ba 95       	dec	r27
    1450:	c9 f7       	brne	.-14     	; 0x1444 <__ultoa_invert+0xa2>
    1452:	62 0f       	add	r22, r18
    1454:	73 1f       	adc	r23, r19
    1456:	84 1f       	adc	r24, r20
    1458:	95 1f       	adc	r25, r21
    145a:	a0 1d       	adc	r26, r0
    145c:	08 95       	ret

0000145e <__prologue_saves__>:
    145e:	2f 92       	push	r2
    1460:	3f 92       	push	r3
    1462:	4f 92       	push	r4
    1464:	5f 92       	push	r5
    1466:	6f 92       	push	r6
    1468:	7f 92       	push	r7
    146a:	8f 92       	push	r8
    146c:	9f 92       	push	r9
    146e:	af 92       	push	r10
    1470:	bf 92       	push	r11
    1472:	cf 92       	push	r12
    1474:	df 92       	push	r13
    1476:	ef 92       	push	r14
    1478:	ff 92       	push	r15
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	ca 1b       	sub	r28, r26
    1488:	db 0b       	sbc	r29, r27
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	09 94       	ijmp

00001496 <__epilogue_restores__>:
    1496:	2a 88       	ldd	r2, Y+18	; 0x12
    1498:	39 88       	ldd	r3, Y+17	; 0x11
    149a:	48 88       	ldd	r4, Y+16	; 0x10
    149c:	5f 84       	ldd	r5, Y+15	; 0x0f
    149e:	6e 84       	ldd	r6, Y+14	; 0x0e
    14a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    14a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    14a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    14a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    14a8:	b9 84       	ldd	r11, Y+9	; 0x09
    14aa:	c8 84       	ldd	r12, Y+8	; 0x08
    14ac:	df 80       	ldd	r13, Y+7	; 0x07
    14ae:	ee 80       	ldd	r14, Y+6	; 0x06
    14b0:	fd 80       	ldd	r15, Y+5	; 0x05
    14b2:	0c 81       	ldd	r16, Y+4	; 0x04
    14b4:	1b 81       	ldd	r17, Y+3	; 0x03
    14b6:	aa 81       	ldd	r26, Y+2	; 0x02
    14b8:	b9 81       	ldd	r27, Y+1	; 0x01
    14ba:	ce 0f       	add	r28, r30
    14bc:	d1 1d       	adc	r29, r1
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	ed 01       	movw	r28, r26
    14ca:	08 95       	ret

000014cc <_exit>:
    14cc:	f8 94       	cli

000014ce <__stop_program>:
    14ce:	ff cf       	rjmp	.-2      	; 0x14ce <__stop_program>
